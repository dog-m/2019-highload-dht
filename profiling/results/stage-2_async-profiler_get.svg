<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1094" onload="init(evt)" viewBox="0 0 1200 1094" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1077"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1077"> </text>
<g id="frames">
<g>
<title>all (2,481 samples, 100.00%)</title><rect x="10.0" y="1043.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1054.0">all</text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (1 samples, 0.04%)</title><rect x="10.0" y="1027.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::klass_holder() const (1 samples, 0.04%)</title><rect x="10.5" y="1027.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.5" y="1038.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (4 samples, 0.16%)</title><rect x="11.0" y="1027.0" width="1.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="14.0" y="1038.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (4 samples, 0.16%)</title><rect x="11.0" y="1011.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="14.0" y="1022.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, std::string*) (4 samples, 0.16%)</title><rect x="11.0" y="995.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="14.0" y="1006.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, std::string*) (4 samples, 0.16%)</title><rect x="11.0" y="979.0" width="1.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="14.0" y="990.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (4 samples, 0.16%)</title><rect x="11.0" y="963.0" width="1.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="14.0" y="974.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (4 samples, 0.16%)</title><rect x="11.0" y="947.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="14.0" y="958.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (4 samples, 0.16%)</title><rect x="11.0" y="931.0" width="1.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="14.0" y="942.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni17072222630024017723.so (4 samples, 0.16%)</title><rect x="11.0" y="915.0" width="1.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="14.0" y="926.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni17072222630024017723.so (1 samples, 0.04%)</title><rect x="11.0" y="899.0" width="0.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="14.0" y="910.0"></text>
</g>
<g>
<title>rocksdb::Comparator::Equal(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.04%)</title><rect x="11.0" y="883.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="14.0" y="894.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.04%)</title><rect x="11.0" y="867.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="14.0" y="878.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.04%)</title><rect x="11.0" y="851.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="14.0" y="862.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (1 samples, 0.04%)</title><rect x="11.0" y="835.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="14.0" y="846.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.141] (1 samples, 0.04%)</title><rect x="11.0" y="819.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="14.0" y="830.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.04%)</title><rect x="11.0" y="803.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="14.0" y="814.0"></text>
</g>
<g>
<title>.L409 (1 samples, 0.04%)</title><rect x="11.0" y="787.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="14.0" y="798.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::FindGreaterOrEqual(char const*) const (3 samples, 0.12%)</title><rect x="11.4" y="899.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="14.4" y="910.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (3 samples, 0.12%)</title><rect x="11.4" y="883.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="14.4" y="894.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (3 samples, 0.12%)</title><rect x="11.4" y="867.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="14.4" y="878.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (2 samples, 0.08%)</title><rect x="11.4" y="851.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="14.4" y="862.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (2 samples, 0.08%)</title><rect x="11.4" y="835.0" width="1.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="14.4" y="846.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.141] (2 samples, 0.08%)</title><rect x="11.4" y="819.0" width="1.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="14.4" y="830.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.08%)</title><rect x="11.4" y="803.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="14.4" y="814.0"></text>
</g>
<g>
<title>.L409 (2 samples, 0.08%)</title><rect x="11.4" y="787.0" width="1.0" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="14.4" y="798.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.04%)</title><rect x="12.4" y="851.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="15.4" y="862.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (1 samples, 0.04%)</title><rect x="12.4" y="835.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="15.4" y="846.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.141] (1 samples, 0.04%)</title><rect x="12.4" y="819.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="15.4" y="830.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.04%)</title><rect x="12.4" y="803.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="15.4" y="814.0"></text>
</g>
<g>
<title>.L409 (1 samples, 0.04%)</title><rect x="12.4" y="787.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="15.4" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C(JavaThread*) (2 samples, 0.08%)</title><rect x="12.9" y="1027.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="15.9" y="1038.0"></text>
</g>
<g>
<title>JavaThread::reguard_stack() (1 samples, 0.04%)</title><rect x="12.9" y="1011.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="15.9" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::handle_exception_C_helper(JavaThread*, nmethod*&amp;) (1 samples, 0.04%)</title><rect x="13.3" y="1011.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="16.3" y="1022.0"></text>
</g>
<g>
<title>CompiledMethod::handler_for_exception_and_pc(Handle, unsigned char*) (1 samples, 0.04%)</title><rect x="13.3" y="995.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="16.3" y="1006.0"></text>
</g>
<g>
<title>ExceptionCache::match(Handle, unsigned char*) (1 samples, 0.04%)</title><rect x="13.3" y="979.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="16.3" y="990.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (4 samples, 0.16%)</title><rect x="13.8" y="1027.0" width="1.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="16.8" y="1038.0"></text>
</g>
<g>
<title>oopFactory::new_objArray(Klass*, int, Thread*) (2 samples, 0.08%)</title><rect x="13.8" y="1011.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="16.8" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (2 samples, 0.08%)</title><rect x="13.8" y="995.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="16.8" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.08%)</title><rect x="13.8" y="979.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="16.8" y="990.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.08%)</title><rect x="13.8" y="963.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="16.8" y="974.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (2 samples, 0.08%)</title><rect x="13.8" y="947.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="16.8" y="958.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray(BasicType, int, Thread*) (2 samples, 0.08%)</title><rect x="14.8" y="1011.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="17.8" y="1022.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.08%)</title><rect x="14.8" y="995.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="17.8" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.08%)</title><rect x="14.8" y="979.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="17.8" y="990.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.08%)</title><rect x="14.8" y="963.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="17.8" y="974.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (2 samples, 0.08%)</title><rect x="14.8" y="947.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="17.8" y="958.0"></text>
</g>
<g>
<title>[not_walkable_Java] (8 samples, 0.32%)</title><rect x="15.7" y="1027.0" width="3.8" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="18.7" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.04%)</title><rect x="15.7" y="1011.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="18.7" y="1022.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (1 samples, 0.04%)</title><rect x="15.7" y="995.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="18.7" y="1006.0"></text>
</g>
<g>
<title>CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*) (1 samples, 0.04%)</title><rect x="15.7" y="979.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="18.7" y="990.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.04%)</title><rect x="16.2" y="1011.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="19.2" y="1022.0"></text>
</g>
<g>
<title>CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*) (1 samples, 0.04%)</title><rect x="16.2" y="995.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="19.2" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::rethrow_C(oopDesc*, JavaThread*, unsigned char*) (2 samples, 0.08%)</title><rect x="16.7" y="1011.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="19.7" y="1022.0"></text>
</g>
<g>
<title>SharedRuntime::raw_exception_handler_for_return_address(JavaThread*, unsigned char*) (2 samples, 0.08%)</title><rect x="16.7" y="995.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="19.7" y="1006.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.04%)</title><rect x="16.7" y="979.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="19.7" y="990.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.04%)</title><rect x="17.1" y="979.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="20.1" y="990.0"></text>
</g>
<g>
<title>SharedRuntime::exception_handler_for_return_address(JavaThread*, unsigned char*) (1 samples, 0.04%)</title><rect x="17.6" y="1011.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="20.6" y="1022.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.04%)</title><rect x="17.6" y="995.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="20.6" y="1006.0"></text>
</g>
<g>
<title>Thread::current() (2 samples, 0.08%)</title><rect x="18.1" y="1011.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="21.1" y="1022.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.04%)</title><rect x="19.0" y="1011.0" width="0.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="22.0" y="1022.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="19.5" y="1027.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="22.5" y="1038.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="19.5" y="1011.0" width="0.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="22.5" y="1022.0"></text>
</g>
<g>
<title>__vsnprintf_chk (1 samples, 0.04%)</title><rect x="19.5" y="995.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="22.5" y="1006.0"></text>
</g>
<g>
<title>_IO_vfprintf (1 samples, 0.04%)</title><rect x="19.5" y="979.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="22.5" y="990.0"></text>
</g>
<g>
<title>[unknown_Java] (82 samples, 3.31%)</title><rect x="20.0" y="1027.0" width="39.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="23.0" y="1038.0">[un..</text>
</g>
<g>
<title>[unknown] (17 samples, 0.69%)</title><rect x="50.4" y="1011.0" width="8.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="53.4" y="1022.0"></text>
</g>
<g>
<title>Thread::current() (2 samples, 0.08%)</title><rect x="50.4" y="995.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="53.4" y="1006.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (15 samples, 0.60%)</title><rect x="51.4" y="995.0" width="7.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="54.4" y="1006.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.04%)</title><rect x="58.5" y="1011.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="61.5" y="1022.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="58.5" y="995.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="61.5" y="1006.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.04%)</title><rect x="58.5" y="979.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="61.5" y="990.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.04%)</title><rect x="58.5" y="963.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="61.5" y="974.0"></text>
</g>
<g>
<title>call_on_stack (1 samples, 0.04%)</title><rect x="58.5" y="947.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="61.5" y="958.0"></text>
</g>
<g>
<title>__do_softirq (1 samples, 0.04%)</title><rect x="58.5" y="931.0" width="0.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="61.5" y="942.0"></text>
</g>
<g>
<title>run_rebalance_domains (1 samples, 0.04%)</title><rect x="58.5" y="915.0" width="0.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="61.5" y="926.0"></text>
</g>
<g>
<title>rebalance_domains (1 samples, 0.04%)</title><rect x="58.5" y="899.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="61.5" y="910.0"></text>
</g>
<g>
<title>update_blocked_averages (1 samples, 0.04%)</title><rect x="58.5" y="883.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="61.5" y="894.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.04%)</title><rect x="58.5" y="867.0" width="0.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="61.5" y="878.0"></text>
</g>
<g>
<title>clone (96 samples, 3.87%)</title><rect x="59.0" y="1027.0" width="45.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="62.0" y="1038.0">clone</text>
</g>
<g>
<title>start_thread (96 samples, 3.87%)</title><rect x="59.0" y="1011.0" width="45.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="62.0" y="1022.0">star..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (96 samples, 3.87%)</title><rect x="59.0" y="995.0" width="45.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="62.0" y="1006.0">thre..</text>
</g>
<g>
<title>Thread::call_run() (96 samples, 3.87%)</title><rect x="59.0" y="979.0" width="45.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="62.0" y="990.0">Thre..</text>
</g>
<g>
<title>JavaThread::run() (74 samples, 2.98%)</title><rect x="59.0" y="963.0" width="35.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="62.0" y="974.0">Jav..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (74 samples, 2.98%)</title><rect x="59.0" y="947.0" width="35.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="62.0" y="958.0">Jav..</text>
</g>
<g>
<title>attach_listener_thread_entry(JavaThread*, Thread*) (1 samples, 0.04%)</title><rect x="59.0" y="931.0" width="0.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="62.0" y="942.0"></text>
</g>
<g>
<title>load_agent(AttachOperation*, outputStream*) (1 samples, 0.04%)</title><rect x="59.0" y="915.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="62.0" y="926.0"></text>
</g>
<g>
<title>JvmtiExport::load_agent_library(char const*, char const*, char const*, outputStream*) (1 samples, 0.04%)</title><rect x="59.0" y="899.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="62.0" y="910.0"></text>
</g>
<g>
<title>Agent_OnAttach (1 samples, 0.04%)</title><rect x="59.0" y="883.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="62.0" y="894.0"></text>
</g>
<g>
<title>Profiler::run(Arguments&amp;) (1 samples, 0.04%)</title><rect x="59.0" y="867.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="62.0" y="878.0"></text>
</g>
<g>
<title>Profiler::runInternal(Arguments&amp;, std::ostream&amp;) (1 samples, 0.04%)</title><rect x="59.0" y="851.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="62.0" y="862.0"></text>
</g>
<g>
<title>__kernel_vsyscall (1 samples, 0.04%)</title><rect x="59.0" y="835.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="62.0" y="846.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (1 samples, 0.04%)</title><rect x="59.0" y="819.0" width="0.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="62.0" y="830.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (1 samples, 0.04%)</title><rect x="59.0" y="803.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="62.0" y="814.0"></text>
</g>
<g>
<title>sys_ioctl (1 samples, 0.04%)</title><rect x="59.0" y="787.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="62.0" y="798.0"></text>
</g>
<g>
<title>do_vfs_ioctl (1 samples, 0.04%)</title><rect x="59.0" y="771.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="62.0" y="782.0"></text>
</g>
<g>
<title>perf_ioctl (1 samples, 0.04%)</title><rect x="59.0" y="755.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="62.0" y="766.0"></text>
</g>
<g>
<title>perf_event_for_each_child (1 samples, 0.04%)</title><rect x="59.0" y="739.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="62.0" y="750.0"></text>
</g>
<g>
<title>_perf_event_disable (1 samples, 0.04%)</title><rect x="59.0" y="723.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="62.0" y="734.0"></text>
</g>
<g>
<title>event_function_call (1 samples, 0.04%)</title><rect x="59.0" y="707.0" width="0.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="62.0" y="718.0"></text>
</g>
<g>
<title>task_function_call (1 samples, 0.04%)</title><rect x="59.0" y="691.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="62.0" y="702.0"></text>
</g>
<g>
<title>smp_call_function_single (1 samples, 0.04%)</title><rect x="59.0" y="675.0" width="0.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="62.0" y="686.0"></text>
</g>
<g>
<title>compiler_thread_entry(JavaThread*, Thread*) (73 samples, 2.94%)</title><rect x="59.5" y="931.0" width="34.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="62.5" y="942.0">co..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (73 samples, 2.94%)</title><rect x="59.5" y="915.0" width="34.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="62.5" y="926.0">Co..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (73 samples, 2.94%)</title><rect x="59.5" y="899.0" width="34.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="62.5" y="910.0">Co..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (70 samples, 2.82%)</title><rect x="59.5" y="883.0" width="33.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="62.5" y="894.0">C2..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (70 samples, 2.82%)</title><rect x="59.5" y="867.0" width="33.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="62.5" y="878.0">Co..</text>
</g>
<g>
<title>Compile::Code_Gen() (38 samples, 1.53%)</title><rect x="59.5" y="851.0" width="18.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="62.5" y="862.0"></text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.04%)</title><rect x="59.5" y="835.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="62.5" y="846.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.04%)</title><rect x="59.5" y="819.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="62.5" y="830.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (1 samples, 0.04%)</title><rect x="59.5" y="803.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="62.5" y="814.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.04%)</title><rect x="59.5" y="787.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="62.5" y="798.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.04%)</title><rect x="59.5" y="771.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="62.5" y="782.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 0.16%)</title><rect x="59.9" y="835.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="62.9" y="846.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 0.08%)</title><rect x="59.9" y="819.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="62.9" y="830.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.08%)</title><rect x="60.9" y="819.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="63.9" y="830.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.04%)</title><rect x="60.9" y="803.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="63.9" y="814.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.04%)</title><rect x="61.4" y="803.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="64.4" y="814.0"></text>
</g>
<g>
<title>MulINode::bottom_type() const (1 samples, 0.04%)</title><rect x="61.4" y="787.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="64.4" y="798.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (5 samples, 0.20%)</title><rect x="61.8" y="835.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="64.8" y="846.0"></text>
</g>
<g>
<title>PhaseCFG::estimate_block_frequency() (1 samples, 0.04%)</title><rect x="61.8" y="819.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="64.8" y="830.0"></text>
</g>
<g>
<title>CFGLoop::compute_freq() (1 samples, 0.04%)</title><rect x="61.8" y="803.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="64.8" y="814.0"></text>
</g>
<g>
<title>CFGLoop::compute_freq() (1 samples, 0.04%)</title><rect x="61.8" y="787.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="64.8" y="798.0"></text>
</g>
<g>
<title>CFGLoop::compute_freq() (1 samples, 0.04%)</title><rect x="61.8" y="771.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="64.8" y="782.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 0.16%)</title><rect x="62.3" y="819.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="65.3" y="830.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.08%)</title><rect x="62.3" y="803.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="65.3" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.04%)</title><rect x="62.8" y="787.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="65.8" y="798.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, int*) (1 samples, 0.04%)</title><rect x="63.3" y="803.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="66.3" y="814.0"></text>
</g>
<g>
<title>CallStaticJavaDirectNode::ideal_Opcode() const (1 samples, 0.04%)</title><rect x="63.3" y="787.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="66.3" y="798.0"></text>
</g>
<g>
<title>orI_eReg_mem_0Node::out_RegMask() const (1 samples, 0.04%)</title><rect x="63.7" y="803.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="66.7" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.04%)</title><rect x="64.2" y="835.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="67.2" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (26 samples, 1.05%)</title><rect x="64.7" y="835.0" width="12.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="67.7" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.08%)</title><rect x="64.7" y="819.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="67.7" y="830.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.04%)</title><rect x="64.7" y="803.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="67.7" y="814.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.04%)</title><rect x="65.2" y="803.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="68.2" y="814.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.04%)</title><rect x="65.2" y="787.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="68.2" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 0.12%)</title><rect x="65.6" y="819.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="68.6" y="830.0"></text>
</g>
<g>
<title>Node::rematerialize() const (2 samples, 0.08%)</title><rect x="65.6" y="803.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="68.6" y="814.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (2 samples, 0.08%)</title><rect x="65.6" y="787.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="68.6" y="798.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.04%)</title><rect x="66.6" y="803.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="69.6" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (2 samples, 0.08%)</title><rect x="67.1" y="819.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="70.1" y="830.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.04%)</title><rect x="67.1" y="803.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="70.1" y="814.0"></text>
</g>
<g>
<title>MachNode::Opcode() const (1 samples, 0.04%)</title><rect x="67.5" y="803.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="70.5" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (5 samples, 0.20%)</title><rect x="68.0" y="819.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="71.0" y="830.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.04%)</title><rect x="69.9" y="803.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="72.9" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.08%)</title><rect x="70.4" y="819.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="73.4" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.04%)</title><rect x="70.9" y="803.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="73.9" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (1 samples, 0.04%)</title><rect x="70.9" y="787.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="73.9" y="798.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.08%)</title><rect x="71.4" y="819.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="74.4" y="830.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.04%)</title><rect x="71.4" y="803.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="74.4" y="814.0"></text>
</g>
<g>
<title>PhaseCoalesce::combine_these_two(Node*, Node*) (1 samples, 0.04%)</title><rect x="71.4" y="787.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="74.4" y="798.0"></text>
</g>
<g>
<title>PhaseIFG::Union(unsigned int, unsigned int) (1 samples, 0.04%)</title><rect x="71.4" y="771.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="74.4" y="782.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.04%)</title><rect x="71.4" y="755.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="74.4" y="766.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.04%)</title><rect x="71.8" y="803.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="74.8" y="814.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.04%)</title><rect x="71.8" y="787.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="74.8" y="798.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.08%)</title><rect x="72.3" y="819.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="75.3" y="830.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.08%)</title><rect x="72.3" y="803.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="75.3" y="814.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.04%)</title><rect x="73.3" y="819.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="76.3" y="830.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.04%)</title><rect x="73.3" y="803.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="76.3" y="814.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (6 samples, 0.24%)</title><rect x="73.7" y="819.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="76.7" y="830.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.04%)</title><rect x="74.2" y="803.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="77.2" y="814.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (4 samples, 0.16%)</title><rect x="74.7" y="803.0" width="1.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="77.7" y="814.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (2 samples, 0.08%)</title><rect x="75.6" y="787.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="78.6" y="798.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 0.04%)</title><rect x="76.6" y="819.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="79.6" y="830.0"></text>
</g>
<g>
<title>PhasePeephole::do_transform() (1 samples, 0.04%)</title><rect x="77.1" y="835.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="80.1" y="846.0"></text>
</g>
<g>
<title>Compile::Optimize() (24 samples, 0.97%)</title><rect x="77.5" y="851.0" width="11.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="80.5" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN&amp;, bool, bool, bool) (20 samples, 0.81%)</title><rect x="77.5" y="835.0" width="9.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="80.5" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool, bool) (20 samples, 0.81%)</title><rect x="77.5" y="819.0" width="9.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="80.5" y="830.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.04%)</title><rect x="78.0" y="803.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="81.0" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 0.12%)</title><rect x="78.5" y="803.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="81.5" y="814.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.04%)</title><rect x="79.4" y="787.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="82.4" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.04%)</title><rect x="79.9" y="803.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="82.9" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (10 samples, 0.40%)</title><rect x="80.4" y="803.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="83.4" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (9 samples, 0.36%)</title><rect x="80.9" y="787.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="83.9" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (7 samples, 0.28%)</title><rect x="80.9" y="771.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="83.9" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (5 samples, 0.20%)</title><rect x="81.8" y="755.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="84.8" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const [clone .isra.117] (1 samples, 0.04%)</title><rect x="83.7" y="739.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="86.7" y="750.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.04%)</title><rect x="84.2" y="771.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="87.2" y="782.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.ax (1 samples, 0.04%)</title><rect x="84.7" y="771.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="87.7" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.04%)</title><rect x="85.1" y="803.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="88.1" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.04%)</title><rect x="85.1" y="787.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="88.1" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.04%)</title><rect x="85.6" y="803.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="88.6" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.04%)</title><rect x="85.6" y="787.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="88.6" y="798.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.ax (1 samples, 0.04%)</title><rect x="85.6" y="771.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="88.6" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.04%)</title><rect x="86.1" y="803.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="89.1" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.04%)</title><rect x="86.1" y="787.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="89.1" y="798.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.04%)</title><rect x="86.1" y="771.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="89.1" y="782.0"></text>
</g>
<g>
<title>StartNode::pinned() const (1 samples, 0.04%)</title><rect x="86.6" y="803.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="89.6" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.12%)</title><rect x="87.0" y="835.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="90.0" y="846.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.12%)</title><rect x="87.0" y="819.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="90.0" y="830.0"></text>
</g>
<g>
<title>RangeCheckNode::Ideal(PhaseGVN*, bool) (1 samples, 0.04%)</title><rect x="87.0" y="803.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="90.0" y="814.0"></text>
</g>
<g>
<title>Type::remove_speculative() const (1 samples, 0.04%)</title><rect x="87.0" y="787.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="90.0" y="798.0"></text>
</g>
<g>
<title>StoreNode::hash() const (1 samples, 0.04%)</title><rect x="87.5" y="803.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="90.5" y="814.0"></text>
</g>
<g>
<title>URShiftINode::Ideal(PhaseGVN*, bool) (1 samples, 0.04%)</title><rect x="88.0" y="803.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="91.0" y="814.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.04%)</title><rect x="88.5" y="835.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="91.5" y="846.0"></text>
</g>
<g>
<title>MultiNode::proj_out(unsigned int) const (1 samples, 0.04%)</title><rect x="88.5" y="819.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="91.5" y="830.0"></text>
</g>
<g>
<title>Compile::inline_string_calls(bool) (3 samples, 0.12%)</title><rect x="89.0" y="851.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="92.0" y="862.0"></text>
</g>
<g>
<title>LateInlineCallGenerator::do_late_inline() (3 samples, 0.12%)</title><rect x="89.0" y="835.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="92.0" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.12%)</title><rect x="89.0" y="819.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="92.0" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.12%)</title><rect x="89.0" y="803.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="92.0" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.12%)</title><rect x="89.0" y="787.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="92.0" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.12%)</title><rect x="89.0" y="771.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="92.0" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.12%)</title><rect x="89.0" y="755.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="92.0" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.12%)</title><rect x="89.0" y="739.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="92.0" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.12%)</title><rect x="89.0" y="723.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="92.0" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.12%)</title><rect x="89.0" y="707.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="92.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.12%)</title><rect x="89.0" y="691.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="92.0" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.12%)</title><rect x="89.0" y="675.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="92.0" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.12%)</title><rect x="89.0" y="659.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="92.0" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.12%)</title><rect x="89.0" y="643.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="92.0" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.12%)</title><rect x="89.0" y="627.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="92.0" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.12%)</title><rect x="89.0" y="611.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="92.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.12%)</title><rect x="89.0" y="595.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="92.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.12%)</title><rect x="89.0" y="579.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="92.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.12%)</title><rect x="89.0" y="563.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="92.0" y="574.0"></text>
</g>
<g>
<title>GraphKit::null_check(Node*, BasicType) (1 samples, 0.04%)</title><rect x="89.0" y="547.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="92.0" y="558.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.04%)</title><rect x="89.0" y="531.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="92.0" y="542.0"></text>
</g>
<g>
<title>GraphKit::builtin_throw(Deoptimization::DeoptReason, Node*) (1 samples, 0.04%)</title><rect x="89.0" y="515.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="92.0" y="526.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.04%)</title><rect x="89.0" y="499.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="92.0" y="510.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.04%)</title><rect x="89.0" y="483.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="92.0" y="494.0"></text>
</g>
<g>
<title>GraphKit::set_predefined_input_for_runtime_call(SafePointNode*) (1 samples, 0.04%)</title><rect x="89.0" y="467.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="92.0" y="478.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.04%)</title><rect x="89.0" y="451.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="92.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="89.4" y="547.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="92.4" y="558.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.04%)</title><rect x="89.4" y="531.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="92.4" y="542.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.04%)</title><rect x="89.4" y="515.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="92.4" y="526.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.04%)</title><rect x="89.4" y="499.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="92.4" y="510.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.04%)</title><rect x="89.4" y="483.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="92.4" y="494.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.04%)</title><rect x="89.4" y="467.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="92.4" y="478.0"></text>
</g>
<g>
<title>vmSymbols::find_sid(Symbol const*) (1 samples, 0.04%)</title><rect x="89.4" y="451.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="92.4" y="462.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.04%)</title><rect x="89.9" y="547.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="92.9" y="558.0"></text>
</g>
<g>
<title>JumpData::is_JumpData() const (1 samples, 0.04%)</title><rect x="89.9" y="531.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="92.9" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.08%)</title><rect x="90.4" y="851.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="93.4" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.08%)</title><rect x="90.4" y="835.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="93.4" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.08%)</title><rect x="90.4" y="819.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="93.4" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.08%)</title><rect x="90.4" y="803.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="93.4" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.08%)</title><rect x="90.4" y="787.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="93.4" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.08%)</title><rect x="90.4" y="771.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="93.4" y="782.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.04%)</title><rect x="90.4" y="755.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="93.4" y="766.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.04%)</title><rect x="90.4" y="739.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="93.4" y="750.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.04%)</title><rect x="90.4" y="723.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="93.4" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.04%)</title><rect x="90.4" y="707.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="93.4" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.04%)</title><rect x="90.4" y="691.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="93.4" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.04%)</title><rect x="90.4" y="675.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="93.4" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.04%)</title><rect x="90.4" y="659.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="93.4" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.04%)</title><rect x="90.4" y="643.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="93.4" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.04%)</title><rect x="90.4" y="627.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="93.4" y="638.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.04%)</title><rect x="90.4" y="611.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="93.4" y="622.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.04%)</title><rect x="90.4" y="595.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="93.4" y="606.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.04%)</title><rect x="90.4" y="579.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="93.4" y="590.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.04%)</title><rect x="90.4" y="563.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="93.4" y="574.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_if_loaded(constantPoolHandle const&amp;, int) (1 samples, 0.04%)</title><rect x="90.4" y="547.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="93.4" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="90.9" y="755.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="93.9" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="90.9" y="739.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="93.9" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="90.9" y="723.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="93.9" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="90.9" y="707.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="93.9" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="90.9" y="691.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="93.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="90.9" y="675.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="93.9" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="90.9" y="659.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="93.9" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="90.9" y="643.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="93.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="90.9" y="627.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="93.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="90.9" y="611.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="93.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="90.9" y="595.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="93.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="90.9" y="579.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="93.9" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="90.9" y="563.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="93.9" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="90.9" y="547.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="93.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="90.9" y="531.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="93.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="90.9" y="515.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="93.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="90.9" y="499.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="93.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="90.9" y="483.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="93.9" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.04%)</title><rect x="90.9" y="467.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="93.9" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.04%)</title><rect x="90.9" y="451.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="93.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.04%)</title><rect x="90.9" y="435.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="93.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.04%)</title><rect x="90.9" y="419.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="93.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.04%)</title><rect x="90.9" y="403.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="93.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.04%)</title><rect x="90.9" y="387.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="93.9" y="398.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.04%)</title><rect x="90.9" y="371.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="93.9" y="382.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.04%)</title><rect x="90.9" y="355.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="93.9" y="366.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.04%)</title><rect x="90.9" y="339.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="93.9" y="350.0"></text>
</g>
<g>
<title>ciMethod::has_compiled_code() (1 samples, 0.04%)</title><rect x="90.9" y="323.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="93.9" y="334.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (2 samples, 0.08%)</title><rect x="91.3" y="851.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="94.3" y="862.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.04%)</title><rect x="91.8" y="835.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="94.8" y="846.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, bool, bool, RTMState) (1 samples, 0.04%)</title><rect x="92.3" y="851.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="95.3" y="862.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle const&amp;, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.04%)</title><rect x="92.3" y="835.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="95.3" y="846.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, CompilerType, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.04%)</title><rect x="92.3" y="819.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="95.3" y="830.0"></text>
</g>
<g>
<title>DebugInformationRecorder::copy_to(nmethod*) (1 samples, 0.04%)</title><rect x="92.3" y="803.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="95.3" y="814.0"></text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (1 samples, 0.04%)</title><rect x="92.3" y="787.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="95.3" y="798.0"></text>
</g>
<g>
<title>common_exception (1 samples, 0.04%)</title><rect x="92.3" y="771.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="95.3" y="782.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.04%)</title><rect x="92.3" y="755.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="95.3" y="766.0"></text>
</g>
<g>
<title>__do_page_fault (1 samples, 0.04%)</title><rect x="92.3" y="739.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="95.3" y="750.0"></text>
</g>
<g>
<title>handle_mm_fault (1 samples, 0.04%)</title><rect x="92.3" y="723.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="95.3" y="734.0"></text>
</g>
<g>
<title>__alloc_pages_nodemask (1 samples, 0.04%)</title><rect x="92.3" y="707.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="95.3" y="718.0"></text>
</g>
<g>
<title>get_page_from_freelist (1 samples, 0.04%)</title><rect x="92.3" y="691.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="95.3" y="702.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (3 samples, 0.12%)</title><rect x="92.8" y="883.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="95.8" y="894.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (3 samples, 0.12%)</title><rect x="92.8" y="867.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="95.8" y="878.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 0.12%)</title><rect x="92.8" y="851.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="95.8" y="862.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 0.12%)</title><rect x="92.8" y="835.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="95.8" y="846.0"></text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.92] (1 samples, 0.04%)</title><rect x="92.8" y="819.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="95.8" y="830.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.04%)</title><rect x="92.8" y="803.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="95.8" y="814.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.04%)</title><rect x="92.8" y="787.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="95.8" y="798.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.04%)</title><rect x="92.8" y="771.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="95.8" y="782.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.04%)</title><rect x="92.8" y="755.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="95.8" y="766.0"></text>
</g>
<g>
<title>.L5243 (1 samples, 0.04%)</title><rect x="92.8" y="739.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="95.8" y="750.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 0.04%)</title><rect x="92.8" y="723.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="95.8" y="734.0"></text>
</g>
<g>
<title>GraphBuilder::append_with_bci(Instruction*, int) (1 samples, 0.04%)</title><rect x="92.8" y="707.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="95.8" y="718.0"></text>
</g>
<g>
<title>ValueNumberingEffects::kill_memory() (1 samples, 0.04%)</title><rect x="92.8" y="691.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="95.8" y="702.0"></text>
</g>
<g>
<title>ValueMap::kill_memory() (1 samples, 0.04%)</title><rect x="92.8" y="675.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="95.8" y="686.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 0.08%)</title><rect x="93.2" y="819.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="96.2" y="830.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (2 samples, 0.08%)</title><rect x="93.2" y="803.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="96.2" y="814.0"></text>
</g>
<g>
<title>.L2712 (1 samples, 0.04%)</title><rect x="93.2" y="787.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="96.2" y="798.0"></text>
</g>
<g>
<title>LinearScan::add_use(LIR_OprDesc*, int, int, IntervalUseKind) (1 samples, 0.04%)</title><rect x="93.2" y="771.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="96.2" y="782.0"></text>
</g>
<g>
<title>LinearScan::add_use(int, int, int, IntervalUseKind, BasicType) (1 samples, 0.04%)</title><rect x="93.2" y="755.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="96.2" y="766.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.04%)</title><rect x="93.2" y="739.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="96.2" y="750.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.04%)</title><rect x="93.7" y="787.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="96.7" y="798.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) [clone .constprop.228] (1 samples, 0.04%)</title><rect x="93.7" y="771.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="96.7" y="782.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (1 samples, 0.04%)</title><rect x="93.7" y="755.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="96.7" y="766.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_free_reg(Interval*) (1 samples, 0.04%)</title><rect x="93.7" y="739.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="96.7" y="750.0"></text>
</g>
<g>
<title>LinearScanWalker::free_collect_inactive_fixed(Interval*) (1 samples, 0.04%)</title><rect x="93.7" y="723.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="96.7" y="734.0"></text>
</g>
<g>
<title>VMThread::run() (14 samples, 0.56%)</title><rect x="94.2" y="963.0" width="6.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="97.2" y="974.0"></text>
</g>
<g>
<title>VMThread::loop() (14 samples, 0.56%)</title><rect x="94.2" y="947.0" width="6.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="97.2" y="958.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.08%)</title><rect x="94.2" y="931.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="97.2" y="942.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long long) (2 samples, 0.08%)</title><rect x="94.2" y="915.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="97.2" y="926.0"></text>
</g>
<g>
<title>__kernel_vsyscall (2 samples, 0.08%)</title><rect x="94.2" y="899.0" width="0.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="97.2" y="910.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (2 samples, 0.08%)</title><rect x="94.2" y="883.0" width="0.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="97.2" y="894.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (2 samples, 0.08%)</title><rect x="94.2" y="867.0" width="0.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="97.2" y="878.0"></text>
</g>
<g>
<title>sys_futex (2 samples, 0.08%)</title><rect x="94.2" y="851.0" width="0.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="97.2" y="862.0"></text>
</g>
<g>
<title>do_futex (2 samples, 0.08%)</title><rect x="94.2" y="835.0" width="0.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="97.2" y="846.0"></text>
</g>
<g>
<title>futex_wait (2 samples, 0.08%)</title><rect x="94.2" y="819.0" width="0.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="97.2" y="830.0"></text>
</g>
<g>
<title>futex_wait_queue_me (1 samples, 0.04%)</title><rect x="94.7" y="803.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="97.7" y="814.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.04%)</title><rect x="94.7" y="787.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="97.7" y="798.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.04%)</title><rect x="94.7" y="771.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="97.7" y="782.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.04%)</title><rect x="94.7" y="755.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="97.7" y="766.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (5 samples, 0.20%)</title><rect x="95.1" y="931.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="98.1" y="942.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.04%)</title><rect x="95.1" y="915.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="98.1" y="926.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (1 samples, 0.04%)</title><rect x="95.1" y="899.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="98.1" y="910.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (1 samples, 0.04%)</title><rect x="95.1" y="883.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="98.1" y="894.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) [clone .part.62] (1 samples, 0.04%)</title><rect x="95.1" y="867.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="98.1" y="878.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.04%)</title><rect x="95.1" y="851.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="98.1" y="862.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.04%)</title><rect x="95.1" y="835.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="98.1" y="846.0"></text>
</g>
<g>
<title>CodeBlob::oop_map_for_return_address(unsigned char*) (1 samples, 0.04%)</title><rect x="95.1" y="819.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="98.1" y="830.0"></text>
</g>
<g>
<title>ImmutableOopMapSet::find_map_at_offset(int) const (1 samples, 0.04%)</title><rect x="95.1" y="803.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="98.1" y="814.0"></text>
</g>
<g>
<title>StrongRootsScope::StrongRootsScope(unsigned int) (1 samples, 0.04%)</title><rect x="95.6" y="915.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="98.6" y="926.0"></text>
</g>
<g>
<title>SubTasksDone::SubTasksDone(unsigned int) (1 samples, 0.04%)</title><rect x="96.1" y="915.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="99.1" y="926.0"></text>
</g>
<g>
<title>__kernel_vsyscall (2 samples, 0.08%)</title><rect x="96.6" y="915.0" width="0.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="99.6" y="926.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (2 samples, 0.08%)</title><rect x="96.6" y="899.0" width="0.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="99.6" y="910.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (2 samples, 0.08%)</title><rect x="96.6" y="883.0" width="0.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="99.6" y="894.0"></text>
</g>
<g>
<title>sys_mprotect (2 samples, 0.08%)</title><rect x="96.6" y="867.0" width="0.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="99.6" y="878.0"></text>
</g>
<g>
<title>mprotect_fixup (2 samples, 0.08%)</title><rect x="96.6" y="851.0" width="0.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="99.6" y="862.0"></text>
</g>
<g>
<title>change_protection (2 samples, 0.08%)</title><rect x="96.6" y="835.0" width="0.9" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="99.6" y="846.0"></text>
</g>
<g>
<title>change_protection_range (2 samples, 0.08%)</title><rect x="96.6" y="819.0" width="0.9" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="99.6" y="830.0"></text>
</g>
<g>
<title>atomic64_xchg_cx8 (1 samples, 0.04%)</title><rect x="96.6" y="803.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="99.6" y="814.0"></text>
</g>
<g>
<title>flush_tlb_mm_range (1 samples, 0.04%)</title><rect x="97.0" y="803.0" width="0.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="100.0" y="814.0"></text>
</g>
<g>
<title>native_flush_tlb_others (1 samples, 0.04%)</title><rect x="97.0" y="787.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="100.0" y="798.0"></text>
</g>
<g>
<title>smp_call_function_many (1 samples, 0.04%)</title><rect x="97.0" y="771.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="100.0" y="782.0"></text>
</g>
<g>
<title>smp_call_function_single (1 samples, 0.04%)</title><rect x="97.0" y="755.0" width="0.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="100.0" y="766.0"></text>
</g>
<g>
<title>SafepointSynchronize::end() (1 samples, 0.04%)</title><rect x="97.5" y="931.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="100.5" y="942.0"></text>
</g>
<g>
<title>__kernel_vsyscall (1 samples, 0.04%)</title><rect x="97.5" y="915.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="100.5" y="926.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (1 samples, 0.04%)</title><rect x="97.5" y="899.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="100.5" y="910.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (1 samples, 0.04%)</title><rect x="97.5" y="883.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="100.5" y="894.0"></text>
</g>
<g>
<title>sys_mprotect (1 samples, 0.04%)</title><rect x="97.5" y="867.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="100.5" y="878.0"></text>
</g>
<g>
<title>mprotect_fixup (1 samples, 0.04%)</title><rect x="97.5" y="851.0" width="0.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="100.5" y="862.0"></text>
</g>
<g>
<title>change_protection (1 samples, 0.04%)</title><rect x="97.5" y="835.0" width="0.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="100.5" y="846.0"></text>
</g>
<g>
<title>change_protection_range (1 samples, 0.04%)</title><rect x="97.5" y="819.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="100.5" y="830.0"></text>
</g>
<g>
<title>flush_tlb_mm_range (1 samples, 0.04%)</title><rect x="97.5" y="803.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="100.5" y="814.0"></text>
</g>
<g>
<title>native_flush_tlb_others (1 samples, 0.04%)</title><rect x="97.5" y="787.0" width="0.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="100.5" y="798.0"></text>
</g>
<g>
<title>smp_call_function_many (1 samples, 0.04%)</title><rect x="97.5" y="771.0" width="0.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="100.5" y="782.0"></text>
</g>
<g>
<title>smp_call_function_single (1 samples, 0.04%)</title><rect x="97.5" y="755.0" width="0.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="100.5" y="766.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.61] (6 samples, 0.24%)</title><rect x="98.0" y="931.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="101.0" y="942.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (6 samples, 0.24%)</title><rect x="98.0" y="915.0" width="2.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="101.0" y="926.0"></text>
</g>
<g>
<title>VM_GenCollectForAllocation::doit() (6 samples, 0.24%)</title><rect x="98.0" y="899.0" width="2.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="101.0" y="910.0"></text>
</g>
<g>
<title>GenCollectedHeap::satisfy_failed_allocation(unsigned int, bool) (6 samples, 0.24%)</title><rect x="98.0" y="883.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="101.0" y="894.0"></text>
</g>
<g>
<title>GenCollectedHeap::do_collection(bool, bool, unsigned int, bool, GenCollectedHeap::GenerationType) (6 samples, 0.24%)</title><rect x="98.0" y="867.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="101.0" y="878.0"></text>
</g>
<g>
<title>GenCollectedHeap::collect_generation(Generation*, bool, unsigned int, bool, bool, bool, bool) (6 samples, 0.24%)</title><rect x="98.0" y="851.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="101.0" y="862.0"></text>
</g>
<g>
<title>DefNewGeneration::collect(bool, bool, unsigned int, bool) (6 samples, 0.24%)</title><rect x="98.0" y="835.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="101.0" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::trace_heap_before_gc(GCTracer const*) (1 samples, 0.04%)</title><rect x="98.0" y="819.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="101.0" y="830.0"></text>
</g>
<g>
<title>GCHeapSummary::accept(GCHeapSummaryVisitor*) const (1 samples, 0.04%)</title><rect x="98.0" y="803.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="101.0" y="814.0"></text>
</g>
<g>
<title>GenCollectedHeap::young_process_roots(StrongRootsScope*, OopsInGenClosure*, OopsInGenClosure*, CLDClosure*, OopStorage::ParState&lt;false, false&gt;*) (5 samples, 0.20%)</title><rect x="98.5" y="819.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="101.5" y="830.0"></text>
</g>
<g>
<title>CardGeneration::younger_refs_iterate(OopsInGenClosure*, unsigned int) (3 samples, 0.12%)</title><rect x="98.5" y="803.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="101.5" y="814.0"></text>
</g>
<g>
<title>CardTableRS::younger_refs_in_space_iterate(Space*, OopsInGenClosure*, unsigned int) (3 samples, 0.12%)</title><rect x="98.5" y="787.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="101.5" y="798.0"></text>
</g>
<g>
<title>ClearNoncleanCardWrapper::do_MemRegion(MemRegion) (3 samples, 0.12%)</title><rect x="98.5" y="771.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="101.5" y="782.0"></text>
</g>
<g>
<title>DirtyCardToOopClosure::do_MemRegion(MemRegion) (3 samples, 0.12%)</title><rect x="98.5" y="755.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="101.5" y="766.0"></text>
</g>
<g>
<title>BlockOffsetArrayContigSpace::block_start_unsafe(void const*) const (2 samples, 0.08%)</title><rect x="98.5" y="739.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="101.5" y="750.0"></text>
</g>
<g>
<title>ContiguousSpace::block_size(HeapWord const*) const (2 samples, 0.08%)</title><rect x="98.5" y="723.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="101.5" y="734.0"></text>
</g>
<g>
<title>FilteringDCTOC::walk_mem_region(MemRegion, HeapWord*, HeapWord*) (1 samples, 0.04%)</title><rect x="99.4" y="739.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="102.4" y="750.0"></text>
</g>
<g>
<title>SystemDictionary::oops_do(OopClosure*) (1 samples, 0.04%)</title><rect x="99.9" y="803.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="102.9" y="814.0"></text>
</g>
<g>
<title>SymbolPropertyTable::oops_do(OopClosure*) (1 samples, 0.04%)</title><rect x="99.9" y="787.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="102.9" y="798.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (1 samples, 0.04%)</title><rect x="100.4" y="803.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="103.4" y="814.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (1 samples, 0.04%)</title><rect x="100.4" y="787.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="103.4" y="798.0"></text>
</g>
<g>
<title>MarkingCodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.04%)</title><rect x="100.4" y="771.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="103.4" y="782.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.04%)</title><rect x="100.4" y="755.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="103.4" y="766.0"></text>
</g>
<g>
<title>oop_Relocation::oop_value() (1 samples, 0.04%)</title><rect x="100.4" y="739.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="103.4" y="750.0"></text>
</g>
<g>
<title>Relocation::pd_address_in_code() (1 samples, 0.04%)</title><rect x="100.4" y="723.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="103.4" y="734.0"></text>
</g>
<g>
<title>Assembler::locate_operand(unsigned char*, Assembler::WhichOperand) (1 samples, 0.04%)</title><rect x="100.4" y="707.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="103.4" y="718.0"></text>
</g>
<g>
<title>WatcherThread::run() (8 samples, 0.32%)</title><rect x="100.8" y="963.0" width="3.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="103.8" y="974.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (8 samples, 0.32%)</title><rect x="100.8" y="947.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="103.8" y="958.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (8 samples, 0.32%)</title><rect x="100.8" y="931.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="103.8" y="942.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long long) (7 samples, 0.28%)</title><rect x="100.8" y="915.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="103.8" y="926.0"></text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (1 samples, 0.04%)</title><rect x="100.8" y="899.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="103.8" y="910.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_lock (1 samples, 0.04%)</title><rect x="101.3" y="899.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="104.3" y="910.0"></text>
</g>
<g>
<title>__kernel_vsyscall (4 samples, 0.16%)</title><rect x="101.8" y="899.0" width="1.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="104.8" y="910.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (3 samples, 0.12%)</title><rect x="102.3" y="883.0" width="1.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="105.3" y="894.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (3 samples, 0.12%)</title><rect x="102.3" y="867.0" width="1.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="105.3" y="878.0"></text>
</g>
<g>
<title>sys_futex (3 samples, 0.12%)</title><rect x="102.3" y="851.0" width="1.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="105.3" y="862.0"></text>
</g>
<g>
<title>do_futex (3 samples, 0.12%)</title><rect x="102.3" y="835.0" width="1.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="105.3" y="846.0"></text>
</g>
<g>
<title>futex_wait (3 samples, 0.12%)</title><rect x="102.3" y="819.0" width="1.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="105.3" y="830.0"></text>
</g>
<g>
<title>futex_wait_queue_me (3 samples, 0.12%)</title><rect x="102.3" y="803.0" width="1.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="105.3" y="814.0"></text>
</g>
<g>
<title>schedule (3 samples, 0.12%)</title><rect x="102.3" y="787.0" width="1.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="105.3" y="798.0"></text>
</g>
<g>
<title>__sched_text_start (3 samples, 0.12%)</title><rect x="102.3" y="771.0" width="1.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="105.3" y="782.0"></text>
</g>
<g>
<title>finish_task_switch (3 samples, 0.12%)</title><rect x="102.3" y="755.0" width="1.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="105.3" y="766.0"></text>
</g>
<g>
<title>__pthread_cleanup_pop (1 samples, 0.04%)</title><rect x="103.7" y="899.0" width="0.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="106.7" y="910.0"></text>
</g>
<g>
<title>Thread::muxAcquire(int volatile*, char const*) (1 samples, 0.04%)</title><rect x="104.2" y="915.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="107.2" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 0.16%)</title><rect x="104.6" y="1027.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="107.6" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.16%)</title><rect x="104.6" y="1011.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="107.6" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (4 samples, 0.16%)</title><rect x="104.6" y="995.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="107.6" y="1006.0"></text>
</g>
<g>
<title>Thread::current() (3 samples, 0.12%)</title><rect x="104.6" y="979.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="107.6" y="990.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.04%)</title><rect x="106.1" y="979.0" width="0.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="109.1" y="990.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (2 samples, 0.08%)</title><rect x="106.5" y="1027.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="109.5" y="1038.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (2 samples, 0.08%)</title><rect x="106.5" y="1011.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="109.5" y="1022.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (2 samples, 0.08%)</title><rect x="106.5" y="995.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="109.5" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (2 samples, 0.08%)</title><rect x="106.5" y="979.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="109.5" y="990.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.04%)</title><rect x="106.5" y="963.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="109.5" y="974.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.04%)</title><rect x="107.0" y="963.0" width="0.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="110.0" y="974.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (2,271 samples, 91.54%)</title><rect x="107.5" y="1027.0" width="1080.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="110.5" y="1038.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.04%)</title><rect x="118.0" y="1011.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="121.0" y="1022.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.hasNext (26 samples, 1.05%)</title><rect x="118.4" y="1011.0" width="12.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="121.4" y="1022.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (21 samples, 0.85%)</title><rect x="120.8" y="995.0" width="10.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="123.8" y="1006.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.24%)</title><rect x="121.8" y="979.0" width="2.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="124.8" y="990.0"></text>
</g>
<g>
<title>__kernel_vsyscall (6 samples, 0.24%)</title><rect x="121.8" y="963.0" width="2.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="124.8" y="974.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (6 samples, 0.24%)</title><rect x="121.8" y="947.0" width="2.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="124.8" y="958.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (6 samples, 0.24%)</title><rect x="121.8" y="931.0" width="2.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="124.8" y="942.0"></text>
</g>
<g>
<title>__kernel_vsyscall (13 samples, 0.52%)</title><rect x="124.6" y="979.0" width="6.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="127.6" y="990.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (6 samples, 0.24%)</title><rect x="128.0" y="963.0" width="2.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="131.0" y="974.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (6 samples, 0.24%)</title><rect x="128.0" y="947.0" width="2.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="131.0" y="958.0"></text>
</g>
<g>
<title>sys_gettimeofday (5 samples, 0.20%)</title><rect x="128.4" y="931.0" width="2.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="131.4" y="942.0"></text>
</g>
<g>
<title>_copy_to_user (1 samples, 0.04%)</title><rect x="128.4" y="915.0" width="0.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="131.4" y="926.0"></text>
</g>
<g>
<title>__copy_user_ll (1 samples, 0.04%)</title><rect x="128.4" y="899.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="131.4" y="910.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.04%)</title><rect x="128.4" y="883.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="131.4" y="894.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="128.4" y="867.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="131.4" y="878.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.04%)</title><rect x="128.4" y="851.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="131.4" y="862.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.04%)</title><rect x="128.4" y="835.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="131.4" y="846.0"></text>
</g>
<g>
<title>call_on_stack (1 samples, 0.04%)</title><rect x="128.4" y="819.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="131.4" y="830.0"></text>
</g>
<g>
<title>__do_softirq (1 samples, 0.04%)</title><rect x="128.4" y="803.0" width="0.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="131.4" y="814.0"></text>
</g>
<g>
<title>run_rebalance_domains (1 samples, 0.04%)</title><rect x="128.4" y="787.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="131.4" y="798.0"></text>
</g>
<g>
<title>rebalance_domains (1 samples, 0.04%)</title><rect x="128.4" y="771.0" width="0.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="131.4" y="782.0"></text>
</g>
<g>
<title>update_blocked_averages (1 samples, 0.04%)</title><rect x="128.4" y="755.0" width="0.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="131.4" y="766.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.04%)</title><rect x="128.4" y="739.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="131.4" y="750.0"></text>
</g>
<g>
<title>do_gettimeofday (4 samples, 0.16%)</title><rect x="128.9" y="915.0" width="1.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="131.9" y="926.0"></text>
</g>
<g>
<title>__getnstimeofday64 (4 samples, 0.16%)</title><rect x="128.9" y="899.0" width="1.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="131.9" y="910.0"></text>
</g>
<g>
<title>kvm_clock_get_cycles (4 samples, 0.16%)</title><rect x="128.9" y="883.0" width="1.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="131.9" y="894.0"></text>
</g>
<g>
<title>pvclock_clocksource_read (4 samples, 0.16%)</title><rect x="128.9" y="867.0" width="1.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="131.9" y="878.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (359 samples, 14.47%)</title><rect x="130.8" y="1011.0" width="170.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="133.8" y="1022.0">one/nio/net/JavaSelect..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (13 samples, 0.52%)</title><rect x="130.8" y="995.0" width="6.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="133.8" y="1006.0"></text>
</g>
<g>
<title>__clock_gettime (8 samples, 0.32%)</title><rect x="131.8" y="979.0" width="3.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="134.8" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="131.8" y="963.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="134.8" y="974.0"></text>
</g>
<g>
<title>__kernel_vsyscall (1 samples, 0.04%)</title><rect x="131.8" y="947.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="134.8" y="958.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (1 samples, 0.04%)</title><rect x="131.8" y="931.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="134.8" y="942.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (1 samples, 0.04%)</title><rect x="131.8" y="915.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="134.8" y="926.0"></text>
</g>
<g>
<title>__kernel_vsyscall (5 samples, 0.20%)</title><rect x="132.2" y="963.0" width="2.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="135.2" y="974.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (4 samples, 0.16%)</title><rect x="132.7" y="947.0" width="1.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="135.7" y="958.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (4 samples, 0.16%)</title><rect x="132.7" y="931.0" width="1.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="135.7" y="942.0"></text>
</g>
<g>
<title>sys_clock_gettime (4 samples, 0.16%)</title><rect x="132.7" y="915.0" width="1.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="135.7" y="926.0"></text>
</g>
<g>
<title>clockid_to_kclock.part.3 (1 samples, 0.04%)</title><rect x="132.7" y="899.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="135.7" y="910.0"></text>
</g>
<g>
<title>posix_ktime_get_ts (2 samples, 0.08%)</title><rect x="133.2" y="899.0" width="0.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="136.2" y="910.0"></text>
</g>
<g>
<title>ktime_get_ts64 (2 samples, 0.08%)</title><rect x="133.2" y="883.0" width="0.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="136.2" y="894.0"></text>
</g>
<g>
<title>kvm_clock_get_cycles (1 samples, 0.04%)</title><rect x="133.7" y="867.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="136.7" y="878.0"></text>
</g>
<g>
<title>pvclock_clocksource_read (1 samples, 0.04%)</title><rect x="133.7" y="851.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="136.7" y="862.0"></text>
</g>
<g>
<title>put_timespec64 (1 samples, 0.04%)</title><rect x="134.1" y="899.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="137.1" y="910.0"></text>
</g>
<g>
<title>__copy_user_ll (1 samples, 0.04%)</title><rect x="134.1" y="883.0" width="0.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="137.1" y="894.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (2 samples, 0.08%)</title><rect x="134.6" y="963.0" width="1.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="137.6" y="974.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (3 samples, 0.12%)</title><rect x="135.6" y="979.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="138.6" y="990.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (2 samples, 0.08%)</title><rect x="137.0" y="995.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="140.0" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (2 samples, 0.08%)</title><rect x="137.0" y="979.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="140.0" y="990.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (344 samples, 13.87%)</title><rect x="137.9" y="995.0" width="163.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="140.9" y="1006.0">sun/nio/ch/SelectorIm..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (339 samples, 13.66%)</title><rect x="140.3" y="979.0" width="161.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="143.3" y="990.0">sun/nio/ch/SelectorIm..</text>
</g>
<g>
<title>resume_userspace (1 samples, 0.04%)</title><rect x="147.9" y="963.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="150.9" y="974.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.04%)</title><rect x="147.9" y="947.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="150.9" y="958.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.04%)</title><rect x="147.9" y="931.0" width="0.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="150.9" y="942.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.04%)</title><rect x="147.9" y="915.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="150.9" y="926.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.04%)</title><rect x="147.9" y="899.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="150.9" y="910.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.04%)</title><rect x="147.9" y="883.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="150.9" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (321 samples, 12.94%)</title><rect x="148.4" y="963.0" width="152.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="151.4" y="974.0">sun/nio/ch/EPollSel..</text>
</g>
<g>
<title>Thread::current() (1 samples, 0.04%)</title><rect x="151.7" y="947.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="154.7" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/EPoll.wait (255 samples, 10.28%)</title><rect x="152.2" y="947.0" width="121.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="155.2" y="958.0">sun/nio/ch/EPol..</text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (9 samples, 0.36%)</title><rect x="156.0" y="931.0" width="4.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="159.0" y="942.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_EPoll_wait (1 samples, 0.04%)</title><rect x="160.3" y="931.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="163.3" y="942.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.24%)</title><rect x="160.8" y="931.0" width="2.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="163.8" y="942.0"></text>
</g>
<g>
<title>__kernel_vsyscall (6 samples, 0.24%)</title><rect x="160.8" y="915.0" width="2.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="163.8" y="926.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (6 samples, 0.24%)</title><rect x="160.8" y="899.0" width="2.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="163.8" y="910.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (6 samples, 0.24%)</title><rect x="160.8" y="883.0" width="2.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="163.8" y="894.0"></text>
</g>
<g>
<title>__kernel_vsyscall (212 samples, 8.54%)</title><rect x="163.6" y="931.0" width="100.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="166.6" y="942.0">__kernel_vsy..</text>
</g>
<g>
<title>entry_SYSENTER_32 (209 samples, 8.42%)</title><rect x="165.1" y="915.0" width="99.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="168.1" y="926.0">entry_SYSENT..</text>
</g>
<g>
<title>do_fast_syscall_32 (207 samples, 8.34%)</title><rect x="165.1" y="899.0" width="98.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="168.1" y="910.0">do_fast_sysc..</text>
</g>
<g>
<title>sys_epoll_wait (207 samples, 8.34%)</title><rect x="165.1" y="883.0" width="98.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="168.1" y="894.0">sys_epoll_wait</text>
</g>
<g>
<title>__fdget (9 samples, 0.36%)</title><rect x="168.4" y="867.0" width="4.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="171.4" y="878.0"></text>
</g>
<g>
<title>__fget_light (9 samples, 0.36%)</title><rect x="168.4" y="851.0" width="4.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="171.4" y="862.0"></text>
</g>
<g>
<title>__fget (7 samples, 0.28%)</title><rect x="169.3" y="835.0" width="3.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="172.3" y="846.0"></text>
</g>
<g>
<title>_raw_spin_lock_irqsave (3 samples, 0.12%)</title><rect x="172.7" y="867.0" width="1.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="175.7" y="878.0"></text>
</g>
<g>
<title>ep_poll (186 samples, 7.50%)</title><rect x="174.1" y="867.0" width="88.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="177.1" y="878.0">ep_poll</text>
</g>
<g>
<title>__lock_text_start (10 samples, 0.40%)</title><rect x="176.0" y="851.0" width="4.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="179.0" y="862.0"></text>
</g>
<g>
<title>_raw_spin_lock_irqsave (4 samples, 0.16%)</title><rect x="180.7" y="851.0" width="1.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="183.7" y="862.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.16 (45 samples, 1.81%)</title><rect x="182.6" y="851.0" width="21.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="185.6" y="862.0">e..</text>
</g>
<g>
<title>__lock_text_start (4 samples, 0.16%)</title><rect x="183.6" y="835.0" width="1.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="186.6" y="846.0"></text>
</g>
<g>
<title>ep_item_poll.isra.12 (1 samples, 0.04%)</title><rect x="185.5" y="835.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="188.5" y="846.0"></text>
</g>
<g>
<title>ep_send_events_proc (34 samples, 1.37%)</title><rect x="186.0" y="835.0" width="16.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="189.0" y="846.0"></text>
</g>
<g>
<title>ep_item_poll.isra.12 (27 samples, 1.09%)</title><rect x="188.4" y="819.0" width="12.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="191.4" y="830.0"></text>
</g>
<g>
<title>sock_poll (20 samples, 0.81%)</title><rect x="189.8" y="803.0" width="9.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="192.8" y="814.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_edx (2 samples, 0.08%)</title><rect x="192.2" y="787.0" width="0.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="195.2" y="798.0"></text>
</g>
<g>
<title>tcp_poll (11 samples, 0.44%)</title><rect x="193.1" y="787.0" width="5.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="196.1" y="798.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (2 samples, 0.08%)</title><rect x="198.3" y="787.0" width="1.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="201.3" y="798.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.04%)</title><rect x="198.8" y="771.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="201.8" y="782.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="198.8" y="755.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="201.8" y="766.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.04%)</title><rect x="198.8" y="739.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="201.8" y="750.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.04%)</title><rect x="198.8" y="723.0" width="0.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="201.8" y="734.0"></text>
</g>
<g>
<title>call_on_stack (1 samples, 0.04%)</title><rect x="198.8" y="707.0" width="0.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="201.8" y="718.0"></text>
</g>
<g>
<title>__do_softirq (1 samples, 0.04%)</title><rect x="198.8" y="691.0" width="0.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="201.8" y="702.0"></text>
</g>
<g>
<title>rcu_process_callbacks (1 samples, 0.04%)</title><rect x="198.8" y="675.0" width="0.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="201.8" y="686.0"></text>
</g>
<g>
<title>tcp_poll (4 samples, 0.16%)</title><rect x="199.3" y="803.0" width="1.9" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="202.3" y="814.0"></text>
</g>
<g>
<title>sock_poll (2 samples, 0.08%)</title><rect x="201.2" y="819.0" width="0.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="204.2" y="830.0"></text>
</g>
<g>
<title>mutex_lock (4 samples, 0.16%)</title><rect x="202.1" y="835.0" width="2.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="205.1" y="846.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.04%)</title><rect x="202.6" y="819.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="205.6" y="830.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.04%)</title><rect x="202.6" y="803.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="205.6" y="814.0"></text>
</g>
<g>
<title>rcu_all_qs (2 samples, 0.08%)</title><rect x="203.1" y="819.0" width="1.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="206.1" y="830.0"></text>
</g>
<g>
<title>mutex_lock (4 samples, 0.16%)</title><rect x="204.1" y="851.0" width="1.9" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="207.1" y="862.0"></text>
</g>
<g>
<title>mutex_unlock (1 samples, 0.04%)</title><rect x="206.0" y="851.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="209.0" y="862.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (118 samples, 4.76%)</title><rect x="206.4" y="851.0" width="56.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="209.4" y="862.0">schedu..</text>
</g>
<g>
<title>schedule (4 samples, 0.16%)</title><rect x="206.4" y="835.0" width="1.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="209.4" y="846.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (114 samples, 4.59%)</title><rect x="208.3" y="835.0" width="54.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="211.3" y="846.0">sched..</text>
</g>
<g>
<title>schedule (114 samples, 4.59%)</title><rect x="208.3" y="819.0" width="54.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="211.3" y="830.0">sched..</text>
</g>
<g>
<title>__sched_text_start (113 samples, 4.55%)</title><rect x="208.8" y="803.0" width="53.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="211.8" y="814.0">__sch..</text>
</g>
<g>
<title>finish_task_switch (104 samples, 4.19%)</title><rect x="213.1" y="787.0" width="49.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="216.1" y="798.0">finis..</text>
</g>
<g>
<title>schedule_hrtimeout_range (2 samples, 0.08%)</title><rect x="262.6" y="867.0" width="0.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="265.6" y="878.0"></text>
</g>
<g>
<title>sys_epoll_wait (2 samples, 0.08%)</title><rect x="263.5" y="899.0" width="1.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="266.5" y="910.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.04%)</title><rect x="264.5" y="931.0" width="0.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="267.5" y="942.0"></text>
</g>
<g>
<title>epoll_wait (18 samples, 0.73%)</title><rect x="264.9" y="931.0" width="8.6" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="267.9" y="942.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.04%)</title><rect x="273.0" y="915.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="276.0" y="926.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="273.0" y="899.0" width="0.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="276.0" y="910.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.04%)</title><rect x="273.0" y="883.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="276.0" y="894.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.04%)</title><rect x="273.0" y="867.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="276.0" y="878.0"></text>
</g>
<g>
<title>call_on_stack (1 samples, 0.04%)</title><rect x="273.0" y="851.0" width="0.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="276.0" y="862.0"></text>
</g>
<g>
<title>__do_softirq (1 samples, 0.04%)</title><rect x="273.0" y="835.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="276.0" y="846.0"></text>
</g>
<g>
<title>rcu_bh_qs (1 samples, 0.04%)</title><rect x="273.0" y="819.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="276.0" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.processEvents (17 samples, 0.69%)</title><rect x="273.5" y="947.0" width="8.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="276.5" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.get (8 samples, 0.32%)</title><rect x="273.5" y="931.0" width="3.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="276.5" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (8 samples, 0.32%)</title><rect x="273.5" y="915.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="276.5" y="926.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (9 samples, 0.36%)</title><rect x="277.3" y="931.0" width="4.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="280.3" y="942.0"></text>
</g>
<g>
<title>java/util/HashSet.add (6 samples, 0.24%)</title><rect x="277.3" y="915.0" width="2.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="280.3" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.put (6 samples, 0.24%)</title><rect x="277.3" y="899.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="280.3" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (6 samples, 0.24%)</title><rect x="277.3" y="883.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="280.3" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (4 samples, 0.16%)</title><rect x="278.2" y="867.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="281.2" y="878.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (3 samples, 0.12%)</title><rect x="280.1" y="915.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="283.1" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (3 samples, 0.12%)</title><rect x="280.1" y="899.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="283.1" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.12%)</title><rect x="280.1" y="883.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="283.1" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.processUpdateQueue (12 samples, 0.48%)</title><rect x="281.6" y="947.0" width="5.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="284.6" y="958.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (7 samples, 0.28%)</title><rect x="284.0" y="931.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="287.0" y="942.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.elementAt (6 samples, 0.24%)</title><rect x="284.4" y="915.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="287.4" y="926.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (12 samples, 0.48%)</title><rect x="287.3" y="947.0" width="5.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="290.3" y="958.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (11 samples, 0.44%)</title><rect x="287.8" y="931.0" width="5.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="290.8" y="942.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (5 samples, 0.20%)</title><rect x="288.7" y="915.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="291.7" y="926.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (4 samples, 0.16%)</title><rect x="291.1" y="915.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="294.1" y="926.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.end (5 samples, 0.20%)</title><rect x="293.0" y="947.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="296.0" y="958.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (5 samples, 0.20%)</title><rect x="293.0" y="931.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="296.0" y="942.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (5 samples, 0.20%)</title><rect x="293.0" y="915.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="296.0" y="926.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (4 samples, 0.16%)</title><rect x="293.5" y="899.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="296.5" y="910.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (4 samples, 0.16%)</title><rect x="293.5" y="883.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="296.5" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (12 samples, 0.48%)</title><rect x="295.4" y="947.0" width="5.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="298.4" y="958.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.cancelledKeys (1 samples, 0.04%)</title><rect x="299.6" y="931.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="302.6" y="942.0"></text>
</g>
<g>
<title>java/util/HashSet.isEmpty (2 samples, 0.08%)</title><rect x="300.1" y="931.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="303.1" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.ensureOpen (1 samples, 0.04%)</title><rect x="301.1" y="963.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="304.1" y="974.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.isOpen (1 samples, 0.04%)</title><rect x="301.1" y="947.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="304.1" y="958.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,863 samples, 75.09%)</title><rect x="301.6" y="1011.0" width="886.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="304.6" y="1022.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,858 samples, 74.89%)</title><rect x="303.9" y="995.0" width="883.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="306.9" y="1006.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,716 samples, 69.17%)</title><rect x="304.9" y="979.0" width="816.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="307.9" y="990.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,695 samples, 68.32%)</title><rect x="313.4" y="963.0" width="806.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="316.4" y="974.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,695 samples, 68.32%)</title><rect x="313.4" y="947.0" width="806.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="316.4" y="958.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (1,686 samples, 67.96%)</title><rect x="313.4" y="931.0" width="801.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="316.4" y="942.0">RequestHandler0_entity.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (316 samples, 12.74%)</title><rect x="313.4" y="915.0" width="150.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="316.4" y="926.0">one/nio/http/HttpSe..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (3 samples, 0.12%)</title><rect x="315.3" y="899.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="318.3" y="910.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.12%)</title><rect x="315.3" y="883.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="318.3" y="894.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.12%)</title><rect x="315.3" y="867.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="318.3" y="878.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.04%)</title><rect x="316.3" y="851.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="319.3" y="862.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="316.3" y="835.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="319.3" y="846.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.04%)</title><rect x="316.3" y="819.0" width="0.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="319.3" y="830.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.04%)</title><rect x="316.3" y="803.0" width="0.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="319.3" y="814.0"></text>
</g>
<g>
<title>call_on_stack (1 samples, 0.04%)</title><rect x="316.3" y="787.0" width="0.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="319.3" y="798.0"></text>
</g>
<g>
<title>__do_softirq (1 samples, 0.04%)</title><rect x="316.3" y="771.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="319.3" y="782.0"></text>
</g>
<g>
<title>run_rebalance_domains (1 samples, 0.04%)</title><rect x="316.3" y="755.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="319.3" y="766.0"></text>
</g>
<g>
<title>rebalance_domains (1 samples, 0.04%)</title><rect x="316.3" y="739.0" width="0.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="319.3" y="750.0"></text>
</g>
<g>
<title>update_blocked_averages (1 samples, 0.04%)</title><rect x="316.3" y="723.0" width="0.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="319.3" y="734.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.04%)</title><rect x="316.3" y="707.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="319.3" y="718.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (305 samples, 12.29%)</title><rect x="316.8" y="899.0" width="145.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="319.8" y="910.0">one/nio/http/HttpS..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (3 samples, 0.12%)</title><rect x="316.8" y="883.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="319.8" y="894.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (2 samples, 0.08%)</title><rect x="317.2" y="867.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="320.2" y="878.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (2 samples, 0.08%)</title><rect x="317.2" y="851.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="320.2" y="862.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.08%)</title><rect x="317.2" y="835.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="320.2" y="846.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (302 samples, 12.17%)</title><rect x="318.2" y="883.0" width="143.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="321.2" y="894.0">one/nio/net/Sessio..</text>
</g>
<g>
<title>one/nio/net/Session.write (302 samples, 12.17%)</title><rect x="318.2" y="867.0" width="143.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="321.2" y="878.0">one/nio/net/Sessio..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (297 samples, 11.97%)</title><rect x="320.6" y="851.0" width="141.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="323.6" y="862.0">one/nio/net/Sessio..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (297 samples, 11.97%)</title><rect x="320.6" y="835.0" width="141.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="323.6" y="846.0">one/nio/net/JavaSo..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.04%)</title><rect x="320.6" y="819.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="323.6" y="830.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="320.6" y="803.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="323.6" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="320.6" y="787.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="323.6" y="798.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="320.6" y="771.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="323.6" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.04%)</title><rect x="320.6" y="755.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="323.6" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.04%)</title><rect x="320.6" y="739.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="323.6" y="750.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.04%)</title><rect x="320.6" y="723.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="323.6" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (296 samples, 11.93%)</title><rect x="321.1" y="819.0" width="140.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="324.1" y="830.0">sun/nio/ch/SocketC..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 0.16%)</title><rect x="321.5" y="803.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="324.5" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.16%)</title><rect x="321.5" y="787.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="324.5" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (4 samples, 0.16%)</title><rect x="321.5" y="771.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="324.5" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (291 samples, 11.73%)</title><rect x="323.4" y="803.0" width="138.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="326.4" y="814.0">sun/nio/ch/IOUtil..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (291 samples, 11.73%)</title><rect x="323.4" y="787.0" width="138.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="326.4" y="798.0">sun/nio/ch/IOUtil..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (291 samples, 11.73%)</title><rect x="323.4" y="771.0" width="138.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="326.4" y="782.0">sun/nio/ch/IOUtil..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (11 samples, 0.44%)</title><rect x="323.4" y="755.0" width="5.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="326.4" y="766.0"></text>
</g>
<g>
<title>apic_timer_interrupt (2 samples, 0.08%)</title><rect x="327.7" y="739.0" width="1.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="330.7" y="750.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (2 samples, 0.08%)</title><rect x="327.7" y="723.0" width="1.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="330.7" y="734.0"></text>
</g>
<g>
<title>irq_exit (2 samples, 0.08%)</title><rect x="327.7" y="707.0" width="1.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="330.7" y="718.0"></text>
</g>
<g>
<title>do_softirq_own_stack (2 samples, 0.08%)</title><rect x="327.7" y="691.0" width="1.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="330.7" y="702.0"></text>
</g>
<g>
<title>call_on_stack (2 samples, 0.08%)</title><rect x="327.7" y="675.0" width="1.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="330.7" y="686.0"></text>
</g>
<g>
<title>__do_softirq (2 samples, 0.08%)</title><rect x="327.7" y="659.0" width="1.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="330.7" y="670.0"></text>
</g>
<g>
<title>run_rebalance_domains (2 samples, 0.08%)</title><rect x="327.7" y="643.0" width="1.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="330.7" y="654.0"></text>
</g>
<g>
<title>rebalance_domains (2 samples, 0.08%)</title><rect x="327.7" y="627.0" width="1.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="330.7" y="638.0"></text>
</g>
<g>
<title>update_blocked_averages (2 samples, 0.08%)</title><rect x="327.7" y="611.0" width="1.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="330.7" y="622.0"></text>
</g>
<g>
<title>__lock_text_start (2 samples, 0.08%)</title><rect x="327.7" y="595.0" width="1.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="330.7" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (280 samples, 11.29%)</title><rect x="328.7" y="755.0" width="133.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="331.7" y="766.0">sun/nio/ch/Socket..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (277 samples, 11.16%)</title><rect x="330.1" y="739.0" width="131.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="333.1" y="750.0">sun/nio/ch/FileD..</text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (6 samples, 0.24%)</title><rect x="333.4" y="723.0" width="2.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="336.4" y="734.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (2 samples, 0.08%)</title><rect x="336.3" y="723.0" width="0.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="339.3" y="734.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.04%)</title><rect x="336.7" y="707.0" width="0.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="339.7" y="718.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="337.2" y="723.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="340.2" y="734.0"></text>
</g>
<g>
<title>__kernel_vsyscall (1 samples, 0.04%)</title><rect x="337.2" y="707.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="340.2" y="718.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (1 samples, 0.04%)</title><rect x="337.2" y="691.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="340.2" y="702.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (1 samples, 0.04%)</title><rect x="337.2" y="675.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="340.2" y="686.0"></text>
</g>
<g>
<title>__kernel_vsyscall (259 samples, 10.44%)</title><rect x="337.7" y="723.0" width="123.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="340.7" y="734.0">__kernel_vsyscall</text>
</g>
<g>
<title>entry_SYSENTER_32 (253 samples, 10.20%)</title><rect x="340.6" y="707.0" width="120.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="343.6" y="718.0">entry_SYSENTER_32</text>
</g>
<g>
<title>do_fast_syscall_32 (253 samples, 10.20%)</title><rect x="340.6" y="691.0" width="120.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="343.6" y="702.0">do_fast_syscall..</text>
</g>
<g>
<title>exit_to_usermode_loop (6 samples, 0.24%)</title><rect x="341.0" y="675.0" width="2.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="344.0" y="686.0"></text>
</g>
<g>
<title>schedule (6 samples, 0.24%)</title><rect x="341.0" y="659.0" width="2.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="344.0" y="670.0"></text>
</g>
<g>
<title>__sched_text_start (6 samples, 0.24%)</title><rect x="341.0" y="643.0" width="2.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="344.0" y="654.0"></text>
</g>
<g>
<title>finish_task_switch (6 samples, 0.24%)</title><rect x="341.0" y="627.0" width="2.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="344.0" y="638.0"></text>
</g>
<g>
<title>sys_write (246 samples, 9.92%)</title><rect x="343.9" y="675.0" width="117.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="346.9" y="686.0">sys_write</text>
</g>
<g>
<title>__fsnotify_parent (2 samples, 0.08%)</title><rect x="344.4" y="659.0" width="0.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="347.4" y="670.0"></text>
</g>
<g>
<title>fsnotify (1 samples, 0.04%)</title><rect x="345.3" y="659.0" width="0.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="348.3" y="670.0"></text>
</g>
<g>
<title>vfs_write (242 samples, 9.75%)</title><rect x="345.8" y="659.0" width="115.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="348.8" y="670.0">vfs_write</text>
</g>
<g>
<title>__vfs_write (230 samples, 9.27%)</title><rect x="347.2" y="643.0" width="109.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="350.2" y="654.0">__vfs_write</text>
</g>
<g>
<title>new_sync_write (229 samples, 9.23%)</title><rect x="347.7" y="627.0" width="108.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="350.7" y="638.0">new_sync_write</text>
</g>
<g>
<title>sock_write_iter (228 samples, 9.19%)</title><rect x="348.2" y="611.0" width="108.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="351.2" y="622.0">sock_write_iter</text>
</g>
<g>
<title>security_socket_sendmsg (1 samples, 0.04%)</title><rect x="348.2" y="595.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="351.2" y="606.0"></text>
</g>
<g>
<title>sock_sendmsg (227 samples, 9.15%)</title><rect x="348.6" y="595.0" width="108.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="351.6" y="606.0">sock_sendmsg</text>
</g>
<g>
<title>inet_sendmsg (225 samples, 9.07%)</title><rect x="348.6" y="579.0" width="107.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="351.6" y="590.0">inet_sendmsg</text>
</g>
<g>
<title>release_sock (2 samples, 0.08%)</title><rect x="350.1" y="563.0" width="0.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="353.1" y="574.0"></text>
</g>
<g>
<title>tcp_sendmsg (220 samples, 8.87%)</title><rect x="351.0" y="563.0" width="104.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="354.0" y="574.0">tcp_sendmsg</text>
</g>
<g>
<title>_raw_spin_lock_bh (1 samples, 0.04%)</title><rect x="351.5" y="547.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="354.5" y="558.0"></text>
</g>
<g>
<title>release_sock (2 samples, 0.08%)</title><rect x="352.0" y="547.0" width="0.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="355.0" y="558.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.04%)</title><rect x="352.0" y="531.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="355.0" y="542.0"></text>
</g>
<g>
<title>_raw_spin_unlock_bh (1 samples, 0.04%)</title><rect x="352.4" y="531.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="355.4" y="542.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.04%)</title><rect x="352.4" y="515.0" width="0.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="355.4" y="526.0"></text>
</g>
<g>
<title>sock_zerocopy_put (2 samples, 0.08%)</title><rect x="352.9" y="547.0" width="1.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="355.9" y="558.0"></text>
</g>
<g>
<title>tcp_release_cb (1 samples, 0.04%)</title><rect x="353.9" y="547.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="356.9" y="558.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (213 samples, 8.59%)</title><rect x="354.3" y="547.0" width="101.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="357.3" y="558.0">tcp_sendmsg_..</text>
</g>
<g>
<title>__alloc_skb (1 samples, 0.04%)</title><rect x="354.8" y="531.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="357.8" y="542.0"></text>
</g>
<g>
<title>_copy_from_iter_full (1 samples, 0.04%)</title><rect x="355.3" y="531.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="358.3" y="542.0"></text>
</g>
<g>
<title>copyin (1 samples, 0.04%)</title><rect x="355.3" y="515.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="358.3" y="526.0"></text>
</g>
<g>
<title>__copy_user_ll (1 samples, 0.04%)</title><rect x="355.3" y="499.0" width="0.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="358.3" y="510.0"></text>
</g>
<g>
<title>sk_forced_mem_schedule (2 samples, 0.08%)</title><rect x="355.8" y="531.0" width="0.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="358.8" y="542.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (6 samples, 0.24%)</title><rect x="356.7" y="531.0" width="2.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="359.7" y="542.0"></text>
</g>
<g>
<title>__alloc_skb (6 samples, 0.24%)</title><rect x="356.7" y="515.0" width="2.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="359.7" y="526.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.45 (1 samples, 0.04%)</title><rect x="356.7" y="499.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="359.7" y="510.0"></text>
</g>
<g>
<title>__kmalloc_track_caller (1 samples, 0.04%)</title><rect x="356.7" y="483.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="359.7" y="494.0"></text>
</g>
<g>
<title>__kmalloc_track_caller (1 samples, 0.04%)</title><rect x="357.2" y="499.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="360.2" y="510.0"></text>
</g>
<g>
<title>kmem_cache_alloc (3 samples, 0.12%)</title><rect x="357.7" y="499.0" width="1.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="360.7" y="510.0"></text>
</g>
<g>
<title>ksize (1 samples, 0.04%)</title><rect x="359.1" y="499.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="362.1" y="510.0"></text>
</g>
<g>
<title>skb_entail (2 samples, 0.08%)</title><rect x="359.6" y="531.0" width="0.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="362.6" y="542.0"></text>
</g>
<g>
<title>tcp_current_mss (1 samples, 0.04%)</title><rect x="360.5" y="531.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="363.5" y="542.0"></text>
</g>
<g>
<title>tcp_push (195 samples, 7.86%)</title><rect x="361.0" y="531.0" width="92.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="364.0" y="542.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (194 samples, 7.82%)</title><rect x="361.5" y="515.0" width="92.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="364.5" y="526.0">__tcp_push_..</text>
</g>
<g>
<title>tcp_write_xmit (194 samples, 7.82%)</title><rect x="361.5" y="499.0" width="92.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="364.5" y="510.0">tcp_write_x..</text>
</g>
<g>
<title>__tcp_transmit_skb (183 samples, 7.38%)</title><rect x="363.4" y="483.0" width="87.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="366.4" y="494.0">__tcp_tran..</text>
</g>
<g>
<title>__skb_clone (1 samples, 0.04%)</title><rect x="364.3" y="467.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="367.3" y="478.0"></text>
</g>
<g>
<title>ip_queue_xmit (180 samples, 7.26%)</title><rect x="364.8" y="467.0" width="85.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="367.8" y="478.0">ip_queue_x..</text>
</g>
<g>
<title>ip_local_out (177 samples, 7.13%)</title><rect x="365.8" y="451.0" width="84.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="368.8" y="462.0">ip_local_out</text>
</g>
<g>
<title>ip_output (176 samples, 7.09%)</title><rect x="366.2" y="435.0" width="83.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="369.2" y="446.0">ip_output</text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (1 samples, 0.04%)</title><rect x="366.7" y="419.0" width="0.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="369.7" y="430.0"></text>
</g>
<g>
<title>ip_finish_output (174 samples, 7.01%)</title><rect x="367.2" y="419.0" width="82.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="370.2" y="430.0">ip_finish..</text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (2 samples, 0.08%)</title><rect x="367.2" y="403.0" width="0.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="370.2" y="414.0"></text>
</g>
<g>
<title>ip_finish_output2 (172 samples, 6.93%)</title><rect x="368.1" y="403.0" width="81.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="371.1" y="414.0">ip_finish..</text>
</g>
<g>
<title>__local_bh_enable_ip (160 samples, 6.45%)</title><rect x="369.1" y="387.0" width="76.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="372.1" y="398.0">__local_..</text>
</g>
<g>
<title>do_softirq.part.15 (160 samples, 6.45%)</title><rect x="369.1" y="371.0" width="76.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="372.1" y="382.0">do_softi..</text>
</g>
<g>
<title>do_softirq_own_stack (159 samples, 6.41%)</title><rect x="369.6" y="355.0" width="75.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="372.6" y="366.0">do_softi..</text>
</g>
<g>
<title>call_on_stack (159 samples, 6.41%)</title><rect x="369.6" y="339.0" width="75.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="372.6" y="350.0">call_on_..</text>
</g>
<g>
<title>__do_softirq (159 samples, 6.41%)</title><rect x="369.6" y="323.0" width="75.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="372.6" y="334.0">__do_sof..</text>
</g>
<g>
<title>__kfree_skb_flush (1 samples, 0.04%)</title><rect x="370.0" y="307.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="373.0" y="318.0"></text>
</g>
<g>
<title>net_rx_action (157 samples, 6.33%)</title><rect x="370.5" y="307.0" width="74.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="373.5" y="318.0">net_rx_a..</text>
</g>
<g>
<title>process_backlog (156 samples, 6.29%)</title><rect x="371.0" y="291.0" width="74.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="374.0" y="302.0">process_..</text>
</g>
<g>
<title>__netif_receive_skb (155 samples, 6.25%)</title><rect x="371.5" y="275.0" width="73.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="374.5" y="286.0">__netif_..</text>
</g>
<g>
<title>__netif_receive_skb_core (154 samples, 6.21%)</title><rect x="371.5" y="259.0" width="73.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="374.5" y="270.0">__netif_..</text>
</g>
<g>
<title>ip_rcv (153 samples, 6.17%)</title><rect x="371.9" y="243.0" width="72.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="374.9" y="254.0">ip_rcv</text>
</g>
<g>
<title>ip_rcv_finish (152 samples, 6.13%)</title><rect x="372.4" y="227.0" width="72.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="375.4" y="238.0">ip_rcv_f..</text>
</g>
<g>
<title>ip_local_deliver (152 samples, 6.13%)</title><rect x="372.4" y="211.0" width="72.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="375.4" y="222.0">ip_local..</text>
</g>
<g>
<title>ip_local_deliver_finish (152 samples, 6.13%)</title><rect x="372.4" y="195.0" width="72.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="375.4" y="206.0">ip_local..</text>
</g>
<g>
<title>sk_filter_trim_cap (1 samples, 0.04%)</title><rect x="372.9" y="179.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="375.9" y="190.0"></text>
</g>
<g>
<title>tcp_v4_rcv (150 samples, 6.05%)</title><rect x="373.4" y="179.0" width="71.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="376.4" y="190.0">tcp_v4_rcv</text>
</g>
<g>
<title>__inet_lookup_established (2 samples, 0.08%)</title><rect x="373.8" y="163.0" width="1.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="376.8" y="174.0"></text>
</g>
<g>
<title>inet_ehashfn (1 samples, 0.04%)</title><rect x="374.3" y="147.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="377.3" y="158.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (2 samples, 0.08%)</title><rect x="374.8" y="163.0" width="0.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="377.8" y="174.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (2 samples, 0.08%)</title><rect x="374.8" y="147.0" width="0.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="377.8" y="158.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (145 samples, 5.84%)</title><rect x="375.7" y="163.0" width="69.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="378.7" y="174.0">tcp_v4_..</text>
</g>
<g>
<title>tcp_rcv_established (144 samples, 5.80%)</title><rect x="376.2" y="147.0" width="68.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="379.2" y="158.0">tcp_rcv..</text>
</g>
<g>
<title>__tcp_ack_snd_check (2 samples, 0.08%)</title><rect x="376.7" y="131.0" width="1.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="379.7" y="142.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (2 samples, 0.08%)</title><rect x="376.7" y="115.0" width="1.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="379.7" y="126.0"></text>
</g>
<g>
<title>sk_reset_timer (2 samples, 0.08%)</title><rect x="376.7" y="99.0" width="1.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="379.7" y="110.0"></text>
</g>
<g>
<title>mod_timer (2 samples, 0.08%)</title><rect x="376.7" y="83.0" width="1.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="379.7" y="94.0"></text>
</g>
<g>
<title>__lock_text_start (2 samples, 0.08%)</title><rect x="376.7" y="67.0" width="1.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="379.7" y="78.0"></text>
</g>
<g>
<title>dst_release (2 samples, 0.08%)</title><rect x="377.7" y="131.0" width="0.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="380.7" y="142.0"></text>
</g>
<g>
<title>get_seconds (1 samples, 0.04%)</title><rect x="378.6" y="131.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="381.6" y="142.0"></text>
</g>
<g>
<title>tcp_ack (15 samples, 0.60%)</title><rect x="379.1" y="131.0" width="7.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="382.1" y="142.0"></text>
</g>
<g>
<title>bictcp_cong_avoid (1 samples, 0.04%)</title><rect x="381.0" y="115.0" width="0.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="384.0" y="126.0"></text>
</g>
<g>
<title>rb_next (1 samples, 0.04%)</title><rect x="381.5" y="115.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="384.5" y="126.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (9 samples, 0.36%)</title><rect x="381.9" y="115.0" width="4.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="384.9" y="126.0"></text>
</g>
<g>
<title>__kfree_skb (3 samples, 0.12%)</title><rect x="383.4" y="99.0" width="1.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="386.4" y="110.0"></text>
</g>
<g>
<title>kfree_skbmem (1 samples, 0.04%)</title><rect x="383.4" y="83.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="386.4" y="94.0"></text>
</g>
<g>
<title>kmem_cache_free (1 samples, 0.04%)</title><rect x="383.4" y="67.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="386.4" y="78.0"></text>
</g>
<g>
<title>__slab_free (1 samples, 0.04%)</title><rect x="383.4" y="51.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="386.4" y="62.0"></text>
</g>
<g>
<title>skb_release_all (1 samples, 0.04%)</title><rect x="383.8" y="83.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="386.8" y="94.0"></text>
</g>
<g>
<title>skb_release_data (1 samples, 0.04%)</title><rect x="383.8" y="67.0" width="0.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="386.8" y="78.0"></text>
</g>
<g>
<title>skb_free_head (1 samples, 0.04%)</title><rect x="383.8" y="51.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="386.8" y="62.0"></text>
</g>
<g>
<title>kfree (1 samples, 0.04%)</title><rect x="383.8" y="35.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="386.8" y="46.0"></text>
</g>
<g>
<title>skb_release_data (1 samples, 0.04%)</title><rect x="384.3" y="83.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="387.3" y="94.0"></text>
</g>
<g>
<title>minmax_running_min (1 samples, 0.04%)</title><rect x="384.8" y="99.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="387.8" y="110.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.41 (2 samples, 0.08%)</title><rect x="385.3" y="99.0" width="0.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="388.3" y="110.0"></text>
</g>
<g>
<title>tcp_data_queue (121 samples, 4.88%)</title><rect x="386.2" y="131.0" width="57.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="389.2" y="142.0">tcp_da..</text>
</g>
<g>
<title>sock_def_readable (116 samples, 4.68%)</title><rect x="387.2" y="115.0" width="55.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="390.2" y="126.0">sock_..</text>
</g>
<g>
<title>__wake_up_common_lock (2 samples, 0.08%)</title><rect x="387.6" y="99.0" width="1.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="390.6" y="110.0"></text>
</g>
<g>
<title>__wake_up_sync_key (113 samples, 4.55%)</title><rect x="388.6" y="99.0" width="53.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="391.6" y="110.0">__wak..</text>
</g>
<g>
<title>__wake_up_common_lock (112 samples, 4.51%)</title><rect x="389.1" y="83.0" width="53.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="392.1" y="94.0">__wak..</text>
</g>
<g>
<title>__lock_text_start (112 samples, 4.51%)</title><rect x="389.1" y="67.0" width="53.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="392.1" y="78.0">__loc..</text>
</g>
<g>
<title>tcp_event_data_recv (2 samples, 0.08%)</title><rect x="442.3" y="115.0" width="1.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="445.3" y="126.0"></text>
</g>
<g>
<title>tcp_queue_rcv (1 samples, 0.04%)</title><rect x="443.3" y="115.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="446.3" y="126.0"></text>
</g>
<g>
<title>tcp_rack_update_reo_wnd (2 samples, 0.08%)</title><rect x="443.8" y="131.0" width="0.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="446.8" y="142.0"></text>
</g>
<g>
<title>ip_rcv (1 samples, 0.04%)</title><rect x="444.7" y="259.0" width="0.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="447.7" y="270.0"></text>
</g>
<g>
<title>dev_queue_xmit (10 samples, 0.40%)</title><rect x="445.2" y="387.0" width="4.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="448.2" y="398.0"></text>
</g>
<g>
<title>__dev_queue_xmit (8 samples, 0.32%)</title><rect x="445.2" y="371.0" width="3.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="448.2" y="382.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (6 samples, 0.24%)</title><rect x="445.2" y="355.0" width="2.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="448.2" y="366.0"></text>
</g>
<g>
<title>loopback_xmit (3 samples, 0.12%)</title><rect x="445.7" y="339.0" width="1.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="448.7" y="350.0"></text>
</g>
<g>
<title>netif_rx (2 samples, 0.08%)</title><rect x="445.7" y="323.0" width="0.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="448.7" y="334.0"></text>
</g>
<g>
<title>netif_rx_internal (2 samples, 0.08%)</title><rect x="445.7" y="307.0" width="0.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="448.7" y="318.0"></text>
</g>
<g>
<title>enqueue_to_backlog (2 samples, 0.08%)</title><rect x="445.7" y="291.0" width="0.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="448.7" y="302.0"></text>
</g>
<g>
<title>tcp_wfree (1 samples, 0.04%)</title><rect x="446.6" y="323.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="449.6" y="334.0"></text>
</g>
<g>
<title>skb_clone_tx_timestamp (1 samples, 0.04%)</title><rect x="447.1" y="339.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="450.1" y="350.0"></text>
</g>
<g>
<title>tcp_wfree (1 samples, 0.04%)</title><rect x="447.6" y="339.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="450.6" y="350.0"></text>
</g>
<g>
<title>netdev_pick_tx (1 samples, 0.04%)</title><rect x="448.0" y="355.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="451.0" y="366.0"></text>
</g>
<g>
<title>validate_xmit_skb (1 samples, 0.04%)</title><rect x="448.5" y="355.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="451.5" y="366.0"></text>
</g>
<g>
<title>netif_skb_features (1 samples, 0.04%)</title><rect x="448.5" y="339.0" width="0.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="451.5" y="350.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (2 samples, 0.08%)</title><rect x="449.0" y="371.0" width="0.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="452.0" y="382.0"></text>
</g>
<g>
<title>ipv4_dst_check (1 samples, 0.04%)</title><rect x="449.9" y="451.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="452.9" y="462.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.04%)</title><rect x="450.4" y="483.0" width="0.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="453.4" y="494.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="450.4" y="467.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="453.4" y="478.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.04%)</title><rect x="450.4" y="451.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="453.4" y="462.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.04%)</title><rect x="450.4" y="435.0" width="0.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="453.4" y="446.0"></text>
</g>
<g>
<title>call_on_stack (1 samples, 0.04%)</title><rect x="450.4" y="419.0" width="0.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="453.4" y="430.0"></text>
</g>
<g>
<title>__do_softirq (1 samples, 0.04%)</title><rect x="450.4" y="403.0" width="0.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="453.4" y="414.0"></text>
</g>
<g>
<title>run_rebalance_domains (1 samples, 0.04%)</title><rect x="450.4" y="387.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="453.4" y="398.0"></text>
</g>
<g>
<title>rebalance_domains (1 samples, 0.04%)</title><rect x="450.4" y="371.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="453.4" y="382.0"></text>
</g>
<g>
<title>update_blocked_averages (1 samples, 0.04%)</title><rect x="450.4" y="355.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="453.4" y="366.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.04%)</title><rect x="450.4" y="339.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="453.4" y="350.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (1 samples, 0.04%)</title><rect x="450.9" y="483.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="453.9" y="494.0"></text>
</g>
<g>
<title>skb_clone (1 samples, 0.04%)</title><rect x="451.4" y="483.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="454.4" y="494.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (1 samples, 0.04%)</title><rect x="451.8" y="483.0" width="0.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="454.8" y="494.0"></text>
</g>
<g>
<title>tcp_rearm_rto (1 samples, 0.04%)</title><rect x="451.8" y="467.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="454.8" y="478.0"></text>
</g>
<g>
<title>tcp_rearm_rto.part.60 (1 samples, 0.04%)</title><rect x="451.8" y="451.0" width="0.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="454.8" y="462.0"></text>
</g>
<g>
<title>sk_reset_timer (1 samples, 0.04%)</title><rect x="451.8" y="435.0" width="0.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="454.8" y="446.0"></text>
</g>
<g>
<title>mod_timer (1 samples, 0.04%)</title><rect x="451.8" y="419.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="454.8" y="430.0"></text>
</g>
<g>
<title>lock_timer_base (1 samples, 0.04%)</title><rect x="451.8" y="403.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="454.8" y="414.0"></text>
</g>
<g>
<title>_raw_spin_lock_irqsave (1 samples, 0.04%)</title><rect x="451.8" y="387.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="454.8" y="398.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (3 samples, 0.12%)</title><rect x="452.3" y="483.0" width="1.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="455.3" y="494.0"></text>
</g>
<g>
<title>sk_reset_timer (1 samples, 0.04%)</title><rect x="453.3" y="467.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="456.3" y="478.0"></text>
</g>
<g>
<title>mod_timer (1 samples, 0.04%)</title><rect x="453.3" y="451.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="456.3" y="462.0"></text>
</g>
<g>
<title>tcp_send_mss (4 samples, 0.16%)</title><rect x="453.7" y="531.0" width="2.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="456.7" y="542.0"></text>
</g>
<g>
<title>tcp_current_mss (3 samples, 0.12%)</title><rect x="454.2" y="515.0" width="1.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="457.2" y="526.0"></text>
</g>
<g>
<title>security_socket_sendmsg (2 samples, 0.08%)</title><rect x="455.7" y="579.0" width="0.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="458.7" y="590.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (1 samples, 0.04%)</title><rect x="456.1" y="563.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="459.1" y="574.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (1 samples, 0.04%)</title><rect x="456.1" y="547.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="459.1" y="558.0"></text>
</g>
<g>
<title>aa_label_sk_perm (1 samples, 0.04%)</title><rect x="456.1" y="531.0" width="0.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="459.1" y="542.0"></text>
</g>
<g>
<title>fsnotify (5 samples, 0.20%)</title><rect x="456.6" y="643.0" width="2.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="459.6" y="654.0"></text>
</g>
<g>
<title>rw_verify_area (4 samples, 0.16%)</title><rect x="459.0" y="643.0" width="1.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="462.0" y="654.0"></text>
</g>
<g>
<title>apparmor_file_permission (1 samples, 0.04%)</title><rect x="459.0" y="627.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="462.0" y="638.0"></text>
</g>
<g>
<title>security_file_permission (3 samples, 0.12%)</title><rect x="459.5" y="627.0" width="1.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="462.5" y="638.0"></text>
</g>
<g>
<title>apparmor_file_permission (3 samples, 0.12%)</title><rect x="459.5" y="611.0" width="1.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="462.5" y="622.0"></text>
</g>
<g>
<title>common_file_perm (3 samples, 0.12%)</title><rect x="459.5" y="595.0" width="1.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="462.5" y="606.0"></text>
</g>
<g>
<title>__write (1 samples, 0.04%)</title><rect x="460.9" y="723.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="463.9" y="734.0"></text>
</g>
<g>
<title>convertReturnVal (1 samples, 0.04%)</title><rect x="461.4" y="723.0" width="0.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="464.4" y="734.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4 samples, 0.16%)</title><rect x="461.8" y="899.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="464.8" y="910.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 0.16%)</title><rect x="461.8" y="883.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="464.8" y="894.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (4 samples, 0.16%)</title><rect x="461.8" y="867.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="464.8" y="878.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (3 samples, 0.12%)</title><rect x="463.7" y="915.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="466.7" y="926.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ServiceImpl.entity (1,367 samples, 55.10%)</title><rect x="465.2" y="915.0" width="650.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="468.2" y="926.0">ru/mail/polis/service/dogm/ServiceImpl.entity</text>
</g>
<g>
<title>__vdso_gettimeofday (49 samples, 1.98%)</title><rect x="469.9" y="899.0" width="23.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="472.9" y="910.0">_..</text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (4 samples, 0.16%)</title><rect x="493.2" y="899.0" width="1.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="496.2" y="910.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.04%)</title><rect x="495.1" y="899.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="498.1" y="910.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.04%)</title><rect x="495.1" y="883.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="498.1" y="894.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="495.1" y="867.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="498.1" y="878.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="495.1" y="851.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="498.1" y="862.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="495.1" y="835.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="498.1" y="846.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.04%)</title><rect x="495.1" y="819.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="498.1" y="830.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (77 samples, 3.10%)</title><rect x="495.6" y="899.0" width="36.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="498.6" y="910.0">os:..</text>
</g>
<g>
<title>[unknown] (13 samples, 0.52%)</title><rect x="498.0" y="883.0" width="6.2" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="501.0" y="894.0"></text>
</g>
<g>
<title>__kernel_vsyscall (13 samples, 0.52%)</title><rect x="498.0" y="867.0" width="6.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="501.0" y="878.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (13 samples, 0.52%)</title><rect x="498.0" y="851.0" width="6.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="501.0" y="862.0"></text>
</g>
<g>
<title>__get_user_4 (2 samples, 0.08%)</title><rect x="498.0" y="835.0" width="0.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="501.0" y="846.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (11 samples, 0.44%)</title><rect x="498.9" y="835.0" width="5.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="501.9" y="846.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.08%)</title><rect x="504.2" y="883.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="507.2" y="894.0"></text>
</g>
<g>
<title>__kernel_vsyscall (45 samples, 1.81%)</title><rect x="505.1" y="883.0" width="21.4" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="508.1" y="894.0">_..</text>
</g>
<g>
<title>entry_SYSENTER_32 (38 samples, 1.53%)</title><rect x="508.4" y="867.0" width="18.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="511.4" y="878.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (31 samples, 1.25%)</title><rect x="508.4" y="851.0" width="14.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="511.4" y="862.0"></text>
</g>
<g>
<title>_copy_to_user (2 samples, 0.08%)</title><rect x="509.4" y="835.0" width="0.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="512.4" y="846.0"></text>
</g>
<g>
<title>do_gettimeofday (7 samples, 0.28%)</title><rect x="510.3" y="835.0" width="3.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="513.3" y="846.0"></text>
</g>
<g>
<title>sys_gettimeofday (20 samples, 0.81%)</title><rect x="513.7" y="835.0" width="9.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="516.7" y="846.0"></text>
</g>
<g>
<title>__getnstimeofday64 (3 samples, 0.12%)</title><rect x="515.1" y="819.0" width="1.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="518.1" y="830.0"></text>
</g>
<g>
<title>_copy_to_user (2 samples, 0.08%)</title><rect x="516.5" y="819.0" width="1.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="519.5" y="830.0"></text>
</g>
<g>
<title>__copy_user_ll (2 samples, 0.08%)</title><rect x="516.5" y="803.0" width="1.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="519.5" y="814.0"></text>
</g>
<g>
<title>do_gettimeofday (12 samples, 0.48%)</title><rect x="517.5" y="819.0" width="5.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="520.5" y="830.0"></text>
</g>
<g>
<title>__getnstimeofday64 (9 samples, 0.36%)</title><rect x="517.5" y="803.0" width="4.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="520.5" y="814.0"></text>
</g>
<g>
<title>kvm_clock_get_cycles (5 samples, 0.20%)</title><rect x="519.4" y="787.0" width="2.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="522.4" y="798.0"></text>
</g>
<g>
<title>pvclock_clocksource_read (5 samples, 0.20%)</title><rect x="519.4" y="771.0" width="2.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="522.4" y="782.0"></text>
</g>
<g>
<title>kvm_clock_get_cycles (3 samples, 0.12%)</title><rect x="521.8" y="803.0" width="1.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="524.8" y="814.0"></text>
</g>
<g>
<title>sys_gettimeofday (7 samples, 0.28%)</title><rect x="523.2" y="851.0" width="3.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="526.2" y="862.0"></text>
</g>
<g>
<title>__vdso_gettimeofday (11 samples, 0.44%)</title><rect x="526.5" y="883.0" width="5.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="529.5" y="894.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.04%)</title><rect x="531.7" y="883.0" width="0.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="534.7" y="894.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="531.7" y="867.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="534.7" y="878.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.04%)</title><rect x="531.7" y="851.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="534.7" y="862.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.04%)</title><rect x="531.7" y="835.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="534.7" y="846.0"></text>
</g>
<g>
<title>call_on_stack (1 samples, 0.04%)</title><rect x="531.7" y="819.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="534.7" y="830.0"></text>
</g>
<g>
<title>__do_softirq (1 samples, 0.04%)</title><rect x="531.7" y="803.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="534.7" y="814.0"></text>
</g>
<g>
<title>rcu_process_callbacks (1 samples, 0.04%)</title><rect x="531.7" y="787.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="534.7" y="798.0"></text>
</g>
<g>
<title>rcu_report_qs_rnp (1 samples, 0.04%)</title><rect x="531.7" y="771.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="534.7" y="782.0"></text>
</g>
<g>
<title>rcu_gp_kthread_wake (1 samples, 0.04%)</title><rect x="531.7" y="755.0" width="0.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="534.7" y="766.0"></text>
</g>
<g>
<title>swake_up (1 samples, 0.04%)</title><rect x="531.7" y="739.0" width="0.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="534.7" y="750.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.04%)</title><rect x="531.7" y="723.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="534.7" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ServiceImpl.get (1,226 samples, 49.42%)</title><rect x="532.2" y="899.0" width="583.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="535.2" y="910.0">ru/mail/polis/service/dogm/ServiceImpl.get</text>
</g>
<g>
<title>OptoRuntime::handle_exception_C(JavaThread*) (3 samples, 0.12%)</title><rect x="532.2" y="883.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="535.2" y="894.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.04%)</title><rect x="532.2" y="867.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="535.2" y="878.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.04%)</title><rect x="532.2" y="851.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="535.2" y="862.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.04%)</title><rect x="532.2" y="835.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="535.2" y="846.0"></text>
</g>
<g>
<title>frame::frame(int*, int*, int*, unsigned char*) (1 samples, 0.04%)</title><rect x="532.7" y="867.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="535.7" y="878.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.04%)</title><rect x="533.2" y="867.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="536.2" y="878.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1 samples, 0.04%)</title><rect x="533.7" y="883.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="536.7" y="894.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.get (1,222 samples, 49.25%)</title><rect x="534.1" y="883.0" width="581.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="537.1" y="894.0">ru/mail/polis/dao/RocksDAO.get</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (4 samples, 0.16%)</title><rect x="535.1" y="867.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="538.1" y="878.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/29637593.invoke (4 samples, 0.16%)</title><rect x="535.1" y="851.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="538.1" y="862.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (3 samples, 0.12%)</title><rect x="535.1" y="835.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="538.1" y="846.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.newString (1 samples, 0.04%)</title><rect x="535.6" y="819.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="538.6" y="830.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.04%)</title><rect x="535.6" y="803.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="538.6" y="814.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (1 samples, 0.04%)</title><rect x="536.0" y="819.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="539.0" y="830.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (1 samples, 0.04%)</title><rect x="536.0" y="803.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="539.0" y="814.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/20776818.invoke (1 samples, 0.04%)</title><rect x="536.5" y="835.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="539.5" y="846.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.04%)</title><rect x="536.5" y="819.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="539.5" y="830.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.prepend (1 samples, 0.04%)</title><rect x="536.5" y="803.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="539.5" y="814.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.04%)</title><rect x="536.5" y="787.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="539.5" y="798.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.04%)</title><rect x="536.5" y="771.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="539.5" y="782.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.04%)</title><rect x="536.5" y="755.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="539.5" y="766.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.04%)</title><rect x="536.5" y="739.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="539.5" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.toString (2 samples, 0.08%)</title><rect x="537.0" y="867.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="540.0" y="878.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.append (1 samples, 0.04%)</title><rect x="537.0" y="851.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="540.0" y="862.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.04%)</title><rect x="537.0" y="835.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="540.0" y="846.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.04%)</title><rect x="537.0" y="819.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="540.0" y="830.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.04%)</title><rect x="537.0" y="803.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="540.0" y="814.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.toString (1 samples, 0.04%)</title><rect x="537.5" y="851.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="540.5" y="862.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (1,211 samples, 48.81%)</title><rect x="537.9" y="867.0" width="576.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="540.9" y="878.0">org/rocksdb/RocksDB.get</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (1,208 samples, 48.69%)</title><rect x="539.4" y="851.0" width="574.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="542.4" y="862.0">org/rocksdb/RocksDB.get</text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (1 samples, 0.04%)</title><rect x="539.4" y="835.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="542.4" y="846.0"></text>
</g>
<g>
<title>I2C/C2I adapters (12 samples, 0.48%)</title><rect x="539.8" y="835.0" width="5.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="542.8" y="846.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (916 samples, 36.92%)</title><rect x="545.5" y="835.0" width="435.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="548.5" y="846.0">Java_org_rocksdb_RocksDB_get__J_3BII</text>
</g>
<g>
<title>/usr/lib/i386-linux-gnu/libstdc++.so.6.0.25 (1 samples, 0.04%)</title><rect x="547.0" y="819.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="550.0" y="830.0"></text>
</g>
<g>
<title>free (3 samples, 0.12%)</title><rect x="547.4" y="819.0" width="1.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="550.4" y="830.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.04%)</title><rect x="548.4" y="803.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="551.4" y="814.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.04%)</title><rect x="548.4" y="787.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="551.4" y="798.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.04%)</title><rect x="548.4" y="771.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="551.4" y="782.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.08%)</title><rect x="548.9" y="819.0" width="0.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="551.9" y="830.0"></text>
</g>
<g>
<title>malloc (3 samples, 0.12%)</title><rect x="549.8" y="819.0" width="1.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="552.8" y="830.0"></text>
</g>
<g>
<title>operator delete(void*) (1 samples, 0.04%)</title><rect x="551.2" y="819.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="554.2" y="830.0"></text>
</g>
<g>
<title>operator new(unsigned int) (1 samples, 0.04%)</title><rect x="551.7" y="819.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="554.7" y="830.0"></text>
</g>
<g>
<title>operator new[](unsigned int) (3 samples, 0.12%)</title><rect x="552.2" y="819.0" width="1.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="555.2" y="830.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, std::string*) (2 samples, 0.08%)</title><rect x="553.6" y="819.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="556.6" y="830.0"></text>
</g>
<g>
<title>rocksdb::JniUtil::createJavaByteArrayWithSizeCheck(JNIEnv_*, char const*, unsigned int) (3 samples, 0.12%)</title><rect x="554.6" y="819.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="557.6" y="830.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.04%)</title><rect x="555.5" y="803.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="558.5" y="814.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.04%)</title><rect x="555.5" y="787.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="558.5" y="798.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.04%)</title><rect x="555.5" y="771.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="558.5" y="782.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (891 samples, 35.91%)</title><rect x="556.0" y="819.0" width="423.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="559.0" y="830.0">rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOp..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;CardTableBarrierSet::AccessBarrier&lt;1097812ull, CardTableBarrierSet&gt;, (AccessInternal::BarrierType)2, 1097812ull&gt;::oop_access_barrier(void*) (2 samples, 0.08%)</title><rect x="557.4" y="803.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="560.4" y="814.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.04%)</title><rect x="558.4" y="803.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="561.4" y="814.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.04%)</title><rect x="558.9" y="803.0" width="0.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="561.9" y="814.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.04%)</title><rect x="558.9" y="787.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="561.9" y="798.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (8 samples, 0.32%)</title><rect x="559.3" y="803.0" width="3.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="562.3" y="814.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.04%)</title><rect x="559.3" y="787.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="562.3" y="798.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.04%)</title><rect x="559.8" y="787.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="562.8" y="798.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.04%)</title><rect x="560.3" y="787.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="563.3" y="798.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.04%)</title><rect x="560.8" y="787.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="563.8" y="798.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (4 samples, 0.16%)</title><rect x="561.2" y="787.0" width="1.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="564.2" y="798.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (4 samples, 0.16%)</title><rect x="561.2" y="771.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="564.2" y="782.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, std::string*) (873 samples, 35.19%)</title><rect x="563.1" y="803.0" width="415.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="566.1" y="814.0">rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::Sl..</text>
</g>
<g>
<title>rocksdb::Cleanable::Cleanable() (3 samples, 0.12%)</title><rect x="563.1" y="787.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="566.1" y="798.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, std::string*) (869 samples, 35.03%)</title><rect x="564.6" y="787.0" width="413.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="567.6" y="798.0">rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::Co..</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (867 samples, 34.95%)</title><rect x="564.6" y="771.0" width="412.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="567.6" y="782.0">rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksd..</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (3 samples, 0.12%)</title><rect x="565.0" y="755.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="568.0" y="766.0"></text>
</g>
<g>
<title>___tls_get_addr (2 samples, 0.08%)</title><rect x="566.5" y="755.0" width="0.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="569.5" y="766.0"></text>
</g>
<g>
<title>_init (1 samples, 0.04%)</title><rect x="567.4" y="755.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="570.4" y="766.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::cfd() const (1 samples, 0.04%)</title><rect x="567.9" y="755.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="570.9" y="766.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetAndRefSuperVersion(rocksdb::ColumnFamilyData*) (2 samples, 0.08%)</title><rect x="568.4" y="755.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="571.4" y="766.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (854 samples, 34.42%)</title><rect x="569.3" y="755.0" width="406.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="572.3" y="766.0">rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, ro..</text>
</g>
<g>
<title>/lib/i386-linux-gnu/ld-2.27.so (3 samples, 0.12%)</title><rect x="572.7" y="739.0" width="1.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="575.7" y="750.0"></text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (1 samples, 0.04%)</title><rect x="574.1" y="739.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="577.1" y="750.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni17072222630024017723.so (1 samples, 0.04%)</title><rect x="574.6" y="739.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="577.6" y="750.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (3 samples, 0.12%)</title><rect x="575.0" y="739.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="578.0" y="750.0"></text>
</g>
<g>
<title>___tls_get_addr (3 samples, 0.12%)</title><rect x="576.5" y="739.0" width="1.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="579.5" y="750.0"></text>
</g>
<g>
<title>_init (1 samples, 0.04%)</title><rect x="577.9" y="739.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="580.9" y="750.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (3 samples, 0.12%)</title><rect x="578.4" y="739.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="581.4" y="750.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (1 samples, 0.04%)</title><rect x="579.8" y="739.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="582.8" y="750.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetAndRefSuperVersion(rocksdb::ColumnFamilyData*) (8 samples, 0.32%)</title><rect x="580.3" y="739.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="583.3" y="750.0"></text>
</g>
<g>
<title>_init (1 samples, 0.04%)</title><rect x="580.3" y="723.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="583.3" y="734.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (6 samples, 0.24%)</title><rect x="580.7" y="723.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="583.7" y="734.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (1 samples, 0.04%)</title><rect x="581.2" y="707.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="584.2" y="718.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (1 samples, 0.04%)</title><rect x="581.7" y="707.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="584.7" y="718.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (3 samples, 0.12%)</title><rect x="582.2" y="707.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="585.2" y="718.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (1 samples, 0.04%)</title><rect x="582.2" y="691.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="585.2" y="702.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() (2 samples, 0.08%)</title><rect x="582.6" y="691.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="585.6" y="702.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (1 samples, 0.04%)</title><rect x="583.6" y="723.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="586.6" y="734.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::ReturnAndCleanupSuperVersion(rocksdb::ColumnFamilyData*, rocksdb::SuperVersion*) (5 samples, 0.20%)</title><rect x="584.1" y="739.0" width="2.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="587.1" y="750.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (3 samples, 0.12%)</title><rect x="584.1" y="723.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="587.1" y="734.0"></text>
</g>
<g>
<title>_init (1 samples, 0.04%)</title><rect x="584.1" y="707.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="587.1" y="718.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::CompareAndSwap(void*, void*&amp;) (1 samples, 0.04%)</title><rect x="584.5" y="707.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="587.5" y="718.0"></text>
</g>
<g>
<title>_init (1 samples, 0.04%)</title><rect x="584.5" y="691.0" width="0.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="587.5" y="702.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (1 samples, 0.04%)</title><rect x="585.0" y="707.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="588.0" y="718.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::CompareAndSwap(void*, void*&amp;) (2 samples, 0.08%)</title><rect x="585.5" y="723.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="588.5" y="734.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (1 samples, 0.04%)</title><rect x="586.4" y="739.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="589.4" y="750.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (809 samples, 32.61%)</title><rect x="586.9" y="739.0" width="384.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="589.9" y="750.0">rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, st..</text>
</g>
<g>
<title>/tmp/librocksdbjni17072222630024017723.so (803 samples, 32.37%)</title><rect x="587.9" y="723.0" width="381.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="590.9" y="734.0">/tmp/librocksdbjni17072222630024017723.so</text>
</g>
<g>
<title>/tmp/librocksdbjni17072222630024017723.so (23 samples, 0.93%)</title><rect x="588.8" y="707.0" width="11.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="591.8" y="718.0"></text>
</g>
<g>
<title>rocksdb::Comparator::Equal(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (21 samples, 0.85%)</title><rect x="589.8" y="691.0" width="10.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="592.8" y="702.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (21 samples, 0.85%)</title><rect x="589.8" y="675.0" width="10.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="592.8" y="686.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (4 samples, 0.16%)</title><rect x="589.8" y="659.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="592.8" y="670.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (4 samples, 0.16%)</title><rect x="589.8" y="643.0" width="1.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="592.8" y="654.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.04%)</title><rect x="589.8" y="627.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="592.8" y="638.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.141] (3 samples, 0.12%)</title><rect x="590.2" y="627.0" width="1.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="593.2" y="638.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.04%)</title><rect x="590.7" y="611.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="593.7" y="622.0"></text>
</g>
<g>
<title>.L409 (1 samples, 0.04%)</title><rect x="590.7" y="595.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="593.7" y="606.0"></text>
</g>
<g>
<title>JNIHandleBlock::release_block(JNIHandleBlock*, Thread*) (1 samples, 0.04%)</title><rect x="590.7" y="579.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="593.7" y="590.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.04%)</title><rect x="590.7" y="563.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="593.7" y="574.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.04%)</title><rect x="590.7" y="547.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="593.7" y="558.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.04%)</title><rect x="590.7" y="531.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="593.7" y="542.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.04%)</title><rect x="591.2" y="611.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="594.2" y="622.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (8 samples, 0.32%)</title><rect x="591.7" y="659.0" width="3.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="594.7" y="670.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (8 samples, 0.32%)</title><rect x="591.7" y="643.0" width="3.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="594.7" y="654.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.141] (8 samples, 0.32%)</title><rect x="591.7" y="627.0" width="3.8" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="594.7" y="638.0"></text>
</g>
<g>
<title>.L347 (1 samples, 0.04%)</title><rect x="591.7" y="611.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="594.7" y="622.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (3 samples, 0.12%)</title><rect x="592.2" y="611.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="595.2" y="622.0"></text>
</g>
<g>
<title>.L409 (3 samples, 0.12%)</title><rect x="592.2" y="595.0" width="1.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="595.2" y="606.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (3 samples, 0.12%)</title><rect x="592.2" y="579.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="595.2" y="590.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.04%)</title><rect x="593.6" y="611.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="596.6" y="622.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (1 samples, 0.04%)</title><rect x="594.1" y="611.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="597.1" y="622.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.04%)</title><rect x="594.5" y="611.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="597.5" y="622.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.04%)</title><rect x="595.0" y="611.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="598.0" y="622.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.04%)</title><rect x="595.0" y="595.0" width="0.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="598.0" y="606.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.04%)</title><rect x="595.0" y="579.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="598.0" y="590.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_lock (1 samples, 0.04%)</title><rect x="595.5" y="659.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="598.5" y="670.0"></text>
</g>
<g>
<title>__kernel_vsyscall (5 samples, 0.20%)</title><rect x="596.0" y="659.0" width="2.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="599.0" y="670.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (4 samples, 0.16%)</title><rect x="596.4" y="643.0" width="1.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="599.4" y="654.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (4 samples, 0.16%)</title><rect x="596.4" y="627.0" width="1.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="599.4" y="638.0"></text>
</g>
<g>
<title>sys_futex (4 samples, 0.16%)</title><rect x="596.4" y="611.0" width="1.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="599.4" y="622.0"></text>
</g>
<g>
<title>do_futex (4 samples, 0.16%)</title><rect x="596.4" y="595.0" width="1.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="599.4" y="606.0"></text>
</g>
<g>
<title>futex_wake (4 samples, 0.16%)</title><rect x="596.4" y="579.0" width="1.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="599.4" y="590.0"></text>
</g>
<g>
<title>__raw_callee_save___pv_queued_spin_unlock (1 samples, 0.04%)</title><rect x="596.4" y="563.0" width="0.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="599.4" y="574.0"></text>
</g>
<g>
<title>__pv_queued_spin_unlock (1 samples, 0.04%)</title><rect x="596.4" y="547.0" width="0.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="599.4" y="558.0"></text>
</g>
<g>
<title>wake_up_q (3 samples, 0.12%)</title><rect x="596.9" y="563.0" width="1.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="599.9" y="574.0"></text>
</g>
<g>
<title>try_to_wake_up (3 samples, 0.12%)</title><rect x="596.9" y="547.0" width="1.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="599.9" y="558.0"></text>
</g>
<g>
<title>__lock_text_start (3 samples, 0.12%)</title><rect x="596.9" y="531.0" width="1.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="599.9" y="542.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.04%)</title><rect x="598.3" y="659.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="601.3" y="670.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.04%)</title><rect x="598.3" y="643.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="601.3" y="654.0"></text>
</g>
<g>
<title>jni_GetEnv (1 samples, 0.04%)</title><rect x="598.8" y="659.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="601.8" y="670.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (1 samples, 0.04%)</title><rect x="599.3" y="659.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="602.3" y="670.0"></text>
</g>
<g>
<title>jni_GetEnv (1 samples, 0.04%)</title><rect x="599.3" y="643.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="602.3" y="654.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::FindGreaterOrEqual(char const*) const (773 samples, 31.16%)</title><rect x="599.8" y="707.0" width="367.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="602.8" y="718.0">rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyC..</text>
</g>
<g>
<title>/lib/i386-linux-gnu/ld-2.27.so (4 samples, 0.16%)</title><rect x="609.8" y="691.0" width="1.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="612.8" y="702.0"></text>
</g>
<g>
<title>___tls_get_addr (6 samples, 0.24%)</title><rect x="611.7" y="691.0" width="2.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="614.7" y="702.0"></text>
</g>
<g>
<title>resume_userspace (4 samples, 0.16%)</title><rect x="614.5" y="691.0" width="1.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="617.5" y="702.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (4 samples, 0.16%)</title><rect x="614.5" y="675.0" width="1.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="617.5" y="686.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (4 samples, 0.16%)</title><rect x="614.5" y="659.0" width="1.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="617.5" y="670.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.04%)</title><rect x="615.9" y="643.0" width="0.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="618.9" y="654.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.04%)</title><rect x="615.9" y="627.0" width="0.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="618.9" y="638.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.04%)</title><rect x="615.9" y="611.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="618.9" y="622.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (738 samples, 29.75%)</title><rect x="616.4" y="691.0" width="351.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="619.4" y="702.0">rocksdb::MemTable::KeyComparator::operator()(cha..</text>
</g>
<g>
<title>/lib/i386-linux-gnu/ld-2.27.so (1 samples, 0.04%)</title><rect x="619.7" y="675.0" width="0.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="622.7" y="686.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.04%)</title><rect x="620.2" y="675.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="623.2" y="686.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (3 samples, 0.12%)</title><rect x="620.7" y="675.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="623.7" y="686.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (1 samples, 0.04%)</title><rect x="622.1" y="675.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="625.1" y="686.0"></text>
</g>
<g>
<title>___tls_get_addr (1 samples, 0.04%)</title><rect x="622.6" y="675.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="625.6" y="686.0"></text>
</g>
<g>
<title>_init (1 samples, 0.04%)</title><rect x="623.1" y="675.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="626.1" y="686.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (4 samples, 0.16%)</title><rect x="623.5" y="675.0" width="1.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="626.5" y="686.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.04%)</title><rect x="625.4" y="675.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="628.4" y="686.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.04%)</title><rect x="625.4" y="659.0" width="0.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="628.4" y="670.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.04%)</title><rect x="625.4" y="643.0" width="0.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="628.4" y="654.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (708 samples, 28.54%)</title><rect x="625.9" y="675.0" width="336.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="628.9" y="686.0">rocksdb::BaseComparatorJniCallback::Compare(ro..</text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (4 samples, 0.16%)</title><rect x="629.3" y="659.0" width="1.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="632.3" y="670.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (128 samples, 5.16%)</title><rect x="631.2" y="659.0" width="60.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="634.2" y="670.0">JNIEnv..</text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.04%)</title><rect x="631.6" y="643.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="634.6" y="654.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.dx (2 samples, 0.08%)</title><rect x="632.1" y="643.0" width="1.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="635.1" y="654.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (124 samples, 5.00%)</title><rect x="633.1" y="643.0" width="58.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="636.1" y="654.0">jni_Ca..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;CardTableBarrierSet::AccessBarrier&lt;1097812ull, CardTableBarrierSet&gt;, (AccessInternal::BarrierType)2, 1097812ull&gt;::oop_access_barrier(void*) (2 samples, 0.08%)</title><rect x="636.9" y="627.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="639.9" y="638.0"></text>
</g>
<g>
<title>Klass::method_at_vtable(int) (3 samples, 0.12%)</title><rect x="637.8" y="627.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="640.8" y="638.0"></text>
</g>
<g>
<title>SignatureIterator::SignatureIterator(Symbol*) (1 samples, 0.04%)</title><rect x="639.2" y="627.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="642.2" y="638.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (4 samples, 0.16%)</title><rect x="639.7" y="627.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="642.7" y="638.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.158] (10 samples, 0.40%)</title><rect x="641.6" y="627.0" width="4.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="644.6" y="638.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.ax (1 samples, 0.04%)</title><rect x="646.4" y="627.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="649.4" y="638.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.141] (93 samples, 3.75%)</title><rect x="646.8" y="627.0" width="44.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="649.8" y="638.0">jni_..</text>
</g>
<g>
<title>.L344 (1 samples, 0.04%)</title><rect x="655.9" y="611.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="658.9" y="622.0"></text>
</g>
<g>
<title>.L347 (1 samples, 0.04%)</title><rect x="656.4" y="611.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="659.4" y="622.0"></text>
</g>
<g>
<title>.L357 (4 samples, 0.16%)</title><rect x="656.8" y="611.0" width="1.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="659.8" y="622.0"></text>
</g>
<g>
<title>Fingerprinter::fingerprint() (3 samples, 0.12%)</title><rect x="658.7" y="611.0" width="1.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="661.7" y="622.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (1 samples, 0.04%)</title><rect x="660.2" y="611.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="663.2" y="622.0"></text>
</g>
<g>
<title>JavaCallArguments::JavaCallArguments(int) (1 samples, 0.04%)</title><rect x="660.6" y="611.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="663.6" y="622.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (52 samples, 2.10%)</title><rect x="661.1" y="611.0" width="24.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="664.1" y="622.0">J..</text>
</g>
<g>
<title>.L409 (26 samples, 1.05%)</title><rect x="661.6" y="595.0" width="12.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="664.6" y="606.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;CardTableBarrierSet::AccessBarrier&lt;1097812ull, CardTableBarrierSet&gt;, (AccessInternal::BarrierType)2, 1097812ull&gt;::oop_access_barrier(void*) (1 samples, 0.04%)</title><rect x="663.5" y="579.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="666.5" y="590.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.04%)</title><rect x="664.0" y="579.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="667.0" y="590.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (2 samples, 0.08%)</title><rect x="664.4" y="579.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="667.4" y="590.0"></text>
</g>
<g>
<title>JNIHandleBlock::release_block(JNIHandleBlock*, Thread*) (1 samples, 0.04%)</title><rect x="665.4" y="579.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="668.4" y="590.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (4 samples, 0.16%)</title><rect x="665.9" y="579.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="668.9" y="590.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (11 samples, 0.44%)</title><rect x="667.8" y="579.0" width="5.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="670.8" y="590.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.04%)</title><rect x="671.1" y="563.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="674.1" y="574.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (1 samples, 0.04%)</title><rect x="671.6" y="563.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="674.6" y="574.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (2 samples, 0.08%)</title><rect x="672.1" y="563.0" width="0.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="675.1" y="574.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.04%)</title><rect x="673.0" y="579.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="676.0" y="590.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.04%)</title><rect x="673.5" y="579.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="676.5" y="590.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (1 samples, 0.04%)</title><rect x="674.0" y="595.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="677.0" y="606.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (16 samples, 0.64%)</title><rect x="674.4" y="595.0" width="7.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="677.4" y="606.0"></text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (4 samples, 0.16%)</title><rect x="678.7" y="579.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="681.7" y="590.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.04%)</title><rect x="680.6" y="579.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="683.6" y="590.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.04%)</title><rect x="681.1" y="579.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="684.1" y="590.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.04%)</title><rect x="681.6" y="579.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="684.6" y="590.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.04%)</title><rect x="681.6" y="563.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="684.6" y="574.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.04%)</title><rect x="681.6" y="547.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="684.6" y="558.0"></text>
</g>
<g>
<title>Method::is_empty_method() const (1 samples, 0.04%)</title><rect x="682.0" y="595.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="685.0" y="606.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.ax (2 samples, 0.08%)</title><rect x="682.5" y="595.0" width="1.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="685.5" y="606.0"></text>
</g>
<g>
<title>os::current_stack_pointer() (3 samples, 0.12%)</title><rect x="683.5" y="595.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="686.5" y="606.0"></text>
</g>
<g>
<title>os::os_exception_wrapper(void (*)(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*), JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.08%)</title><rect x="684.9" y="595.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="687.9" y="606.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.04%)</title><rect x="685.8" y="611.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="688.8" y="622.0"></text>
</g>
<g>
<title>SignatureIterator::SignatureIterator(Symbol*) (1 samples, 0.04%)</title><rect x="686.3" y="611.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="689.3" y="622.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.di (1 samples, 0.04%)</title><rect x="686.8" y="611.0" width="0.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="689.8" y="622.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (3 samples, 0.12%)</title><rect x="687.3" y="611.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="690.3" y="622.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (5 samples, 0.20%)</title><rect x="688.7" y="611.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="691.7" y="622.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (1 samples, 0.04%)</title><rect x="691.1" y="627.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="694.1" y="638.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;false&gt;(_jobject*) (1 samples, 0.04%)</title><rect x="691.6" y="627.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="694.6" y="638.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (283 samples, 11.41%)</title><rect x="692.0" y="659.0" width="134.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="695.0" y="670.0">JNIEnv_::CallVoid..</text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.158] (1 samples, 0.04%)</title><rect x="692.0" y="643.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="695.0" y="654.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.04%)</title><rect x="692.5" y="643.0" width="0.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="695.5" y="654.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.dx (3 samples, 0.12%)</title><rect x="693.0" y="643.0" width="1.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="696.0" y="654.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (276 samples, 11.12%)</title><rect x="694.4" y="643.0" width="131.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="697.4" y="654.0">jni_CallVoidMeth..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;CardTableBarrierSet::AccessBarrier&lt;1097812ull, CardTableBarrierSet&gt;, (AccessInternal::BarrierType)2, 1097812ull&gt;::oop_access_barrier(void*) (2 samples, 0.08%)</title><rect x="697.7" y="627.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="700.7" y="638.0"></text>
</g>
<g>
<title>Fingerprinter::fingerprint() (1 samples, 0.04%)</title><rect x="698.7" y="627.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="701.7" y="638.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (7 samples, 0.28%)</title><rect x="699.2" y="627.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="702.2" y="638.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.04%)</title><rect x="702.0" y="611.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="705.0" y="622.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.04%)</title><rect x="702.0" y="595.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="705.0" y="606.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.04%)</title><rect x="702.0" y="579.0" width="0.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="705.0" y="590.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.04%)</title><rect x="702.0" y="563.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="705.0" y="574.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.04%)</title><rect x="702.0" y="547.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="705.0" y="558.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.04%)</title><rect x="702.0" y="531.0" width="0.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="705.0" y="542.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.08%)</title><rect x="702.5" y="627.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="705.5" y="638.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long long) (1 samples, 0.04%)</title><rect x="703.4" y="627.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="706.4" y="638.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (3 samples, 0.12%)</title><rect x="703.9" y="627.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="706.9" y="638.0"></text>
</g>
<g>
<title>Klass::method_at_vtable(int) (3 samples, 0.12%)</title><rect x="705.3" y="627.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="708.3" y="638.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.04%)</title><rect x="706.8" y="627.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="709.8" y="638.0"></text>
</g>
<g>
<title>SignatureIterator::SignatureIterator(Symbol*) (1 samples, 0.04%)</title><rect x="707.3" y="627.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="710.3" y="638.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (8 samples, 0.32%)</title><rect x="707.7" y="627.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="710.7" y="638.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.158] (8 samples, 0.32%)</title><rect x="711.5" y="627.0" width="3.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="714.5" y="638.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.ax (3 samples, 0.12%)</title><rect x="715.3" y="627.0" width="1.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="718.3" y="638.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (3 samples, 0.12%)</title><rect x="716.8" y="627.0" width="1.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="719.8" y="638.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.141] (224 samples, 9.03%)</title><rect x="718.2" y="627.0" width="106.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="721.2" y="638.0">jni_invoke_no..</text>
</g>
<g>
<title>.L347 (12 samples, 0.48%)</title><rect x="731.5" y="611.0" width="5.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="734.5" y="622.0"></text>
</g>
<g>
<title>.L354 (8 samples, 0.32%)</title><rect x="737.2" y="611.0" width="3.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="740.2" y="622.0"></text>
</g>
<g>
<title>Fingerprinter::fingerprint() (10 samples, 0.40%)</title><rect x="741.0" y="611.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="744.0" y="622.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (4 samples, 0.16%)</title><rect x="745.8" y="611.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="748.8" y="622.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long long) (6 samples, 0.24%)</title><rect x="747.7" y="611.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="750.7" y="622.0"></text>
</g>
<g>
<title>JavaCallArguments::JavaCallArguments(int) (1 samples, 0.04%)</title><rect x="750.5" y="611.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="753.5" y="622.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (110 samples, 4.43%)</title><rect x="751.0" y="611.0" width="52.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="754.0" y="622.0">JavaC..</text>
</g>
<g>
<title>.L409 (55 samples, 2.22%)</title><rect x="752.4" y="595.0" width="26.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="755.4" y="606.0">...</text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (4 samples, 0.16%)</title><rect x="756.2" y="579.0" width="1.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="759.2" y="590.0"></text>
</g>
<g>
<title>HandleMark::~HandleMark() (2 samples, 0.08%)</title><rect x="758.1" y="579.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="761.1" y="590.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (4 samples, 0.16%)</title><rect x="759.1" y="579.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="762.1" y="590.0"></text>
</g>
<g>
<title>JNIHandleBlock::release_block(JNIHandleBlock*, Thread*) (4 samples, 0.16%)</title><rect x="761.0" y="579.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="764.0" y="590.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.04%)</title><rect x="762.4" y="563.0" width="0.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="765.4" y="574.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.04%)</title><rect x="762.4" y="547.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="765.4" y="558.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.04%)</title><rect x="762.4" y="531.0" width="0.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="765.4" y="542.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (6 samples, 0.24%)</title><rect x="762.9" y="579.0" width="2.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="765.9" y="590.0"></text>
</g>
<g>
<title>resume_userspace (2 samples, 0.08%)</title><rect x="764.8" y="563.0" width="1.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="767.8" y="574.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.08%)</title><rect x="764.8" y="547.0" width="1.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="767.8" y="558.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.08%)</title><rect x="764.8" y="531.0" width="1.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="767.8" y="542.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (22 samples, 0.89%)</title><rect x="765.8" y="579.0" width="10.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="768.8" y="590.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (3 samples, 0.12%)</title><rect x="771.9" y="563.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="774.9" y="574.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (3 samples, 0.12%)</title><rect x="773.4" y="563.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="776.4" y="574.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (3 samples, 0.12%)</title><rect x="774.8" y="563.0" width="1.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="777.8" y="574.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.04%)</title><rect x="775.7" y="547.0" width="0.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="778.7" y="558.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="775.7" y="531.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="778.7" y="542.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.04%)</title><rect x="775.7" y="515.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="778.7" y="526.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.04%)</title><rect x="775.7" y="499.0" width="0.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="778.7" y="510.0"></text>
</g>
<g>
<title>call_on_stack (1 samples, 0.04%)</title><rect x="775.7" y="483.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="778.7" y="494.0"></text>
</g>
<g>
<title>__do_softirq (1 samples, 0.04%)</title><rect x="775.7" y="467.0" width="0.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="778.7" y="478.0"></text>
</g>
<g>
<title>run_rebalance_domains (1 samples, 0.04%)</title><rect x="775.7" y="451.0" width="0.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="778.7" y="462.0"></text>
</g>
<g>
<title>rebalance_domains (1 samples, 0.04%)</title><rect x="775.7" y="435.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="778.7" y="446.0"></text>
</g>
<g>
<title>update_blocked_averages (1 samples, 0.04%)</title><rect x="775.7" y="419.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="778.7" y="430.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.04%)</title><rect x="775.7" y="403.0" width="0.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="778.7" y="414.0"></text>
</g>
<g>
<title>JavaThread::can_call_java() const (1 samples, 0.04%)</title><rect x="776.2" y="579.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="779.2" y="590.0"></text>
</g>
<g>
<title>Thread::current() (2 samples, 0.08%)</title><rect x="776.7" y="579.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="779.7" y="590.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (1 samples, 0.04%)</title><rect x="777.6" y="579.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="780.6" y="590.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.04%)</title><rect x="778.1" y="579.0" width="0.5" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="781.1" y="590.0"></text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (1 samples, 0.04%)</title><rect x="778.6" y="595.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="781.6" y="606.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (2 samples, 0.08%)</title><rect x="779.1" y="595.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="782.1" y="606.0"></text>
</g>
<g>
<title>HandleMark::~HandleMark() (1 samples, 0.04%)</title><rect x="780.0" y="595.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="783.0" y="606.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (4 samples, 0.16%)</title><rect x="780.5" y="595.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="783.5" y="606.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (3 samples, 0.12%)</title><rect x="782.4" y="595.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="785.4" y="606.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.04%)</title><rect x="783.3" y="579.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="786.3" y="590.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.04%)</title><rect x="783.3" y="563.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="786.3" y="574.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.04%)</title><rect x="783.3" y="547.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="786.3" y="558.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (31 samples, 1.25%)</title><rect x="783.8" y="595.0" width="14.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="786.8" y="606.0"></text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (2 samples, 0.08%)</title><rect x="790.5" y="579.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="793.5" y="590.0"></text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (6 samples, 0.24%)</title><rect x="791.4" y="579.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="794.4" y="590.0"></text>
</g>
<g>
<title>Method::is_empty_method() const (1 samples, 0.04%)</title><rect x="794.3" y="579.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="797.3" y="590.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (2 samples, 0.08%)</title><rect x="794.8" y="579.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="797.8" y="590.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (5 samples, 0.20%)</title><rect x="795.7" y="579.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="798.7" y="590.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.04%)</title><rect x="797.6" y="563.0" width="0.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="800.6" y="574.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.04%)</title><rect x="797.6" y="547.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="800.6" y="558.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.04%)</title><rect x="797.6" y="531.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="800.6" y="542.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.04%)</title><rect x="798.1" y="579.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="801.1" y="590.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.04%)</title><rect x="798.1" y="563.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="801.1" y="574.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.04%)</title><rect x="798.1" y="547.0" width="0.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="801.1" y="558.0"></text>
</g>
<g>
<title>Method::is_empty_method() const (1 samples, 0.04%)</title><rect x="798.6" y="595.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="801.6" y="606.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.ax (2 samples, 0.08%)</title><rect x="799.0" y="595.0" width="1.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="802.0" y="606.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.04%)</title><rect x="800.0" y="595.0" width="0.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="803.0" y="606.0"></text>
</g>
<g>
<title>os::current_stack_pointer() (4 samples, 0.16%)</title><rect x="800.5" y="595.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="803.5" y="606.0"></text>
</g>
<g>
<title>os::os_exception_wrapper(void (*)(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*), JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.08%)</title><rect x="802.4" y="595.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="805.4" y="606.0"></text>
</g>
<g>
<title>Klass::method_at_vtable(int) (1 samples, 0.04%)</title><rect x="803.3" y="611.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="806.3" y="622.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (14 samples, 0.56%)</title><rect x="803.8" y="611.0" width="6.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="806.8" y="622.0"></text>
</g>
<g>
<title>SignatureIterator::SignatureIterator(Symbol*) (1 samples, 0.04%)</title><rect x="810.5" y="611.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="813.5" y="622.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (6 samples, 0.24%)</title><rect x="810.9" y="611.0" width="2.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="813.9" y="622.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (5 samples, 0.20%)</title><rect x="813.8" y="611.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="816.8" y="622.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (13 samples, 0.52%)</title><rect x="816.2" y="611.0" width="6.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="819.2" y="622.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.04%)</title><rect x="821.9" y="595.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="824.9" y="606.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.04%)</title><rect x="821.9" y="579.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="824.9" y="590.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.04%)</title><rect x="821.9" y="563.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="824.9" y="574.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;false&gt;(_jobject*) (1 samples, 0.04%)</title><rect x="822.3" y="611.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="825.3" y="622.0"></text>
</g>
<g>
<title>os::os_exception_wrapper(void (*)(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*), JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.08%)</title><rect x="822.8" y="611.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="825.8" y="622.0"></text>
</g>
<g>
<title>resume_userspace (2 samples, 0.08%)</title><rect x="823.8" y="611.0" width="0.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="826.8" y="622.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.08%)</title><rect x="823.8" y="595.0" width="0.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="826.8" y="606.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.08%)</title><rect x="823.8" y="579.0" width="0.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="826.8" y="590.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (1 samples, 0.04%)</title><rect x="824.7" y="627.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="827.7" y="638.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.04%)</title><rect x="824.7" y="611.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="827.7" y="622.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.04%)</title><rect x="824.7" y="595.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="827.7" y="606.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.04%)</title><rect x="824.7" y="579.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="827.7" y="590.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;false&gt;(_jobject*) (1 samples, 0.04%)</title><rect x="825.2" y="627.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="828.2" y="638.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.04%)</title><rect x="825.2" y="611.0" width="0.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="828.2" y="622.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.04%)</title><rect x="825.2" y="595.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="828.2" y="606.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.04%)</title><rect x="825.2" y="579.0" width="0.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="828.2" y="590.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.141] (2 samples, 0.08%)</title><rect x="825.7" y="643.0" width="0.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="828.7" y="654.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.04%)</title><rect x="826.2" y="627.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="829.2" y="638.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.04%)</title><rect x="826.2" y="611.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="829.2" y="622.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.04%)</title><rect x="826.2" y="595.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="829.2" y="606.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.04%)</title><rect x="826.2" y="579.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="829.2" y="590.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.04%)</title><rect x="826.2" y="563.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="829.2" y="574.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.04%)</title><rect x="826.2" y="547.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="829.2" y="558.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.158] (2 samples, 0.08%)</title><rect x="826.6" y="659.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="829.6" y="670.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_lock (9 samples, 0.36%)</title><rect x="827.6" y="659.0" width="4.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="830.6" y="670.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.04%)</title><rect x="831.4" y="643.0" width="0.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="834.4" y="654.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.04%)</title><rect x="831.4" y="627.0" width="0.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="834.4" y="638.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.04%)</title><rect x="831.4" y="611.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="834.4" y="622.0"></text>
</g>
<g>
<title>__kernel_vsyscall (204 samples, 8.22%)</title><rect x="831.9" y="659.0" width="97.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="834.9" y="670.0">__kernel_vs..</text>
</g>
<g>
<title>entry_SYSENTER_32 (203 samples, 8.18%)</title><rect x="832.3" y="643.0" width="96.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="835.3" y="654.0">entry_SYSEN..</text>
</g>
<g>
<title>do_fast_syscall_32 (203 samples, 8.18%)</title><rect x="832.3" y="627.0" width="96.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="835.3" y="638.0">do_fast_sys..</text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.04%)</title><rect x="832.3" y="611.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="835.3" y="622.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.04%)</title><rect x="832.3" y="595.0" width="0.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="835.3" y="606.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.04%)</title><rect x="832.3" y="579.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="835.3" y="590.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.04%)</title><rect x="832.3" y="563.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="835.3" y="574.0"></text>
</g>
<g>
<title>sys_futex (202 samples, 8.14%)</title><rect x="832.8" y="611.0" width="96.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="835.8" y="622.0">sys_futex</text>
</g>
<g>
<title>do_futex (201 samples, 8.10%)</title><rect x="832.8" y="595.0" width="95.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="835.8" y="606.0">do_futex</text>
</g>
<g>
<title>futex_wait (19 samples, 0.77%)</title><rect x="832.8" y="579.0" width="9.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="835.8" y="590.0"></text>
</g>
<g>
<title>futex_wait_queue_me (19 samples, 0.77%)</title><rect x="832.8" y="563.0" width="9.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="835.8" y="574.0"></text>
</g>
<g>
<title>schedule (19 samples, 0.77%)</title><rect x="832.8" y="547.0" width="9.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="835.8" y="558.0"></text>
</g>
<g>
<title>__sched_text_start (19 samples, 0.77%)</title><rect x="832.8" y="531.0" width="9.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="835.8" y="542.0"></text>
</g>
<g>
<title>finish_task_switch (19 samples, 0.77%)</title><rect x="832.8" y="515.0" width="9.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="835.8" y="526.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.04%)</title><rect x="841.4" y="499.0" width="0.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="844.4" y="510.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="841.4" y="483.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="844.4" y="494.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.04%)</title><rect x="841.4" y="467.0" width="0.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="844.4" y="478.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.04%)</title><rect x="841.4" y="451.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="844.4" y="462.0"></text>
</g>
<g>
<title>call_on_stack (1 samples, 0.04%)</title><rect x="841.4" y="435.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="844.4" y="446.0"></text>
</g>
<g>
<title>__do_softirq (1 samples, 0.04%)</title><rect x="841.4" y="419.0" width="0.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="844.4" y="430.0"></text>
</g>
<g>
<title>futex_wake (181 samples, 7.30%)</title><rect x="841.9" y="579.0" width="86.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="844.9" y="590.0">futex_wake</text>
</g>
<g>
<title>mark_wake_futex (1 samples, 0.04%)</title><rect x="841.9" y="563.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="844.9" y="574.0"></text>
</g>
<g>
<title>wake_q_add (1 samples, 0.04%)</title><rect x="841.9" y="547.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="844.9" y="558.0"></text>
</g>
<g>
<title>wake_up_q (180 samples, 7.26%)</title><rect x="842.3" y="563.0" width="85.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="845.3" y="574.0">wake_up_q</text>
</g>
<g>
<title>try_to_wake_up (180 samples, 7.26%)</title><rect x="842.3" y="547.0" width="85.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="845.3" y="558.0">try_to_wak..</text>
</g>
<g>
<title>__lock_text_start (180 samples, 7.26%)</title><rect x="842.3" y="531.0" width="85.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="845.3" y="542.0">__lock_tex..</text>
</g>
<g>
<title>wake_up_q (1 samples, 0.04%)</title><rect x="927.9" y="579.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="930.9" y="590.0"></text>
</g>
<g>
<title>futex_wait (1 samples, 0.04%)</title><rect x="928.4" y="595.0" width="0.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="931.4" y="606.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (4 samples, 0.16%)</title><rect x="928.9" y="659.0" width="1.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="931.9" y="670.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.04%)</title><rect x="930.8" y="659.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="933.8" y="670.0"></text>
</g>
<g>
<title>_init (1 samples, 0.04%)</title><rect x="931.3" y="659.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="934.3" y="670.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (1 samples, 0.04%)</title><rect x="931.7" y="659.0" width="0.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="934.7" y="670.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (1 samples, 0.04%)</title><rect x="932.2" y="659.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="935.2" y="670.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (34 samples, 1.37%)</title><rect x="932.7" y="659.0" width="16.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="935.7" y="670.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (2 samples, 0.08%)</title><rect x="935.5" y="643.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="938.5" y="654.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (14 samples, 0.56%)</title><rect x="936.5" y="643.0" width="6.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="939.5" y="654.0"></text>
</g>
<g>
<title>resume_userspace (2 samples, 0.08%)</title><rect x="942.2" y="627.0" width="1.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="945.2" y="638.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.08%)</title><rect x="942.2" y="611.0" width="1.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="945.2" y="622.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.08%)</title><rect x="942.2" y="595.0" width="1.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="945.2" y="606.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.158] (8 samples, 0.32%)</title><rect x="943.2" y="643.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="946.2" y="654.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (3 samples, 0.12%)</title><rect x="947.0" y="643.0" width="1.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="950.0" y="654.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.04%)</title><rect x="948.4" y="643.0" width="0.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="951.4" y="654.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.04%)</title><rect x="948.4" y="627.0" width="0.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="951.4" y="638.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.04%)</title><rect x="948.4" y="611.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="951.4" y="622.0"></text>
</g>
<g>
<title>jni_GetEnv (6 samples, 0.24%)</title><rect x="948.9" y="659.0" width="2.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="951.9" y="670.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (9 samples, 0.36%)</title><rect x="951.7" y="659.0" width="4.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="954.7" y="670.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.04%)</title><rect x="955.5" y="643.0" width="0.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="958.5" y="654.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.04%)</title><rect x="955.5" y="627.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="958.5" y="638.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.04%)</title><rect x="955.5" y="611.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="958.5" y="622.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (10 samples, 0.40%)</title><rect x="956.0" y="659.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="959.0" y="670.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (2 samples, 0.08%)</title><rect x="957.4" y="643.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="960.4" y="654.0"></text>
</g>
<g>
<title>Threads::is_supported_jni_version_including_1_1(int) (3 samples, 0.12%)</title><rect x="958.4" y="643.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="961.4" y="654.0"></text>
</g>
<g>
<title>jni_GetEnv (2 samples, 0.08%)</title><rect x="959.8" y="643.0" width="1.0" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="962.8" y="654.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (1 samples, 0.04%)</title><rect x="960.8" y="659.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="963.8" y="670.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() (3 samples, 0.12%)</title><rect x="961.2" y="659.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="964.2" y="670.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (1 samples, 0.04%)</title><rect x="962.7" y="675.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="965.7" y="686.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::releaseJniEnv(unsigned char&amp;) const (2 samples, 0.08%)</title><rect x="963.1" y="675.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="966.1" y="686.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (4 samples, 0.16%)</title><rect x="964.1" y="675.0" width="1.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="967.1" y="686.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.04%)</title><rect x="965.5" y="659.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="968.5" y="670.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.04%)</title><rect x="965.5" y="643.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="968.5" y="654.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.04%)</title><rect x="965.5" y="627.0" width="0.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="968.5" y="638.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() (3 samples, 0.12%)</title><rect x="966.0" y="675.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="969.0" y="686.0"></text>
</g>
<g>
<title>rocksdb::UnPackSequenceAndType(unsigned long long, unsigned long long*, rocksdb::ValueType*) (1 samples, 0.04%)</title><rect x="967.4" y="707.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="970.4" y="718.0"></text>
</g>
<g>
<title>std::string::_M_replace_safe(unsigned int, unsigned int, char const*, unsigned int) (3 samples, 0.12%)</title><rect x="967.9" y="707.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="970.9" y="718.0"></text>
</g>
<g>
<title>std::string::assign(char const*, unsigned int) (1 samples, 0.04%)</title><rect x="969.3" y="707.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="972.3" y="718.0"></text>
</g>
<g>
<title>_init (1 samples, 0.04%)</title><rect x="969.8" y="723.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="972.8" y="734.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.04%)</title><rect x="969.8" y="707.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="972.8" y="718.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.04%)</title><rect x="969.8" y="691.0" width="0.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="972.8" y="702.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.04%)</title><rect x="969.8" y="675.0" width="0.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="972.8" y="686.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::FindGreaterOrEqual(char const*) const (2 samples, 0.08%)</title><rect x="970.3" y="723.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="973.3" y="734.0"></text>
</g>
<g>
<title>rocksdb::MemTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;, unsigned long long) (1 samples, 0.04%)</title><rect x="971.2" y="723.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="974.2" y="734.0"></text>
</g>
<g>
<title>rocksdb::MemTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;, unsigned long long) (2 samples, 0.08%)</title><rect x="971.7" y="739.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="974.7" y="750.0"></text>
</g>
<g>
<title>rocksdb::PackSequenceAndType(unsigned long long, rocksdb::ValueType) (2 samples, 0.08%)</title><rect x="972.6" y="739.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="975.6" y="750.0"></text>
</g>
<g>
<title>rocksdb::PinnedIteratorsManager::~PinnedIteratorsManager() (2 samples, 0.08%)</title><rect x="973.6" y="739.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="976.6" y="750.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (2 samples, 0.08%)</title><rect x="974.5" y="739.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="977.5" y="750.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (2 samples, 0.08%)</title><rect x="975.5" y="755.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="978.5" y="766.0"></text>
</g>
<g>
<title>rocksdb::StopWatch::~StopWatch() (1 samples, 0.04%)</title><rect x="976.4" y="755.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="979.4" y="766.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (2 samples, 0.08%)</title><rect x="976.9" y="771.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="979.9" y="782.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (1 samples, 0.04%)</title><rect x="977.9" y="787.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="980.9" y="798.0"></text>
</g>
<g>
<title>rocksdb::JniUtil::createJavaByteArrayWithSizeCheck(JNIEnv_*, char const*, unsigned int) (1 samples, 0.04%)</title><rect x="978.4" y="803.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="981.4" y="814.0"></text>
</g>
<g>
<title>jni_NewByteArray (1 samples, 0.04%)</title><rect x="978.4" y="787.0" width="0.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="981.4" y="798.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.04%)</title><rect x="978.4" y="771.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="981.4" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.04%)</title><rect x="978.4" y="755.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="981.4" y="766.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.04%)</title><rect x="978.4" y="739.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="981.4" y="750.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned int) (2 samples, 0.08%)</title><rect x="978.8" y="803.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="981.8" y="814.0"></text>
</g>
<g>
<title>std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string(std::string const&amp;) (1 samples, 0.04%)</title><rect x="979.8" y="819.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="982.8" y="830.0"></text>
</g>
<g>
<title>std::string::_Rep::_M_destroy(std::allocator&lt;char&gt; const&amp;) (2 samples, 0.08%)</title><rect x="980.3" y="819.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="983.3" y="830.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.24%)</title><rect x="981.2" y="835.0" width="2.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="984.2" y="846.0"></text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (1 samples, 0.04%)</title><rect x="981.2" y="819.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="984.2" y="830.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="981.7" y="819.0" width="0.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="984.7" y="830.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.04%)</title><rect x="981.7" y="803.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="984.7" y="814.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.08%)</title><rect x="982.2" y="819.0" width="0.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="985.2" y="830.0"></text>
</g>
<g>
<title>std::string::_M_mutate(unsigned int, unsigned int, unsigned int) (2 samples, 0.08%)</title><rect x="983.1" y="819.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="986.1" y="830.0"></text>
</g>
<g>
<title>call_stub (18 samples, 0.73%)</title><rect x="984.1" y="835.0" width="8.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="987.1" y="846.0"></text>
</g>
<g>
<title>resume_userspace (2 samples, 0.08%)</title><rect x="991.7" y="819.0" width="0.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="994.7" y="830.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.08%)</title><rect x="991.7" y="803.0" width="0.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="994.7" y="814.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.08%)</title><rect x="991.7" y="787.0" width="0.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="994.7" y="798.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.04%)</title><rect x="992.1" y="771.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="995.1" y="782.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.04%)</title><rect x="992.1" y="755.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="995.1" y="766.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.04%)</title><rect x="992.1" y="739.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="995.1" y="750.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.08%)</title><rect x="992.6" y="835.0" width="1.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="995.6" y="846.0"></text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.setNativeHandle (20 samples, 0.81%)</title><rect x="993.6" y="835.0" width="9.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="996.6" y="846.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.04%)</title><rect x="1002.6" y="819.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1005.6" y="830.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.04%)</title><rect x="1002.6" y="803.0" width="0.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1005.6" y="814.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.04%)</title><rect x="1002.6" y="787.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1005.6" y="798.0"></text>
</g>
<g>
<title>org/rocksdb/util/BytewiseComparator.compare (227 samples, 9.15%)</title><rect x="1003.1" y="835.0" width="107.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1006.1" y="846.0">org/rocksdb/u..</text>
</g>
<g>
<title>org/rocksdb/util/BytewiseComparator.compare (226 samples, 9.11%)</title><rect x="1003.6" y="819.0" width="107.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1006.6" y="830.0">org/rocksdb/u..</text>
</g>
<g>
<title>org/rocksdb/AbstractSlice.data (213 samples, 8.59%)</title><rect x="1003.6" y="803.0" width="101.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1006.6" y="814.0">org/rocksdb/..</text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.getNativeHandle (10 samples, 0.40%)</title><rect x="1003.6" y="787.0" width="4.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1006.6" y="798.0"></text>
</g>
<g>
<title>resume_userspace (2 samples, 0.08%)</title><rect x="1007.4" y="771.0" width="0.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1010.4" y="782.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.08%)</title><rect x="1007.4" y="755.0" width="0.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1010.4" y="766.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.08%)</title><rect x="1007.4" y="739.0" width="0.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1010.4" y="750.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (203 samples, 8.18%)</title><rect x="1008.3" y="787.0" width="96.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1011.3" y="798.0">org/rocksdb..</text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (200 samples, 8.06%)</title><rect x="1009.7" y="771.0" width="95.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1012.7" y="782.0">org/rocksdb..</text>
</g>
<g>
<title>Java_org_rocksdb_Slice_data0 (189 samples, 7.62%)</title><rect x="1012.1" y="755.0" width="89.9" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1015.1" y="766.0">Java_org_r..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;CardTableBarrierSet::AccessBarrier&lt;1097812ull, CardTableBarrierSet&gt;, (AccessInternal::BarrierType)2, 1097812ull&gt;::oop_access_barrier(void*) (1 samples, 0.04%)</title><rect x="1015.0" y="739.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1018.0" y="750.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (1 samples, 0.04%)</title><rect x="1015.4" y="739.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1018.4" y="750.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.04%)</title><rect x="1015.9" y="739.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1018.9" y="750.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.04%)</title><rect x="1016.4" y="739.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1019.4" y="750.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (3 samples, 0.12%)</title><rect x="1016.9" y="739.0" width="1.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1019.9" y="750.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.04%)</title><rect x="1017.8" y="723.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1020.8" y="734.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.04%)</title><rect x="1017.8" y="707.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1020.8" y="718.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.04%)</title><rect x="1017.8" y="691.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1020.8" y="702.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.04%)</title><rect x="1018.3" y="739.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1021.3" y="750.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.04%)</title><rect x="1018.3" y="723.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1021.3" y="734.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.04%)</title><rect x="1018.3" y="707.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1021.3" y="718.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.04%)</title><rect x="1018.3" y="691.0" width="0.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1021.3" y="702.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.04%)</title><rect x="1018.3" y="675.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1021.3" y="686.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.04%)</title><rect x="1018.3" y="659.0" width="0.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1021.3" y="670.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.04%)</title><rect x="1018.3" y="643.0" width="0.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1021.3" y="654.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (18 samples, 0.73%)</title><rect x="1018.8" y="739.0" width="8.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1021.8" y="750.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (8 samples, 0.32%)</title><rect x="1020.2" y="723.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1023.2" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.158] (5 samples, 0.20%)</title><rect x="1024.0" y="723.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1027.0" y="734.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (2 samples, 0.08%)</title><rect x="1026.4" y="723.0" width="0.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1029.4" y="734.0"></text>
</g>
<g>
<title>jni_NewByteArray (98 samples, 3.95%)</title><rect x="1027.3" y="739.0" width="46.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1030.3" y="750.0">jni_..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;CardTableBarrierSet::AccessBarrier&lt;5292116ull, CardTableBarrierSet&gt;, (AccessInternal::BarrierType)0, 5292116ull&gt;::oop_access_barrier(void*, oopDesc*) (1 samples, 0.04%)</title><rect x="1031.6" y="723.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1034.6" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (7 samples, 0.28%)</title><rect x="1032.1" y="723.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1035.1" y="734.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (6 samples, 0.24%)</title><rect x="1035.4" y="723.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1038.4" y="734.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (12 samples, 0.48%)</title><rect x="1038.3" y="723.0" width="5.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1041.3" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.158] (10 samples, 0.40%)</title><rect x="1044.0" y="723.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1047.0" y="734.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (51 samples, 2.06%)</title><rect x="1048.7" y="723.0" width="24.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1051.7" y="734.0">T..</text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (33 samples, 1.33%)</title><rect x="1055.4" y="707.0" width="15.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1058.4" y="718.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (31 samples, 1.25%)</title><rect x="1056.4" y="691.0" width="14.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1059.4" y="702.0"></text>
</g>
<g>
<title>GenCollectedHeap::mem_allocate(unsigned int, bool*) (1 samples, 0.04%)</title><rect x="1064.0" y="675.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1067.0" y="686.0"></text>
</g>
<g>
<title>GenCollectedHeap::mem_allocate_work(unsigned int, bool, bool*) (1 samples, 0.04%)</title><rect x="1064.0" y="659.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1067.0" y="670.0"></text>
</g>
<g>
<title>VMThread::execute(VM_Operation*) (1 samples, 0.04%)</title><rect x="1064.0" y="643.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1067.0" y="654.0"></text>
</g>
<g>
<title>Thread::get_priority(Thread const*) (1 samples, 0.04%)</title><rect x="1064.0" y="627.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1067.0" y="638.0"></text>
</g>
<g>
<title>os::get_priority(Thread const*, ThreadPriority&amp;) (1 samples, 0.04%)</title><rect x="1064.0" y="611.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1067.0" y="622.0"></text>
</g>
<g>
<title>os::get_native_priority(Thread const*, int*) (1 samples, 0.04%)</title><rect x="1064.0" y="595.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1067.0" y="606.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (2 samples, 0.08%)</title><rect x="1064.4" y="675.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1067.4" y="686.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.04%)</title><rect x="1065.4" y="675.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1068.4" y="686.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.04%)</title><rect x="1065.4" y="659.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1068.4" y="670.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (8 samples, 0.32%)</title><rect x="1065.9" y="675.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1068.9" y="686.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.04%)</title><rect x="1069.2" y="659.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1072.2" y="670.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.04%)</title><rect x="1069.2" y="643.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1072.2" y="654.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.04%)</title><rect x="1069.2" y="627.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1072.2" y="638.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (1 samples, 0.04%)</title><rect x="1069.7" y="675.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1072.7" y="686.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned int) (1 samples, 0.04%)</title><rect x="1070.1" y="675.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1073.1" y="686.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.04%)</title><rect x="1070.6" y="675.0" width="0.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1073.6" y="686.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.04%)</title><rect x="1070.6" y="659.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1073.6" y="670.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.04%)</title><rect x="1070.6" y="643.0" width="0.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1073.6" y="654.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.12%)</title><rect x="1071.1" y="707.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1074.1" y="718.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.04%)</title><rect x="1072.5" y="707.0" width="0.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1075.5" y="718.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.04%)</title><rect x="1072.5" y="691.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1075.5" y="702.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.04%)</title><rect x="1072.5" y="675.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1075.5" y="686.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (2 samples, 0.08%)</title><rect x="1073.0" y="723.0" width="1.0" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1076.0" y="734.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (59 samples, 2.38%)</title><rect x="1074.0" y="739.0" width="28.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1077.0" y="750.0">jn..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (5 samples, 0.20%)</title><rect x="1077.3" y="723.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1080.3" y="734.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.04%)</title><rect x="1079.2" y="707.0" width="0.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1082.2" y="718.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.04%)</title><rect x="1079.2" y="691.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1082.2" y="702.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.04%)</title><rect x="1079.2" y="675.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1082.2" y="686.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.04%)</title><rect x="1079.7" y="723.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1082.7" y="734.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (11 samples, 0.44%)</title><rect x="1080.1" y="723.0" width="5.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1083.1" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.158] (10 samples, 0.40%)</title><rect x="1085.4" y="723.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1088.4" y="734.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (5 samples, 0.20%)</title><rect x="1090.1" y="723.0" width="2.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1093.1" y="734.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.04%)</title><rect x="1092.0" y="707.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1095.0" y="718.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.04%)</title><rect x="1092.0" y="691.0" width="0.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1095.0" y="702.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.04%)</title><rect x="1092.0" y="675.0" width="0.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1095.0" y="686.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.04%)</title><rect x="1092.0" y="659.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1095.0" y="670.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.04%)</title><rect x="1092.0" y="643.0" width="0.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1095.0" y="654.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.04%)</title><rect x="1092.0" y="627.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1095.0" y="638.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (5 samples, 0.20%)</title><rect x="1092.5" y="723.0" width="2.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1095.5" y="734.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.08%)</title><rect x="1093.5" y="707.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1096.5" y="718.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.04%)</title><rect x="1094.4" y="707.0" width="0.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1097.4" y="718.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.04%)</title><rect x="1094.4" y="691.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1097.4" y="702.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.04%)</title><rect x="1094.4" y="675.0" width="0.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1097.4" y="686.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned int) (15 samples, 0.60%)</title><rect x="1094.9" y="723.0" width="7.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1097.9" y="734.0"></text>
</g>
<g>
<title>jni_NewByteArray (2 samples, 0.08%)</title><rect x="1102.0" y="755.0" width="1.0" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1105.0" y="766.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (4 samples, 0.16%)</title><rect x="1103.0" y="755.0" width="1.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1106.0" y="766.0"></text>
</g>
<g>
<title>org/rocksdb/util/BytewiseComparator.compare (13 samples, 0.52%)</title><rect x="1104.9" y="803.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1107.9" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (13 samples, 0.52%)</title><rect x="1104.9" y="787.0" width="6.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1107.9" y="798.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (7 samples, 0.28%)</title><rect x="1104.9" y="771.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1107.9" y="782.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (7 samples, 0.28%)</title><rect x="1104.9" y="755.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1107.9" y="766.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (7 samples, 0.28%)</title><rect x="1104.9" y="739.0" width="3.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1107.9" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (6 samples, 0.24%)</title><rect x="1108.2" y="771.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1111.2" y="782.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.04%)</title><rect x="1109.1" y="755.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1112.1" y="766.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (3 samples, 0.12%)</title><rect x="1109.6" y="755.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1112.6" y="766.0"></text>
</g>
<g>
<title>rocksdb::ReadOptions::ReadOptions() (3 samples, 0.12%)</title><rect x="1111.0" y="835.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1114.0" y="846.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (2 samples, 0.08%)</title><rect x="1112.5" y="835.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1115.5" y="846.0"></text>
</g>
<g>
<title>std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator&lt;char&gt; const&amp;) (1 samples, 0.04%)</title><rect x="1113.4" y="835.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1116.4" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.getArrayCopySync (3 samples, 0.12%)</title><rect x="1113.9" y="867.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1116.9" y="878.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1 samples, 0.04%)</title><rect x="1114.4" y="851.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1117.4" y="862.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="1114.4" y="835.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1117.4" y="846.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="1114.4" y="819.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1117.4" y="830.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="1114.4" y="803.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1117.4" y="814.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.04%)</title><rect x="1114.9" y="851.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1117.9" y="862.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.04%)</title><rect x="1114.9" y="835.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1117.9" y="846.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.04%)</title><rect x="1114.9" y="819.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1117.9" y="830.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.04%)</title><rect x="1114.9" y="803.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1117.9" y="814.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.04%)</title><rect x="1114.9" y="787.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1117.9" y="798.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.04%)</title><rect x="1114.9" y="771.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1117.9" y="782.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (9 samples, 0.36%)</title><rect x="1115.3" y="931.0" width="4.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1118.3" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.get (9 samples, 0.36%)</title><rect x="1115.3" y="915.0" width="4.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1118.3" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (9 samples, 0.36%)</title><rect x="1115.3" y="899.0" width="4.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1118.3" y="910.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.12%)</title><rect x="1119.6" y="963.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1122.6" y="974.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.12%)</title><rect x="1119.6" y="947.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1122.6" y="958.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.12%)</title><rect x="1119.6" y="931.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1122.6" y="942.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (140 samples, 5.64%)</title><rect x="1121.0" y="979.0" width="66.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1124.0" y="990.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (140 samples, 5.64%)</title><rect x="1121.0" y="963.0" width="66.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1124.0" y="974.0">one/nio..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (140 samples, 5.64%)</title><rect x="1121.0" y="947.0" width="66.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1124.0" y="958.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (137 samples, 5.52%)</title><rect x="1122.5" y="931.0" width="65.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1125.5" y="942.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (129 samples, 5.20%)</title><rect x="1126.3" y="915.0" width="61.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1129.3" y="926.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (121 samples, 4.88%)</title><rect x="1126.3" y="899.0" width="57.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1129.3" y="910.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (121 samples, 4.88%)</title><rect x="1126.3" y="883.0" width="57.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1129.3" y="894.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (114 samples, 4.59%)</title><rect x="1129.6" y="867.0" width="54.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1132.6" y="878.0">sun/n..</text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (2 samples, 0.08%)</title><rect x="1132.5" y="851.0" width="0.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1135.5" y="862.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (5 samples, 0.20%)</title><rect x="1133.4" y="851.0" width="2.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1136.4" y="862.0"></text>
</g>
<g>
<title>fdval (2 samples, 0.08%)</title><rect x="1134.8" y="835.0" width="1.0" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1137.8" y="846.0"></text>
</g>
<g>
<title>__kernel_vsyscall (95 samples, 3.83%)</title><rect x="1135.8" y="851.0" width="45.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1138.8" y="862.0">__ke..</text>
</g>
<g>
<title>entry_SYSENTER_32 (95 samples, 3.83%)</title><rect x="1135.8" y="835.0" width="45.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1138.8" y="846.0">entr..</text>
</g>
<g>
<title>do_fast_syscall_32 (95 samples, 3.83%)</title><rect x="1135.8" y="819.0" width="45.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1138.8" y="830.0">do_f..</text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.04%)</title><rect x="1136.3" y="803.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1139.3" y="814.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.04%)</title><rect x="1136.3" y="787.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1139.3" y="798.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.04%)</title><rect x="1136.3" y="771.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1139.3" y="782.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.04%)</title><rect x="1136.3" y="755.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1139.3" y="766.0"></text>
</g>
<g>
<title>sys_read (93 samples, 3.75%)</title><rect x="1136.7" y="803.0" width="44.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1139.7" y="814.0">sys_..</text>
</g>
<g>
<title>__fdget_pos (5 samples, 0.20%)</title><rect x="1137.2" y="787.0" width="2.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1140.2" y="798.0"></text>
</g>
<g>
<title>__fget_light (5 samples, 0.20%)</title><rect x="1137.2" y="771.0" width="2.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1140.2" y="782.0"></text>
</g>
<g>
<title>__fget (3 samples, 0.12%)</title><rect x="1138.2" y="755.0" width="1.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1141.2" y="766.0"></text>
</g>
<g>
<title>vfs_read (87 samples, 3.51%)</title><rect x="1139.6" y="787.0" width="41.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1142.6" y="798.0">vfs..</text>
</g>
<g>
<title>__vfs_read (68 samples, 2.74%)</title><rect x="1139.6" y="771.0" width="32.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1142.6" y="782.0">__..</text>
</g>
<g>
<title>new_sync_read (68 samples, 2.74%)</title><rect x="1139.6" y="755.0" width="32.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1142.6" y="766.0">ne..</text>
</g>
<g>
<title>sock_read_iter (63 samples, 2.54%)</title><rect x="1141.5" y="739.0" width="30.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1144.5" y="750.0">so..</text>
</g>
<g>
<title>inet_recvmsg (1 samples, 0.04%)</title><rect x="1141.5" y="723.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1144.5" y="734.0"></text>
</g>
<g>
<title>security_socket_recvmsg (1 samples, 0.04%)</title><rect x="1142.0" y="723.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1145.0" y="734.0"></text>
</g>
<g>
<title>sock_recvmsg (61 samples, 2.46%)</title><rect x="1142.4" y="723.0" width="29.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1145.4" y="734.0">so..</text>
</g>
<g>
<title>inet_recvmsg (52 samples, 2.10%)</title><rect x="1142.4" y="707.0" width="24.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1145.4" y="718.0">i..</text>
</g>
<g>
<title>__kfree_skb (2 samples, 0.08%)</title><rect x="1142.9" y="691.0" width="1.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1145.9" y="702.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (2 samples, 0.08%)</title><rect x="1143.9" y="691.0" width="0.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1146.9" y="702.0"></text>
</g>
<g>
<title>tcp_recvmsg (47 samples, 1.89%)</title><rect x="1144.8" y="691.0" width="22.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1147.8" y="702.0">t..</text>
</g>
<g>
<title>__check_object_size (2 samples, 0.08%)</title><rect x="1149.1" y="675.0" width="0.9" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1152.1" y="686.0"></text>
</g>
<g>
<title>__kfree_skb (3 samples, 0.12%)</title><rect x="1150.0" y="675.0" width="1.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1153.0" y="686.0"></text>
</g>
<g>
<title>skb_release_all (2 samples, 0.08%)</title><rect x="1150.0" y="659.0" width="1.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1153.0" y="670.0"></text>
</g>
<g>
<title>skb_release_data (1 samples, 0.04%)</title><rect x="1150.0" y="643.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1153.0" y="654.0"></text>
</g>
<g>
<title>skb_release_head_state (1 samples, 0.04%)</title><rect x="1150.5" y="643.0" width="0.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1153.5" y="654.0"></text>
</g>
<g>
<title>sock_rfree (1 samples, 0.04%)</title><rect x="1150.5" y="627.0" width="0.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1153.5" y="638.0"></text>
</g>
<g>
<title>skb_release_data (1 samples, 0.04%)</title><rect x="1151.0" y="659.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1154.0" y="670.0"></text>
</g>
<g>
<title>__tcp_select_window (1 samples, 0.04%)</title><rect x="1151.5" y="675.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1154.5" y="686.0"></text>
</g>
<g>
<title>_copy_to_iter (3 samples, 0.12%)</title><rect x="1152.0" y="675.0" width="1.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1155.0" y="686.0"></text>
</g>
<g>
<title>lock_sock_nested (6 samples, 0.24%)</title><rect x="1153.4" y="675.0" width="2.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1156.4" y="686.0"></text>
</g>
<g>
<title>__raw_callee_save___pv_queued_spin_unlock (1 samples, 0.04%)</title><rect x="1153.4" y="659.0" width="0.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1156.4" y="670.0"></text>
</g>
<g>
<title>__pv_queued_spin_unlock (1 samples, 0.04%)</title><rect x="1153.4" y="643.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1156.4" y="654.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.04%)</title><rect x="1153.9" y="659.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1156.9" y="670.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (3 samples, 0.12%)</title><rect x="1154.3" y="659.0" width="1.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1157.3" y="670.0"></text>
</g>
<g>
<title>__pv_queued_spin_lock_slowpath (1 samples, 0.04%)</title><rect x="1155.3" y="643.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1158.3" y="654.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.04%)</title><rect x="1155.8" y="659.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1158.8" y="670.0"></text>
</g>
<g>
<title>sched_clock_cpu (2 samples, 0.08%)</title><rect x="1156.2" y="675.0" width="1.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1159.2" y="686.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (15 samples, 0.60%)</title><rect x="1157.2" y="675.0" width="7.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1160.2" y="686.0"></text>
</g>
<g>
<title>__check_object_size (2 samples, 0.08%)</title><rect x="1158.6" y="659.0" width="1.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1161.6" y="670.0"></text>
</g>
<g>
<title>page_address (1 samples, 0.04%)</title><rect x="1159.1" y="643.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1162.1" y="654.0"></text>
</g>
<g>
<title>__virt_addr_valid (2 samples, 0.08%)</title><rect x="1159.6" y="659.0" width="0.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1162.6" y="670.0"></text>
</g>
<g>
<title>_copy_to_iter (7 samples, 0.28%)</title><rect x="1160.5" y="659.0" width="3.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1163.5" y="670.0"></text>
</g>
<g>
<title>copyout (6 samples, 0.24%)</title><rect x="1161.0" y="643.0" width="2.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1164.0" y="654.0"></text>
</g>
<g>
<title>__copy_user_ll (6 samples, 0.24%)</title><rect x="1161.0" y="627.0" width="2.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1164.0" y="638.0"></text>
</g>
<g>
<title>copyout (1 samples, 0.04%)</title><rect x="1163.8" y="659.0" width="0.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1166.8" y="670.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (1 samples, 0.04%)</title><rect x="1164.3" y="675.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1167.3" y="686.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (5 samples, 0.20%)</title><rect x="1164.8" y="675.0" width="2.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1167.8" y="686.0"></text>
</g>
<g>
<title>sched_clock (1 samples, 0.04%)</title><rect x="1166.2" y="659.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1169.2" y="670.0"></text>
</g>
<g>
<title>sched_clock_cpu (1 samples, 0.04%)</title><rect x="1166.7" y="659.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1169.7" y="670.0"></text>
</g>
<g>
<title>sched_clock (1 samples, 0.04%)</title><rect x="1166.7" y="643.0" width="0.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1169.7" y="654.0"></text>
</g>
<g>
<title>kvm_sched_clock_read (1 samples, 0.04%)</title><rect x="1166.7" y="627.0" width="0.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1169.7" y="638.0"></text>
</g>
<g>
<title>pvclock_clocksource_read (1 samples, 0.04%)</title><rect x="1166.7" y="611.0" width="0.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1169.7" y="622.0"></text>
</g>
<g>
<title>security_socket_recvmsg (8 samples, 0.32%)</title><rect x="1167.2" y="707.0" width="3.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1170.2" y="718.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (3 samples, 0.12%)</title><rect x="1167.2" y="691.0" width="1.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1170.2" y="702.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (5 samples, 0.20%)</title><rect x="1168.6" y="691.0" width="2.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1171.6" y="702.0"></text>
</g>
<g>
<title>aa_sk_perm (1 samples, 0.04%)</title><rect x="1168.6" y="675.0" width="0.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1171.6" y="686.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (4 samples, 0.16%)</title><rect x="1169.1" y="675.0" width="1.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1172.1" y="686.0"></text>
</g>
<g>
<title>aa_sk_perm (3 samples, 0.12%)</title><rect x="1169.5" y="659.0" width="1.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1172.5" y="670.0"></text>
</g>
<g>
<title>aa_label_sk_perm (2 samples, 0.08%)</title><rect x="1170.0" y="643.0" width="1.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1173.0" y="654.0"></text>
</g>
<g>
<title>tcp_recvmsg (1 samples, 0.04%)</title><rect x="1171.0" y="707.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1174.0" y="718.0"></text>
</g>
<g>
<title>sock_recvmsg (1 samples, 0.04%)</title><rect x="1171.5" y="739.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1174.5" y="750.0"></text>
</g>
<g>
<title>rw_verify_area (19 samples, 0.77%)</title><rect x="1171.9" y="771.0" width="9.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1174.9" y="782.0"></text>
</g>
<g>
<title>security_file_permission (17 samples, 0.69%)</title><rect x="1172.9" y="755.0" width="8.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1175.9" y="766.0"></text>
</g>
<g>
<title>apparmor_file_permission (10 samples, 0.40%)</title><rect x="1175.3" y="739.0" width="4.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1178.3" y="750.0"></text>
</g>
<g>
<title>aa_file_perm (2 samples, 0.08%)</title><rect x="1175.3" y="723.0" width="0.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1178.3" y="734.0"></text>
</g>
<g>
<title>common_file_perm (8 samples, 0.32%)</title><rect x="1176.2" y="723.0" width="3.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1179.2" y="734.0"></text>
</g>
<g>
<title>aa_file_perm (5 samples, 0.20%)</title><rect x="1177.6" y="707.0" width="2.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1180.6" y="718.0"></text>
</g>
<g>
<title>fsnotify (2 samples, 0.08%)</title><rect x="1180.0" y="739.0" width="1.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1183.0" y="750.0"></text>
</g>
<g>
<title>convertReturnVal (1 samples, 0.04%)</title><rect x="1181.0" y="851.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1184.0" y="862.0"></text>
</g>
<g>
<title>fdval (3 samples, 0.12%)</title><rect x="1181.4" y="851.0" width="1.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1184.4" y="862.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.04%)</title><rect x="1182.9" y="851.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1185.9" y="862.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.04%)</title><rect x="1182.9" y="835.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1185.9" y="846.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (1 samples, 0.04%)</title><rect x="1182.9" y="819.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1185.9" y="830.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decodeUTF8 (1 samples, 0.04%)</title><rect x="1182.9" y="803.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1185.9" y="814.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decodeUTF8_0 (1 samples, 0.04%)</title><rect x="1182.9" y="787.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1185.9" y="798.0"></text>
</g>
<g>
<title>java/lang/StringCoding.isNotContinuation (1 samples, 0.04%)</title><rect x="1182.9" y="771.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1185.9" y="782.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.04%)</title><rect x="1182.9" y="755.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.9" y="766.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.04%)</title><rect x="1182.9" y="739.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.9" y="750.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.04%)</title><rect x="1182.9" y="723.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.9" y="734.0"></text>
</g>
<g>
<title>CompileBroker::compile_queue(int) (1 samples, 0.04%)</title><rect x="1182.9" y="707.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.9" y="718.0"></text>
</g>
<g>
<title>read (1 samples, 0.04%)</title><rect x="1183.3" y="851.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1186.3" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (8 samples, 0.32%)</title><rect x="1183.8" y="899.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1186.8" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (8 samples, 0.32%)</title><rect x="1183.8" y="883.0" width="3.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1186.8" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (8 samples, 0.32%)</title><rect x="1183.8" y="867.0" width="3.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1186.8" y="878.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.04%)</title><rect x="1187.1" y="851.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.1" y="862.0"></text>
</g>
<g>
<title>org/rocksdb/util/BytewiseComparator.compare (4 samples, 0.16%)</title><rect x="1187.6" y="1027.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1190.6" y="1038.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (4 samples, 0.16%)</title><rect x="1187.6" y="1011.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1190.6" y="1022.0"></text>
</g>
<g>
<title>Thread::current() (3 samples, 0.12%)</title><rect x="1188.1" y="995.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.1" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (1 samples, 0.04%)</title><rect x="1189.5" y="1027.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1192.5" y="1038.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.04%)</title><rect x="1189.5" y="1011.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1192.5" y="1022.0"></text>
</g>
</g>
</svg>
