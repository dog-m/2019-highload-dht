<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1062" onload="init(evt)" viewBox="0 0 1200 1062" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1045"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1045"> </text>
<g id="frames">
<g>
<title>all (3,736 samples, 100.00%)</title><rect x="10.0" y="1011.0" width="1180.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="13.0" y="1022.0">all</text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.05%)</title><rect x="10.0" y="995.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::klass_holder() const (1 samples, 0.03%)</title><rect x="10.6" y="995.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.6" y="1006.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (7 samples, 0.19%)</title><rect x="10.9" y="995.0" width="2.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="13.9" y="1006.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (7 samples, 0.19%)</title><rect x="10.9" y="979.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.9" y="990.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (7 samples, 0.19%)</title><rect x="10.9" y="963.0" width="2.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.9" y="974.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (7 samples, 0.19%)</title><rect x="10.9" y="947.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.9" y="958.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (7 samples, 0.19%)</title><rect x="10.9" y="931.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.9" y="942.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (7 samples, 0.19%)</title><rect x="10.9" y="915.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.9" y="926.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned int, rocksdb::PreReleaseCallback*) (7 samples, 0.19%)</title><rect x="10.9" y="899.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.9" y="910.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (7 samples, 0.19%)</title><rect x="10.9" y="883.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.9" y="894.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (7 samples, 0.19%)</title><rect x="10.9" y="867.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.9" y="878.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (7 samples, 0.19%)</title><rect x="10.9" y="851.0" width="2.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.9" y="862.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (7 samples, 0.19%)</title><rect x="10.9" y="835.0" width="2.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.9" y="846.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (7 samples, 0.19%)</title><rect x="10.9" y="819.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.9" y="830.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni1945528177827338328.so (7 samples, 0.19%)</title><rect x="10.9" y="803.0" width="2.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="13.9" y="814.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (7 samples, 0.19%)</title><rect x="10.9" y="787.0" width="2.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.9" y="798.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni1945528177827338328.so (5 samples, 0.13%)</title><rect x="10.9" y="771.0" width="1.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="13.9" y="782.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (5 samples, 0.13%)</title><rect x="10.9" y="755.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.9" y="766.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (5 samples, 0.13%)</title><rect x="10.9" y="739.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.9" y="750.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (2 samples, 0.05%)</title><rect x="10.9" y="723.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.9" y="734.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (2 samples, 0.05%)</title><rect x="10.9" y="707.0" width="0.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="13.9" y="718.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.141] (2 samples, 0.05%)</title><rect x="10.9" y="691.0" width="0.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="13.9" y="702.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.05%)</title><rect x="10.9" y="675.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.9" y="686.0"></text>
</g>
<g>
<title>.L409 (2 samples, 0.05%)</title><rect x="10.9" y="659.0" width="0.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="13.9" y="670.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (3 samples, 0.08%)</title><rect x="11.6" y="723.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="14.6" y="734.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (3 samples, 0.08%)</title><rect x="11.6" y="707.0" width="0.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="14.6" y="718.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.141] (3 samples, 0.08%)</title><rect x="11.6" y="691.0" width="0.9" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="14.6" y="702.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (3 samples, 0.08%)</title><rect x="11.6" y="675.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="14.6" y="686.0"></text>
</g>
<g>
<title>.L409 (3 samples, 0.08%)</title><rect x="11.6" y="659.0" width="0.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="14.6" y="670.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (1 samples, 0.03%)</title><rect x="12.5" y="771.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="15.5" y="782.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.03%)</title><rect x="12.5" y="755.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="15.5" y="766.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.03%)</title><rect x="12.5" y="739.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="15.5" y="750.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (1 samples, 0.03%)</title><rect x="12.5" y="723.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="15.5" y="734.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.141] (1 samples, 0.03%)</title><rect x="12.5" y="707.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="15.5" y="718.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.03%)</title><rect x="12.5" y="691.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="15.5" y="702.0"></text>
</g>
<g>
<title>.L409 (1 samples, 0.03%)</title><rect x="12.5" y="675.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="15.5" y="686.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.03%)</title><rect x="12.8" y="771.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="15.8" y="782.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.03%)</title><rect x="12.8" y="755.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="15.8" y="766.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.03%)</title><rect x="12.8" y="739.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="15.8" y="750.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (1 samples, 0.03%)</title><rect x="12.8" y="723.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="15.8" y="734.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.141] (1 samples, 0.03%)</title><rect x="12.8" y="707.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="15.8" y="718.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.03%)</title><rect x="12.8" y="691.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="15.8" y="702.0"></text>
</g>
<g>
<title>.L409 (1 samples, 0.03%)</title><rect x="12.8" y="675.0" width="0.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="15.8" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (6 samples, 0.16%)</title><rect x="13.2" y="995.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="16.2" y="1006.0"></text>
</g>
<g>
<title>oopFactory::new_objArray(Klass*, int, Thread*) (3 samples, 0.08%)</title><rect x="13.2" y="979.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="16.2" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (2 samples, 0.05%)</title><rect x="13.5" y="963.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="16.5" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.05%)</title><rect x="13.5" y="947.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="16.5" y="958.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.05%)</title><rect x="13.5" y="931.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="16.5" y="942.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="13.5" y="915.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="16.5" y="926.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.03%)</title><rect x="13.5" y="899.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="16.5" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (1 samples, 0.03%)</title><rect x="13.5" y="883.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="16.5" y="894.0"></text>
</g>
<g>
<title>HandleMark::~HandleMark() (1 samples, 0.03%)</title><rect x="13.5" y="867.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="16.5" y="878.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (1 samples, 0.03%)</title><rect x="13.8" y="915.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="16.8" y="926.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray(BasicType, int, Thread*) (3 samples, 0.08%)</title><rect x="14.1" y="979.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="17.1" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="14.1" y="963.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="17.1" y="974.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.05%)</title><rect x="14.4" y="963.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="17.4" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.05%)</title><rect x="14.4" y="947.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="17.4" y="958.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="14.7" y="931.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="17.7" y="942.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.03%)</title><rect x="14.7" y="915.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="17.7" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (7 samples, 0.19%)</title><rect x="15.1" y="995.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="18.1" y="1006.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray_nozero(BasicType, int, Thread*) (7 samples, 0.19%)</title><rect x="15.1" y="979.0" width="2.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="18.1" y="990.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (7 samples, 0.19%)</title><rect x="15.1" y="963.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="18.1" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (6 samples, 0.16%)</title><rect x="15.1" y="947.0" width="1.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="18.1" y="958.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (5 samples, 0.13%)</title><rect x="15.1" y="931.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="18.1" y="942.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (3 samples, 0.08%)</title><rect x="15.1" y="915.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="18.1" y="926.0"></text>
</g>
<g>
<title>GenCollectedHeap::allocate_new_tlab(unsigned int, unsigned int, unsigned int*) (1 samples, 0.03%)</title><rect x="15.1" y="899.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="18.1" y="910.0"></text>
</g>
<g>
<title>DefNewGeneration::par_allocate(unsigned int, bool) (1 samples, 0.03%)</title><rect x="15.1" y="883.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="18.1" y="894.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (1 samples, 0.03%)</title><rect x="15.4" y="899.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="18.4" y="910.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.03%)</title><rect x="15.7" y="899.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="18.7" y="910.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.03%)</title><rect x="15.7" y="883.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="18.7" y="894.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (2 samples, 0.05%)</title><rect x="16.0" y="915.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="19.0" y="926.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="16.6" y="931.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="19.6" y="942.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="16.9" y="947.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="19.9" y="958.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (11 samples, 0.29%)</title><rect x="17.3" y="995.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="20.3" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (11 samples, 0.29%)</title><rect x="17.3" y="979.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="20.3" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (11 samples, 0.29%)</title><rect x="17.3" y="963.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="20.3" y="974.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (11 samples, 0.29%)</title><rect x="17.3" y="947.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="20.3" y="958.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned int, unsigned int, Thread*) (1 samples, 0.03%)</title><rect x="17.6" y="931.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="20.6" y="942.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.03%)</title><rect x="17.6" y="915.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="20.6" y="926.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="17.6" y="899.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="20.6" y="910.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.03%)</title><rect x="17.6" y="883.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="20.6" y="894.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.03%)</title><rect x="17.6" y="867.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="20.6" y="878.0"></text>
</g>
<g>
<title>call_on_stack (1 samples, 0.03%)</title><rect x="17.6" y="851.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="20.6" y="862.0"></text>
</g>
<g>
<title>__do_softirq (1 samples, 0.03%)</title><rect x="17.6" y="835.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="20.6" y="846.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (3 samples, 0.08%)</title><rect x="17.9" y="931.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="20.9" y="942.0"></text>
</g>
<g>
<title>DefNewGeneration::unsafe_max_tlab_alloc() const (1 samples, 0.03%)</title><rect x="17.9" y="915.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="20.9" y="926.0"></text>
</g>
<g>
<title>GenCollectedHeap::allocate_new_tlab(unsigned int, unsigned int, unsigned int*) (1 samples, 0.03%)</title><rect x="18.2" y="915.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="21.2" y="926.0"></text>
</g>
<g>
<title>GenCollectedHeap::mem_allocate_work(unsigned int, bool, bool*) (1 samples, 0.03%)</title><rect x="18.2" y="899.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="21.2" y="910.0"></text>
</g>
<g>
<title>DefNewGeneration::par_allocate(unsigned int, bool) (1 samples, 0.03%)</title><rect x="18.2" y="883.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="21.2" y="894.0"></text>
</g>
<g>
<title>ContiguousSpace::par_allocate(unsigned int) (1 samples, 0.03%)</title><rect x="18.2" y="867.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="21.2" y="878.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.03%)</title><rect x="18.5" y="915.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="21.5" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (1 samples, 0.03%)</title><rect x="18.5" y="899.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="21.5" y="910.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.03%)</title><rect x="18.5" y="883.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="21.5" y="894.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (6 samples, 0.16%)</title><rect x="18.8" y="931.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="21.8" y="942.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (8 samples, 0.21%)</title><rect x="20.7" y="995.0" width="2.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="23.7" y="1006.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (8 samples, 0.21%)</title><rect x="20.7" y="979.0" width="2.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="23.7" y="990.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) [clone .part.85] (7 samples, 0.19%)</title><rect x="21.1" y="963.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="24.1" y="974.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (5 samples, 0.13%)</title><rect x="21.7" y="947.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="24.7" y="958.0"></text>
</g>
<g>
<title>__kernel_vsyscall (4 samples, 0.11%)</title><rect x="21.7" y="931.0" width="1.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="24.7" y="942.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (3 samples, 0.08%)</title><rect x="22.0" y="915.0" width="0.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="25.0" y="926.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (3 samples, 0.08%)</title><rect x="22.0" y="899.0" width="0.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="25.0" y="910.0"></text>
</g>
<g>
<title>sys_futex (3 samples, 0.08%)</title><rect x="22.0" y="883.0" width="0.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="25.0" y="894.0"></text>
</g>
<g>
<title>do_futex (3 samples, 0.08%)</title><rect x="22.0" y="867.0" width="0.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="25.0" y="878.0"></text>
</g>
<g>
<title>futex_wait (3 samples, 0.08%)</title><rect x="22.0" y="851.0" width="0.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="25.0" y="862.0"></text>
</g>
<g>
<title>futex_wait_queue_me (3 samples, 0.08%)</title><rect x="22.0" y="835.0" width="0.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="25.0" y="846.0"></text>
</g>
<g>
<title>schedule (3 samples, 0.08%)</title><rect x="22.0" y="819.0" width="0.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="25.0" y="830.0"></text>
</g>
<g>
<title>__sched_text_start (3 samples, 0.08%)</title><rect x="22.0" y="803.0" width="0.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="25.0" y="814.0"></text>
</g>
<g>
<title>finish_task_switch (3 samples, 0.08%)</title><rect x="22.0" y="787.0" width="0.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="25.0" y="798.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="22.9" y="931.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="25.9" y="942.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="22.9" y="915.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="25.9" y="926.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="22.9" y="899.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="25.9" y="910.0"></text>
</g>
<g>
<title>[not_walkable_Java] (5 samples, 0.13%)</title><rect x="23.3" y="995.0" width="1.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="26.3" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="23.3" y="979.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="26.3" y="990.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.03%)</title><rect x="23.3" y="963.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="26.3" y="974.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.03%)</title><rect x="23.3" y="947.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="26.3" y="958.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.03%)</title><rect x="23.3" y="931.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="26.3" y="942.0"></text>
</g>
<g>
<title>ImmutableOopMapSet::find_map_at_offset(int) const (1 samples, 0.03%)</title><rect x="23.3" y="915.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="26.3" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="23.6" y="979.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="26.6" y="990.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (1 samples, 0.03%)</title><rect x="23.6" y="963.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="26.6" y="974.0"></text>
</g>
<g>
<title>CardTableRS::is_in_young(oopDesc*) const (1 samples, 0.03%)</title><rect x="23.6" y="947.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="26.6" y="958.0"></text>
</g>
<g>
<title>Thread::current() (3 samples, 0.08%)</title><rect x="23.9" y="979.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="26.9" y="990.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="24.8" y="995.0" width="0.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="27.8" y="1006.0"></text>
</g>
<g>
<title>__kernel_vsyscall (2 samples, 0.05%)</title><rect x="24.8" y="979.0" width="0.7" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="27.8" y="990.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (2 samples, 0.05%)</title><rect x="24.8" y="963.0" width="0.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="27.8" y="974.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (2 samples, 0.05%)</title><rect x="24.8" y="947.0" width="0.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="27.8" y="958.0"></text>
</g>
<g>
<title>sys_futex (2 samples, 0.05%)</title><rect x="24.8" y="931.0" width="0.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="27.8" y="942.0"></text>
</g>
<g>
<title>do_futex (2 samples, 0.05%)</title><rect x="24.8" y="915.0" width="0.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="27.8" y="926.0"></text>
</g>
<g>
<title>futex_wake (2 samples, 0.05%)</title><rect x="24.8" y="899.0" width="0.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="27.8" y="910.0"></text>
</g>
<g>
<title>mark_wake_futex (1 samples, 0.03%)</title><rect x="24.8" y="883.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="27.8" y="894.0"></text>
</g>
<g>
<title>wake_up_q (1 samples, 0.03%)</title><rect x="25.2" y="883.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="28.2" y="894.0"></text>
</g>
<g>
<title>try_to_wake_up (1 samples, 0.03%)</title><rect x="25.2" y="867.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="28.2" y="878.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="25.2" y="851.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="28.2" y="862.0"></text>
</g>
<g>
<title>[unknown_Java] (103 samples, 2.76%)</title><rect x="25.5" y="995.0" width="32.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="28.5" y="1006.0">[u..</text>
</g>
<g>
<title>Thread::current() (2 samples, 0.05%)</title><rect x="49.5" y="979.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="52.5" y="990.0"></text>
</g>
<g>
<title>[unknown] (21 samples, 0.56%)</title><rect x="50.1" y="979.0" width="6.6" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="53.1" y="990.0"></text>
</g>
<g>
<title>JavaThread::~JavaThread() (4 samples, 0.11%)</title><rect x="50.1" y="963.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="53.1" y="974.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.11%)</title><rect x="50.1" y="947.0" width="1.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="53.1" y="958.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (3 samples, 0.08%)</title><rect x="50.1" y="931.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="53.1" y="942.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.03%)</title><rect x="51.1" y="931.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="54.1" y="942.0"></text>
</g>
<g>
<title>[unknown] (15 samples, 0.40%)</title><rect x="51.4" y="963.0" width="4.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="54.4" y="974.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (5 samples, 0.13%)</title><rect x="51.4" y="947.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="54.4" y="958.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (10 samples, 0.27%)</title><rect x="53.0" y="947.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="56.0" y="958.0"></text>
</g>
<g>
<title>__kernel_vsyscall (2 samples, 0.05%)</title><rect x="56.1" y="963.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="59.1" y="974.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (2 samples, 0.05%)</title><rect x="56.1" y="947.0" width="0.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="59.1" y="958.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (2 samples, 0.05%)</title><rect x="56.1" y="931.0" width="0.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="59.1" y="942.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="56.1" y="915.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="59.1" y="926.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="56.1" y="899.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="59.1" y="910.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.03%)</title><rect x="56.1" y="883.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="59.1" y="894.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="56.1" y="867.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="59.1" y="878.0"></text>
</g>
<g>
<title>sys_futex (1 samples, 0.03%)</title><rect x="56.4" y="915.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="59.4" y="926.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.03%)</title><rect x="56.4" y="899.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="59.4" y="910.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.03%)</title><rect x="56.4" y="883.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="59.4" y="894.0"></text>
</g>
<g>
<title>wake_up_q (1 samples, 0.03%)</title><rect x="56.4" y="867.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="59.4" y="878.0"></text>
</g>
<g>
<title>try_to_wake_up (1 samples, 0.03%)</title><rect x="56.4" y="851.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="59.4" y="862.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="56.4" y="835.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="59.4" y="846.0"></text>
</g>
<g>
<title>__GNU_EH_FRAME_HDR (1 samples, 0.03%)</title><rect x="56.7" y="979.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="59.7" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="56.7" y="963.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="59.7" y="974.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="56.7" y="947.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="59.7" y="958.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.03%)</title><rect x="56.7" y="931.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="59.7" y="942.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="56.7" y="915.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="59.7" y="926.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.03%)</title><rect x="56.7" y="899.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="59.7" y="910.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.03%)</title><rect x="56.7" y="883.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="59.7" y="894.0"></text>
</g>
<g>
<title>call_on_stack (1 samples, 0.03%)</title><rect x="56.7" y="867.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="59.7" y="878.0"></text>
</g>
<g>
<title>__do_softirq (1 samples, 0.03%)</title><rect x="56.7" y="851.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="59.7" y="862.0"></text>
</g>
<g>
<title>run_rebalance_domains (1 samples, 0.03%)</title><rect x="56.7" y="835.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="59.7" y="846.0"></text>
</g>
<g>
<title>rebalance_domains (1 samples, 0.03%)</title><rect x="56.7" y="819.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="59.7" y="830.0"></text>
</g>
<g>
<title>update_blocked_averages (1 samples, 0.03%)</title><rect x="56.7" y="803.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="59.7" y="814.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="56.7" y="787.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="59.7" y="798.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.03%)</title><rect x="57.1" y="979.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="60.1" y="990.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="57.1" y="963.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="60.1" y="974.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.03%)</title><rect x="57.1" y="947.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="60.1" y="958.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.03%)</title><rect x="57.1" y="931.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="60.1" y="942.0"></text>
</g>
<g>
<title>call_on_stack (1 samples, 0.03%)</title><rect x="57.1" y="915.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="60.1" y="926.0"></text>
</g>
<g>
<title>__do_softirq (1 samples, 0.03%)</title><rect x="57.1" y="899.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="60.1" y="910.0"></text>
</g>
<g>
<title>run_rebalance_domains (1 samples, 0.03%)</title><rect x="57.1" y="883.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="60.1" y="894.0"></text>
</g>
<g>
<title>rebalance_domains (1 samples, 0.03%)</title><rect x="57.1" y="867.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="60.1" y="878.0"></text>
</g>
<g>
<title>update_blocked_averages (1 samples, 0.03%)</title><rect x="57.1" y="851.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="60.1" y="862.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="57.1" y="835.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="60.1" y="846.0"></text>
</g>
<g>
<title>exit_dns_resolver (1 samples, 0.03%)</title><rect x="57.4" y="979.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="60.4" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="57.4" y="963.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="60.4" y="974.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.03%)</title><rect x="57.4" y="947.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="60.4" y="958.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="57.7" y="979.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="60.7" y="990.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="57.7" y="963.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="60.7" y="974.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="57.7" y="947.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="60.7" y="958.0"></text>
</g>
<g>
<title>clone (24 samples, 0.64%)</title><rect x="58.0" y="995.0" width="7.6" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="61.0" y="1006.0"></text>
</g>
<g>
<title>start_thread (24 samples, 0.64%)</title><rect x="58.0" y="979.0" width="7.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="61.0" y="990.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (24 samples, 0.64%)</title><rect x="58.0" y="963.0" width="7.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="61.0" y="974.0"></text>
</g>
<g>
<title>Thread::call_run() (24 samples, 0.64%)</title><rect x="58.0" y="947.0" width="7.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="61.0" y="958.0"></text>
</g>
<g>
<title>JavaThread::run() (1 samples, 0.03%)</title><rect x="58.0" y="931.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="61.0" y="942.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (1 samples, 0.03%)</title><rect x="58.0" y="915.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="61.0" y="926.0"></text>
</g>
<g>
<title>attach_listener_thread_entry(JavaThread*, Thread*) (1 samples, 0.03%)</title><rect x="58.0" y="899.0" width="0.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="61.0" y="910.0"></text>
</g>
<g>
<title>load_agent(AttachOperation*, outputStream*) (1 samples, 0.03%)</title><rect x="58.0" y="883.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="61.0" y="894.0"></text>
</g>
<g>
<title>JvmtiExport::load_agent_library(char const*, char const*, char const*, outputStream*) (1 samples, 0.03%)</title><rect x="58.0" y="867.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="61.0" y="878.0"></text>
</g>
<g>
<title>Agent_OnAttach (1 samples, 0.03%)</title><rect x="58.0" y="851.0" width="0.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="61.0" y="862.0"></text>
</g>
<g>
<title>Profiler::run(Arguments&amp;) (1 samples, 0.03%)</title><rect x="58.0" y="835.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="61.0" y="846.0"></text>
</g>
<g>
<title>Profiler::runInternal(Arguments&amp;, std::ostream&amp;) (1 samples, 0.03%)</title><rect x="58.0" y="819.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="61.0" y="830.0"></text>
</g>
<g>
<title>__kernel_vsyscall (1 samples, 0.03%)</title><rect x="58.0" y="803.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="61.0" y="814.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (1 samples, 0.03%)</title><rect x="58.0" y="787.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="61.0" y="798.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (1 samples, 0.03%)</title><rect x="58.0" y="771.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="61.0" y="782.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="58.0" y="755.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="61.0" y="766.0"></text>
</g>
<g>
<title>task_work_run (1 samples, 0.03%)</title><rect x="58.0" y="739.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="61.0" y="750.0"></text>
</g>
<g>
<title>____fput (1 samples, 0.03%)</title><rect x="58.0" y="723.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="61.0" y="734.0"></text>
</g>
<g>
<title>__fput (1 samples, 0.03%)</title><rect x="58.0" y="707.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="61.0" y="718.0"></text>
</g>
<g>
<title>perf_fasync (1 samples, 0.03%)</title><rect x="58.0" y="691.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="61.0" y="702.0"></text>
</g>
<g>
<title>fasync_helper (1 samples, 0.03%)</title><rect x="58.0" y="675.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="61.0" y="686.0"></text>
</g>
<g>
<title>fasync_remove_entry (1 samples, 0.03%)</title><rect x="58.0" y="659.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="61.0" y="670.0"></text>
</g>
<g>
<title>VMThread::run() (15 samples, 0.40%)</title><rect x="58.3" y="931.0" width="4.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="61.3" y="942.0"></text>
</g>
<g>
<title>VMThread::loop() (15 samples, 0.40%)</title><rect x="58.3" y="915.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="61.3" y="926.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (7 samples, 0.19%)</title><rect x="58.3" y="899.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="61.3" y="910.0"></text>
</g>
<g>
<title>RuntimeService::record_safepoint_begin() (1 samples, 0.03%)</title><rect x="58.6" y="883.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="61.6" y="894.0"></text>
</g>
<g>
<title>TimeStamp::update() (1 samples, 0.03%)</title><rect x="58.6" y="867.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="61.6" y="878.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.si (1 samples, 0.03%)</title><rect x="58.6" y="851.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="61.6" y="862.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.03%)</title><rect x="59.0" y="883.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="62.0" y="894.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (1 samples, 0.03%)</title><rect x="59.0" y="867.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="62.0" y="878.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (1 samples, 0.03%)</title><rect x="59.0" y="851.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="62.0" y="862.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) [clone .part.62] (1 samples, 0.03%)</title><rect x="59.0" y="835.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="62.0" y="846.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.03%)</title><rect x="59.0" y="819.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="62.0" y="830.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.03%)</title><rect x="59.0" y="803.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="62.0" y="814.0"></text>
</g>
<g>
<title>CodeBlob::oop_map_for_return_address(unsigned char*) (1 samples, 0.03%)</title><rect x="59.0" y="787.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="62.0" y="798.0"></text>
</g>
<g>
<title>ImmutableOopMapSet::find_map_at_offset(int) const (1 samples, 0.03%)</title><rect x="59.0" y="771.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="62.0" y="782.0"></text>
</g>
<g>
<title>__kernel_vsyscall (4 samples, 0.11%)</title><rect x="59.3" y="883.0" width="1.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="62.3" y="894.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (4 samples, 0.11%)</title><rect x="59.3" y="867.0" width="1.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="62.3" y="878.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (4 samples, 0.11%)</title><rect x="59.3" y="851.0" width="1.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="62.3" y="862.0"></text>
</g>
<g>
<title>sys_mprotect (4 samples, 0.11%)</title><rect x="59.3" y="835.0" width="1.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="62.3" y="846.0"></text>
</g>
<g>
<title>mprotect_fixup (4 samples, 0.11%)</title><rect x="59.3" y="819.0" width="1.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="62.3" y="830.0"></text>
</g>
<g>
<title>change_protection (4 samples, 0.11%)</title><rect x="59.3" y="803.0" width="1.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="62.3" y="814.0"></text>
</g>
<g>
<title>change_protection_range (4 samples, 0.11%)</title><rect x="59.3" y="787.0" width="1.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="62.3" y="798.0"></text>
</g>
<g>
<title>__ptep_modify_prot_commit (1 samples, 0.03%)</title><rect x="59.3" y="771.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="62.3" y="782.0"></text>
</g>
<g>
<title>native_set_pte_at (1 samples, 0.03%)</title><rect x="59.3" y="755.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="62.3" y="766.0"></text>
</g>
<g>
<title>flush_tlb_mm_range (3 samples, 0.08%)</title><rect x="59.6" y="771.0" width="0.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="62.6" y="782.0"></text>
</g>
<g>
<title>native_flush_tlb_others (2 samples, 0.05%)</title><rect x="59.9" y="755.0" width="0.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="62.9" y="766.0"></text>
</g>
<g>
<title>smp_call_function_many (2 samples, 0.05%)</title><rect x="59.9" y="739.0" width="0.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="62.9" y="750.0"></text>
</g>
<g>
<title>smp_call_function_single (2 samples, 0.05%)</title><rect x="59.9" y="723.0" width="0.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="62.9" y="734.0"></text>
</g>
<g>
<title>SafepointSynchronize::end() (3 samples, 0.08%)</title><rect x="60.5" y="899.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="63.5" y="910.0"></text>
</g>
<g>
<title>__kernel_vsyscall (3 samples, 0.08%)</title><rect x="60.5" y="883.0" width="1.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="63.5" y="894.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (3 samples, 0.08%)</title><rect x="60.5" y="867.0" width="1.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="63.5" y="878.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (3 samples, 0.08%)</title><rect x="60.5" y="851.0" width="1.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="63.5" y="862.0"></text>
</g>
<g>
<title>sys_mprotect (3 samples, 0.08%)</title><rect x="60.5" y="835.0" width="1.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="63.5" y="846.0"></text>
</g>
<g>
<title>mprotect_fixup (3 samples, 0.08%)</title><rect x="60.5" y="819.0" width="1.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="63.5" y="830.0"></text>
</g>
<g>
<title>change_protection (3 samples, 0.08%)</title><rect x="60.5" y="803.0" width="1.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="63.5" y="814.0"></text>
</g>
<g>
<title>change_protection_range (3 samples, 0.08%)</title><rect x="60.5" y="787.0" width="1.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="63.5" y="798.0"></text>
</g>
<g>
<title>__ptep_modify_prot_commit (1 samples, 0.03%)</title><rect x="60.5" y="771.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="63.5" y="782.0"></text>
</g>
<g>
<title>native_set_pte_at (1 samples, 0.03%)</title><rect x="60.5" y="755.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="63.5" y="766.0"></text>
</g>
<g>
<title>flush_tlb_mm_range (2 samples, 0.05%)</title><rect x="60.9" y="771.0" width="0.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="63.9" y="782.0"></text>
</g>
<g>
<title>native_flush_tlb_others (2 samples, 0.05%)</title><rect x="60.9" y="755.0" width="0.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="63.9" y="766.0"></text>
</g>
<g>
<title>smp_call_function_many (2 samples, 0.05%)</title><rect x="60.9" y="739.0" width="0.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="63.9" y="750.0"></text>
</g>
<g>
<title>smp_call_function_single (2 samples, 0.05%)</title><rect x="60.9" y="723.0" width="0.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="63.9" y="734.0"></text>
</g>
<g>
<title>generic_exec_single (1 samples, 0.03%)</title><rect x="61.2" y="707.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="64.2" y="718.0"></text>
</g>
<g>
<title>native_send_call_func_single_ipi (1 samples, 0.03%)</title><rect x="61.2" y="691.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="64.2" y="702.0"></text>
</g>
<g>
<title>default_send_IPI_single (1 samples, 0.03%)</title><rect x="61.2" y="675.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="64.2" y="686.0"></text>
</g>
<g>
<title>default_send_IPI_mask_logical (1 samples, 0.03%)</title><rect x="61.2" y="659.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="64.2" y="670.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.61] (5 samples, 0.13%)</title><rect x="61.5" y="899.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="64.5" y="910.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (5 samples, 0.13%)</title><rect x="61.5" y="883.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="64.5" y="894.0"></text>
</g>
<g>
<title>VM_GenCollectForAllocation::doit() (5 samples, 0.13%)</title><rect x="61.5" y="867.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="64.5" y="878.0"></text>
</g>
<g>
<title>GenCollectedHeap::satisfy_failed_allocation(unsigned int, bool) (5 samples, 0.13%)</title><rect x="61.5" y="851.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="64.5" y="862.0"></text>
</g>
<g>
<title>GenCollectedHeap::do_collection(bool, bool, unsigned int, bool, GenCollectedHeap::GenerationType) (5 samples, 0.13%)</title><rect x="61.5" y="835.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="64.5" y="846.0"></text>
</g>
<g>
<title>GenCollectedHeap::collect_generation(Generation*, bool, unsigned int, bool, bool, bool, bool) (5 samples, 0.13%)</title><rect x="61.5" y="819.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="64.5" y="830.0"></text>
</g>
<g>
<title>DefNewGeneration::collect(bool, bool, unsigned int, bool) (4 samples, 0.11%)</title><rect x="61.5" y="803.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="64.5" y="814.0"></text>
</g>
<g>
<title>GenCollectedHeap::young_process_roots(StrongRootsScope*, OopsInGenClosure*, OopsInGenClosure*, CLDClosure*, OopStorage::ParState&lt;false, false&gt;*) (4 samples, 0.11%)</title><rect x="61.5" y="787.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="64.5" y="798.0"></text>
</g>
<g>
<title>CardGeneration::younger_refs_iterate(OopsInGenClosure*, unsigned int) (2 samples, 0.05%)</title><rect x="61.5" y="771.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="64.5" y="782.0"></text>
</g>
<g>
<title>CardTableRS::younger_refs_in_space_iterate(Space*, OopsInGenClosure*, unsigned int) (2 samples, 0.05%)</title><rect x="61.5" y="755.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="64.5" y="766.0"></text>
</g>
<g>
<title>ClearNoncleanCardWrapper::do_MemRegion(MemRegion) (2 samples, 0.05%)</title><rect x="61.5" y="739.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="64.5" y="750.0"></text>
</g>
<g>
<title>DirtyCardToOopClosure::do_MemRegion(MemRegion) (1 samples, 0.03%)</title><rect x="61.8" y="723.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="64.8" y="734.0"></text>
</g>
<g>
<title>BlockOffsetArrayContigSpace::block_start_unsafe(void const*) const (1 samples, 0.03%)</title><rect x="61.8" y="707.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="64.8" y="718.0"></text>
</g>
<g>
<title>ContiguousSpace::block_size(HeapWord const*) const (1 samples, 0.03%)</title><rect x="61.8" y="691.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="64.8" y="702.0"></text>
</g>
<g>
<title>StringTable::oops_do(OopClosure*) (1 samples, 0.03%)</title><rect x="62.1" y="771.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="65.1" y="782.0"></text>
</g>
<g>
<title>FastScanClosure::do_oop(oopDesc**) (1 samples, 0.03%)</title><rect x="62.1" y="755.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="65.1" y="766.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (1 samples, 0.03%)</title><rect x="62.4" y="771.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="65.4" y="782.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (1 samples, 0.03%)</title><rect x="62.4" y="755.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="65.4" y="766.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CodeBlobClosure*, RegisterMap*, bool) (1 samples, 0.03%)</title><rect x="62.4" y="739.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="65.4" y="750.0"></text>
</g>
<g>
<title>OopMapSet::oops_do(frame const*, RegisterMap const*, OopClosure*) (1 samples, 0.03%)</title><rect x="62.4" y="723.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="65.4" y="734.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned int, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="62.4" y="707.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="65.4" y="718.0"></text>
</g>
<g>
<title>TraceMemoryManagerStats::TraceMemoryManagerStats(GCMemoryManager*, GCCause::Cause, bool, bool, bool, bool, bool, bool, bool, bool) (1 samples, 0.03%)</title><rect x="62.7" y="803.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="65.7" y="814.0"></text>
</g>
<g>
<title>GCMemoryManager::gc_begin(bool, bool, bool) (1 samples, 0.03%)</title><rect x="62.7" y="787.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="65.7" y="798.0"></text>
</g>
<g>
<title>elapsedTimer::start() (1 samples, 0.03%)</title><rect x="62.7" y="771.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="65.7" y="782.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.03%)</title><rect x="62.7" y="755.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="65.7" y="766.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="62.7" y="739.0" width="0.4" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="65.7" y="750.0"></text>
</g>
<g>
<title>__kernel_vsyscall (1 samples, 0.03%)</title><rect x="62.7" y="723.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="65.7" y="734.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (1 samples, 0.03%)</title><rect x="62.7" y="707.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="65.7" y="718.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (1 samples, 0.03%)</title><rect x="62.7" y="691.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="65.7" y="702.0"></text>
</g>
<g>
<title>WatcherThread::run() (8 samples, 0.21%)</title><rect x="63.1" y="931.0" width="2.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="66.1" y="942.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (2 samples, 0.05%)</title><rect x="63.1" y="915.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="66.1" y="926.0"></text>
</g>
<g>
<title>PerfLongVariant::sample() (1 samples, 0.03%)</title><rect x="63.1" y="899.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="66.1" y="910.0"></text>
</g>
<g>
<title>StatSamplerTask::task() (1 samples, 0.03%)</title><rect x="63.4" y="899.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="66.4" y="910.0"></text>
</g>
<g>
<title>PerfLongVariant::sample() (1 samples, 0.03%)</title><rect x="63.4" y="883.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="66.4" y="894.0"></text>
</g>
<g>
<title>HighResTimeSampler::take_sample() (1 samples, 0.03%)</title><rect x="63.4" y="867.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="66.4" y="878.0"></text>
</g>
<g>
<title>os::elapsed_counter() (1 samples, 0.03%)</title><rect x="63.4" y="851.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="66.4" y="862.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (6 samples, 0.16%)</title><rect x="63.7" y="915.0" width="1.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="66.7" y="926.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (6 samples, 0.16%)</title><rect x="63.7" y="899.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="66.7" y="910.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long long) (5 samples, 0.13%)</title><rect x="64.0" y="883.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="67.0" y="894.0"></text>
</g>
<g>
<title>__kernel_vsyscall (4 samples, 0.11%)</title><rect x="64.0" y="867.0" width="1.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="67.0" y="878.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (2 samples, 0.05%)</title><rect x="64.6" y="851.0" width="0.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="67.6" y="862.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (2 samples, 0.05%)</title><rect x="64.6" y="835.0" width="0.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="67.6" y="846.0"></text>
</g>
<g>
<title>sys_futex (2 samples, 0.05%)</title><rect x="64.6" y="819.0" width="0.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="67.6" y="830.0"></text>
</g>
<g>
<title>do_futex (2 samples, 0.05%)</title><rect x="64.6" y="803.0" width="0.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="67.6" y="814.0"></text>
</g>
<g>
<title>futex_wait (2 samples, 0.05%)</title><rect x="64.6" y="787.0" width="0.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="67.6" y="798.0"></text>
</g>
<g>
<title>futex_wait_queue_me (2 samples, 0.05%)</title><rect x="64.6" y="771.0" width="0.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="67.6" y="782.0"></text>
</g>
<g>
<title>schedule (2 samples, 0.05%)</title><rect x="64.6" y="755.0" width="0.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="67.6" y="766.0"></text>
</g>
<g>
<title>__sched_text_start (2 samples, 0.05%)</title><rect x="64.6" y="739.0" width="0.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="67.6" y="750.0"></text>
</g>
<g>
<title>finish_task_switch (2 samples, 0.05%)</title><rect x="64.6" y="723.0" width="0.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="67.6" y="734.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (1 samples, 0.03%)</title><rect x="65.3" y="867.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="68.3" y="878.0"></text>
</g>
<g>
<title>java/lang/Thread.run (3,074 samples, 82.28%)</title><rect x="65.6" y="995.0" width="970.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="68.6" y="1006.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (3,074 samples, 82.28%)</title><rect x="65.6" y="979.0" width="970.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="68.6" y="990.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (3,074 samples, 82.28%)</title><rect x="65.6" y="963.0" width="970.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="68.6" y="974.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (9 samples, 0.24%)</title><rect x="66.2" y="947.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="69.2" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 0.24%)</title><rect x="66.2" y="931.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="69.2" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 0.24%)</title><rect x="66.2" y="915.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="69.2" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (313 samples, 8.38%)</title><rect x="69.1" y="947.0" width="98.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="72.1" y="958.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (303 samples, 8.11%)</title><rect x="72.2" y="931.0" width="95.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="75.2" y="942.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (221 samples, 5.92%)</title><rect x="72.5" y="915.0" width="69.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="75.5" y="926.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (27 samples, 0.72%)</title><rect x="73.5" y="899.0" width="8.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="76.5" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (27 samples, 0.72%)</title><rect x="73.5" y="883.0" width="8.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="76.5" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (1 samples, 0.03%)</title><rect x="82.0" y="899.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="85.0" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (1 samples, 0.03%)</title><rect x="82.0" y="883.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="85.0" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (190 samples, 5.09%)</title><rect x="82.3" y="899.0" width="60.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="85.3" y="910.0">java/u..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (189 samples, 5.06%)</title><rect x="82.6" y="883.0" width="59.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="85.6" y="894.0">jdk/in..</text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (2 samples, 0.05%)</title><rect x="83.9" y="867.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="86.9" y="878.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::JfrEvent(EventStartTime) (7 samples, 0.19%)</title><rect x="84.5" y="867.0" width="2.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="87.5" y="878.0"></text>
</g>
<g>
<title>Parker::park(bool, long long) (1 samples, 0.03%)</title><rect x="86.8" y="867.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="89.8" y="878.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.03%)</title><rect x="87.1" y="867.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="90.1" y="878.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.201] (2 samples, 0.05%)</title><rect x="87.4" y="867.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="90.4" y="878.0"></text>
</g>
<g>
<title>Unsafe_Park (64 samples, 1.71%)</title><rect x="88.0" y="867.0" width="20.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="91.0" y="878.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.03%)</title><rect x="90.5" y="851.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="93.5" y="862.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (9 samples, 0.24%)</title><rect x="90.9" y="851.0" width="2.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="93.9" y="862.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (3 samples, 0.08%)</title><rect x="92.8" y="835.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="95.8" y="846.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::JfrEvent(EventStartTime) (3 samples, 0.08%)</title><rect x="93.7" y="851.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="96.7" y="862.0"></text>
</g>
<g>
<title>Parker::park(bool, long long) (7 samples, 0.19%)</title><rect x="94.6" y="851.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="97.6" y="862.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.03%)</title><rect x="95.6" y="835.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="98.6" y="846.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (3 samples, 0.08%)</title><rect x="95.9" y="835.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="98.9" y="846.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (2 samples, 0.05%)</title><rect x="96.9" y="851.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="99.9" y="862.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.03%)</title><rect x="97.5" y="851.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="100.5" y="862.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.201] (5 samples, 0.13%)</title><rect x="97.8" y="851.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="100.8" y="862.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_trylock (5 samples, 0.13%)</title><rect x="99.4" y="851.0" width="1.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="102.4" y="862.0"></text>
</g>
<g>
<title>__kernel_vsyscall (8 samples, 0.21%)</title><rect x="101.0" y="851.0" width="2.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="104.0" y="862.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (7 samples, 0.19%)</title><rect x="101.3" y="835.0" width="2.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="104.3" y="846.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (7 samples, 0.19%)</title><rect x="101.3" y="819.0" width="2.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="104.3" y="830.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="101.6" y="803.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="104.6" y="814.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="101.6" y="787.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="104.6" y="798.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.03%)</title><rect x="101.6" y="771.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="104.6" y="782.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="101.6" y="755.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="104.6" y="766.0"></text>
</g>
<g>
<title>sys_futex (5 samples, 0.13%)</title><rect x="101.9" y="803.0" width="1.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="104.9" y="814.0"></text>
</g>
<g>
<title>do_futex (4 samples, 0.11%)</title><rect x="101.9" y="787.0" width="1.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="104.9" y="798.0"></text>
</g>
<g>
<title>futex_wake (4 samples, 0.11%)</title><rect x="101.9" y="771.0" width="1.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="104.9" y="782.0"></text>
</g>
<g>
<title>get_futex_key (1 samples, 0.03%)</title><rect x="102.9" y="755.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="105.9" y="766.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.03%)</title><rect x="103.2" y="787.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="106.2" y="798.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (2 samples, 0.05%)</title><rect x="103.5" y="851.0" width="0.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="106.5" y="862.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.ax (6 samples, 0.16%)</title><rect x="104.1" y="851.0" width="1.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="107.1" y="862.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="106.0" y="851.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="109.0" y="862.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (2 samples, 0.05%)</title><rect x="106.3" y="851.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="109.3" y="862.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.03%)</title><rect x="107.0" y="851.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="110.0" y="862.0"></text>
</g>
<g>
<title>pthread_cond_wait (3 samples, 0.08%)</title><rect x="107.3" y="851.0" width="0.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="110.3" y="862.0"></text>
</g>
<g>
<title>[unknown] (108 samples, 2.89%)</title><rect x="108.2" y="867.0" width="34.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="111.2" y="878.0">[u..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="108.2" y="851.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="111.2" y="862.0"></text>
</g>
<g>
<title>__kernel_vsyscall (1 samples, 0.03%)</title><rect x="108.2" y="835.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="111.2" y="846.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (1 samples, 0.03%)</title><rect x="108.2" y="819.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="111.2" y="830.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (1 samples, 0.03%)</title><rect x="108.2" y="803.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="111.2" y="814.0"></text>
</g>
<g>
<title>__kernel_vsyscall (97 samples, 2.60%)</title><rect x="108.5" y="851.0" width="30.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="111.5" y="862.0">__..</text>
</g>
<g>
<title>entry_SYSENTER_32 (97 samples, 2.60%)</title><rect x="108.5" y="835.0" width="30.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="111.5" y="846.0">en..</text>
</g>
<g>
<title>do_fast_syscall_32 (97 samples, 2.60%)</title><rect x="108.5" y="819.0" width="30.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="111.5" y="830.0">do..</text>
</g>
<g>
<title>sys_futex (97 samples, 2.60%)</title><rect x="108.5" y="803.0" width="30.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="111.5" y="814.0">sy..</text>
</g>
<g>
<title>do_futex (95 samples, 2.54%)</title><rect x="108.5" y="787.0" width="30.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="111.5" y="798.0">do..</text>
</g>
<g>
<title>futex_wait (94 samples, 2.52%)</title><rect x="108.9" y="771.0" width="29.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="111.9" y="782.0">fu..</text>
</g>
<g>
<title>futex_wait_queue_me (90 samples, 2.41%)</title><rect x="108.9" y="755.0" width="28.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="111.9" y="766.0">fu..</text>
</g>
<g>
<title>plist_add (3 samples, 0.08%)</title><rect x="108.9" y="739.0" width="0.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="111.9" y="750.0"></text>
</g>
<g>
<title>schedule (87 samples, 2.33%)</title><rect x="109.8" y="739.0" width="27.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="112.8" y="750.0">s..</text>
</g>
<g>
<title>__sched_text_start (87 samples, 2.33%)</title><rect x="109.8" y="723.0" width="27.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="112.8" y="734.0">_..</text>
</g>
<g>
<title>finish_task_switch (86 samples, 2.30%)</title><rect x="110.1" y="707.0" width="27.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="113.1" y="718.0">f..</text>
</g>
<g>
<title>futex_wait_setup (2 samples, 0.05%)</title><rect x="137.3" y="755.0" width="0.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="140.3" y="766.0"></text>
</g>
<g>
<title>hash_futex (1 samples, 0.03%)</title><rect x="137.6" y="739.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="140.6" y="750.0"></text>
</g>
<g>
<title>get_futex_key (2 samples, 0.05%)</title><rect x="137.9" y="755.0" width="0.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="140.9" y="766.0"></text>
</g>
<g>
<title>futex_wait (2 samples, 0.05%)</title><rect x="138.5" y="787.0" width="0.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="141.5" y="798.0"></text>
</g>
<g>
<title>__pthread_cleanup_push (1 samples, 0.03%)</title><rect x="139.2" y="851.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="142.2" y="862.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="139.2" y="835.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="142.2" y="846.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="139.2" y="819.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="142.2" y="830.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="139.2" y="803.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="142.2" y="814.0"></text>
</g>
<g>
<title>__pthread_cond_wait (2 samples, 0.05%)</title><rect x="139.5" y="851.0" width="0.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="142.5" y="862.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.03%)</title><rect x="140.1" y="851.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="143.1" y="862.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.05%)</title><rect x="140.4" y="851.0" width="0.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="143.4" y="862.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.05%)</title><rect x="141.1" y="851.0" width="0.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="144.1" y="862.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.03%)</title><rect x="141.7" y="851.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="144.7" y="862.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.di (1 samples, 0.03%)</title><rect x="142.0" y="851.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="145.0" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (5 samples, 0.13%)</title><rect x="142.3" y="915.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="145.3" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (5 samples, 0.13%)</title><rect x="142.3" y="899.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="145.3" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (5 samples, 0.13%)</title><rect x="142.3" y="883.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="145.3" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (76 samples, 2.03%)</title><rect x="143.9" y="915.0" width="24.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="146.9" y="926.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (76 samples, 2.03%)</title><rect x="143.9" y="899.0" width="24.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="146.9" y="910.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (76 samples, 2.03%)</title><rect x="143.9" y="883.0" width="24.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="146.9" y="894.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (76 samples, 2.03%)</title><rect x="143.9" y="867.0" width="24.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="146.9" y="878.0">j..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (76 samples, 2.03%)</title><rect x="143.9" y="851.0" width="24.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="146.9" y="862.0">j..</text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.03%)</title><rect x="144.2" y="835.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="147.2" y="846.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.03%)</title><rect x="144.6" y="835.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="147.6" y="846.0"></text>
</g>
<g>
<title>Unsafe_Unpark (9 samples, 0.24%)</title><rect x="144.9" y="835.0" width="2.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="147.9" y="846.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;CardTableBarrierSet::AccessBarrier&lt;1097812ull, CardTableBarrierSet&gt;, (AccessInternal::BarrierType)2, 1097812ull&gt;::oop_access_barrier(void*) (2 samples, 0.05%)</title><rect x="145.2" y="819.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="148.2" y="830.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.05%)</title><rect x="145.8" y="819.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="148.8" y="830.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_lock (1 samples, 0.03%)</title><rect x="146.4" y="819.0" width="0.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="149.4" y="830.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.03%)</title><rect x="146.8" y="819.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="149.8" y="830.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.05%)</title><rect x="147.1" y="819.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="150.1" y="830.0"></text>
</g>
<g>
<title>[unknown] (63 samples, 1.69%)</title><rect x="147.7" y="835.0" width="19.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="150.7" y="846.0"></text>
</g>
<g>
<title>__kernel_vsyscall (62 samples, 1.66%)</title><rect x="147.7" y="819.0" width="19.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="150.7" y="830.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (62 samples, 1.66%)</title><rect x="147.7" y="803.0" width="19.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="150.7" y="814.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (62 samples, 1.66%)</title><rect x="147.7" y="787.0" width="19.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="150.7" y="798.0"></text>
</g>
<g>
<title>sys_futex (62 samples, 1.66%)</title><rect x="147.7" y="771.0" width="19.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="150.7" y="782.0"></text>
</g>
<g>
<title>do_futex (62 samples, 1.66%)</title><rect x="147.7" y="755.0" width="19.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="150.7" y="766.0"></text>
</g>
<g>
<title>futex_wake (62 samples, 1.66%)</title><rect x="147.7" y="739.0" width="19.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="150.7" y="750.0"></text>
</g>
<g>
<title>wake_up_q (61 samples, 1.63%)</title><rect x="148.0" y="723.0" width="19.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="151.0" y="734.0"></text>
</g>
<g>
<title>try_to_wake_up (61 samples, 1.63%)</title><rect x="148.0" y="707.0" width="19.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="151.0" y="718.0"></text>
</g>
<g>
<title>__lock_text_start (61 samples, 1.63%)</title><rect x="148.0" y="691.0" width="19.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="151.0" y="702.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.03%)</title><rect x="167.3" y="819.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="170.3" y="830.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.ax (1 samples, 0.03%)</title><rect x="167.6" y="835.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="170.6" y="846.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1 samples, 0.03%)</title><rect x="167.9" y="947.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="170.9" y="958.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (1 samples, 0.03%)</title><rect x="167.9" y="931.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="170.9" y="942.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (1 samples, 0.03%)</title><rect x="167.9" y="915.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="170.9" y="926.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.03%)</title><rect x="167.9" y="899.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="170.9" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.03%)</title><rect x="167.9" y="883.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="170.9" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.03%)</title><rect x="167.9" y="867.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="170.9" y="878.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.03%)</title><rect x="167.9" y="851.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="170.9" y="862.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ServiceImpl$$Lambda$68/26703876.run (2,749 samples, 73.58%)</title><rect x="168.2" y="947.0" width="868.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="171.2" y="958.0">ru/mail/polis/service/dogm/ServiceImpl$$Lambda$68/26703876.run</text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ServiceImpl.lambda$executeAsync$4 (2,749 samples, 73.58%)</title><rect x="168.2" y="931.0" width="868.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="171.2" y="942.0">ru/mail/polis/service/dogm/ServiceImpl.lambda$executeAsync$4</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (807 samples, 21.60%)</title><rect x="169.2" y="915.0" width="254.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="172.2" y="926.0">one/nio/http/HttpSession.sendRespo..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (707 samples, 18.92%)</title><rect x="182.1" y="899.0" width="223.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="185.1" y="910.0">one/nio/http/HttpSession.writ..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (32 samples, 0.86%)</title><rect x="182.5" y="883.0" width="10.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="185.5" y="894.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (16 samples, 0.43%)</title><rect x="187.5" y="867.0" width="5.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="190.5" y="878.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (16 samples, 0.43%)</title><rect x="187.5" y="851.0" width="5.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="190.5" y="862.0"></text>
</g>
<g>
<title>java/lang/String.charAt (16 samples, 0.43%)</title><rect x="187.5" y="835.0" width="5.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="190.5" y="846.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="192.2" y="819.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="195.2" y="830.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="192.2" y="803.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="195.2" y="814.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="192.2" y="787.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="195.2" y="798.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (674 samples, 18.04%)</title><rect x="192.6" y="883.0" width="212.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="195.6" y="894.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (672 samples, 17.99%)</title><rect x="193.2" y="867.0" width="212.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="196.2" y="878.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (671 samples, 17.96%)</title><rect x="193.5" y="851.0" width="211.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="196.5" y="862.0">one/nio/net/Session$ArrayQue..</text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (2 samples, 0.05%)</title><rect x="194.1" y="835.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="197.1" y="846.0"></text>
</g>
<g>
<title>ObjectSynchronizer::slow_exit(oopDesc*, BasicLock*, Thread*) (6 samples, 0.16%)</title><rect x="194.8" y="835.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="197.8" y="846.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (8 samples, 0.21%)</title><rect x="196.7" y="835.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="199.7" y="846.0"></text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (2 samples, 0.05%)</title><rect x="196.7" y="819.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="199.7" y="830.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventJavaMonitorInflate&gt;::JfrEvent(EventStartTime) (2 samples, 0.05%)</title><rect x="197.3" y="819.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="200.3" y="830.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (2 samples, 0.05%)</title><rect x="197.9" y="819.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="200.9" y="830.0"></text>
</g>
<g>
<title>ObjectSynchronizer::slow_exit(oopDesc*, BasicLock*, Thread*) (2 samples, 0.05%)</title><rect x="198.6" y="819.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="201.6" y="830.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventJavaMonitorInflate&gt;::JfrEvent(EventStartTime) (2 samples, 0.05%)</title><rect x="198.6" y="803.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="201.6" y="814.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (653 samples, 17.48%)</title><rect x="199.2" y="835.0" width="206.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="202.2" y="846.0">one/nio/net/JavaSocket.write</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (653 samples, 17.48%)</title><rect x="199.2" y="819.0" width="206.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="202.2" y="830.0">sun/nio/ch/SocketChannelImp..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (68 samples, 1.82%)</title><rect x="199.2" y="803.0" width="21.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="202.2" y="814.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (68 samples, 1.82%)</title><rect x="199.2" y="787.0" width="21.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="202.2" y="798.0">j..</text>
</g>
<g>
<title>__vdso_gettimeofday (15 samples, 0.40%)</title><rect x="202.0" y="771.0" width="4.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="205.0" y="782.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (44 samples, 1.18%)</title><rect x="206.8" y="771.0" width="13.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="209.8" y="782.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.08%)</title><rect x="207.4" y="755.0" width="1.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="210.4" y="766.0"></text>
</g>
<g>
<title>__kernel_vsyscall (3 samples, 0.08%)</title><rect x="207.4" y="739.0" width="1.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="210.4" y="750.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (3 samples, 0.08%)</title><rect x="207.4" y="723.0" width="1.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="210.4" y="734.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (3 samples, 0.08%)</title><rect x="207.4" y="707.0" width="1.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="210.4" y="718.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.03%)</title><rect x="208.4" y="755.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="211.4" y="766.0"></text>
</g>
<g>
<title>__kernel_vsyscall (34 samples, 0.91%)</title><rect x="208.7" y="755.0" width="10.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="211.7" y="766.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (32 samples, 0.86%)</title><rect x="209.3" y="739.0" width="10.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="212.3" y="750.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (27 samples, 0.72%)</title><rect x="209.3" y="723.0" width="8.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="212.3" y="734.0"></text>
</g>
<g>
<title>_copy_to_user (9 samples, 0.24%)</title><rect x="209.9" y="707.0" width="2.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="212.9" y="718.0"></text>
</g>
<g>
<title>do_gettimeofday (4 samples, 0.11%)</title><rect x="212.8" y="707.0" width="1.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="215.8" y="718.0"></text>
</g>
<g>
<title>sys_gettimeofday (12 samples, 0.32%)</title><rect x="214.0" y="707.0" width="3.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="217.0" y="718.0"></text>
</g>
<g>
<title>__copy_user_ll (1 samples, 0.03%)</title><rect x="214.0" y="691.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="217.0" y="702.0"></text>
</g>
<g>
<title>__getnstimeofday64 (2 samples, 0.05%)</title><rect x="214.4" y="691.0" width="0.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="217.4" y="702.0"></text>
</g>
<g>
<title>_copy_to_user (1 samples, 0.03%)</title><rect x="215.0" y="691.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="218.0" y="702.0"></text>
</g>
<g>
<title>do_gettimeofday (8 samples, 0.21%)</title><rect x="215.3" y="691.0" width="2.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="218.3" y="702.0"></text>
</g>
<g>
<title>__getnstimeofday64 (8 samples, 0.21%)</title><rect x="215.3" y="675.0" width="2.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="218.3" y="686.0"></text>
</g>
<g>
<title>kvm_clock_get_cycles (4 samples, 0.11%)</title><rect x="216.6" y="659.0" width="1.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="219.6" y="670.0"></text>
</g>
<g>
<title>pvclock_clocksource_read (4 samples, 0.11%)</title><rect x="216.6" y="643.0" width="1.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="219.6" y="654.0"></text>
</g>
<g>
<title>sys_gettimeofday (5 samples, 0.13%)</title><rect x="217.8" y="723.0" width="1.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="220.8" y="734.0"></text>
</g>
<g>
<title>__vdso_gettimeofday (4 samples, 0.11%)</title><rect x="219.4" y="755.0" width="1.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="222.4" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (7 samples, 0.19%)</title><rect x="220.7" y="803.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="223.7" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.19%)</title><rect x="220.7" y="787.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="223.7" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.19%)</title><rect x="220.7" y="771.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="223.7" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (578 samples, 15.47%)</title><rect x="222.9" y="803.0" width="182.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="225.9" y="814.0">sun/nio/ch/IOUtil.write</text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="228.9" y="787.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="231.9" y="798.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="228.9" y="771.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="231.9" y="782.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="228.9" y="755.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="231.9" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (558 samples, 14.94%)</title><rect x="229.2" y="787.0" width="176.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="232.2" y="798.0">sun/nio/ch/IOUtil.write</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (558 samples, 14.94%)</title><rect x="229.2" y="771.0" width="176.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="232.2" y="782.0">sun/nio/ch/IOUtil.write..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (12 samples, 0.32%)</title><rect x="229.2" y="755.0" width="3.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="232.2" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (546 samples, 14.61%)</title><rect x="233.0" y="755.0" width="172.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="236.0" y="766.0">sun/nio/ch/SocketDispa..</text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="237.1" y="739.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="240.1" y="750.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="237.1" y="723.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="240.1" y="734.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="237.1" y="707.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="240.1" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (532 samples, 14.24%)</title><rect x="237.4" y="739.0" width="168.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="240.4" y="750.0">sun/nio/ch/FileDispatc..</text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (4 samples, 0.11%)</title><rect x="239.6" y="723.0" width="1.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="242.6" y="734.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (2 samples, 0.05%)</title><rect x="240.9" y="723.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="243.9" y="734.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="241.5" y="723.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="244.5" y="734.0"></text>
</g>
<g>
<title>__kernel_vsyscall (1 samples, 0.03%)</title><rect x="241.5" y="707.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="244.5" y="718.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (1 samples, 0.03%)</title><rect x="241.5" y="691.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="244.5" y="702.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (1 samples, 0.03%)</title><rect x="241.5" y="675.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="244.5" y="686.0"></text>
</g>
<g>
<title>__kernel_vsyscall (516 samples, 13.81%)</title><rect x="241.8" y="723.0" width="163.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="244.8" y="734.0">__kernel_vsyscall</text>
</g>
<g>
<title>entry_SYSENTER_32 (511 samples, 13.68%)</title><rect x="243.4" y="707.0" width="161.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="246.4" y="718.0">entry_SYSENTER_32</text>
</g>
<g>
<title>do_fast_syscall_32 (510 samples, 13.65%)</title><rect x="243.4" y="691.0" width="161.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="246.4" y="702.0">do_fast_syscall_32</text>
</g>
<g>
<title>exit_to_usermode_loop (15 samples, 0.40%)</title><rect x="243.7" y="675.0" width="4.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="246.7" y="686.0"></text>
</g>
<g>
<title>schedule (15 samples, 0.40%)</title><rect x="243.7" y="659.0" width="4.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="246.7" y="670.0"></text>
</g>
<g>
<title>__sched_text_start (15 samples, 0.40%)</title><rect x="243.7" y="643.0" width="4.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="246.7" y="654.0"></text>
</g>
<g>
<title>finish_task_switch (15 samples, 0.40%)</title><rect x="243.7" y="627.0" width="4.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="246.7" y="638.0"></text>
</g>
<g>
<title>sys_write (494 samples, 13.22%)</title><rect x="248.5" y="675.0" width="156.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="251.5" y="686.0">sys_write</text>
</g>
<g>
<title>__fdget_pos (1 samples, 0.03%)</title><rect x="248.8" y="659.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="251.8" y="670.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.03%)</title><rect x="248.8" y="643.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="251.8" y="654.0"></text>
</g>
<g>
<title>__fget (1 samples, 0.03%)</title><rect x="248.8" y="627.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="251.8" y="638.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.03%)</title><rect x="249.1" y="659.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="252.1" y="670.0"></text>
</g>
<g>
<title>__fsnotify_parent (2 samples, 0.05%)</title><rect x="249.4" y="659.0" width="0.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="252.4" y="670.0"></text>
</g>
<g>
<title>fput (2 samples, 0.05%)</title><rect x="250.0" y="659.0" width="0.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="253.0" y="670.0"></text>
</g>
<g>
<title>vfs_write (487 samples, 13.04%)</title><rect x="250.7" y="659.0" width="153.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="253.7" y="670.0">vfs_write</text>
</g>
<g>
<title>__vfs_write (466 samples, 12.47%)</title><rect x="251.9" y="643.0" width="147.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="254.9" y="654.0">__vfs_write</text>
</g>
<g>
<title>new_sync_write (463 samples, 12.39%)</title><rect x="252.9" y="627.0" width="146.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="255.9" y="638.0">new_sync_write</text>
</g>
<g>
<title>sock_write_iter (461 samples, 12.34%)</title><rect x="253.5" y="611.0" width="145.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="256.5" y="622.0">sock_write_iter</text>
</g>
<g>
<title>inet_sendmsg (3 samples, 0.08%)</title><rect x="253.5" y="595.0" width="1.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="256.5" y="606.0"></text>
</g>
<g>
<title>sock_sendmsg (458 samples, 12.26%)</title><rect x="254.5" y="595.0" width="144.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="257.5" y="606.0">sock_sendmsg</text>
</g>
<g>
<title>inet_sendmsg (447 samples, 11.96%)</title><rect x="254.8" y="579.0" width="141.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="257.8" y="590.0">inet_sendmsg</text>
</g>
<g>
<title>release_sock (3 samples, 0.08%)</title><rect x="255.4" y="563.0" width="1.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="258.4" y="574.0"></text>
</g>
<g>
<title>tcp_sendmsg (441 samples, 11.80%)</title><rect x="256.4" y="563.0" width="139.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="259.4" y="574.0">tcp_sendmsg</text>
</g>
<g>
<title>_copy_from_iter_full (1 samples, 0.03%)</title><rect x="256.7" y="547.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="259.7" y="558.0"></text>
</g>
<g>
<title>lock_sock_nested (3 samples, 0.08%)</title><rect x="257.0" y="547.0" width="0.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="260.0" y="558.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.03%)</title><rect x="257.0" y="531.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="260.0" y="542.0"></text>
</g>
<g>
<title>__raw_callee_save___pv_queued_spin_unlock (1 samples, 0.03%)</title><rect x="257.3" y="531.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="260.3" y="542.0"></text>
</g>
<g>
<title>__pv_queued_spin_unlock (1 samples, 0.03%)</title><rect x="257.3" y="515.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="260.3" y="526.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (1 samples, 0.03%)</title><rect x="257.6" y="531.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="260.6" y="542.0"></text>
</g>
<g>
<title>release_sock (5 samples, 0.13%)</title><rect x="257.9" y="547.0" width="1.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="260.9" y="558.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (2 samples, 0.05%)</title><rect x="258.3" y="531.0" width="0.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="261.3" y="542.0"></text>
</g>
<g>
<title>tcp_release_cb (2 samples, 0.05%)</title><rect x="258.9" y="531.0" width="0.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="261.9" y="542.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (1 samples, 0.03%)</title><rect x="259.5" y="547.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="262.5" y="558.0"></text>
</g>
<g>
<title>skb_entail (1 samples, 0.03%)</title><rect x="259.8" y="547.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="262.8" y="558.0"></text>
</g>
<g>
<title>sock_zerocopy_put (3 samples, 0.08%)</title><rect x="260.1" y="547.0" width="1.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="263.1" y="558.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (3 samples, 0.08%)</title><rect x="261.1" y="547.0" width="0.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="264.1" y="558.0"></text>
</g>
<g>
<title>tcp_send_mss (1 samples, 0.03%)</title><rect x="262.0" y="547.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="265.0" y="558.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (421 samples, 11.27%)</title><rect x="262.4" y="547.0" width="132.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="265.4" y="558.0">tcp_sendmsg_locked</text>
</g>
<g>
<title>__alloc_skb (1 samples, 0.03%)</title><rect x="263.3" y="531.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="266.3" y="542.0"></text>
</g>
<g>
<title>__check_heap_object (1 samples, 0.03%)</title><rect x="263.6" y="531.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="266.6" y="542.0"></text>
</g>
<g>
<title>__check_object_size (1 samples, 0.03%)</title><rect x="263.9" y="531.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="266.9" y="542.0"></text>
</g>
<g>
<title>page_address (1 samples, 0.03%)</title><rect x="263.9" y="515.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="266.9" y="526.0"></text>
</g>
<g>
<title>__virt_addr_valid (2 samples, 0.05%)</title><rect x="264.3" y="531.0" width="0.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="267.3" y="542.0"></text>
</g>
<g>
<title>_copy_from_iter_full (1 samples, 0.03%)</title><rect x="264.9" y="531.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="267.9" y="542.0"></text>
</g>
<g>
<title>copyin (1 samples, 0.03%)</title><rect x="264.9" y="515.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="267.9" y="526.0"></text>
</g>
<g>
<title>__copy_user_ll (1 samples, 0.03%)</title><rect x="264.9" y="499.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="267.9" y="510.0"></text>
</g>
<g>
<title>copyin (1 samples, 0.03%)</title><rect x="265.2" y="531.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="268.2" y="542.0"></text>
</g>
<g>
<title>sk_forced_mem_schedule (1 samples, 0.03%)</title><rect x="265.5" y="531.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="268.5" y="542.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (12 samples, 0.32%)</title><rect x="265.8" y="531.0" width="3.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="268.8" y="542.0"></text>
</g>
<g>
<title>__alloc_skb (10 samples, 0.27%)</title><rect x="266.5" y="515.0" width="3.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="269.5" y="526.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.45 (7 samples, 0.19%)</title><rect x="266.8" y="499.0" width="2.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="269.8" y="510.0"></text>
</g>
<g>
<title>__kmalloc_track_caller (5 samples, 0.13%)</title><rect x="267.1" y="483.0" width="1.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="270.1" y="494.0"></text>
</g>
<g>
<title>__slab_alloc.constprop.83 (1 samples, 0.03%)</title><rect x="268.0" y="467.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="271.0" y="478.0"></text>
</g>
<g>
<title>kmalloc_slab (1 samples, 0.03%)</title><rect x="268.4" y="467.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="271.4" y="478.0"></text>
</g>
<g>
<title>kmalloc_slab (1 samples, 0.03%)</title><rect x="268.7" y="483.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="271.7" y="494.0"></text>
</g>
<g>
<title>kmem_cache_alloc (2 samples, 0.05%)</title><rect x="269.0" y="499.0" width="0.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="272.0" y="510.0"></text>
</g>
<g>
<title>skb_entail (2 samples, 0.05%)</title><rect x="269.6" y="531.0" width="0.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="272.6" y="542.0"></text>
</g>
<g>
<title>tcp_current_mss (3 samples, 0.08%)</title><rect x="270.3" y="531.0" width="0.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="273.3" y="542.0"></text>
</g>
<g>
<title>tcp_push (386 samples, 10.33%)</title><rect x="271.2" y="531.0" width="121.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="274.2" y="542.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (386 samples, 10.33%)</title><rect x="271.2" y="515.0" width="121.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="274.2" y="526.0">__tcp_push_pend..</text>
</g>
<g>
<title>sched_clock_cpu (2 samples, 0.05%)</title><rect x="271.2" y="499.0" width="0.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="274.2" y="510.0"></text>
</g>
<g>
<title>tcp_write_xmit (384 samples, 10.28%)</title><rect x="271.8" y="499.0" width="121.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="274.8" y="510.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_select_window (1 samples, 0.03%)</title><rect x="273.1" y="483.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="276.1" y="494.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (361 samples, 9.66%)</title><rect x="273.4" y="483.0" width="114.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="276.4" y="494.0">__tcp_transmit..</text>
</g>
<g>
<title>__sk_dst_check (1 samples, 0.03%)</title><rect x="276.3" y="467.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="279.3" y="478.0"></text>
</g>
<g>
<title>__tcp_v4_send_check (1 samples, 0.03%)</title><rect x="276.6" y="467.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="279.6" y="478.0"></text>
</g>
<g>
<title>ip_copy_addrs (1 samples, 0.03%)</title><rect x="276.9" y="467.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="279.9" y="478.0"></text>
</g>
<g>
<title>ip_queue_xmit (345 samples, 9.23%)</title><rect x="277.2" y="467.0" width="109.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="280.2" y="478.0">ip_queue_xmit</text>
</g>
<g>
<title>ip_local_out (340 samples, 9.10%)</title><rect x="277.8" y="451.0" width="107.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="280.8" y="462.0">ip_local_out</text>
</g>
<g>
<title>__ip_local_out (1 samples, 0.03%)</title><rect x="277.8" y="435.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="280.8" y="446.0"></text>
</g>
<g>
<title>ip_finish_output (2 samples, 0.05%)</title><rect x="278.2" y="435.0" width="0.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="281.2" y="446.0"></text>
</g>
<g>
<title>ip_output (337 samples, 9.02%)</title><rect x="278.8" y="435.0" width="106.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="281.8" y="446.0">ip_output</text>
</g>
<g>
<title>ip_finish_output (334 samples, 8.94%)</title><rect x="279.7" y="419.0" width="105.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="282.7" y="430.0">ip_finish_out..</text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (2 samples, 0.05%)</title><rect x="280.7" y="403.0" width="0.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="283.7" y="414.0"></text>
</g>
<g>
<title>dev_queue_xmit (1 samples, 0.03%)</title><rect x="281.3" y="403.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="284.3" y="414.0"></text>
</g>
<g>
<title>ip_finish_output2 (328 samples, 8.78%)</title><rect x="281.6" y="403.0" width="103.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="284.6" y="414.0">ip_finish_ou..</text>
</g>
<g>
<title>__local_bh_enable_ip (293 samples, 7.84%)</title><rect x="284.8" y="387.0" width="92.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="287.8" y="398.0">__local_bh_..</text>
</g>
<g>
<title>do_softirq.part.15 (293 samples, 7.84%)</title><rect x="284.8" y="371.0" width="92.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="287.8" y="382.0">do_softirq...</text>
</g>
<g>
<title>do_softirq_own_stack (291 samples, 7.79%)</title><rect x="285.4" y="355.0" width="91.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="288.4" y="366.0">do_softirq_..</text>
</g>
<g>
<title>call_on_stack (291 samples, 7.79%)</title><rect x="285.4" y="339.0" width="91.9" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="288.4" y="350.0">call_on_stack</text>
</g>
<g>
<title>__do_softirq (290 samples, 7.76%)</title><rect x="285.4" y="323.0" width="91.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="288.4" y="334.0">__do_softirq</text>
</g>
<g>
<title>net_rx_action (284 samples, 7.60%)</title><rect x="287.0" y="307.0" width="89.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="290.0" y="318.0">net_rx_act..</text>
</g>
<g>
<title>__kfree_skb_flush (3 samples, 0.08%)</title><rect x="287.9" y="291.0" width="1.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="290.9" y="302.0"></text>
</g>
<g>
<title>process_backlog (278 samples, 7.44%)</title><rect x="288.9" y="291.0" width="87.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="291.9" y="302.0">process_ba..</text>
</g>
<g>
<title>__netif_receive_skb (276 samples, 7.39%)</title><rect x="289.5" y="275.0" width="87.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="292.5" y="286.0">__netif_re..</text>
</g>
<g>
<title>__netif_receive_skb_core (275 samples, 7.36%)</title><rect x="289.5" y="259.0" width="86.9" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="292.5" y="270.0">__netif_re..</text>
</g>
<g>
<title>ip_rcv (264 samples, 7.07%)</title><rect x="292.7" y="243.0" width="83.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="295.7" y="254.0">ip_rcv</text>
</g>
<g>
<title>ip_rcv_finish (264 samples, 7.07%)</title><rect x="292.7" y="227.0" width="83.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="295.7" y="238.0">ip_rcv_fi..</text>
</g>
<g>
<title>ip_local_deliver (261 samples, 6.99%)</title><rect x="293.6" y="211.0" width="82.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="296.6" y="222.0">ip_local_..</text>
</g>
<g>
<title>ip_local_deliver_finish (261 samples, 6.99%)</title><rect x="293.6" y="195.0" width="82.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="296.6" y="206.0">ip_local_..</text>
</g>
<g>
<title>__inet_lookup_established (1 samples, 0.03%)</title><rect x="293.9" y="179.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="296.9" y="190.0"></text>
</g>
<g>
<title>__raw_callee_save___pv_queued_spin_unlock (1 samples, 0.03%)</title><rect x="294.3" y="179.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="297.3" y="190.0"></text>
</g>
<g>
<title>__xfrm_policy_check2.constprop.34 (2 samples, 0.05%)</title><rect x="294.6" y="179.0" width="0.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="297.6" y="190.0"></text>
</g>
<g>
<title>raw_local_deliver (1 samples, 0.03%)</title><rect x="295.2" y="179.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="298.2" y="190.0"></text>
</g>
<g>
<title>tcp_v4_rcv (255 samples, 6.83%)</title><rect x="295.5" y="179.0" width="80.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="298.5" y="190.0">tcp_v4_rcv</text>
</g>
<g>
<title>__inet_lookup_established (3 samples, 0.08%)</title><rect x="297.4" y="163.0" width="1.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="300.4" y="174.0"></text>
</g>
<g>
<title>__raw_callee_save___pv_queued_spin_unlock (1 samples, 0.03%)</title><rect x="298.4" y="163.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="301.4" y="174.0"></text>
</g>
<g>
<title>__pv_queued_spin_unlock (1 samples, 0.03%)</title><rect x="298.4" y="147.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="301.4" y="158.0"></text>
</g>
<g>
<title>__xfrm_policy_check2.constprop.34 (1 samples, 0.03%)</title><rect x="298.7" y="163.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="301.7" y="174.0"></text>
</g>
<g>
<title>inet_ehashfn (1 samples, 0.03%)</title><rect x="299.0" y="163.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="302.0" y="174.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (3 samples, 0.08%)</title><rect x="299.3" y="163.0" width="1.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="302.3" y="174.0"></text>
</g>
<g>
<title>security_sock_rcv_skb (2 samples, 0.05%)</title><rect x="299.6" y="147.0" width="0.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="302.6" y="158.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (238 samples, 6.37%)</title><rect x="300.3" y="163.0" width="75.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="303.3" y="174.0">tcp_v4_d..</text>
</g>
<g>
<title>tcp_check_space (2 samples, 0.05%)</title><rect x="300.6" y="147.0" width="0.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="303.6" y="158.0"></text>
</g>
<g>
<title>tcp_data_queue (1 samples, 0.03%)</title><rect x="301.2" y="147.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="304.2" y="158.0"></text>
</g>
<g>
<title>tcp_rcv_established (234 samples, 6.26%)</title><rect x="301.5" y="147.0" width="73.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="304.5" y="158.0">tcp_rcv_..</text>
</g>
<g>
<title>__tcp_ack_snd_check (11 samples, 0.29%)</title><rect x="303.4" y="131.0" width="3.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="306.4" y="142.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (11 samples, 0.29%)</title><rect x="303.4" y="115.0" width="3.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="306.4" y="126.0"></text>
</g>
<g>
<title>sk_reset_timer (10 samples, 0.27%)</title><rect x="303.7" y="99.0" width="3.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="306.7" y="110.0"></text>
</g>
<g>
<title>lock_timer_base (1 samples, 0.03%)</title><rect x="303.7" y="83.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="306.7" y="94.0"></text>
</g>
<g>
<title>mod_timer (9 samples, 0.24%)</title><rect x="304.1" y="83.0" width="2.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="307.1" y="94.0"></text>
</g>
<g>
<title>__lock_text_start (9 samples, 0.24%)</title><rect x="304.1" y="67.0" width="2.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="307.1" y="78.0"></text>
</g>
<g>
<title>bictcp_cong_avoid (4 samples, 0.11%)</title><rect x="306.9" y="131.0" width="1.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="309.9" y="142.0"></text>
</g>
<g>
<title>get_seconds (2 samples, 0.05%)</title><rect x="308.2" y="131.0" width="0.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="311.2" y="142.0"></text>
</g>
<g>
<title>sched_clock_cpu (1 samples, 0.03%)</title><rect x="308.8" y="131.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="311.8" y="142.0"></text>
</g>
<g>
<title>sched_clock (1 samples, 0.03%)</title><rect x="308.8" y="115.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="311.8" y="126.0"></text>
</g>
<g>
<title>kvm_sched_clock_read (1 samples, 0.03%)</title><rect x="308.8" y="99.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="311.8" y="110.0"></text>
</g>
<g>
<title>pvclock_clocksource_read (1 samples, 0.03%)</title><rect x="308.8" y="83.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="311.8" y="94.0"></text>
</g>
<g>
<title>sock_def_readable (1 samples, 0.03%)</title><rect x="309.1" y="131.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="312.1" y="142.0"></text>
</g>
<g>
<title>tcp_ack (42 samples, 1.12%)</title><rect x="309.4" y="131.0" width="13.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="312.4" y="142.0"></text>
</g>
<g>
<title>bictcp_acked (1 samples, 0.03%)</title><rect x="312.9" y="115.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="315.9" y="126.0"></text>
</g>
<g>
<title>rb_next (1 samples, 0.03%)</title><rect x="313.2" y="115.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="316.2" y="126.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.41 (1 samples, 0.03%)</title><rect x="313.5" y="115.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="316.5" y="126.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (24 samples, 0.64%)</title><rect x="313.8" y="115.0" width="7.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="316.8" y="126.0"></text>
</g>
<g>
<title>__kfree_skb (8 samples, 0.21%)</title><rect x="315.4" y="99.0" width="2.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="318.4" y="110.0"></text>
</g>
<g>
<title>kfree_skbmem (1 samples, 0.03%)</title><rect x="315.4" y="83.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="318.4" y="94.0"></text>
</g>
<g>
<title>kmem_cache_free (1 samples, 0.03%)</title><rect x="315.4" y="67.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="318.4" y="78.0"></text>
</g>
<g>
<title>skb_release_all (6 samples, 0.16%)</title><rect x="315.7" y="83.0" width="1.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="318.7" y="94.0"></text>
</g>
<g>
<title>skb_free_head (1 samples, 0.03%)</title><rect x="315.7" y="67.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="318.7" y="78.0"></text>
</g>
<g>
<title>skb_release_data (5 samples, 0.13%)</title><rect x="316.1" y="67.0" width="1.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="319.1" y="78.0"></text>
</g>
<g>
<title>skb_free_head (2 samples, 0.05%)</title><rect x="317.0" y="51.0" width="0.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="320.0" y="62.0"></text>
</g>
<g>
<title>kfree (2 samples, 0.05%)</title><rect x="317.0" y="35.0" width="0.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="320.0" y="46.0"></text>
</g>
<g>
<title>skb_release_data (1 samples, 0.03%)</title><rect x="317.6" y="83.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="320.6" y="94.0"></text>
</g>
<g>
<title>bictcp_acked (1 samples, 0.03%)</title><rect x="317.9" y="99.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="320.9" y="110.0"></text>
</g>
<g>
<title>jiffies_to_usecs (1 samples, 0.03%)</title><rect x="318.3" y="99.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="321.3" y="110.0"></text>
</g>
<g>
<title>minmax_running_min (1 samples, 0.03%)</title><rect x="318.6" y="99.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="321.6" y="110.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.41 (8 samples, 0.21%)</title><rect x="318.9" y="99.0" width="2.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="321.9" y="110.0"></text>
</g>
<g>
<title>minmax_running_min (2 samples, 0.05%)</title><rect x="320.2" y="83.0" width="0.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="323.2" y="94.0"></text>
</g>
<g>
<title>minmax_subwin_update (1 samples, 0.03%)</title><rect x="320.5" y="67.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="323.5" y="78.0"></text>
</g>
<g>
<title>minmax_subwin_update (2 samples, 0.05%)</title><rect x="320.8" y="83.0" width="0.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="323.8" y="94.0"></text>
</g>
<g>
<title>tcp_rack_advance (1 samples, 0.03%)</title><rect x="321.4" y="115.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="324.4" y="126.0"></text>
</g>
<g>
<title>tcp_rate_skb_delivered (1 samples, 0.03%)</title><rect x="321.7" y="115.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="324.7" y="126.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (2 samples, 0.05%)</title><rect x="322.1" y="115.0" width="0.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="325.1" y="126.0"></text>
</g>
<g>
<title>tcp_check_space (1 samples, 0.03%)</title><rect x="322.7" y="131.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="325.7" y="142.0"></text>
</g>
<g>
<title>tcp_data_queue (163 samples, 4.36%)</title><rect x="323.0" y="131.0" width="51.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="326.0" y="142.0">tcp_d..</text>
</g>
<g>
<title>sock_def_readable (159 samples, 4.26%)</title><rect x="323.3" y="115.0" width="50.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="326.3" y="126.0">sock_..</text>
</g>
<g>
<title>__wake_up_sync_key (157 samples, 4.20%)</title><rect x="324.0" y="99.0" width="49.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="327.0" y="110.0">__wak..</text>
</g>
<g>
<title>__wake_up_common_lock (157 samples, 4.20%)</title><rect x="324.0" y="83.0" width="49.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="327.0" y="94.0">__wak..</text>
</g>
<g>
<title>__lock_text_start (157 samples, 4.20%)</title><rect x="324.0" y="67.0" width="49.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="327.0" y="78.0">__loc..</text>
</g>
<g>
<title>tcp_event_data_recv (1 samples, 0.03%)</title><rect x="373.5" y="115.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="376.5" y="126.0"></text>
</g>
<g>
<title>tcp_queue_rcv (2 samples, 0.05%)</title><rect x="373.9" y="115.0" width="0.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="376.9" y="126.0"></text>
</g>
<g>
<title>tcp_event_data_recv (1 samples, 0.03%)</title><rect x="374.5" y="131.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="377.5" y="142.0"></text>
</g>
<g>
<title>tcp_rack_update_reo_wnd (1 samples, 0.03%)</title><rect x="374.8" y="131.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="377.8" y="142.0"></text>
</g>
<g>
<title>tcp_rate_gen (1 samples, 0.03%)</title><rect x="375.1" y="131.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="378.1" y="142.0"></text>
</g>
<g>
<title>tcp_v4_fill_cb (2 samples, 0.05%)</title><rect x="375.4" y="163.0" width="0.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="378.4" y="174.0"></text>
</g>
<g>
<title>memmove (1 samples, 0.03%)</title><rect x="375.7" y="147.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="378.7" y="158.0"></text>
</g>
<g>
<title>ip_rcv_finish (1 samples, 0.03%)</title><rect x="376.1" y="243.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="379.1" y="254.0"></text>
</g>
<g>
<title>ip_rcv (1 samples, 0.03%)</title><rect x="376.4" y="259.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="379.4" y="270.0"></text>
</g>
<g>
<title>rcu_bh_qs (1 samples, 0.03%)</title><rect x="376.7" y="307.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="379.7" y="318.0"></text>
</g>
<g>
<title>rcu_bh_qs (1 samples, 0.03%)</title><rect x="377.0" y="323.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="380.0" y="334.0"></text>
</g>
<g>
<title>dev_queue_xmit (25 samples, 0.67%)</title><rect x="377.3" y="387.0" width="7.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="380.3" y="398.0"></text>
</g>
<g>
<title>__dev_queue_xmit (25 samples, 0.67%)</title><rect x="377.3" y="371.0" width="7.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="380.3" y="382.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.03%)</title><rect x="378.3" y="355.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="381.3" y="366.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (14 samples, 0.37%)</title><rect x="378.6" y="355.0" width="4.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="381.6" y="366.0"></text>
</g>
<g>
<title>loopback_xmit (10 samples, 0.27%)</title><rect x="379.2" y="339.0" width="3.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="382.2" y="350.0"></text>
</g>
<g>
<title>netif_rx (5 samples, 0.13%)</title><rect x="379.5" y="323.0" width="1.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="382.5" y="334.0"></text>
</g>
<g>
<title>enqueue_to_backlog (2 samples, 0.05%)</title><rect x="379.5" y="307.0" width="0.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="382.5" y="318.0"></text>
</g>
<g>
<title>netif_rx_internal (3 samples, 0.08%)</title><rect x="380.2" y="307.0" width="0.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="383.2" y="318.0"></text>
</g>
<g>
<title>enqueue_to_backlog (3 samples, 0.08%)</title><rect x="380.2" y="291.0" width="0.9" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="383.2" y="302.0"></text>
</g>
<g>
<title>netif_rx_internal (1 samples, 0.03%)</title><rect x="381.1" y="323.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="384.1" y="334.0"></text>
</g>
<g>
<title>tcp_wfree (3 samples, 0.08%)</title><rect x="381.4" y="323.0" width="1.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="384.4" y="334.0"></text>
</g>
<g>
<title>sk_free (1 samples, 0.03%)</title><rect x="382.1" y="307.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="385.1" y="318.0"></text>
</g>
<g>
<title>skb_clone_tx_timestamp (2 samples, 0.05%)</title><rect x="382.4" y="339.0" width="0.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="385.4" y="350.0"></text>
</g>
<g>
<title>loopback_xmit (1 samples, 0.03%)</title><rect x="383.0" y="355.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="386.0" y="366.0"></text>
</g>
<g>
<title>netdev_pick_tx (1 samples, 0.03%)</title><rect x="383.3" y="355.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="386.3" y="366.0"></text>
</g>
<g>
<title>netif_skb_features (1 samples, 0.03%)</title><rect x="383.6" y="355.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="386.6" y="366.0"></text>
</g>
<g>
<title>validate_xmit_skb (4 samples, 0.11%)</title><rect x="384.0" y="355.0" width="1.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="387.0" y="366.0"></text>
</g>
<g>
<title>netif_skb_features (4 samples, 0.11%)</title><rect x="384.0" y="339.0" width="1.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="387.0" y="350.0"></text>
</g>
<g>
<title>ip_output (1 samples, 0.03%)</title><rect x="385.2" y="451.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="388.2" y="462.0"></text>
</g>
<g>
<title>ipv4_dst_check (2 samples, 0.05%)</title><rect x="385.5" y="451.0" width="0.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="388.5" y="462.0"></text>
</g>
<g>
<title>skb_clone (2 samples, 0.05%)</title><rect x="386.2" y="467.0" width="0.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="389.2" y="478.0"></text>
</g>
<g>
<title>__copy_skb_header (1 samples, 0.03%)</title><rect x="386.2" y="451.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="389.2" y="462.0"></text>
</g>
<g>
<title>__skb_clone (1 samples, 0.03%)</title><rect x="386.5" y="451.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="389.5" y="462.0"></text>
</g>
<g>
<title>__copy_skb_header (1 samples, 0.03%)</title><rect x="386.5" y="435.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="389.5" y="446.0"></text>
</g>
<g>
<title>tcp_v4_send_check (2 samples, 0.05%)</title><rect x="386.8" y="467.0" width="0.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="389.8" y="478.0"></text>
</g>
<g>
<title>__tcp_v4_send_check (1 samples, 0.03%)</title><rect x="387.1" y="451.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="390.1" y="462.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (2 samples, 0.05%)</title><rect x="387.4" y="483.0" width="0.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="390.4" y="494.0"></text>
</g>
<g>
<title>ip_queue_xmit (2 samples, 0.05%)</title><rect x="388.1" y="483.0" width="0.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="391.1" y="494.0"></text>
</g>
<g>
<title>skb_clone (1 samples, 0.03%)</title><rect x="388.7" y="483.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="391.7" y="494.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (5 samples, 0.13%)</title><rect x="389.0" y="483.0" width="1.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="392.0" y="494.0"></text>
</g>
<g>
<title>tcp_rbtree_insert (1 samples, 0.03%)</title><rect x="390.0" y="467.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="393.0" y="478.0"></text>
</g>
<g>
<title>tcp_rearm_rto (1 samples, 0.03%)</title><rect x="390.3" y="467.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="393.3" y="478.0"></text>
</g>
<g>
<title>tcp_rearm_rto.part.60 (1 samples, 0.03%)</title><rect x="390.3" y="451.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="393.3" y="462.0"></text>
</g>
<g>
<title>sk_reset_timer (1 samples, 0.03%)</title><rect x="390.3" y="435.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="393.3" y="446.0"></text>
</g>
<g>
<title>mod_timer (1 samples, 0.03%)</title><rect x="390.3" y="419.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="393.3" y="430.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="390.3" y="403.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="393.3" y="414.0"></text>
</g>
<g>
<title>tcp_options_write (2 samples, 0.05%)</title><rect x="390.6" y="483.0" width="0.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="393.6" y="494.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (4 samples, 0.11%)</title><rect x="391.2" y="483.0" width="1.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="394.2" y="494.0"></text>
</g>
<g>
<title>mod_timer (1 samples, 0.03%)</title><rect x="391.5" y="467.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="394.5" y="478.0"></text>
</g>
<g>
<title>sk_reset_timer (2 samples, 0.05%)</title><rect x="391.9" y="467.0" width="0.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="394.9" y="478.0"></text>
</g>
<g>
<title>mod_timer (2 samples, 0.05%)</title><rect x="391.9" y="451.0" width="0.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="394.9" y="462.0"></text>
</g>
<g>
<title>tcp_v4_send_check (2 samples, 0.05%)</title><rect x="392.5" y="483.0" width="0.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="395.5" y="494.0"></text>
</g>
<g>
<title>tcp_send_mss (4 samples, 0.11%)</title><rect x="393.1" y="531.0" width="1.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="396.1" y="542.0"></text>
</g>
<g>
<title>tcp_current_mss (4 samples, 0.11%)</title><rect x="393.1" y="515.0" width="1.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="396.1" y="526.0"></text>
</g>
<g>
<title>ipv4_mtu (3 samples, 0.08%)</title><rect x="393.1" y="499.0" width="1.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="396.1" y="510.0"></text>
</g>
<g>
<title>tcp_established_options (1 samples, 0.03%)</title><rect x="394.1" y="499.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="397.1" y="510.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (3 samples, 0.08%)</title><rect x="394.4" y="531.0" width="0.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="397.4" y="542.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (1 samples, 0.03%)</title><rect x="395.3" y="547.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="398.3" y="558.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (1 samples, 0.03%)</title><rect x="395.6" y="563.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="398.6" y="574.0"></text>
</g>
<g>
<title>security_socket_sendmsg (10 samples, 0.27%)</title><rect x="396.0" y="579.0" width="3.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="399.0" y="590.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (2 samples, 0.05%)</title><rect x="396.6" y="563.0" width="0.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="399.6" y="574.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (6 samples, 0.16%)</title><rect x="397.2" y="563.0" width="1.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="400.2" y="574.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (6 samples, 0.16%)</title><rect x="397.2" y="547.0" width="1.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="400.2" y="558.0"></text>
</g>
<g>
<title>aa_sk_perm (4 samples, 0.11%)</title><rect x="397.9" y="531.0" width="1.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="400.9" y="542.0"></text>
</g>
<g>
<title>aa_label_sk_perm (4 samples, 0.11%)</title><rect x="397.9" y="515.0" width="1.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="400.9" y="526.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.03%)</title><rect x="398.8" y="499.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="401.8" y="510.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="398.8" y="483.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="401.8" y="494.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.03%)</title><rect x="398.8" y="467.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="401.8" y="478.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.03%)</title><rect x="398.8" y="451.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="401.8" y="462.0"></text>
</g>
<g>
<title>call_on_stack (1 samples, 0.03%)</title><rect x="398.8" y="435.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="401.8" y="446.0"></text>
</g>
<g>
<title>__do_softirq (1 samples, 0.03%)</title><rect x="398.8" y="419.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="401.8" y="430.0"></text>
</g>
<g>
<title>run_rebalance_domains (1 samples, 0.03%)</title><rect x="398.8" y="403.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="401.8" y="414.0"></text>
</g>
<g>
<title>rebalance_domains (1 samples, 0.03%)</title><rect x="398.8" y="387.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="401.8" y="398.0"></text>
</g>
<g>
<title>load_balance (1 samples, 0.03%)</title><rect x="398.8" y="371.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="401.8" y="382.0"></text>
</g>
<g>
<title>fsnotify (11 samples, 0.29%)</title><rect x="399.1" y="643.0" width="3.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="402.1" y="654.0"></text>
</g>
<g>
<title>rw_verify_area (6 samples, 0.16%)</title><rect x="402.6" y="643.0" width="1.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="405.6" y="654.0"></text>
</g>
<g>
<title>security_file_permission (5 samples, 0.13%)</title><rect x="402.9" y="627.0" width="1.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="405.9" y="638.0"></text>
</g>
<g>
<title>apparmor_file_permission (5 samples, 0.13%)</title><rect x="402.9" y="611.0" width="1.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="405.9" y="622.0"></text>
</g>
<g>
<title>aa_file_perm (1 samples, 0.03%)</title><rect x="402.9" y="595.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="405.9" y="606.0"></text>
</g>
<g>
<title>common_file_perm (4 samples, 0.11%)</title><rect x="403.2" y="595.0" width="1.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="406.2" y="606.0"></text>
</g>
<g>
<title>aa_file_perm (4 samples, 0.11%)</title><rect x="403.2" y="579.0" width="1.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="406.2" y="590.0"></text>
</g>
<g>
<title>sys_write (1 samples, 0.03%)</title><rect x="404.5" y="691.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="407.5" y="702.0"></text>
</g>
<g>
<title>__write (1 samples, 0.03%)</title><rect x="404.8" y="723.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="407.8" y="734.0"></text>
</g>
<g>
<title>convertReturnVal (1 samples, 0.03%)</title><rect x="405.1" y="723.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="408.1" y="734.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (59 samples, 1.58%)</title><rect x="405.4" y="899.0" width="18.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="408.4" y="910.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (59 samples, 1.58%)</title><rect x="405.4" y="883.0" width="18.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="408.4" y="894.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (59 samples, 1.58%)</title><rect x="405.4" y="867.0" width="18.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="408.4" y="878.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="423.8" y="851.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="426.8" y="862.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="423.8" y="835.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="426.8" y="846.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="423.8" y="819.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="426.8" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ServiceImpl$$Lambda$66/32589374.act (1,939 samples, 51.90%)</title><rect x="424.1" y="915.0" width="612.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="427.1" y="926.0">ru/mail/polis/service/dogm/ServiceImpl$$Lambda$66/32589374.act</text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ServiceImpl.lambda$entity$1 (1,936 samples, 51.82%)</title><rect x="425.0" y="899.0" width="611.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="428.0" y="910.0">ru/mail/polis/service/dogm/ServiceImpl.lambda$entity$1</text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ServiceImpl.put (1,936 samples, 51.82%)</title><rect x="425.0" y="883.0" width="611.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="428.0" y="894.0">ru/mail/polis/service/dogm/ServiceImpl.put</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (6 samples, 0.16%)</title><rect x="425.3" y="867.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="428.3" y="878.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (6 samples, 0.16%)</title><rect x="425.3" y="851.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="428.3" y="862.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (6 samples, 0.16%)</title><rect x="425.3" y="835.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="428.3" y="846.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.16%)</title><rect x="425.3" y="819.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="428.3" y="830.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (6 samples, 0.16%)</title><rect x="425.3" y="803.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="428.3" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (6 samples, 0.16%)</title><rect x="425.3" y="787.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="428.3" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="426.9" y="771.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="429.9" y="782.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.03%)</title><rect x="426.9" y="755.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="429.9" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.upsert (1,929 samples, 51.63%)</title><rect x="427.2" y="867.0" width="609.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="430.2" y="878.0">ru/mail/polis/dao/RocksDAO.upsert</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (1,927 samples, 51.58%)</title><rect x="427.2" y="851.0" width="608.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="430.2" y="862.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (1,916 samples, 51.28%)</title><rect x="430.7" y="835.0" width="605.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="433.7" y="846.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (12 samples, 0.32%)</title><rect x="432.6" y="819.0" width="3.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="435.6" y="830.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni1945528177827338328.so (14 samples, 0.37%)</title><rect x="436.4" y="819.0" width="4.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="439.4" y="830.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="440.5" y="803.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="443.5" y="814.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="440.5" y="787.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="443.5" y="798.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="440.5" y="771.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="443.5" y="782.0"></text>
</g>
<g>
<title>I2C/C2I adapters (7 samples, 0.19%)</title><rect x="440.8" y="819.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="443.8" y="830.0"></text>
</g>
<g>
<title>common_interrupt (1 samples, 0.03%)</title><rect x="442.4" y="803.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="445.4" y="814.0"></text>
</g>
<g>
<title>do_IRQ (1 samples, 0.03%)</title><rect x="442.4" y="787.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="445.4" y="798.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.03%)</title><rect x="442.4" y="771.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="445.4" y="782.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.03%)</title><rect x="442.4" y="755.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="445.4" y="766.0"></text>
</g>
<g>
<title>call_on_stack (1 samples, 0.03%)</title><rect x="442.4" y="739.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="445.4" y="750.0"></text>
</g>
<g>
<title>__do_softirq (1 samples, 0.03%)</title><rect x="442.4" y="723.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="445.4" y="734.0"></text>
</g>
<g>
<title>blk_done_softirq (1 samples, 0.03%)</title><rect x="442.4" y="707.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="445.4" y="718.0"></text>
</g>
<g>
<title>scsi_softirq_done (1 samples, 0.03%)</title><rect x="442.4" y="691.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="445.4" y="702.0"></text>
</g>
<g>
<title>scsi_finish_command (1 samples, 0.03%)</title><rect x="442.4" y="675.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="445.4" y="686.0"></text>
</g>
<g>
<title>scsi_io_completion (1 samples, 0.03%)</title><rect x="442.4" y="659.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="445.4" y="670.0"></text>
</g>
<g>
<title>scsi_end_request (1 samples, 0.03%)</title><rect x="442.4" y="643.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="445.4" y="654.0"></text>
</g>
<g>
<title>blk_update_request (1 samples, 0.03%)</title><rect x="442.4" y="627.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="445.4" y="638.0"></text>
</g>
<g>
<title>bio_endio (1 samples, 0.03%)</title><rect x="442.4" y="611.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="445.4" y="622.0"></text>
</g>
<g>
<title>end_swap_bio_read (1 samples, 0.03%)</title><rect x="442.4" y="595.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="445.4" y="606.0"></text>
</g>
<g>
<title>wake_up_process (1 samples, 0.03%)</title><rect x="442.4" y="579.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="445.4" y="590.0"></text>
</g>
<g>
<title>try_to_wake_up (1 samples, 0.03%)</title><rect x="442.4" y="563.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="445.4" y="574.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="442.4" y="547.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="445.4" y="558.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="442.7" y="803.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="445.7" y="814.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="442.7" y="787.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="445.7" y="798.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="442.7" y="771.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="445.7" y="782.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (1,288 samples, 34.48%)</title><rect x="443.0" y="819.0" width="406.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="446.0" y="830.0">Java_org_rocksdb_RocksDB_put__J_3BII_3BII</text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (1 samples, 0.03%)</title><rect x="444.3" y="803.0" width="0.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="447.3" y="814.0"></text>
</g>
<g>
<title>/usr/lib/i386-linux-gnu/libstdc++.so.6.0.25 (1 samples, 0.03%)</title><rect x="444.6" y="803.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="447.6" y="814.0"></text>
</g>
<g>
<title>_init (2 samples, 0.05%)</title><rect x="444.9" y="803.0" width="0.7" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="447.9" y="814.0"></text>
</g>
<g>
<title>free (1 samples, 0.03%)</title><rect x="445.6" y="803.0" width="0.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="448.6" y="814.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (3 samples, 0.08%)</title><rect x="445.9" y="803.0" width="0.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="448.9" y="814.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (5 samples, 0.13%)</title><rect x="446.8" y="803.0" width="1.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="449.8" y="814.0"></text>
</g>
<g>
<title>malloc (7 samples, 0.19%)</title><rect x="448.4" y="803.0" width="2.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="451.4" y="814.0"></text>
</g>
<g>
<title>operator new(unsigned int) (3 samples, 0.08%)</title><rect x="450.6" y="803.0" width="1.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="453.6" y="814.0"></text>
</g>
<g>
<title>operator new[](unsigned int) (4 samples, 0.11%)</title><rect x="451.6" y="803.0" width="1.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="454.6" y="814.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.05%)</title><rect x="452.8" y="803.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="455.8" y="814.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (1,255 samples, 33.59%)</title><rect x="453.4" y="803.0" width="396.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="456.4" y="814.0">rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::Wr..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;CardTableBarrierSet::AccessBarrier&lt;1097812ull, CardTableBarrierSet&gt;, (AccessInternal::BarrierType)2, 1097812ull&gt;::oop_access_barrier(void*) (3 samples, 0.08%)</title><rect x="455.7" y="787.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="458.7" y="798.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (3 samples, 0.08%)</title><rect x="456.6" y="787.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="459.6" y="798.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (3 samples, 0.08%)</title><rect x="457.6" y="787.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="460.6" y="798.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.158] (8 samples, 0.21%)</title><rect x="458.5" y="787.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="461.5" y="798.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (4 samples, 0.11%)</title><rect x="461.0" y="787.0" width="1.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="464.0" y="798.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.03%)</title><rect x="461.3" y="771.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="464.3" y="782.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.158] (1 samples, 0.03%)</title><rect x="461.7" y="771.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="464.7" y="782.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="462.0" y="771.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="465.0" y="782.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (21 samples, 0.56%)</title><rect x="462.3" y="787.0" width="6.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="465.3" y="798.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.03%)</title><rect x="463.2" y="771.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="466.2" y="782.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (4 samples, 0.11%)</title><rect x="463.6" y="771.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="466.6" y="782.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="464.5" y="755.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="467.5" y="766.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="464.5" y="739.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="467.5" y="750.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="464.5" y="723.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="467.5" y="734.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="464.5" y="707.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="467.5" y="718.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.03%)</title><rect x="464.5" y="691.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="467.5" y="702.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="464.5" y="675.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="467.5" y="686.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.05%)</title><rect x="464.8" y="771.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="467.8" y="782.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.158] (2 samples, 0.05%)</title><rect x="465.4" y="771.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="468.4" y="782.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (7 samples, 0.19%)</title><rect x="466.1" y="771.0" width="2.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="469.1" y="782.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (4 samples, 0.11%)</title><rect x="467.0" y="755.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="470.0" y="766.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned int) (2 samples, 0.05%)</title><rect x="468.3" y="771.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="471.3" y="782.0"></text>
</g>
<g>
<title>resume_userspace (2 samples, 0.05%)</title><rect x="468.9" y="787.0" width="0.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="471.9" y="798.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.05%)</title><rect x="468.9" y="771.0" width="0.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="471.9" y="782.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.05%)</title><rect x="468.9" y="755.0" width="0.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="471.9" y="766.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,201 samples, 32.15%)</title><rect x="469.6" y="787.0" width="379.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="472.6" y="798.0">rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocks..</text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="470.2" y="771.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="473.2" y="782.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="470.2" y="755.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="473.2" y="766.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="470.2" y="739.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="473.2" y="750.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.05%)</title><rect x="470.5" y="771.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="473.5" y="782.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,196 samples, 32.01%)</title><rect x="471.1" y="771.0" width="377.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="474.1" y="782.0">rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, ..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,189 samples, 31.83%)</title><rect x="471.5" y="755.0" width="375.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="474.5" y="766.0">rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rock..</text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (1 samples, 0.03%)</title><rect x="471.5" y="739.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="474.5" y="750.0"></text>
</g>
<g>
<title>free (4 samples, 0.11%)</title><rect x="471.8" y="739.0" width="1.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="474.8" y="750.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (1,131 samples, 30.27%)</title><rect x="473.0" y="739.0" width="357.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="476.0" y="750.0">rocksdb::DBImpl::Write(rocksdb::WriteOptions cons..</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (2 samples, 0.05%)</title><rect x="473.0" y="723.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="476.0" y="734.0"></text>
</g>
<g>
<title>___tls_get_addr (3 samples, 0.08%)</title><rect x="473.7" y="723.0" width="0.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="476.7" y="734.0"></text>
</g>
<g>
<title>_init (4 samples, 0.11%)</title><rect x="474.6" y="723.0" width="1.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="477.6" y="734.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteContext::~WriteContext() (1 samples, 0.03%)</title><rect x="475.9" y="723.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="478.9" y="734.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="475.9" y="707.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="478.9" y="718.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="475.9" y="691.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="478.9" y="702.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="475.9" y="675.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="478.9" y="686.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="475.9" y="659.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="478.9" y="670.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.03%)</title><rect x="475.9" y="643.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="478.9" y="654.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="475.9" y="627.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="478.9" y="638.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned int, rocksdb::PreReleaseCallback*) (1,110 samples, 29.71%)</title><rect x="476.2" y="723.0" width="350.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="479.2" y="734.0">rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions..</text>
</g>
<g>
<title>/lib/i386-linux-gnu/ld-2.27.so (1 samples, 0.03%)</title><rect x="481.6" y="707.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="484.6" y="718.0"></text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (1 samples, 0.03%)</title><rect x="481.9" y="707.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="484.9" y="718.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni1945528177827338328.so (1 samples, 0.03%)</title><rect x="482.2" y="707.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="485.2" y="718.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (2 samples, 0.05%)</title><rect x="482.5" y="707.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="485.5" y="718.0"></text>
</g>
<g>
<title>___tls_get_addr (1 samples, 0.03%)</title><rect x="483.1" y="707.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="486.1" y="718.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="483.1" y="691.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="486.1" y="702.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="483.1" y="675.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="486.1" y="686.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="483.1" y="659.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="486.1" y="670.0"></text>
</g>
<g>
<title>_init (3 samples, 0.08%)</title><rect x="483.5" y="707.0" width="0.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="486.5" y="718.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.03%)</title><rect x="484.4" y="707.0" width="0.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="487.4" y="718.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="484.7" y="707.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="487.7" y="718.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="484.7" y="691.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="487.7" y="702.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="484.7" y="675.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="487.7" y="686.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::MemTableInsertStatusCheck(rocksdb::Status const&amp;) (1 samples, 0.03%)</title><rect x="485.0" y="707.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="488.0" y="718.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="485.0" y="691.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="488.0" y="702.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="485.0" y="675.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="488.0" y="686.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="485.0" y="659.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="488.0" y="670.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::MergeBatch(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::WriteBatch*, unsigned int*, rocksdb::WriteBatch**) (2 samples, 0.05%)</title><rect x="485.3" y="707.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="488.3" y="718.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (3 samples, 0.08%)</title><rect x="486.0" y="707.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="489.0" y="718.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteContext::~WriteContext() (4 samples, 0.11%)</title><rect x="486.9" y="707.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="489.9" y="718.0"></text>
</g>
<g>
<title>rocksdb::SuperVersionContext::Clean() (1 samples, 0.03%)</title><rect x="487.6" y="691.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="490.6" y="702.0"></text>
</g>
<g>
<title>rocksdb::SuperVersionContext::~SuperVersionContext() (1 samples, 0.03%)</title><rect x="487.9" y="691.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="490.9" y="702.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteStatusCheck(rocksdb::Status const&amp;) (1 samples, 0.03%)</title><rect x="488.2" y="707.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="491.2" y="718.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (1 samples, 0.03%)</title><rect x="488.5" y="707.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="491.5" y="718.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (350 samples, 9.37%)</title><rect x="488.8" y="707.0" width="110.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="491.8" y="718.0">rocksdb::DBIm..</text>
</g>
<g>
<title>rocksdb::DBImpl::MergeBatch(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::WriteBatch*, unsigned int*, rocksdb::WriteBatch**) (2 samples, 0.05%)</title><rect x="489.8" y="691.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="492.8" y="702.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Append(rocksdb::WriteBatch*, rocksdb::WriteBatch const*, bool) (1 samples, 0.03%)</title><rect x="490.1" y="675.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="493.1" y="686.0"></text>
</g>
<g>
<title>std::string::_M_leak_hard() (1 samples, 0.03%)</title><rect x="490.1" y="659.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="493.1" y="670.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (340 samples, 9.10%)</title><rect x="490.4" y="691.0" width="107.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="493.4" y="702.0">rocksdb::DBIm..</text>
</g>
<g>
<title>_init (1 samples, 0.03%)</title><rect x="490.7" y="675.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="493.7" y="686.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (333 samples, 8.91%)</title><rect x="491.0" y="675.0" width="105.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="494.0" y="686.0">rocksdb::log:..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (6 samples, 0.16%)</title><rect x="491.3" y="659.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="494.3" y="670.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (4 samples, 0.11%)</title><rect x="493.2" y="659.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="496.2" y="670.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="494.2" y="643.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="497.2" y="654.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="494.2" y="627.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="497.2" y="638.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="494.2" y="611.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="497.2" y="622.0"></text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned int) (3 samples, 0.08%)</title><rect x="494.5" y="659.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="497.5" y="670.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="495.1" y="643.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="498.1" y="654.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="495.1" y="627.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="498.1" y="638.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="495.1" y="611.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="498.1" y="622.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="495.1" y="595.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="498.1" y="606.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.03%)</title><rect x="495.1" y="579.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="498.1" y="590.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="495.1" y="563.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="498.1" y="574.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned int) (319 samples, 8.54%)</title><rect x="495.5" y="659.0" width="100.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="498.5" y="670.0">rocksdb::log..</text>
</g>
<g>
<title>/lib/i386-linux-gnu/ld-2.27.so (1 samples, 0.03%)</title><rect x="495.8" y="643.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="498.8" y="654.0"></text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (8 samples, 0.21%)</title><rect x="496.1" y="643.0" width="2.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="499.1" y="654.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="498.3" y="627.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="501.3" y="638.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="498.3" y="611.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="501.3" y="622.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="498.3" y="595.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="501.3" y="606.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni1945528177827338328.so (3 samples, 0.08%)</title><rect x="498.6" y="643.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="501.6" y="654.0"></text>
</g>
<g>
<title>___tls_get_addr (2 samples, 0.05%)</title><rect x="499.6" y="643.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="502.6" y="654.0"></text>
</g>
<g>
<title>_init (3 samples, 0.08%)</title><rect x="500.2" y="643.0" width="0.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="503.2" y="654.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::use_direct_io() const (3 samples, 0.08%)</title><rect x="501.1" y="643.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="504.1" y="654.0"></text>
</g>
<g>
<title>rocksdb::WritableFile::PrepareWrite(unsigned int, unsigned int) (2 samples, 0.05%)</title><rect x="502.1" y="643.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="505.1" y="654.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (5 samples, 0.13%)</title><rect x="502.7" y="643.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="505.7" y="654.0"></text>
</g>
<g>
<title>rocksdb::WritableFile::PrepareWrite(unsigned int, unsigned int) (1 samples, 0.03%)</title><rect x="504.0" y="627.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="507.0" y="638.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (286 samples, 7.66%)</title><rect x="504.3" y="643.0" width="90.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="507.3" y="654.0">rocksdb::W..</text>
</g>
<g>
<title>rocksdb::GetPerfLevel() (2 samples, 0.05%)</title><rect x="504.3" y="627.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="507.3" y="638.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::GetFileSize() (4 samples, 0.11%)</title><rect x="504.9" y="627.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="507.9" y="638.0"></text>
</g>
<g>
<title>rocksdb::SetPerfLevel(rocksdb::PerfLevel) (1 samples, 0.03%)</title><rect x="506.2" y="627.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="509.2" y="638.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned int) (279 samples, 7.47%)</title><rect x="506.5" y="627.0" width="88.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="509.5" y="638.0">rocksdb::W..</text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (2 samples, 0.05%)</title><rect x="508.1" y="611.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="511.1" y="622.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="508.4" y="595.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="511.4" y="606.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="508.4" y="579.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="511.4" y="590.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="508.4" y="563.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="511.4" y="574.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="508.7" y="611.0" width="0.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="511.7" y="622.0"></text>
</g>
<g>
<title>__kernel_vsyscall (1 samples, 0.03%)</title><rect x="508.7" y="595.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="511.7" y="606.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (1 samples, 0.03%)</title><rect x="508.7" y="579.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="511.7" y="590.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (1 samples, 0.03%)</title><rect x="508.7" y="563.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="511.7" y="574.0"></text>
</g>
<g>
<title>__kernel_vsyscall (266 samples, 7.12%)</title><rect x="509.0" y="611.0" width="84.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="512.0" y="622.0">__kernel_v..</text>
</g>
<g>
<title>entry_SYSENTER_32 (266 samples, 7.12%)</title><rect x="509.0" y="595.0" width="84.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="512.0" y="606.0">entry_SYSE..</text>
</g>
<g>
<title>do_fast_syscall_32 (266 samples, 7.12%)</title><rect x="509.0" y="579.0" width="84.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="512.0" y="590.0">do_fast_sy..</text>
</g>
<g>
<title>__f_unlock_pos (1 samples, 0.03%)</title><rect x="509.0" y="563.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="512.0" y="574.0"></text>
</g>
<g>
<title>__fdget_pos (1 samples, 0.03%)</title><rect x="509.4" y="563.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="512.4" y="574.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (7 samples, 0.19%)</title><rect x="509.7" y="563.0" width="2.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="512.7" y="574.0"></text>
</g>
<g>
<title>schedule (7 samples, 0.19%)</title><rect x="509.7" y="547.0" width="2.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="512.7" y="558.0"></text>
</g>
<g>
<title>__sched_text_start (7 samples, 0.19%)</title><rect x="509.7" y="531.0" width="2.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="512.7" y="542.0"></text>
</g>
<g>
<title>finish_task_switch (6 samples, 0.16%)</title><rect x="510.0" y="515.0" width="1.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="513.0" y="526.0"></text>
</g>
<g>
<title>fput (1 samples, 0.03%)</title><rect x="511.9" y="563.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="514.9" y="574.0"></text>
</g>
<g>
<title>sys_write (254 samples, 6.80%)</title><rect x="512.2" y="563.0" width="80.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="515.2" y="574.0">sys_write</text>
</g>
<g>
<title>__fdget_pos (3 samples, 0.08%)</title><rect x="512.5" y="547.0" width="1.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="515.5" y="558.0"></text>
</g>
<g>
<title>__fget_light (3 samples, 0.08%)</title><rect x="512.5" y="531.0" width="1.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="515.5" y="542.0"></text>
</g>
<g>
<title>__fget (3 samples, 0.08%)</title><rect x="512.5" y="515.0" width="1.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="515.5" y="526.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.03%)</title><rect x="513.5" y="547.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="516.5" y="558.0"></text>
</g>
<g>
<title>__sb_end_write (1 samples, 0.03%)</title><rect x="513.8" y="547.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="516.8" y="558.0"></text>
</g>
<g>
<title>__sb_start_write (2 samples, 0.05%)</title><rect x="514.1" y="547.0" width="0.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="517.1" y="558.0"></text>
</g>
<g>
<title>fsnotify (1 samples, 0.03%)</title><rect x="514.7" y="547.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="517.7" y="558.0"></text>
</g>
<g>
<title>mutex_unlock (1 samples, 0.03%)</title><rect x="515.0" y="547.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="518.0" y="558.0"></text>
</g>
<g>
<title>vfs_write (244 samples, 6.53%)</title><rect x="515.4" y="547.0" width="77.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="518.4" y="558.0">vfs_write</text>
</g>
<g>
<title>__sb_start_write (5 samples, 0.13%)</title><rect x="515.7" y="531.0" width="1.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="518.7" y="542.0"></text>
</g>
<g>
<title>__vfs_write (228 samples, 6.10%)</title><rect x="517.2" y="531.0" width="72.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="520.2" y="542.0">__vfs_wr..</text>
</g>
<g>
<title>ext4_file_write_iter (1 samples, 0.03%)</title><rect x="517.6" y="515.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="520.6" y="526.0"></text>
</g>
<g>
<title>new_sync_write (226 samples, 6.05%)</title><rect x="517.9" y="515.0" width="71.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="520.9" y="526.0">new_sync..</text>
</g>
<g>
<title>__generic_file_write_iter (1 samples, 0.03%)</title><rect x="518.2" y="499.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="521.2" y="510.0"></text>
</g>
<g>
<title>ext4_file_write_iter (222 samples, 5.94%)</title><rect x="518.5" y="499.0" width="70.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="521.5" y="510.0">ext4_fil..</text>
</g>
<g>
<title>__generic_file_write_iter (212 samples, 5.67%)</title><rect x="519.1" y="483.0" width="67.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="522.1" y="494.0">__gener..</text>
</g>
<g>
<title>current_time (1 samples, 0.03%)</title><rect x="519.5" y="467.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="522.5" y="478.0"></text>
</g>
<g>
<title>ext4_da_write_begin (4 samples, 0.11%)</title><rect x="519.8" y="467.0" width="1.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="522.8" y="478.0"></text>
</g>
<g>
<title>file_remove_privs (2 samples, 0.05%)</title><rect x="521.0" y="467.0" width="0.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="524.0" y="478.0"></text>
</g>
<g>
<title>file_update_time (35 samples, 0.94%)</title><rect x="521.7" y="467.0" width="11.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="524.7" y="478.0"></text>
</g>
<g>
<title>__mnt_want_write_file (1 samples, 0.03%)</title><rect x="522.0" y="451.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="525.0" y="462.0"></text>
</g>
<g>
<title>current_kernel_time64 (1 samples, 0.03%)</title><rect x="522.3" y="451.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="525.3" y="462.0"></text>
</g>
<g>
<title>generic_update_time (31 samples, 0.83%)</title><rect x="522.6" y="451.0" width="9.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="525.6" y="462.0"></text>
</g>
<g>
<title>__mark_inode_dirty (30 samples, 0.80%)</title><rect x="522.6" y="435.0" width="9.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="525.6" y="446.0"></text>
</g>
<g>
<title>__ext4_journal_start_sb (1 samples, 0.03%)</title><rect x="522.6" y="419.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="525.6" y="430.0"></text>
</g>
<g>
<title>ext4_dirty_inode (28 samples, 0.75%)</title><rect x="522.9" y="419.0" width="8.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="525.9" y="430.0"></text>
</g>
<g>
<title>__ext4_journal_start_sb (6 samples, 0.16%)</title><rect x="522.9" y="403.0" width="1.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="525.9" y="414.0"></text>
</g>
<g>
<title>ext4_journal_check_start (1 samples, 0.03%)</title><rect x="522.9" y="387.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="525.9" y="398.0"></text>
</g>
<g>
<title>jbd2__journal_start (5 samples, 0.13%)</title><rect x="523.2" y="387.0" width="1.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="526.2" y="398.0"></text>
</g>
<g>
<title>kmem_cache_alloc (2 samples, 0.05%)</title><rect x="523.6" y="371.0" width="0.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="526.6" y="382.0"></text>
</g>
<g>
<title>start_this_handle (2 samples, 0.05%)</title><rect x="524.2" y="371.0" width="0.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="527.2" y="382.0"></text>
</g>
<g>
<title>__ext4_journal_stop (1 samples, 0.03%)</title><rect x="524.8" y="403.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="527.8" y="414.0"></text>
</g>
<g>
<title>jbd2_journal_stop (1 samples, 0.03%)</title><rect x="524.8" y="387.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="527.8" y="398.0"></text>
</g>
<g>
<title>ext4_mark_inode_dirty (20 samples, 0.54%)</title><rect x="525.1" y="403.0" width="6.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="528.1" y="414.0"></text>
</g>
<g>
<title>ext4_mark_iloc_dirty (11 samples, 0.29%)</title><rect x="525.5" y="387.0" width="3.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="528.5" y="398.0"></text>
</g>
<g>
<title>ext4_do_update_inode (8 samples, 0.21%)</title><rect x="525.5" y="371.0" width="2.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="528.5" y="382.0"></text>
</g>
<g>
<title>ext4_inode_csum_set (5 samples, 0.13%)</title><rect x="525.8" y="355.0" width="1.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="528.8" y="366.0"></text>
</g>
<g>
<title>ext4_inode_csum.isra.52 (5 samples, 0.13%)</title><rect x="525.8" y="339.0" width="1.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="528.8" y="350.0"></text>
</g>
<g>
<title>crypto_shash_update (4 samples, 0.11%)</title><rect x="526.1" y="323.0" width="1.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="529.1" y="334.0"></text>
</g>
<g>
<title>chksum_update (3 samples, 0.08%)</title><rect x="526.4" y="307.0" width="1.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="529.4" y="318.0"></text>
</g>
<g>
<title>__crc32c_le (3 samples, 0.08%)</title><rect x="526.4" y="291.0" width="1.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="529.4" y="302.0"></text>
</g>
<g>
<title>from_kuid (1 samples, 0.03%)</title><rect x="527.4" y="355.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="530.4" y="366.0"></text>
</g>
<g>
<title>map_id_up (1 samples, 0.03%)</title><rect x="527.4" y="339.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="530.4" y="350.0"></text>
</g>
<g>
<title>jbd2_journal_dirty_metadata (1 samples, 0.03%)</title><rect x="527.7" y="355.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="530.7" y="366.0"></text>
</g>
<g>
<title>from_kuid (3 samples, 0.08%)</title><rect x="528.0" y="371.0" width="0.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="531.0" y="382.0"></text>
</g>
<g>
<title>ext4_reserve_inode_write (8 samples, 0.21%)</title><rect x="528.9" y="387.0" width="2.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="531.9" y="398.0"></text>
</g>
<g>
<title>__ext4_get_inode_loc (6 samples, 0.16%)</title><rect x="528.9" y="371.0" width="1.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="531.9" y="382.0"></text>
</g>
<g>
<title>__getblk_gfp (2 samples, 0.05%)</title><rect x="529.3" y="355.0" width="0.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="532.3" y="366.0"></text>
</g>
<g>
<title>mark_page_accessed (2 samples, 0.05%)</title><rect x="529.3" y="339.0" width="0.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="532.3" y="350.0"></text>
</g>
<g>
<title>ext4_get_group_desc (1 samples, 0.03%)</title><rect x="529.9" y="355.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="532.9" y="366.0"></text>
</g>
<g>
<title>ext4_inode_table (2 samples, 0.05%)</title><rect x="530.2" y="355.0" width="0.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="533.2" y="366.0"></text>
</g>
<g>
<title>__ext4_journal_get_write_access (1 samples, 0.03%)</title><rect x="530.8" y="371.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="533.8" y="382.0"></text>
</g>
<g>
<title>jbd2_journal_get_write_access (1 samples, 0.03%)</title><rect x="530.8" y="355.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="533.8" y="366.0"></text>
</g>
<g>
<title>jbd2_write_access_granted.part.8 (1 samples, 0.03%)</title><rect x="530.8" y="339.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="533.8" y="350.0"></text>
</g>
<g>
<title>jbd2_journal_get_write_access (1 samples, 0.03%)</title><rect x="531.1" y="371.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="534.1" y="382.0"></text>
</g>
<g>
<title>jbd2_journal_stop (1 samples, 0.03%)</title><rect x="531.5" y="403.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="534.5" y="414.0"></text>
</g>
<g>
<title>ext4_mark_inode_dirty (1 samples, 0.03%)</title><rect x="531.8" y="419.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="534.8" y="430.0"></text>
</g>
<g>
<title>ext4_dirty_inode (1 samples, 0.03%)</title><rect x="532.1" y="435.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="535.1" y="446.0"></text>
</g>
<g>
<title>timespec_trunc (1 samples, 0.03%)</title><rect x="532.4" y="451.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="535.4" y="462.0"></text>
</g>
<g>
<title>generic_perform_write (167 samples, 4.47%)</title><rect x="532.7" y="467.0" width="52.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="535.7" y="478.0">gener..</text>
</g>
<g>
<title>__kunmap_atomic (1 samples, 0.03%)</title><rect x="533.0" y="451.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="536.0" y="462.0"></text>
</g>
<g>
<title>balance_dirty_pages_ratelimited (2 samples, 0.05%)</title><rect x="533.4" y="451.0" width="0.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="536.4" y="462.0"></text>
</g>
<g>
<title>copyin (1 samples, 0.03%)</title><rect x="534.0" y="451.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="537.0" y="462.0"></text>
</g>
<g>
<title>ext4_block_write_begin (1 samples, 0.03%)</title><rect x="534.3" y="451.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="537.3" y="462.0"></text>
</g>
<g>
<title>ext4_da_write_begin (51 samples, 1.37%)</title><rect x="534.6" y="451.0" width="16.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="537.6" y="462.0"></text>
</g>
<g>
<title>__ext4_journal_start_sb (17 samples, 0.46%)</title><rect x="534.9" y="435.0" width="5.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="537.9" y="446.0"></text>
</g>
<g>
<title>ext4_journal_check_start (1 samples, 0.03%)</title><rect x="534.9" y="419.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="537.9" y="430.0"></text>
</g>
<g>
<title>jbd2__journal_start (15 samples, 0.40%)</title><rect x="535.3" y="419.0" width="4.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="538.3" y="430.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.03%)</title><rect x="536.2" y="403.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="539.2" y="414.0"></text>
</g>
<g>
<title>kmem_cache_alloc (4 samples, 0.11%)</title><rect x="536.5" y="403.0" width="1.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="539.5" y="414.0"></text>
</g>
<g>
<title>start_this_handle (7 samples, 0.19%)</title><rect x="537.8" y="403.0" width="2.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="540.8" y="414.0"></text>
</g>
<g>
<title>start_this_handle (1 samples, 0.03%)</title><rect x="540.0" y="419.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="543.0" y="430.0"></text>
</g>
<g>
<title>ext4_block_write_begin (7 samples, 0.19%)</title><rect x="540.3" y="435.0" width="2.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="543.3" y="446.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.03%)</title><rect x="541.9" y="419.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="544.9" y="430.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="541.9" y="403.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="544.9" y="414.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.03%)</title><rect x="541.9" y="387.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="544.9" y="398.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.03%)</title><rect x="541.9" y="371.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="544.9" y="382.0"></text>
</g>
<g>
<title>call_on_stack (1 samples, 0.03%)</title><rect x="541.9" y="355.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="544.9" y="366.0"></text>
</g>
<g>
<title>__do_softirq (1 samples, 0.03%)</title><rect x="541.9" y="339.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="544.9" y="350.0"></text>
</g>
<g>
<title>run_rebalance_domains (1 samples, 0.03%)</title><rect x="541.9" y="323.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="544.9" y="334.0"></text>
</g>
<g>
<title>rebalance_domains (1 samples, 0.03%)</title><rect x="541.9" y="307.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="544.9" y="318.0"></text>
</g>
<g>
<title>update_blocked_averages (1 samples, 0.03%)</title><rect x="541.9" y="291.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="544.9" y="302.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="541.9" y="275.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="544.9" y="286.0"></text>
</g>
<g>
<title>clean_bdev_aliases (1 samples, 0.03%)</title><rect x="542.2" y="419.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="545.2" y="430.0"></text>
</g>
<g>
<title>ext4_nonda_switch (4 samples, 0.11%)</title><rect x="542.5" y="435.0" width="1.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="545.5" y="446.0"></text>
</g>
<g>
<title>grab_cache_page_write_begin (17 samples, 0.46%)</title><rect x="543.8" y="435.0" width="5.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="546.8" y="446.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.03%)</title><rect x="544.1" y="419.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="547.1" y="430.0"></text>
</g>
<g>
<title>find_get_entry (1 samples, 0.03%)</title><rect x="544.4" y="419.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="547.4" y="430.0"></text>
</g>
<g>
<title>pagecache_get_page (13 samples, 0.35%)</title><rect x="544.7" y="419.0" width="4.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="547.7" y="430.0"></text>
</g>
<g>
<title>__alloc_pages_nodemask (1 samples, 0.03%)</title><rect x="544.7" y="403.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="547.7" y="414.0"></text>
</g>
<g>
<title>get_page_from_freelist (1 samples, 0.03%)</title><rect x="544.7" y="387.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="547.7" y="398.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.03%)</title><rect x="545.0" y="403.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="548.0" y="414.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.03%)</title><rect x="545.0" y="387.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="548.0" y="398.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="545.0" y="371.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="548.0" y="382.0"></text>
</g>
<g>
<title>find_get_entry (8 samples, 0.21%)</title><rect x="545.4" y="403.0" width="2.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="548.4" y="414.0"></text>
</g>
<g>
<title>__radix_tree_lookup (2 samples, 0.05%)</title><rect x="546.0" y="387.0" width="0.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="549.0" y="398.0"></text>
</g>
<g>
<title>radix_tree_lookup_slot (4 samples, 0.11%)</title><rect x="546.6" y="387.0" width="1.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="549.6" y="398.0"></text>
</g>
<g>
<title>__radix_tree_lookup (4 samples, 0.11%)</title><rect x="546.6" y="371.0" width="1.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="549.6" y="382.0"></text>
</g>
<g>
<title>radix_tree_lookup_slot (3 samples, 0.08%)</title><rect x="547.9" y="403.0" width="0.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="550.9" y="414.0"></text>
</g>
<g>
<title>wait_for_stable_page (1 samples, 0.03%)</title><rect x="548.8" y="419.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="551.8" y="430.0"></text>
</g>
<g>
<title>jbd2__journal_start (3 samples, 0.08%)</title><rect x="549.1" y="435.0" width="1.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="552.1" y="446.0"></text>
</g>
<g>
<title>unlock_page (1 samples, 0.03%)</title><rect x="550.1" y="435.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="553.1" y="446.0"></text>
</g>
<g>
<title>wait_for_stable_page (1 samples, 0.03%)</title><rect x="550.4" y="435.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="553.4" y="446.0"></text>
</g>
<g>
<title>ext4_da_write_end (96 samples, 2.57%)</title><rect x="550.7" y="451.0" width="30.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="553.7" y="462.0">ex..</text>
</g>
<g>
<title>__ext4_journal_stop (6 samples, 0.16%)</title><rect x="551.0" y="435.0" width="1.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="554.0" y="446.0"></text>
</g>
<g>
<title>jbd2_journal_stop (6 samples, 0.16%)</title><rect x="551.0" y="419.0" width="1.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="554.0" y="430.0"></text>
</g>
<g>
<title>__wake_up (2 samples, 0.05%)</title><rect x="551.7" y="403.0" width="0.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="554.7" y="414.0"></text>
</g>
<g>
<title>__wake_up_common_lock (1 samples, 0.03%)</title><rect x="551.7" y="387.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="554.7" y="398.0"></text>
</g>
<g>
<title>_raw_spin_lock_irqsave (1 samples, 0.03%)</title><rect x="551.7" y="371.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="554.7" y="382.0"></text>
</g>
<g>
<title>_raw_spin_lock_irqsave (1 samples, 0.03%)</title><rect x="552.0" y="387.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="555.0" y="398.0"></text>
</g>
<g>
<title>kmem_cache_free (2 samples, 0.05%)</title><rect x="552.3" y="403.0" width="0.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="555.3" y="414.0"></text>
</g>
<g>
<title>__mark_inode_dirty (1 samples, 0.03%)</title><rect x="552.9" y="435.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="555.9" y="446.0"></text>
</g>
<g>
<title>block_write_end (1 samples, 0.03%)</title><rect x="553.3" y="435.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="556.3" y="446.0"></text>
</g>
<g>
<title>generic_write_end (87 samples, 2.33%)</title><rect x="553.6" y="435.0" width="27.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="556.6" y="446.0">g..</text>
</g>
<g>
<title>__block_commit_write.isra.27 (2 samples, 0.05%)</title><rect x="553.6" y="419.0" width="0.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="556.6" y="430.0"></text>
</g>
<g>
<title>__mark_inode_dirty (79 samples, 2.11%)</title><rect x="554.2" y="419.0" width="25.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="557.2" y="430.0">_..</text>
</g>
<g>
<title>ext4_dirty_inode (77 samples, 2.06%)</title><rect x="554.8" y="403.0" width="24.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="557.8" y="414.0">e..</text>
</g>
<g>
<title>__ext4_journal_start_sb (1 samples, 0.03%)</title><rect x="554.8" y="387.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="557.8" y="398.0"></text>
</g>
<g>
<title>ext4_journal_check_start (1 samples, 0.03%)</title><rect x="554.8" y="371.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="557.8" y="382.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.03%)</title><rect x="554.8" y="355.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="557.8" y="366.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.03%)</title><rect x="554.8" y="339.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="557.8" y="350.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="554.8" y="323.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="557.8" y="334.0"></text>
</g>
<g>
<title>ext4_mark_iloc_dirty (1 samples, 0.03%)</title><rect x="555.1" y="387.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="558.1" y="398.0"></text>
</g>
<g>
<title>ext4_mark_inode_dirty (74 samples, 1.98%)</title><rect x="555.5" y="387.0" width="23.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="558.5" y="398.0">e..</text>
</g>
<g>
<title>__ext4_get_inode_loc (1 samples, 0.03%)</title><rect x="555.5" y="371.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="558.5" y="382.0"></text>
</g>
<g>
<title>__ext4_journal_get_write_access (1 samples, 0.03%)</title><rect x="555.8" y="371.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="558.8" y="382.0"></text>
</g>
<g>
<title>ext4_mark_iloc_dirty (52 samples, 1.39%)</title><rect x="556.1" y="371.0" width="16.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="559.1" y="382.0"></text>
</g>
<g>
<title>ext4_do_update_inode (48 samples, 1.28%)</title><rect x="556.4" y="355.0" width="15.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="559.4" y="366.0"></text>
</g>
<g>
<title>__ext4_handle_dirty_metadata (3 samples, 0.08%)</title><rect x="559.9" y="339.0" width="0.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="562.9" y="350.0"></text>
</g>
<g>
<title>jbd2_journal_dirty_metadata (2 samples, 0.05%)</title><rect x="560.2" y="323.0" width="0.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="563.2" y="334.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.03%)</title><rect x="560.8" y="339.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="563.8" y="350.0"></text>
</g>
<g>
<title>ext4_inode_csum.isra.52 (1 samples, 0.03%)</title><rect x="561.2" y="339.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="564.2" y="350.0"></text>
</g>
<g>
<title>ext4_inode_csum_set (29 samples, 0.78%)</title><rect x="561.5" y="339.0" width="9.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="564.5" y="350.0"></text>
</g>
<g>
<title>ext4_inode_csum.isra.52 (29 samples, 0.78%)</title><rect x="561.5" y="323.0" width="9.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="564.5" y="334.0"></text>
</g>
<g>
<title>chksum_update (4 samples, 0.11%)</title><rect x="562.7" y="307.0" width="1.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="565.7" y="318.0"></text>
</g>
<g>
<title>crypto_shash_update (21 samples, 0.56%)</title><rect x="564.0" y="307.0" width="6.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="567.0" y="318.0"></text>
</g>
<g>
<title>chksum_update (17 samples, 0.46%)</title><rect x="564.3" y="291.0" width="5.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="567.3" y="302.0"></text>
</g>
<g>
<title>__crc32c_le (17 samples, 0.46%)</title><rect x="564.3" y="275.0" width="5.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="567.3" y="286.0"></text>
</g>
<g>
<title>memcpy (2 samples, 0.05%)</title><rect x="569.7" y="291.0" width="0.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="572.7" y="302.0"></text>
</g>
<g>
<title>memset (1 samples, 0.03%)</title><rect x="570.3" y="291.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="573.3" y="302.0"></text>
</g>
<g>
<title>from_kgid (1 samples, 0.03%)</title><rect x="570.6" y="339.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="573.6" y="350.0"></text>
</g>
<g>
<title>map_id_up (1 samples, 0.03%)</title><rect x="570.6" y="323.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="573.6" y="334.0"></text>
</g>
<g>
<title>from_kuid (1 samples, 0.03%)</title><rect x="570.9" y="339.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="573.9" y="350.0"></text>
</g>
<g>
<title>map_id_up (1 samples, 0.03%)</title><rect x="570.9" y="323.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="573.9" y="334.0"></text>
</g>
<g>
<title>jbd2_journal_dirty_metadata (1 samples, 0.03%)</title><rect x="571.3" y="339.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="574.3" y="350.0"></text>
</g>
<g>
<title>from_kprojid (1 samples, 0.03%)</title><rect x="571.6" y="355.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="574.6" y="366.0"></text>
</g>
<g>
<title>from_kuid (2 samples, 0.05%)</title><rect x="571.9" y="355.0" width="0.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="574.9" y="366.0"></text>
</g>
<g>
<title>ext4_reserve_inode_write (20 samples, 0.54%)</title><rect x="572.5" y="371.0" width="6.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="575.5" y="382.0"></text>
</g>
<g>
<title>__ext4_get_inode_loc (11 samples, 0.29%)</title><rect x="572.5" y="355.0" width="3.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="575.5" y="366.0"></text>
</g>
<g>
<title>__find_get_block (1 samples, 0.03%)</title><rect x="572.8" y="339.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="575.8" y="350.0"></text>
</g>
<g>
<title>__getblk_gfp (8 samples, 0.21%)</title><rect x="573.2" y="339.0" width="2.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="576.2" y="350.0"></text>
</g>
<g>
<title>__find_get_block (7 samples, 0.19%)</title><rect x="573.5" y="323.0" width="2.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="576.5" y="334.0"></text>
</g>
<g>
<title>lookup_page_ext (4 samples, 0.11%)</title><rect x="573.8" y="307.0" width="1.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="576.8" y="318.0"></text>
</g>
<g>
<title>mark_page_accessed (2 samples, 0.05%)</title><rect x="575.0" y="307.0" width="0.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="578.0" y="318.0"></text>
</g>
<g>
<title>ext4_inode_table (1 samples, 0.03%)</title><rect x="575.7" y="339.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="578.7" y="350.0"></text>
</g>
<g>
<title>__ext4_journal_get_write_access (6 samples, 0.16%)</title><rect x="576.0" y="355.0" width="1.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="579.0" y="366.0"></text>
</g>
<g>
<title>jbd2_journal_get_write_access (3 samples, 0.08%)</title><rect x="576.3" y="339.0" width="1.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="579.3" y="350.0"></text>
</g>
<g>
<title>jbd2_write_access_granted.part.8 (3 samples, 0.08%)</title><rect x="576.3" y="323.0" width="1.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="579.3" y="334.0"></text>
</g>
<g>
<title>jbd2_write_access_granted.part.8 (2 samples, 0.05%)</title><rect x="577.3" y="339.0" width="0.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="580.3" y="350.0"></text>
</g>
<g>
<title>ext4_inode_table (1 samples, 0.03%)</title><rect x="577.9" y="355.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="580.9" y="366.0"></text>
</g>
<g>
<title>jbd2_journal_get_write_access (2 samples, 0.05%)</title><rect x="578.2" y="355.0" width="0.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="581.2" y="366.0"></text>
</g>
<g>
<title>ext4_reserve_inode_write (1 samples, 0.03%)</title><rect x="578.8" y="387.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="581.8" y="398.0"></text>
</g>
<g>
<title>block_write_end (4 samples, 0.11%)</title><rect x="579.2" y="419.0" width="1.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="582.2" y="430.0"></text>
</g>
<g>
<title>__block_commit_write.isra.27 (3 samples, 0.08%)</title><rect x="579.2" y="403.0" width="0.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="582.2" y="414.0"></text>
</g>
<g>
<title>mark_buffer_dirty (1 samples, 0.03%)</title><rect x="579.8" y="387.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="582.8" y="398.0"></text>
</g>
<g>
<title>__set_page_dirty (1 samples, 0.03%)</title><rect x="579.8" y="371.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="582.8" y="382.0"></text>
</g>
<g>
<title>_raw_spin_lock_irqsave (1 samples, 0.03%)</title><rect x="579.8" y="355.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="582.8" y="366.0"></text>
</g>
<g>
<title>mark_buffer_dirty (1 samples, 0.03%)</title><rect x="580.1" y="403.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="583.1" y="414.0"></text>
</g>
<g>
<title>ext4_dirty_inode (2 samples, 0.05%)</title><rect x="580.4" y="419.0" width="0.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="583.4" y="430.0"></text>
</g>
<g>
<title>ext4_nonda_switch (2 samples, 0.05%)</title><rect x="581.0" y="451.0" width="0.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="584.0" y="462.0"></text>
</g>
<g>
<title>generic_write_end (1 samples, 0.03%)</title><rect x="581.7" y="451.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="584.7" y="462.0"></text>
</g>
<g>
<title>grab_cache_page_write_begin (2 samples, 0.05%)</title><rect x="582.0" y="451.0" width="0.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="585.0" y="462.0"></text>
</g>
<g>
<title>iov_iter_copy_from_user_atomic (4 samples, 0.11%)</title><rect x="582.6" y="451.0" width="1.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="585.6" y="462.0"></text>
</g>
<g>
<title>copyin (2 samples, 0.05%)</title><rect x="582.9" y="435.0" width="0.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="585.9" y="446.0"></text>
</g>
<g>
<title>__copy_user_ll (2 samples, 0.05%)</title><rect x="582.9" y="419.0" width="0.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="585.9" y="430.0"></text>
</g>
<g>
<title>kmap_atomic (1 samples, 0.03%)</title><rect x="583.6" y="435.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="586.6" y="446.0"></text>
</g>
<g>
<title>kmap_atomic_prot (1 samples, 0.03%)</title><rect x="583.6" y="419.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="586.6" y="430.0"></text>
</g>
<g>
<title>iov_iter_fault_in_readable (1 samples, 0.03%)</title><rect x="583.9" y="451.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="586.9" y="462.0"></text>
</g>
<g>
<title>kmap_atomic (4 samples, 0.11%)</title><rect x="584.2" y="451.0" width="1.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="587.2" y="462.0"></text>
</g>
<g>
<title>iov_iter_copy_from_user_atomic (1 samples, 0.03%)</title><rect x="585.5" y="467.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="588.5" y="478.0"></text>
</g>
<g>
<title>iov_iter_fault_in_readable (1 samples, 0.03%)</title><rect x="585.8" y="467.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="588.8" y="478.0"></text>
</g>
<g>
<title>ext4_write_checks (5 samples, 0.13%)</title><rect x="586.1" y="483.0" width="1.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="589.1" y="494.0"></text>
</g>
<g>
<title>generic_write_checks (4 samples, 0.11%)</title><rect x="586.4" y="467.0" width="1.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="589.4" y="478.0"></text>
</g>
<g>
<title>file_remove_privs (1 samples, 0.03%)</title><rect x="587.7" y="483.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="590.7" y="494.0"></text>
</g>
<g>
<title>file_update_time (1 samples, 0.03%)</title><rect x="588.0" y="483.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="591.0" y="494.0"></text>
</g>
<g>
<title>generic_write_checks (1 samples, 0.03%)</title><rect x="588.3" y="483.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="591.3" y="494.0"></text>
</g>
<g>
<title>ext4_write_checks (2 samples, 0.05%)</title><rect x="588.6" y="499.0" width="0.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="591.6" y="510.0"></text>
</g>
<g>
<title>rw_verify_area (10 samples, 0.27%)</title><rect x="589.3" y="531.0" width="3.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="592.3" y="542.0"></text>
</g>
<g>
<title>apparmor_file_permission (1 samples, 0.03%)</title><rect x="590.2" y="515.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="593.2" y="526.0"></text>
</g>
<g>
<title>security_file_permission (6 samples, 0.16%)</title><rect x="590.5" y="515.0" width="1.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="593.5" y="526.0"></text>
</g>
<g>
<title>apparmor_file_permission (5 samples, 0.13%)</title><rect x="590.8" y="499.0" width="1.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="593.8" y="510.0"></text>
</g>
<g>
<title>common_file_perm (5 samples, 0.13%)</title><rect x="590.8" y="483.0" width="1.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="593.8" y="494.0"></text>
</g>
<g>
<title>aa_file_perm (3 samples, 0.08%)</title><rect x="591.5" y="467.0" width="0.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="594.5" y="478.0"></text>
</g>
<g>
<title>vfs_write (2 samples, 0.05%)</title><rect x="592.4" y="563.0" width="0.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="595.4" y="574.0"></text>
</g>
<g>
<title>__write (3 samples, 0.08%)</title><rect x="593.1" y="611.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="596.1" y="622.0"></text>
</g>
<g>
<title>_init (1 samples, 0.03%)</title><rect x="594.0" y="611.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="597.0" y="622.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Append(rocksdb::Slice const&amp;) (1 samples, 0.03%)</title><rect x="594.3" y="611.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="597.3" y="622.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned int) (5 samples, 0.13%)</title><rect x="594.6" y="643.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="597.6" y="654.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned int) (5 samples, 0.13%)</title><rect x="596.2" y="675.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="599.2" y="686.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::IsLatestPersistentState(rocksdb::WriteBatch const*) (2 samples, 0.05%)</title><rect x="597.8" y="691.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="600.8" y="702.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (2 samples, 0.05%)</title><rect x="598.4" y="691.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="601.4" y="702.0"></text>
</g>
<g>
<title>std::string::_M_leak_hard() (1 samples, 0.03%)</title><rect x="599.1" y="691.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="602.1" y="702.0"></text>
</g>
<g>
<title>rocksdb::FlushScheduler::Empty() (3 samples, 0.08%)</title><rect x="599.4" y="707.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="602.4" y="718.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (7 samples, 0.19%)</title><rect x="600.3" y="707.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="603.3" y="718.0"></text>
</g>
<g>
<title>/lib/i386-linux-gnu/ld-2.27.so (1 samples, 0.03%)</title><rect x="600.6" y="691.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="603.6" y="702.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (1 samples, 0.03%)</title><rect x="600.9" y="691.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="603.9" y="702.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::LockInternal() (3 samples, 0.08%)</title><rect x="601.3" y="691.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="604.3" y="702.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_lock (3 samples, 0.08%)</title><rect x="601.3" y="675.0" width="0.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="604.3" y="686.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (1 samples, 0.03%)</title><rect x="602.2" y="691.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="605.2" y="702.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::LockInternal() (1 samples, 0.03%)</title><rect x="602.5" y="707.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="605.5" y="718.0"></text>
</g>
<g>
<title>rocksdb::PerfStepTimer::Start() (1 samples, 0.03%)</title><rect x="602.8" y="707.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="605.8" y="718.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="602.8" y="691.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="605.8" y="702.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="602.8" y="675.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="605.8" y="686.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="602.8" y="659.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="605.8" y="670.0"></text>
</g>
<g>
<title>rocksdb::SuperVersionContext::Clean() (1 samples, 0.03%)</title><rect x="603.2" y="707.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="606.2" y="718.0"></text>
</g>
<g>
<title>rocksdb::SuperVersionContext::~SuperVersionContext() (3 samples, 0.08%)</title><rect x="603.5" y="707.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="606.5" y="718.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::ComputeContentFlags() const (1 samples, 0.03%)</title><rect x="604.4" y="707.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="607.4" y="718.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Handler::~Handler() (2 samples, 0.05%)</title><rect x="604.7" y="707.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="607.7" y="718.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (543 samples, 14.53%)</title><rect x="605.4" y="707.0" width="171.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="608.4" y="718.0">rocksdb::WriteBatchInt..</text>
</g>
<g>
<title>rocksdb::ReadRecordFromWriteBatch(rocksdb::Slice*, char*, unsigned int*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*) (3 samples, 0.08%)</title><rect x="606.3" y="691.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="609.3" y="702.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (537 samples, 14.37%)</title><rect x="607.3" y="691.0" width="169.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="610.3" y="702.0">rocksdb::WriteBatch::I..</text>
</g>
<g>
<title>rocksdb::GetLengthPrefixedSlice(rocksdb::Slice*, rocksdb::Slice*) (3 samples, 0.08%)</title><rect x="608.2" y="675.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="611.2" y="686.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (529 samples, 14.16%)</title><rect x="609.2" y="675.0" width="167.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="612.2" y="686.0">rocksdb::MemTableInse..</text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::GetMemTable() const (2 samples, 0.05%)</title><rect x="609.5" y="659.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="612.5" y="670.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::Seek(unsigned int) (2 samples, 0.05%)</title><rect x="610.1" y="659.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="613.1" y="670.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (2 samples, 0.05%)</title><rect x="610.7" y="659.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="613.7" y="670.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (522 samples, 13.97%)</title><rect x="611.4" y="659.0" width="164.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="614.4" y="670.0">rocksdb::MemTableInse..</text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (4 samples, 0.11%)</title><rect x="612.9" y="643.0" width="1.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="615.9" y="654.0"></text>
</g>
<g>
<title>common_exception (2 samples, 0.05%)</title><rect x="613.6" y="627.0" width="0.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="616.6" y="638.0"></text>
</g>
<g>
<title>do_page_fault (2 samples, 0.05%)</title><rect x="613.6" y="611.0" width="0.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="616.6" y="622.0"></text>
</g>
<g>
<title>__do_page_fault (2 samples, 0.05%)</title><rect x="613.6" y="595.0" width="0.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="616.6" y="606.0"></text>
</g>
<g>
<title>handle_mm_fault (2 samples, 0.05%)</title><rect x="613.6" y="579.0" width="0.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="616.6" y="590.0"></text>
</g>
<g>
<title>native_set_pte_at (2 samples, 0.05%)</title><rect x="613.6" y="563.0" width="0.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="616.6" y="574.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni1945528177827338328.so (5 samples, 0.13%)</title><rect x="614.2" y="643.0" width="1.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="617.2" y="654.0"></text>
</g>
<g>
<title>_init (1 samples, 0.03%)</title><rect x="615.8" y="643.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="618.8" y="654.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilySet::GetDefault() const (1 samples, 0.03%)</title><rect x="616.1" y="643.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="619.1" y="654.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (2 samples, 0.05%)</title><rect x="616.4" y="643.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="619.4" y="654.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (499 samples, 13.36%)</title><rect x="617.1" y="643.0" width="157.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="620.1" y="654.0">rocksdb::MemTable::A..</text>
</g>
<g>
<title>/tmp/librocksdbjni1945528177827338328.so (488 samples, 13.06%)</title><rect x="617.7" y="627.0" width="154.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="620.7" y="638.0">/tmp/librocksdbjni19..</text>
</g>
<g>
<title>/lib/i386-linux-gnu/ld-2.27.so (1 samples, 0.03%)</title><rect x="618.3" y="611.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="621.3" y="622.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni1945528177827338328.so (11 samples, 0.29%)</title><rect x="618.6" y="611.0" width="3.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="621.6" y="622.0"></text>
</g>
<g>
<title>_init (1 samples, 0.03%)</title><rect x="619.9" y="595.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="622.9" y="606.0"></text>
</g>
<g>
<title>common_exception (1 samples, 0.03%)</title><rect x="620.2" y="595.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="623.2" y="606.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.03%)</title><rect x="620.2" y="579.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="623.2" y="590.0"></text>
</g>
<g>
<title>__do_page_fault (1 samples, 0.03%)</title><rect x="620.2" y="563.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="623.2" y="574.0"></text>
</g>
<g>
<title>handle_mm_fault (1 samples, 0.03%)</title><rect x="620.2" y="547.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="623.2" y="558.0"></text>
</g>
<g>
<title>__alloc_pages_nodemask (1 samples, 0.03%)</title><rect x="620.2" y="531.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="623.2" y="542.0"></text>
</g>
<g>
<title>get_page_from_freelist (1 samples, 0.03%)</title><rect x="620.2" y="515.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="623.2" y="526.0"></text>
</g>
<g>
<title>rocksdb::ConcurrentArena::AllocateAligned(unsigned int, unsigned int, rocksdb::Logger*) (5 samples, 0.13%)</title><rect x="620.5" y="595.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="623.5" y="606.0"></text>
</g>
<g>
<title>rocksdb::Arena::AllocateAligned(unsigned int, unsigned int, rocksdb::Logger*) (1 samples, 0.03%)</title><rect x="621.8" y="579.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="624.8" y="590.0"></text>
</g>
<g>
<title>_init (1 samples, 0.03%)</title><rect x="622.1" y="611.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="625.1" y="622.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (468 samples, 12.53%)</title><rect x="622.4" y="611.0" width="147.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="625.4" y="622.0">bool rocksdb::Inlin..</text>
</g>
<g>
<title>/tmp/librocksdbjni1945528177827338328.so (329 samples, 8.81%)</title><rect x="623.7" y="595.0" width="103.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="626.7" y="606.0">/tmp/librock..</text>
</g>
<g>
<title>/lib/i386-linux-gnu/ld-2.27.so (1 samples, 0.03%)</title><rect x="628.7" y="579.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="631.7" y="590.0"></text>
</g>
<g>
<title>___tls_get_addr (2 samples, 0.05%)</title><rect x="629.1" y="579.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="632.1" y="590.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (310 samples, 8.30%)</title><rect x="629.7" y="579.0" width="97.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="632.7" y="590.0">rocksdb::Me..</text>
</g>
<g>
<title>___tls_get_addr (2 samples, 0.05%)</title><rect x="631.6" y="563.0" width="0.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="634.6" y="574.0"></text>
</g>
<g>
<title>_init (2 samples, 0.05%)</title><rect x="632.2" y="563.0" width="0.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="635.2" y="574.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="632.5" y="547.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="635.5" y="558.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="632.5" y="531.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="635.5" y="542.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="632.5" y="515.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="635.5" y="526.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="632.8" y="563.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="635.8" y="574.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="632.8" y="547.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="635.8" y="558.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="632.8" y="531.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="635.8" y="542.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (298 samples, 7.98%)</title><rect x="633.2" y="563.0" width="94.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="636.2" y="574.0">rocksdb::Ba..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (94 samples, 2.52%)</title><rect x="634.1" y="547.0" width="29.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="637.1" y="558.0">JN..</text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.158] (2 samples, 0.05%)</title><rect x="634.1" y="531.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="637.1" y="542.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="634.7" y="531.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="637.7" y="542.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (90 samples, 2.41%)</title><rect x="635.1" y="531.0" width="28.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="638.1" y="542.0">jn..</text>
</g>
<g>
<title>Klass::method_at_vtable(int) (1 samples, 0.03%)</title><rect x="636.0" y="515.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="639.0" y="526.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (6 samples, 0.16%)</title><rect x="636.3" y="515.0" width="1.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="639.3" y="526.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.158] (2 samples, 0.05%)</title><rect x="638.2" y="515.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="641.2" y="526.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="638.8" y="515.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="641.8" y="526.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.dx (1 samples, 0.03%)</title><rect x="639.2" y="515.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="642.2" y="526.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.141] (76 samples, 2.03%)</title><rect x="639.5" y="515.0" width="24.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="642.5" y="526.0">j..</text>
</g>
<g>
<title>.L347 (3 samples, 0.08%)</title><rect x="644.9" y="499.0" width="0.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="647.9" y="510.0"></text>
</g>
<g>
<title>.L357 (4 samples, 0.11%)</title><rect x="645.8" y="499.0" width="1.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="648.8" y="510.0"></text>
</g>
<g>
<title>Fingerprinter::fingerprint() (1 samples, 0.03%)</title><rect x="647.1" y="499.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="650.1" y="510.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long long) (2 samples, 0.05%)</title><rect x="647.4" y="499.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="650.4" y="510.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (36 samples, 0.96%)</title><rect x="648.0" y="499.0" width="11.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="651.0" y="510.0"></text>
</g>
<g>
<title>.L409 (22 samples, 0.59%)</title><rect x="648.0" y="483.0" width="7.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="651.0" y="494.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;CardTableBarrierSet::AccessBarrier&lt;1097812ull, CardTableBarrierSet&gt;, (AccessInternal::BarrierType)2, 1097812ull&gt;::oop_access_barrier(void*) (1 samples, 0.03%)</title><rect x="649.0" y="467.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="652.0" y="478.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.03%)</title><rect x="649.3" y="467.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="652.3" y="478.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="649.3" y="451.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="652.3" y="462.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="649.3" y="435.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="652.3" y="446.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="649.3" y="419.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="652.3" y="430.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.03%)</title><rect x="649.6" y="467.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="652.6" y="478.0"></text>
</g>
<g>
<title>JNIHandleBlock::release_block(JNIHandleBlock*, Thread*) (2 samples, 0.05%)</title><rect x="649.9" y="467.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="652.9" y="478.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (3 samples, 0.08%)</title><rect x="650.5" y="467.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="653.5" y="478.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (9 samples, 0.24%)</title><rect x="651.5" y="467.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="654.5" y="478.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.03%)</title><rect x="653.7" y="451.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="656.7" y="462.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="654.0" y="451.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="657.0" y="462.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="654.0" y="435.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="657.0" y="446.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="654.0" y="419.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="657.0" y="430.0"></text>
</g>
<g>
<title>JavaThread::can_call_java() const (2 samples, 0.05%)</title><rect x="654.3" y="467.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="657.3" y="478.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="654.6" y="451.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="657.6" y="462.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="654.6" y="435.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="657.6" y="446.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="654.6" y="419.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="657.6" y="430.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.03%)</title><rect x="655.0" y="483.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="658.0" y="494.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (13 samples, 0.35%)</title><rect x="655.3" y="483.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="658.3" y="494.0"></text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (1 samples, 0.03%)</title><rect x="656.9" y="467.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="659.9" y="478.0"></text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="657.2" y="467.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="660.2" y="478.0"></text>
</g>
<g>
<title>Method::is_empty_method() const (1 samples, 0.03%)</title><rect x="657.5" y="467.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="660.5" y="478.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="657.8" y="467.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="660.8" y="478.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (4 samples, 0.11%)</title><rect x="658.1" y="467.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="661.1" y="478.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.05%)</title><rect x="659.4" y="499.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="662.4" y="510.0"></text>
</g>
<g>
<title>SignatureIterator::SignatureIterator(Symbol*) (1 samples, 0.03%)</title><rect x="660.0" y="499.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="663.0" y="510.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="660.0" y="483.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="663.0" y="494.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="660.0" y="467.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="663.0" y="478.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="660.0" y="451.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="663.0" y="462.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="660.3" y="499.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="663.3" y="510.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.di (1 samples, 0.03%)</title><rect x="660.6" y="499.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="663.6" y="510.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="661.0" y="499.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="664.0" y="510.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (5 samples, 0.13%)</title><rect x="661.3" y="499.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="664.3" y="510.0"></text>
</g>
<g>
<title>resume_userspace (3 samples, 0.08%)</title><rect x="661.9" y="483.0" width="1.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="664.9" y="494.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.08%)</title><rect x="661.9" y="467.0" width="1.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="664.9" y="478.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.08%)</title><rect x="661.9" y="451.0" width="1.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="664.9" y="462.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="662.5" y="435.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="665.5" y="446.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.03%)</title><rect x="662.5" y="419.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="665.5" y="430.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="662.5" y="403.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="665.5" y="414.0"></text>
</g>
<g>
<title>resume_userspace (2 samples, 0.05%)</title><rect x="662.9" y="499.0" width="0.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="665.9" y="510.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.05%)</title><rect x="662.9" y="483.0" width="0.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="665.9" y="494.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.05%)</title><rect x="662.9" y="467.0" width="0.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="665.9" y="478.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.141] (1 samples, 0.03%)</title><rect x="663.5" y="531.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="666.5" y="542.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (162 samples, 4.34%)</title><rect x="663.8" y="547.0" width="51.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="666.8" y="558.0">JNIEn..</text>
</g>
<g>
<title>SignatureIterator::SignatureIterator(Symbol*) (1 samples, 0.03%)</title><rect x="663.8" y="531.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="666.8" y="542.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="664.1" y="531.0" width="0.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="667.1" y="542.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.dx (3 samples, 0.08%)</title><rect x="664.4" y="531.0" width="1.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="667.4" y="542.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (157 samples, 4.20%)</title><rect x="665.4" y="531.0" width="49.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="668.4" y="542.0">jni_C..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;CardTableBarrierSet::AccessBarrier&lt;1097812ull, CardTableBarrierSet&gt;, (AccessInternal::BarrierType)2, 1097812ull&gt;::oop_access_barrier(void*) (3 samples, 0.08%)</title><rect x="667.3" y="515.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="670.3" y="526.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (2 samples, 0.05%)</title><rect x="668.2" y="515.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="671.2" y="526.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (3 samples, 0.08%)</title><rect x="668.9" y="515.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="671.9" y="526.0"></text>
</g>
<g>
<title>Klass::method_at_vtable(int) (1 samples, 0.03%)</title><rect x="669.8" y="515.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="672.8" y="526.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.03%)</title><rect x="670.1" y="515.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="673.1" y="526.0"></text>
</g>
<g>
<title>SignatureIterator::SignatureIterator(Symbol*) (1 samples, 0.03%)</title><rect x="670.4" y="515.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="673.4" y="526.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (6 samples, 0.16%)</title><rect x="670.7" y="515.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="673.7" y="526.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="672.3" y="499.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="675.3" y="510.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="672.3" y="483.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="675.3" y="494.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="672.3" y="467.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="675.3" y="478.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.158] (8 samples, 0.21%)</title><rect x="672.6" y="515.0" width="2.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="675.6" y="526.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.ax (1 samples, 0.03%)</title><rect x="675.2" y="515.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="678.2" y="526.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (3 samples, 0.08%)</title><rect x="675.5" y="515.0" width="0.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="678.5" y="526.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.dx (2 samples, 0.05%)</title><rect x="676.4" y="515.0" width="0.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="679.4" y="526.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.141] (120 samples, 3.21%)</title><rect x="677.1" y="515.0" width="37.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="680.1" y="526.0">jni..</text>
</g>
<g>
<title>.L347 (7 samples, 0.19%)</title><rect x="683.4" y="499.0" width="2.2" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="686.4" y="510.0"></text>
</g>
<g>
<title>resume_userspace (2 samples, 0.05%)</title><rect x="685.0" y="483.0" width="0.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="688.0" y="494.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.05%)</title><rect x="685.0" y="467.0" width="0.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="688.0" y="478.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.05%)</title><rect x="685.0" y="451.0" width="0.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="688.0" y="462.0"></text>
</g>
<g>
<title>.L348 (1 samples, 0.03%)</title><rect x="685.6" y="499.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="688.6" y="510.0"></text>
</g>
<g>
<title>.L354 (2 samples, 0.05%)</title><rect x="685.9" y="499.0" width="0.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="688.9" y="510.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="686.2" y="483.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="689.2" y="494.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="686.2" y="467.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="689.2" y="478.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="686.2" y="451.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="689.2" y="462.0"></text>
</g>
<g>
<title>Fingerprinter::fingerprint() (1 samples, 0.03%)</title><rect x="686.5" y="499.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="689.5" y="510.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (3 samples, 0.08%)</title><rect x="686.9" y="499.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="689.9" y="510.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.03%)</title><rect x="687.5" y="483.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="690.5" y="494.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="687.5" y="467.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="690.5" y="478.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.03%)</title><rect x="687.5" y="451.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="690.5" y="462.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.03%)</title><rect x="687.5" y="435.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="690.5" y="446.0"></text>
</g>
<g>
<title>call_on_stack (1 samples, 0.03%)</title><rect x="687.5" y="419.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="690.5" y="430.0"></text>
</g>
<g>
<title>__do_softirq (1 samples, 0.03%)</title><rect x="687.5" y="403.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="690.5" y="414.0"></text>
</g>
<g>
<title>run_rebalance_domains (1 samples, 0.03%)</title><rect x="687.5" y="387.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="690.5" y="398.0"></text>
</g>
<g>
<title>rebalance_domains (1 samples, 0.03%)</title><rect x="687.5" y="371.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="690.5" y="382.0"></text>
</g>
<g>
<title>update_blocked_averages (1 samples, 0.03%)</title><rect x="687.5" y="355.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="690.5" y="366.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="687.5" y="339.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="690.5" y="350.0"></text>
</g>
<g>
<title>JavaCallArguments::JavaCallArguments(int) (2 samples, 0.05%)</title><rect x="687.8" y="499.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="690.8" y="510.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (61 samples, 1.63%)</title><rect x="688.4" y="499.0" width="19.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="691.4" y="510.0"></text>
</g>
<g>
<title>.L409 (35 samples, 0.94%)</title><rect x="688.8" y="483.0" width="11.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="691.8" y="494.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.03%)</title><rect x="689.7" y="467.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="692.7" y="478.0"></text>
</g>
<g>
<title>HandleMark::~HandleMark() (2 samples, 0.05%)</title><rect x="690.0" y="467.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="693.0" y="478.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.03%)</title><rect x="690.6" y="467.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="693.6" y="478.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (4 samples, 0.11%)</title><rect x="691.0" y="467.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="694.0" y="478.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (22 samples, 0.59%)</title><rect x="692.2" y="467.0" width="7.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="695.2" y="478.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (3 samples, 0.08%)</title><rect x="697.9" y="451.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="700.9" y="462.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="698.9" y="451.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="701.9" y="462.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="698.9" y="435.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="701.9" y="446.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="698.9" y="419.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="701.9" y="430.0"></text>
</g>
<g>
<title>resume_userspace (2 samples, 0.05%)</title><rect x="699.2" y="467.0" width="0.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="702.2" y="478.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.05%)</title><rect x="699.2" y="451.0" width="0.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="702.2" y="462.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.05%)</title><rect x="699.2" y="435.0" width="0.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="702.2" y="446.0"></text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="699.8" y="483.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="702.8" y="494.0"></text>
</g>
<g>
<title>HandleMark::~HandleMark() (1 samples, 0.03%)</title><rect x="700.1" y="483.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="703.1" y="494.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (1 samples, 0.03%)</title><rect x="700.4" y="483.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="703.4" y="494.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (19 samples, 0.51%)</title><rect x="700.8" y="483.0" width="6.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="703.8" y="494.0"></text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (2 samples, 0.05%)</title><rect x="703.0" y="467.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="706.0" y="478.0"></text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (4 samples, 0.11%)</title><rect x="703.6" y="467.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="706.6" y="478.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.03%)</title><rect x="704.9" y="467.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="707.9" y="478.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="705.2" y="467.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="708.2" y="478.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="705.2" y="451.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="708.2" y="462.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="705.2" y="435.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="708.2" y="446.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="705.2" y="419.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="708.2" y="430.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (4 samples, 0.11%)</title><rect x="705.5" y="467.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="708.5" y="478.0"></text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (2 samples, 0.05%)</title><rect x="705.8" y="451.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="708.8" y="462.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="706.4" y="451.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="709.4" y="462.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="706.4" y="435.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="709.4" y="446.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="706.4" y="419.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="709.4" y="430.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.ax (1 samples, 0.03%)</title><rect x="706.8" y="483.0" width="0.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="709.8" y="494.0"></text>
</g>
<g>
<title>os::current_stack_pointer() (1 samples, 0.03%)</title><rect x="707.1" y="483.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="710.1" y="494.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.03%)</title><rect x="707.4" y="483.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="710.4" y="494.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (3 samples, 0.08%)</title><rect x="707.7" y="499.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="710.7" y="510.0"></text>
</g>
<g>
<title>SignatureIterator::SignatureIterator(Symbol*) (1 samples, 0.03%)</title><rect x="708.7" y="499.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="711.7" y="510.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (3 samples, 0.08%)</title><rect x="709.0" y="499.0" width="0.9" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="712.0" y="510.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.di (1 samples, 0.03%)</title><rect x="709.9" y="499.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="712.9" y="510.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (6 samples, 0.16%)</title><rect x="710.2" y="499.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="713.2" y="510.0"></text>
</g>
<g>
<title>resume_userspace (2 samples, 0.05%)</title><rect x="711.5" y="483.0" width="0.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="714.5" y="494.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.05%)</title><rect x="711.5" y="467.0" width="0.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="714.5" y="478.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.05%)</title><rect x="711.5" y="451.0" width="0.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="714.5" y="462.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (5 samples, 0.13%)</title><rect x="712.1" y="499.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="715.1" y="510.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="713.4" y="483.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="716.4" y="494.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="713.4" y="467.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="716.4" y="478.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="713.4" y="451.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="716.4" y="462.0"></text>
</g>
<g>
<title>resume_userspace (4 samples, 0.11%)</title><rect x="713.7" y="499.0" width="1.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="716.7" y="510.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (4 samples, 0.11%)</title><rect x="713.7" y="483.0" width="1.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="716.7" y="494.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (4 samples, 0.11%)</title><rect x="713.7" y="467.0" width="1.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="716.7" y="478.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_lock (4 samples, 0.11%)</title><rect x="715.0" y="547.0" width="1.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="718.0" y="558.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="715.9" y="531.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="718.9" y="542.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="715.9" y="515.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="718.9" y="526.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="715.9" y="499.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="718.9" y="510.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (5 samples, 0.13%)</title><rect x="716.2" y="547.0" width="1.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="719.2" y="558.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (22 samples, 0.59%)</title><rect x="717.8" y="547.0" width="7.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="720.8" y="558.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.03%)</title><rect x="718.8" y="531.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="721.8" y="542.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (11 samples, 0.29%)</title><rect x="719.1" y="531.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="722.1" y="542.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="722.2" y="515.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="725.2" y="526.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="722.2" y="499.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="725.2" y="510.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="722.2" y="483.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="725.2" y="494.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.158] (4 samples, 0.11%)</title><rect x="722.5" y="531.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="725.5" y="542.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="723.8" y="531.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="726.8" y="542.0"></text>
</g>
<g>
<title>resume_userspace (2 samples, 0.05%)</title><rect x="724.1" y="531.0" width="0.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="727.1" y="542.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.05%)</title><rect x="724.1" y="515.0" width="0.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="727.1" y="526.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.05%)</title><rect x="724.1" y="499.0" width="0.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="727.1" y="510.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="724.4" y="483.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="727.4" y="494.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.03%)</title><rect x="724.4" y="467.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="727.4" y="478.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="724.4" y="451.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="727.4" y="462.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.03%)</title><rect x="724.8" y="547.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="727.8" y="558.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.03%)</title><rect x="725.1" y="547.0" width="0.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="728.1" y="558.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (5 samples, 0.13%)</title><rect x="725.4" y="547.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="728.4" y="558.0"></text>
</g>
<g>
<title>Threads::is_supported_jni_version_including_1_1(int) (1 samples, 0.03%)</title><rect x="725.4" y="531.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="728.4" y="542.0"></text>
</g>
<g>
<title>jni_GetEnv (4 samples, 0.11%)</title><rect x="725.7" y="531.0" width="1.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="728.7" y="542.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="726.7" y="515.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="729.7" y="526.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="726.7" y="499.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="729.7" y="510.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="726.7" y="483.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="729.7" y="494.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::releaseJniEnv(unsigned char&amp;) const (1 samples, 0.03%)</title><rect x="727.0" y="547.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="730.0" y="558.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="727.0" y="531.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="730.0" y="542.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="727.0" y="515.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="730.0" y="526.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="727.0" y="499.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="730.0" y="510.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() (1 samples, 0.03%)</title><rect x="727.3" y="563.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="730.3" y="574.0"></text>
</g>
<g>
<title>non-virtual thunk to rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (2 samples, 0.05%)</title><rect x="727.6" y="595.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="730.6" y="606.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.03%)</title><rect x="728.2" y="595.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="731.2" y="606.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (19 samples, 0.51%)</title><rect x="728.5" y="595.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="731.5" y="606.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="728.9" y="579.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="731.9" y="590.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="728.9" y="563.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="731.9" y="574.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="728.9" y="547.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="731.9" y="558.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (17 samples, 0.46%)</title><rect x="729.2" y="579.0" width="5.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="732.2" y="590.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (5 samples, 0.13%)</title><rect x="729.2" y="563.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="732.2" y="574.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (5 samples, 0.13%)</title><rect x="729.2" y="547.0" width="1.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="732.2" y="558.0"></text>
</g>
<g>
<title>Klass::method_at_vtable(int) (1 samples, 0.03%)</title><rect x="729.2" y="531.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="732.2" y="542.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.141] (4 samples, 0.11%)</title><rect x="729.5" y="531.0" width="1.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="732.5" y="542.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (3 samples, 0.08%)</title><rect x="729.5" y="515.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="732.5" y="526.0"></text>
</g>
<g>
<title>.L409 (1 samples, 0.03%)</title><rect x="729.8" y="499.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="732.8" y="510.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;CardTableBarrierSet::AccessBarrier&lt;1097812ull, CardTableBarrierSet&gt;, (AccessInternal::BarrierType)2, 1097812ull&gt;::oop_access_barrier(void*) (1 samples, 0.03%)</title><rect x="729.8" y="483.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="732.8" y="494.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.03%)</title><rect x="730.1" y="499.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="733.1" y="510.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.03%)</title><rect x="730.4" y="515.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="733.4" y="526.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (10 samples, 0.27%)</title><rect x="730.8" y="563.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="733.8" y="574.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (10 samples, 0.27%)</title><rect x="730.8" y="547.0" width="3.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="733.8" y="558.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.158] (1 samples, 0.03%)</title><rect x="730.8" y="531.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="733.8" y="542.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.141] (8 samples, 0.21%)</title><rect x="731.1" y="531.0" width="2.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="734.1" y="542.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (6 samples, 0.16%)</title><rect x="731.1" y="515.0" width="1.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="734.1" y="526.0"></text>
</g>
<g>
<title>.L409 (3 samples, 0.08%)</title><rect x="731.1" y="499.0" width="0.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="734.1" y="510.0"></text>
</g>
<g>
<title>HandleMark::~HandleMark() (1 samples, 0.03%)</title><rect x="731.1" y="483.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="734.1" y="494.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (2 samples, 0.05%)</title><rect x="731.4" y="483.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="734.4" y="494.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (3 samples, 0.08%)</title><rect x="732.0" y="499.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="735.0" y="510.0"></text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="732.7" y="483.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="735.7" y="494.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.03%)</title><rect x="733.0" y="515.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="736.0" y="526.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;false&gt;(_jobject*) (1 samples, 0.03%)</title><rect x="733.3" y="515.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="736.3" y="526.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;false&gt;(_jobject*) (1 samples, 0.03%)</title><rect x="733.6" y="531.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="736.6" y="542.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="733.9" y="563.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="736.9" y="574.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.03%)</title><rect x="734.2" y="563.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="737.2" y="574.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.03%)</title><rect x="734.2" y="547.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="737.2" y="558.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (113 samples, 3.02%)</title><rect x="734.6" y="595.0" width="35.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="737.6" y="606.0">roc..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.03%)</title><rect x="735.5" y="579.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="738.5" y="590.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (3 samples, 0.08%)</title><rect x="735.8" y="579.0" width="1.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="738.8" y="590.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (102 samples, 2.73%)</title><rect x="736.8" y="579.0" width="32.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="739.8" y="590.0">ro..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (8 samples, 0.21%)</title><rect x="736.8" y="563.0" width="2.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="739.8" y="574.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (8 samples, 0.21%)</title><rect x="736.8" y="547.0" width="2.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="739.8" y="558.0"></text>
</g>
<g>
<title>Klass::method_at_vtable(int) (1 samples, 0.03%)</title><rect x="737.4" y="531.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="740.4" y="542.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.141] (5 samples, 0.13%)</title><rect x="737.7" y="531.0" width="1.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="740.7" y="542.0"></text>
</g>
<g>
<title>.L357 (1 samples, 0.03%)</title><rect x="738.0" y="515.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="741.0" y="526.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.05%)</title><rect x="738.3" y="515.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="741.3" y="526.0"></text>
</g>
<g>
<title>.L409 (1 samples, 0.03%)</title><rect x="738.3" y="499.0" width="0.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="741.3" y="510.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (1 samples, 0.03%)</title><rect x="738.3" y="483.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="741.3" y="494.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.03%)</title><rect x="738.7" y="499.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="741.7" y="510.0"></text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="738.7" y="483.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="741.7" y="494.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="739.0" y="515.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="742.0" y="526.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (80 samples, 2.14%)</title><rect x="739.3" y="563.0" width="25.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="742.3" y="574.0">J..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.03%)</title><rect x="739.3" y="547.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="742.3" y="558.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.158] (2 samples, 0.05%)</title><rect x="739.6" y="547.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="742.6" y="558.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.dx (1 samples, 0.03%)</title><rect x="740.2" y="547.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="743.2" y="558.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (74 samples, 1.98%)</title><rect x="740.6" y="547.0" width="23.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="743.6" y="558.0">j..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;CardTableBarrierSet::AccessBarrier&lt;1097812ull, CardTableBarrierSet&gt;, (AccessInternal::BarrierType)2, 1097812ull&gt;::oop_access_barrier(void*) (1 samples, 0.03%)</title><rect x="742.1" y="531.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="745.1" y="542.0"></text>
</g>
<g>
<title>Fingerprinter::fingerprint() (1 samples, 0.03%)</title><rect x="742.4" y="531.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="745.4" y="542.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long long) (1 samples, 0.03%)</title><rect x="742.8" y="531.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="745.8" y="542.0"></text>
</g>
<g>
<title>JavaCallArguments::JavaCallArguments(int) (2 samples, 0.05%)</title><rect x="743.1" y="531.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="746.1" y="542.0"></text>
</g>
<g>
<title>Klass::method_at_vtable(int) (1 samples, 0.03%)</title><rect x="743.7" y="531.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="746.7" y="542.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.158] (4 samples, 0.11%)</title><rect x="744.0" y="531.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="747.0" y="542.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="745.3" y="531.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="748.3" y="542.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.141] (53 samples, 1.42%)</title><rect x="745.6" y="531.0" width="16.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="748.6" y="542.0"></text>
</g>
<g>
<title>.L347 (2 samples, 0.05%)</title><rect x="747.8" y="515.0" width="0.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="750.8" y="526.0"></text>
</g>
<g>
<title>.L354 (2 samples, 0.05%)</title><rect x="748.4" y="515.0" width="0.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="751.4" y="526.0"></text>
</g>
<g>
<title>Fingerprinter::fingerprint() (2 samples, 0.05%)</title><rect x="749.1" y="515.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="752.1" y="526.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long long) (1 samples, 0.03%)</title><rect x="749.7" y="515.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="752.7" y="526.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (34 samples, 0.91%)</title><rect x="750.0" y="515.0" width="10.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="753.0" y="526.0"></text>
</g>
<g>
<title>.L409 (22 samples, 0.59%)</title><rect x="750.0" y="499.0" width="7.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="753.0" y="510.0"></text>
</g>
<g>
<title>HandleMark::~HandleMark() (1 samples, 0.03%)</title><rect x="751.3" y="483.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="754.3" y="494.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (2 samples, 0.05%)</title><rect x="751.6" y="483.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="754.6" y="494.0"></text>
</g>
<g>
<title>JNIHandleBlock::release_block(JNIHandleBlock*, Thread*) (2 samples, 0.05%)</title><rect x="752.2" y="483.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="755.2" y="494.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (4 samples, 0.11%)</title><rect x="752.9" y="483.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="755.9" y="494.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (6 samples, 0.16%)</title><rect x="754.1" y="483.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="757.1" y="494.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (3 samples, 0.08%)</title><rect x="754.8" y="467.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="757.8" y="478.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="755.7" y="467.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="758.7" y="478.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="755.7" y="451.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="758.7" y="462.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="755.7" y="435.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="758.7" y="446.0"></text>
</g>
<g>
<title>JavaThread::can_call_java() const (1 samples, 0.03%)</title><rect x="756.0" y="483.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="759.0" y="494.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.03%)</title><rect x="756.3" y="483.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="759.3" y="494.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (1 samples, 0.03%)</title><rect x="756.7" y="483.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="759.7" y="494.0"></text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (2 samples, 0.05%)</title><rect x="757.0" y="499.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="760.0" y="510.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.03%)</title><rect x="757.6" y="499.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="760.6" y="510.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (5 samples, 0.13%)</title><rect x="757.9" y="499.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="760.9" y="510.0"></text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (1 samples, 0.03%)</title><rect x="758.9" y="483.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="761.9" y="494.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.03%)</title><rect x="759.2" y="483.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="762.2" y="494.0"></text>
</g>
<g>
<title>Method::is_empty_method() const (1 samples, 0.03%)</title><rect x="759.5" y="499.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="762.5" y="510.0"></text>
</g>
<g>
<title>os::current_stack_pointer() (1 samples, 0.03%)</title><rect x="759.8" y="499.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="762.8" y="510.0"></text>
</g>
<g>
<title>os::os_exception_wrapper(void (*)(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*), JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.03%)</title><rect x="760.1" y="499.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="763.1" y="510.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.03%)</title><rect x="760.4" y="499.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="763.4" y="510.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.03%)</title><rect x="760.8" y="515.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="763.8" y="526.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.di (2 samples, 0.05%)</title><rect x="761.1" y="515.0" width="0.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="764.1" y="526.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.03%)</title><rect x="761.7" y="515.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="764.7" y="526.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="761.7" y="499.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="764.7" y="510.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.03%)</title><rect x="761.7" y="483.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="764.7" y="494.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.03%)</title><rect x="761.7" y="467.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="764.7" y="478.0"></text>
</g>
<g>
<title>call_on_stack (1 samples, 0.03%)</title><rect x="761.7" y="451.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="764.7" y="462.0"></text>
</g>
<g>
<title>__do_softirq (1 samples, 0.03%)</title><rect x="761.7" y="435.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="764.7" y="446.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="762.0" y="515.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="765.0" y="526.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.03%)</title><rect x="762.3" y="531.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="765.3" y="542.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;false&gt;(_jobject*) (4 samples, 0.11%)</title><rect x="762.7" y="531.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="765.7" y="542.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.141] (2 samples, 0.05%)</title><rect x="763.9" y="547.0" width="0.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="766.9" y="558.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_lock (1 samples, 0.03%)</title><rect x="764.6" y="563.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="767.6" y="574.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="764.9" y="563.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="767.9" y="574.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (3 samples, 0.08%)</title><rect x="765.2" y="563.0" width="0.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="768.2" y="574.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.05%)</title><rect x="766.1" y="563.0" width="0.7" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="769.1" y="574.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (2 samples, 0.05%)</title><rect x="766.1" y="547.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="769.1" y="558.0"></text>
</g>
<g>
<title>jni_GetEnv (1 samples, 0.03%)</title><rect x="766.8" y="563.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="769.8" y="574.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (6 samples, 0.16%)</title><rect x="767.1" y="563.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="770.1" y="574.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (2 samples, 0.05%)</title><rect x="767.4" y="547.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="770.4" y="558.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.03%)</title><rect x="767.7" y="531.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="770.7" y="542.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="767.7" y="515.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="770.7" y="526.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.03%)</title><rect x="767.7" y="499.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="770.7" y="510.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.03%)</title><rect x="767.7" y="483.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="770.7" y="494.0"></text>
</g>
<g>
<title>call_on_stack (1 samples, 0.03%)</title><rect x="767.7" y="467.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="770.7" y="478.0"></text>
</g>
<g>
<title>__do_softirq (1 samples, 0.03%)</title><rect x="767.7" y="451.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="770.7" y="462.0"></text>
</g>
<g>
<title>run_rebalance_domains (1 samples, 0.03%)</title><rect x="767.7" y="435.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="770.7" y="446.0"></text>
</g>
<g>
<title>rebalance_domains (1 samples, 0.03%)</title><rect x="767.7" y="419.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="770.7" y="430.0"></text>
</g>
<g>
<title>update_blocked_averages (1 samples, 0.03%)</title><rect x="767.7" y="403.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="770.7" y="414.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="767.7" y="387.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="770.7" y="398.0"></text>
</g>
<g>
<title>Threads::is_supported_jni_version_including_1_1(int) (1 samples, 0.03%)</title><rect x="768.0" y="547.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="771.0" y="558.0"></text>
</g>
<g>
<title>jni_GetEnv (2 samples, 0.05%)</title><rect x="768.3" y="547.0" width="0.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="771.3" y="558.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::releaseJniEnv(unsigned char&amp;) const (3 samples, 0.08%)</title><rect x="769.0" y="579.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="772.0" y="590.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() (1 samples, 0.03%)</title><rect x="769.9" y="579.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="772.9" y="590.0"></text>
</g>
<g>
<title>rocksdb::ConcurrentArena::AllocateAligned(unsigned int, unsigned int, rocksdb::Logger*) (2 samples, 0.05%)</title><rect x="770.2" y="611.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="773.2" y="622.0"></text>
</g>
<g>
<title>rocksdb::MemTableRep::KeyComparator::decode_key(char const*) const (3 samples, 0.08%)</title><rect x="770.9" y="611.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="773.9" y="622.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (1 samples, 0.03%)</title><rect x="771.8" y="627.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="774.8" y="638.0"></text>
</g>
<g>
<title>common_exception (2 samples, 0.05%)</title><rect x="772.1" y="627.0" width="0.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="775.1" y="638.0"></text>
</g>
<g>
<title>do_page_fault (2 samples, 0.05%)</title><rect x="772.1" y="611.0" width="0.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="775.1" y="622.0"></text>
</g>
<g>
<title>__do_page_fault (2 samples, 0.05%)</title><rect x="772.1" y="595.0" width="0.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="775.1" y="606.0"></text>
</g>
<g>
<title>handle_mm_fault (2 samples, 0.05%)</title><rect x="772.1" y="579.0" width="0.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="775.1" y="590.0"></text>
</g>
<g>
<title>__alloc_pages_nodemask (1 samples, 0.03%)</title><rect x="772.1" y="563.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="775.1" y="574.0"></text>
</g>
<g>
<title>get_page_from_freelist (1 samples, 0.03%)</title><rect x="772.1" y="547.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="775.1" y="558.0"></text>
</g>
<g>
<title>native_set_pte_at (1 samples, 0.03%)</title><rect x="772.5" y="563.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="775.5" y="574.0"></text>
</g>
<g>
<title>rocksdb::MemTable::ShouldFlushNow() const (1 samples, 0.03%)</title><rect x="772.8" y="627.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="775.8" y="638.0"></text>
</g>
<g>
<title>rocksdb::MemTable::UpdateFlushState() (2 samples, 0.05%)</title><rect x="773.1" y="627.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="776.1" y="638.0"></text>
</g>
<g>
<title>rocksdb::MemTable::ShouldFlushNow() const (2 samples, 0.05%)</title><rect x="773.1" y="611.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="776.1" y="622.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() (3 samples, 0.08%)</title><rect x="773.7" y="627.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="776.7" y="638.0"></text>
</g>
<g>
<title>rocksdb::MemTable::UpdateFlushState() (3 samples, 0.08%)</title><rect x="774.7" y="643.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="777.7" y="654.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="775.3" y="627.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="778.3" y="638.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="775.3" y="611.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="778.3" y="622.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="775.3" y="595.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="778.3" y="606.0"></text>
</g>
<g>
<title>rocksdb::MemTable::UpdateOldestKeyTime() (2 samples, 0.05%)</title><rect x="775.6" y="643.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="778.6" y="654.0"></text>
</g>
<g>
<title>rocksdb::ReadRecordFromWriteBatch(rocksdb::Slice*, char*, unsigned int*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*) (2 samples, 0.05%)</title><rect x="776.2" y="675.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="779.2" y="686.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned int, bool) (133 samples, 3.56%)</title><rect x="776.9" y="707.0" width="42.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="779.9" y="718.0">rock..</text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (133 samples, 3.56%)</title><rect x="776.9" y="691.0" width="42.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="779.9" y="702.0">rock..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (133 samples, 3.56%)</title><rect x="776.9" y="675.0" width="42.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="779.9" y="686.0">rock..</text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::GetMemTable() const (1 samples, 0.03%)</title><rect x="776.9" y="659.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="779.9" y="670.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (1 samples, 0.03%)</title><rect x="777.2" y="659.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="780.2" y="670.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (131 samples, 3.51%)</title><rect x="777.5" y="659.0" width="41.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="780.5" y="670.0">roc..</text>
</g>
<g>
<title>/tmp/librocksdbjni1945528177827338328.so (1 samples, 0.03%)</title><rect x="777.5" y="643.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="780.5" y="654.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.05%)</title><rect x="777.8" y="643.0" width="0.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="780.8" y="654.0"></text>
</g>
<g>
<title>operator new(unsigned int) (1 samples, 0.03%)</title><rect x="778.5" y="643.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="781.5" y="654.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (122 samples, 3.27%)</title><rect x="778.8" y="643.0" width="38.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="781.8" y="654.0">roc..</text>
</g>
<g>
<title>/tmp/librocksdbjni1945528177827338328.so (117 samples, 3.13%)</title><rect x="779.4" y="627.0" width="37.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="782.4" y="638.0">/tm..</text>
</g>
<g>
<title>/tmp/librocksdbjni1945528177827338328.so (2 samples, 0.05%)</title><rect x="779.7" y="611.0" width="0.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="782.7" y="622.0"></text>
</g>
<g>
<title>common_exception (1 samples, 0.03%)</title><rect x="779.7" y="595.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="782.7" y="606.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.03%)</title><rect x="779.7" y="579.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="782.7" y="590.0"></text>
</g>
<g>
<title>__do_page_fault (1 samples, 0.03%)</title><rect x="779.7" y="563.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="782.7" y="574.0"></text>
</g>
<g>
<title>handle_mm_fault (1 samples, 0.03%)</title><rect x="779.7" y="547.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="782.7" y="558.0"></text>
</g>
<g>
<title>__alloc_pages_nodemask (1 samples, 0.03%)</title><rect x="779.7" y="531.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="782.7" y="542.0"></text>
</g>
<g>
<title>get_page_from_freelist (1 samples, 0.03%)</title><rect x="779.7" y="515.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="782.7" y="526.0"></text>
</g>
<g>
<title>rocksdb::ConcurrentArena::AllocateAligned(unsigned int, unsigned int, rocksdb::Logger*) (1 samples, 0.03%)</title><rect x="780.0" y="595.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="783.0" y="606.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;true&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (1 samples, 0.03%)</title><rect x="780.3" y="611.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="783.3" y="622.0"></text>
</g>
<g>
<title>rocksdb::ConcurrentArena::AllocateAligned(unsigned int, unsigned int, rocksdb::Logger*) (1 samples, 0.03%)</title><rect x="780.7" y="611.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="783.7" y="622.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::InsertConcurrently(char const*) (112 samples, 3.00%)</title><rect x="781.0" y="611.0" width="35.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="784.0" y="622.0">roc..</text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;true&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (112 samples, 3.00%)</title><rect x="781.0" y="595.0" width="35.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="784.0" y="606.0">boo..</text>
</g>
<g>
<title>/tmp/librocksdbjni1945528177827338328.so (105 samples, 2.81%)</title><rect x="781.3" y="579.0" width="33.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="784.3" y="590.0">/t..</text>
</g>
<g>
<title>non-virtual thunk to rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.03%)</title><rect x="782.9" y="563.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="785.9" y="574.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (99 samples, 2.65%)</title><rect x="783.2" y="563.0" width="31.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="786.2" y="574.0">ro..</text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (96 samples, 2.57%)</title><rect x="783.5" y="547.0" width="30.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="786.5" y="558.0">ro..</text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (2 samples, 0.05%)</title><rect x="783.5" y="531.0" width="0.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="786.5" y="542.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (12 samples, 0.32%)</title><rect x="784.1" y="531.0" width="3.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="787.1" y="542.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (11 samples, 0.29%)</title><rect x="784.5" y="515.0" width="3.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="787.5" y="526.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.141] (11 samples, 0.29%)</title><rect x="784.5" y="499.0" width="3.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="787.5" y="510.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long long) (1 samples, 0.03%)</title><rect x="785.4" y="483.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="788.4" y="494.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (6 samples, 0.16%)</title><rect x="785.7" y="483.0" width="1.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="788.7" y="494.0"></text>
</g>
<g>
<title>.L409 (4 samples, 0.11%)</title><rect x="785.7" y="467.0" width="1.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="788.7" y="478.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.03%)</title><rect x="785.7" y="451.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="788.7" y="462.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (1 samples, 0.03%)</title><rect x="786.0" y="451.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="789.0" y="462.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.03%)</title><rect x="786.3" y="451.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="789.3" y="462.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.03%)</title><rect x="786.3" y="435.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="789.3" y="446.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.03%)</title><rect x="786.7" y="451.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="789.7" y="462.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.05%)</title><rect x="787.0" y="467.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="790.0" y="478.0"></text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="787.3" y="451.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="790.3" y="462.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.03%)</title><rect x="787.6" y="483.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="790.6" y="494.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (28 samples, 0.75%)</title><rect x="787.9" y="531.0" width="8.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="790.9" y="542.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="787.9" y="515.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="790.9" y="526.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (26 samples, 0.70%)</title><rect x="788.2" y="515.0" width="8.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="791.2" y="526.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.03%)</title><rect x="788.2" y="499.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="791.2" y="510.0"></text>
</g>
<g>
<title>Klass::method_at_vtable(int) (1 samples, 0.03%)</title><rect x="788.6" y="499.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="791.6" y="510.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.03%)</title><rect x="788.9" y="499.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="791.9" y="510.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.05%)</title><rect x="789.2" y="499.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="792.2" y="510.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.141] (21 samples, 0.56%)</title><rect x="789.8" y="499.0" width="6.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="792.8" y="510.0"></text>
</g>
<g>
<title>.L344 (1 samples, 0.03%)</title><rect x="791.1" y="483.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="794.1" y="494.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="791.1" y="467.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="794.1" y="478.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="791.1" y="451.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="794.1" y="462.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="791.1" y="435.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="794.1" y="446.0"></text>
</g>
<g>
<title>Fingerprinter::fingerprint() (1 samples, 0.03%)</title><rect x="791.4" y="483.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="794.4" y="494.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (1 samples, 0.03%)</title><rect x="791.7" y="483.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="794.7" y="494.0"></text>
</g>
<g>
<title>JavaCallArguments::JavaCallArguments(int) (1 samples, 0.03%)</title><rect x="792.0" y="483.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="795.0" y="494.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (11 samples, 0.29%)</title><rect x="792.4" y="483.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="795.4" y="494.0"></text>
</g>
<g>
<title>.L409 (5 samples, 0.13%)</title><rect x="792.4" y="467.0" width="1.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="795.4" y="478.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.03%)</title><rect x="792.4" y="451.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="795.4" y="462.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (2 samples, 0.05%)</title><rect x="792.7" y="451.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="795.7" y="462.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (2 samples, 0.05%)</title><rect x="793.3" y="451.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="796.3" y="462.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (5 samples, 0.13%)</title><rect x="793.9" y="467.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="796.9" y="478.0"></text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (1 samples, 0.03%)</title><rect x="794.6" y="451.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="797.6" y="462.0"></text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="794.9" y="451.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="797.9" y="462.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.03%)</title><rect x="795.2" y="451.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="798.2" y="462.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.03%)</title><rect x="795.5" y="467.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="798.5" y="478.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="795.8" y="483.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="798.8" y="494.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.03%)</title><rect x="796.1" y="483.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="799.1" y="494.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.141] (1 samples, 0.03%)</title><rect x="796.5" y="515.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="799.5" y="526.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.03%)</title><rect x="796.8" y="531.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="799.8" y="542.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_lock (1 samples, 0.03%)</title><rect x="797.1" y="531.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="800.1" y="542.0"></text>
</g>
<g>
<title>__kernel_vsyscall (48 samples, 1.28%)</title><rect x="797.4" y="531.0" width="15.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="800.4" y="542.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (48 samples, 1.28%)</title><rect x="797.4" y="515.0" width="15.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="800.4" y="526.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (48 samples, 1.28%)</title><rect x="797.4" y="499.0" width="15.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="800.4" y="510.0"></text>
</g>
<g>
<title>sys_futex (48 samples, 1.28%)</title><rect x="797.4" y="483.0" width="15.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="800.4" y="494.0"></text>
</g>
<g>
<title>do_futex (48 samples, 1.28%)</title><rect x="797.4" y="467.0" width="15.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="800.4" y="478.0"></text>
</g>
<g>
<title>futex_wait (2 samples, 0.05%)</title><rect x="797.4" y="451.0" width="0.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="800.4" y="462.0"></text>
</g>
<g>
<title>futex_wait_queue_me (2 samples, 0.05%)</title><rect x="797.4" y="435.0" width="0.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="800.4" y="446.0"></text>
</g>
<g>
<title>schedule (2 samples, 0.05%)</title><rect x="797.4" y="419.0" width="0.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="800.4" y="430.0"></text>
</g>
<g>
<title>__sched_text_start (2 samples, 0.05%)</title><rect x="797.4" y="403.0" width="0.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="800.4" y="414.0"></text>
</g>
<g>
<title>finish_task_switch (2 samples, 0.05%)</title><rect x="797.4" y="387.0" width="0.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="800.4" y="398.0"></text>
</g>
<g>
<title>futex_wake (46 samples, 1.23%)</title><rect x="798.0" y="451.0" width="14.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="801.0" y="462.0"></text>
</g>
<g>
<title>mark_wake_futex (1 samples, 0.03%)</title><rect x="798.0" y="435.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="801.0" y="446.0"></text>
</g>
<g>
<title>wake_up_q (45 samples, 1.20%)</title><rect x="798.4" y="435.0" width="14.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="801.4" y="446.0"></text>
</g>
<g>
<title>try_to_wake_up (45 samples, 1.20%)</title><rect x="798.4" y="419.0" width="14.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="801.4" y="430.0"></text>
</g>
<g>
<title>__lock_text_start (45 samples, 1.20%)</title><rect x="798.4" y="403.0" width="14.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="801.4" y="414.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.03%)</title><rect x="812.6" y="531.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="815.6" y="542.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.03%)</title><rect x="812.9" y="531.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="815.9" y="542.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="812.9" y="515.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="815.9" y="526.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (2 samples, 0.05%)</title><rect x="813.2" y="531.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="816.2" y="542.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (1 samples, 0.03%)</title><rect x="813.8" y="547.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="816.8" y="558.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::releaseJniEnv(unsigned char&amp;) const (1 samples, 0.03%)</title><rect x="814.1" y="547.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="817.1" y="558.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (6 samples, 0.16%)</title><rect x="814.5" y="579.0" width="1.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="817.5" y="590.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (6 samples, 0.16%)</title><rect x="814.5" y="563.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="817.5" y="574.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (3 samples, 0.08%)</title><rect x="814.5" y="547.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="817.5" y="558.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (3 samples, 0.08%)</title><rect x="814.5" y="531.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="817.5" y="542.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.158] (1 samples, 0.03%)</title><rect x="814.5" y="515.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="817.5" y="526.0"></text>
</g>
<g>
<title>common_interrupt (1 samples, 0.03%)</title><rect x="814.5" y="499.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="817.5" y="510.0"></text>
</g>
<g>
<title>do_IRQ (1 samples, 0.03%)</title><rect x="814.5" y="483.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="817.5" y="494.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.03%)</title><rect x="814.5" y="467.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="817.5" y="478.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.03%)</title><rect x="814.5" y="451.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="817.5" y="462.0"></text>
</g>
<g>
<title>call_on_stack (1 samples, 0.03%)</title><rect x="814.5" y="435.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="817.5" y="446.0"></text>
</g>
<g>
<title>__do_softirq (1 samples, 0.03%)</title><rect x="814.5" y="419.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="817.5" y="430.0"></text>
</g>
<g>
<title>blk_done_softirq (1 samples, 0.03%)</title><rect x="814.5" y="403.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="817.5" y="414.0"></text>
</g>
<g>
<title>scsi_softirq_done (1 samples, 0.03%)</title><rect x="814.5" y="387.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="817.5" y="398.0"></text>
</g>
<g>
<title>scsi_finish_command (1 samples, 0.03%)</title><rect x="814.5" y="371.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="817.5" y="382.0"></text>
</g>
<g>
<title>scsi_io_completion (1 samples, 0.03%)</title><rect x="814.5" y="355.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="817.5" y="366.0"></text>
</g>
<g>
<title>scsi_end_request (1 samples, 0.03%)</title><rect x="814.5" y="339.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="817.5" y="350.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="814.5" y="323.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="817.5" y="334.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.141] (2 samples, 0.05%)</title><rect x="814.8" y="515.0" width="0.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="817.8" y="526.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.05%)</title><rect x="814.8" y="499.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="817.8" y="510.0"></text>
</g>
<g>
<title>.L409 (2 samples, 0.05%)</title><rect x="814.8" y="483.0" width="0.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="817.8" y="494.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.03%)</title><rect x="814.8" y="467.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="817.8" y="478.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (1 samples, 0.03%)</title><rect x="814.8" y="451.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="817.8" y="462.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (1 samples, 0.03%)</title><rect x="815.1" y="467.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="818.1" y="478.0"></text>
</g>
<g>
<title>__kernel_vsyscall (3 samples, 0.08%)</title><rect x="815.4" y="547.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="818.4" y="558.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (3 samples, 0.08%)</title><rect x="815.4" y="531.0" width="1.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="818.4" y="542.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (3 samples, 0.08%)</title><rect x="815.4" y="515.0" width="1.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="818.4" y="526.0"></text>
</g>
<g>
<title>sys_futex (3 samples, 0.08%)</title><rect x="815.4" y="499.0" width="1.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="818.4" y="510.0"></text>
</g>
<g>
<title>do_futex (3 samples, 0.08%)</title><rect x="815.4" y="483.0" width="1.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="818.4" y="494.0"></text>
</g>
<g>
<title>futex_wake (3 samples, 0.08%)</title><rect x="815.4" y="467.0" width="1.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="818.4" y="478.0"></text>
</g>
<g>
<title>wake_up_q (3 samples, 0.08%)</title><rect x="815.4" y="451.0" width="1.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="818.4" y="462.0"></text>
</g>
<g>
<title>try_to_wake_up (3 samples, 0.08%)</title><rect x="815.4" y="435.0" width="1.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="818.4" y="446.0"></text>
</g>
<g>
<title>__lock_text_start (3 samples, 0.08%)</title><rect x="815.4" y="419.0" width="1.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="818.4" y="430.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::InsertConcurrently(char const*) (1 samples, 0.03%)</title><rect x="816.4" y="627.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="819.4" y="638.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() (2 samples, 0.05%)</title><rect x="816.7" y="627.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="819.7" y="638.0"></text>
</g>
<g>
<title>rocksdb::PackSequenceAndType(unsigned long long, rocksdb::ValueType) (2 samples, 0.05%)</title><rect x="817.3" y="643.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="820.3" y="654.0"></text>
</g>
<g>
<title>std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&amp;) (1 samples, 0.03%)</title><rect x="817.9" y="643.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="820.9" y="654.0"></text>
</g>
<g>
<title>std::_Rb_tree_iterator&lt;std::pair&lt;rocksdb::MemTable* const, rocksdb::MemTablePostProcessInfo&gt; &gt; std::_Rb_tree&lt;rocksdb::MemTable*, std::pair&lt;rocksdb::MemTable* const, rocksdb::MemTablePostProcessInfo&gt;, std::_Select1st&lt;std::pair&lt;rocksdb::MemTable* const, rocksdb::MemTablePostProcessInfo&gt; &gt;, std::less&lt;rocksdb::MemTable*&gt;, std::allocator&lt;std::pair&lt;rocksdb::MemTable* const, rocksdb::MemTablePostProcessInfo&gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;rocksdb::MemTable* const&amp;&gt;, std::tuple&lt;&gt; &gt;(std::_Rb_tree_const_iterator&lt;std::pair&lt;rocksdb::MemTable* const, rocksdb::MemTablePostProcessInfo&gt; &gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;rocksdb::MemTable* const&amp;&gt;&amp;&amp;, std::tuple&lt;&gt;&amp;&amp;) (2 samples, 0.05%)</title><rect x="818.2" y="643.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="821.2" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::SetSequence(rocksdb::WriteBatch*, unsigned long long) (2 samples, 0.05%)</title><rect x="818.9" y="707.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="821.9" y="718.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (1 samples, 0.03%)</title><rect x="819.5" y="707.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="822.5" y="718.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CreateMissingNewerLinks(rocksdb::WriteThread::Writer*) (3 samples, 0.08%)</title><rect x="819.8" y="707.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="822.8" y="718.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (5 samples, 0.13%)</title><rect x="820.8" y="707.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="823.8" y="718.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.03%)</title><rect x="821.7" y="691.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="824.7" y="702.0"></text>
</g>
<g>
<title>std::condition_variable::notify_one() (1 samples, 0.03%)</title><rect x="822.0" y="691.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="825.0" y="702.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (10 samples, 0.27%)</title><rect x="822.4" y="707.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="825.4" y="718.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.03%)</title><rect x="822.4" y="691.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="825.4" y="702.0"></text>
</g>
<g>
<title>__kernel_vsyscall (1 samples, 0.03%)</title><rect x="822.4" y="675.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="825.4" y="686.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() (2 samples, 0.05%)</title><rect x="822.7" y="691.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="825.7" y="702.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (6 samples, 0.16%)</title><rect x="823.3" y="691.0" width="1.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="826.3" y="702.0"></text>
</g>
<g>
<title>__kernel_vsyscall (1 samples, 0.03%)</title><rect x="823.6" y="675.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="826.6" y="686.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (1 samples, 0.03%)</title><rect x="823.6" y="659.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="826.6" y="670.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (1 samples, 0.03%)</title><rect x="823.6" y="643.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="826.6" y="654.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="823.6" y="627.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="826.6" y="638.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="823.6" y="611.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="826.6" y="622.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.03%)</title><rect x="823.6" y="595.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="826.6" y="606.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="823.6" y="579.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="826.6" y="590.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.03%)</title><rect x="823.9" y="675.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="826.9" y="686.0"></text>
</g>
<g>
<title>pthread_cond_wait (1 samples, 0.03%)</title><rect x="824.3" y="675.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="827.3" y="686.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.03%)</title><rect x="824.6" y="675.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="827.6" y="686.0"></text>
</g>
<g>
<title>std::condition_variable::condition_variable() (1 samples, 0.03%)</title><rect x="824.9" y="675.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="827.9" y="686.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::BlockingAwaitState(rocksdb::WriteThread::Writer*, unsigned char) (1 samples, 0.03%)</title><rect x="825.2" y="691.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="828.2" y="702.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (1 samples, 0.03%)</title><rect x="825.5" y="707.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="828.5" y="718.0"></text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (1 samples, 0.03%)</title><rect x="825.5" y="691.0" width="0.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="828.5" y="702.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::SetState(rocksdb::WriteThread::Writer*, unsigned char) (2 samples, 0.05%)</title><rect x="825.8" y="707.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="828.8" y="718.0"></text>
</g>
<g>
<title>std::_Rb_tree&lt;rocksdb::MemTable*, std::pair&lt;rocksdb::MemTable* const, rocksdb::MemTablePostProcessInfo&gt;, std::_Select1st&lt;std::pair&lt;rocksdb::MemTable* const, rocksdb::MemTablePostProcessInfo&gt; &gt;, std::less&lt;rocksdb::MemTable*&gt;, std::allocator&lt;std::pair&lt;rocksdb::MemTable* const, rocksdb::MemTablePostProcessInfo&gt; &gt; &gt;::_M_erase(std::_Rb_tree_node&lt;std::pair&lt;rocksdb::MemTable* const, rocksdb::MemTablePostProcessInfo&gt; &gt;*) (1 samples, 0.03%)</title><rect x="826.5" y="707.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="829.5" y="718.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteStatusCheck(rocksdb::Status const&amp;) (1 samples, 0.03%)</title><rect x="826.8" y="723.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="829.8" y="734.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (1 samples, 0.03%)</title><rect x="827.1" y="723.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="830.1" y="734.0"></text>
</g>
<g>
<title>rocksdb::PerfStepTimer::Start() (2 samples, 0.05%)</title><rect x="827.4" y="723.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="830.4" y="734.0"></text>
</g>
<g>
<title>rocksdb::Status::operator=(rocksdb::Status&amp;&amp;) (1 samples, 0.03%)</title><rect x="828.0" y="723.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="831.0" y="734.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned int, unsigned int) (3 samples, 0.08%)</title><rect x="828.4" y="723.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="831.4" y="734.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="829.0" y="707.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="832.0" y="718.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="829.0" y="691.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="832.0" y="702.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="829.0" y="675.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="832.0" y="686.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (1 samples, 0.03%)</title><rect x="829.3" y="723.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="832.3" y="734.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (1 samples, 0.03%)</title><rect x="829.6" y="723.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="832.6" y="734.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() (1 samples, 0.03%)</title><rect x="829.9" y="723.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="832.9" y="734.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned int, rocksdb::PreReleaseCallback*) (2 samples, 0.05%)</title><rect x="830.3" y="739.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="833.3" y="750.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyID(rocksdb::ColumnFamilyHandle*) (5 samples, 0.13%)</title><rect x="830.9" y="739.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="833.9" y="750.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (29 samples, 0.78%)</title><rect x="832.5" y="739.0" width="9.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="835.5" y="750.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetID() const (3 samples, 0.08%)</title><rect x="832.5" y="723.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="835.5" y="734.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (4 samples, 0.11%)</title><rect x="833.4" y="723.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="836.4" y="734.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyID(rocksdb::ColumnFamilyHandle*) (6 samples, 0.16%)</title><rect x="834.7" y="723.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="837.7" y="734.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::cfd() const (4 samples, 0.11%)</title><rect x="835.3" y="707.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="838.3" y="718.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Count() const (3 samples, 0.08%)</title><rect x="836.6" y="723.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="839.6" y="734.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (9 samples, 0.24%)</title><rect x="837.5" y="723.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="840.5" y="734.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (1 samples, 0.03%)</title><rect x="838.8" y="707.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="841.8" y="718.0"></text>
</g>
<g>
<title>std::string::_M_leak_hard() (4 samples, 0.11%)</title><rect x="839.1" y="707.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="842.1" y="718.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::SetCount(rocksdb::WriteBatch*, int) (2 samples, 0.05%)</title><rect x="840.4" y="723.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="843.4" y="734.0"></text>
</g>
<g>
<title>std::string::append(char const*, unsigned int) (2 samples, 0.05%)</title><rect x="841.0" y="723.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="844.0" y="734.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="841.3" y="707.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="844.3" y="718.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="841.3" y="691.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="844.3" y="702.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="841.3" y="675.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="844.3" y="686.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned int, unsigned int) (4 samples, 0.11%)</title><rect x="841.6" y="739.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="844.6" y="750.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (4 samples, 0.11%)</title><rect x="842.9" y="739.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="845.9" y="750.0"></text>
</g>
<g>
<title>std::string::_Rep::_M_clone(std::allocator&lt;char&gt; const&amp;, unsigned int) (2 samples, 0.05%)</title><rect x="844.1" y="739.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="847.1" y="750.0"></text>
</g>
<g>
<title>std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator&lt;char&gt; const&amp;) (3 samples, 0.08%)</title><rect x="844.8" y="739.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="847.8" y="750.0"></text>
</g>
<g>
<title>std::string::reserve(unsigned int) (4 samples, 0.11%)</title><rect x="845.7" y="739.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="848.7" y="750.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.05%)</title><rect x="847.0" y="755.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="850.0" y="766.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned int, unsigned int) (4 samples, 0.11%)</title><rect x="847.6" y="755.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="850.6" y="766.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned int) (3 samples, 0.08%)</title><rect x="848.9" y="787.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="851.9" y="798.0"></text>
</g>
<g>
<title>[unknown] (302 samples, 8.08%)</title><rect x="849.8" y="819.0" width="95.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="852.8" y="830.0">[unknown]</text>
</g>
<g>
<title>[unknown] (3 samples, 0.08%)</title><rect x="849.8" y="803.0" width="1.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="852.8" y="814.0"></text>
</g>
<g>
<title>__kernel_vsyscall (3 samples, 0.08%)</title><rect x="849.8" y="787.0" width="1.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="852.8" y="798.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (3 samples, 0.08%)</title><rect x="849.8" y="771.0" width="1.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="852.8" y="782.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (3 samples, 0.08%)</title><rect x="849.8" y="755.0" width="1.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="852.8" y="766.0"></text>
</g>
<g>
<title>__kernel_vsyscall (285 samples, 7.63%)</title><rect x="850.8" y="803.0" width="90.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="853.8" y="814.0">__kernel_v..</text>
</g>
<g>
<title>entry_SYSENTER_32 (285 samples, 7.63%)</title><rect x="850.8" y="787.0" width="90.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="853.8" y="798.0">entry_SYSE..</text>
</g>
<g>
<title>do_fast_syscall_32 (285 samples, 7.63%)</title><rect x="850.8" y="771.0" width="90.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="853.8" y="782.0">do_fast_sy..</text>
</g>
<g>
<title>sys_futex (285 samples, 7.63%)</title><rect x="850.8" y="755.0" width="90.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="853.8" y="766.0">sys_futex</text>
</g>
<g>
<title>do_futex (284 samples, 7.60%)</title><rect x="850.8" y="739.0" width="89.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="853.8" y="750.0">do_futex</text>
</g>
<g>
<title>futex_wait (51 samples, 1.37%)</title><rect x="851.1" y="723.0" width="16.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="854.1" y="734.0"></text>
</g>
<g>
<title>futex_wait_queue_me (48 samples, 1.28%)</title><rect x="851.1" y="707.0" width="15.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="854.1" y="718.0"></text>
</g>
<g>
<title>schedule (46 samples, 1.23%)</title><rect x="851.7" y="691.0" width="14.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="854.7" y="702.0"></text>
</g>
<g>
<title>__sched_text_start (46 samples, 1.23%)</title><rect x="851.7" y="675.0" width="14.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="854.7" y="686.0"></text>
</g>
<g>
<title>finish_task_switch (45 samples, 1.20%)</title><rect x="852.0" y="659.0" width="14.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="855.0" y="670.0"></text>
</g>
<g>
<title>futex_wait_setup (2 samples, 0.05%)</title><rect x="866.3" y="707.0" width="0.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="869.3" y="718.0"></text>
</g>
<g>
<title>get_futex_key (1 samples, 0.03%)</title><rect x="866.3" y="691.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="869.3" y="702.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.10 (1 samples, 0.03%)</title><rect x="866.3" y="675.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="869.3" y="686.0"></text>
</g>
<g>
<title>get_futex_value_locked (1 samples, 0.03%)</title><rect x="866.6" y="691.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="869.6" y="702.0"></text>
</g>
<g>
<title>get_futex_value_locked (1 samples, 0.03%)</title><rect x="866.9" y="707.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="869.9" y="718.0"></text>
</g>
<g>
<title>futex_wake (231 samples, 6.18%)</title><rect x="867.2" y="723.0" width="73.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="870.2" y="734.0">futex_wake</text>
</g>
<g>
<title>mark_wake_futex (1 samples, 0.03%)</title><rect x="867.8" y="707.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="870.8" y="718.0"></text>
</g>
<g>
<title>wake_q_add (2 samples, 0.05%)</title><rect x="868.2" y="707.0" width="0.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="871.2" y="718.0"></text>
</g>
<g>
<title>wake_up_q (226 samples, 6.05%)</title><rect x="868.8" y="707.0" width="71.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="871.8" y="718.0">wake_up_q</text>
</g>
<g>
<title>try_to_wake_up (225 samples, 6.02%)</title><rect x="869.1" y="691.0" width="71.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="872.1" y="702.0">try_to_w..</text>
</g>
<g>
<title>__lock_text_start (225 samples, 6.02%)</title><rect x="869.1" y="675.0" width="71.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="872.1" y="686.0">__lock_t..</text>
</g>
<g>
<title>apic_timer_interrupt (2 samples, 0.05%)</title><rect x="939.5" y="659.0" width="0.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="942.5" y="670.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (2 samples, 0.05%)</title><rect x="939.5" y="643.0" width="0.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="942.5" y="654.0"></text>
</g>
<g>
<title>irq_exit (2 samples, 0.05%)</title><rect x="939.5" y="627.0" width="0.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="942.5" y="638.0"></text>
</g>
<g>
<title>do_softirq_own_stack (2 samples, 0.05%)</title><rect x="939.5" y="611.0" width="0.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="942.5" y="622.0"></text>
</g>
<g>
<title>call_on_stack (2 samples, 0.05%)</title><rect x="939.5" y="595.0" width="0.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="942.5" y="606.0"></text>
</g>
<g>
<title>__do_softirq (2 samples, 0.05%)</title><rect x="939.5" y="579.0" width="0.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="942.5" y="590.0"></text>
</g>
<g>
<title>run_rebalance_domains (2 samples, 0.05%)</title><rect x="939.5" y="563.0" width="0.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="942.5" y="574.0"></text>
</g>
<g>
<title>rebalance_domains (2 samples, 0.05%)</title><rect x="939.5" y="547.0" width="0.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="942.5" y="558.0"></text>
</g>
<g>
<title>update_blocked_averages (2 samples, 0.05%)</title><rect x="939.5" y="531.0" width="0.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="942.5" y="542.0"></text>
</g>
<g>
<title>__lock_text_start (2 samples, 0.05%)</title><rect x="939.5" y="515.0" width="0.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="942.5" y="526.0"></text>
</g>
<g>
<title>wake_up_q (1 samples, 0.03%)</title><rect x="940.2" y="723.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="943.2" y="734.0"></text>
</g>
<g>
<title>futex_wait (1 samples, 0.03%)</title><rect x="940.5" y="739.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="943.5" y="750.0"></text>
</g>
<g>
<title>__pthread_cleanup_push (2 samples, 0.05%)</title><rect x="940.8" y="803.0" width="0.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="943.8" y="814.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="941.1" y="787.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="944.1" y="798.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="941.1" y="771.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="944.1" y="782.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="941.1" y="755.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="944.1" y="766.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.03%)</title><rect x="941.4" y="803.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="944.4" y="814.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.03%)</title><rect x="941.7" y="803.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="944.7" y="814.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.03%)</title><rect x="942.1" y="803.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="945.1" y="814.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="942.4" y="803.0" width="0.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="945.4" y="814.0"></text>
</g>
<g>
<title>malloc (8 samples, 0.21%)</title><rect x="942.7" y="803.0" width="2.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="945.7" y="814.0"></text>
</g>
<g>
<title>_init (2 samples, 0.05%)</title><rect x="945.2" y="819.0" width="0.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="948.2" y="830.0"></text>
</g>
<g>
<title>call_stub (16 samples, 0.43%)</title><rect x="945.9" y="819.0" width="5.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="948.9" y="830.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.05%)</title><rect x="950.9" y="819.0" width="0.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="953.9" y="830.0"></text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.setNativeHandle (24 samples, 0.64%)</title><rect x="951.5" y="819.0" width="7.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="954.5" y="830.0"></text>
</g>
<g>
<title>resume_userspace (2 samples, 0.05%)</title><rect x="958.5" y="803.0" width="0.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="961.5" y="814.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.05%)</title><rect x="958.5" y="787.0" width="0.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="961.5" y="798.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.05%)</title><rect x="958.5" y="771.0" width="0.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="961.5" y="782.0"></text>
</g>
<g>
<title>org/rocksdb/util/BytewiseComparator.compare (239 samples, 6.40%)</title><rect x="959.1" y="819.0" width="75.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="962.1" y="830.0">org/rock..</text>
</g>
<g>
<title>org/rocksdb/util/BytewiseComparator.compare (236 samples, 6.32%)</title><rect x="959.7" y="803.0" width="74.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="962.7" y="814.0">org/rock..</text>
</g>
<g>
<title>org/rocksdb/AbstractSlice.data (231 samples, 6.18%)</title><rect x="959.7" y="787.0" width="73.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="962.7" y="798.0">org/rock..</text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.getNativeHandle (12 samples, 0.32%)</title><rect x="959.7" y="771.0" width="3.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="962.7" y="782.0"></text>
</g>
<g>
<title>resume_userspace (2 samples, 0.05%)</title><rect x="962.9" y="755.0" width="0.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="965.9" y="766.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.05%)</title><rect x="962.9" y="739.0" width="0.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="965.9" y="750.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.05%)</title><rect x="962.9" y="723.0" width="0.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="965.9" y="734.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="963.2" y="707.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="966.2" y="718.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.03%)</title><rect x="963.2" y="691.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="966.2" y="702.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="963.2" y="675.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="966.2" y="686.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (219 samples, 5.86%)</title><rect x="963.5" y="771.0" width="69.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="966.5" y="782.0">org/roc..</text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (215 samples, 5.75%)</title><rect x="964.8" y="755.0" width="67.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="967.8" y="766.0">org/roc..</text>
</g>
<g>
<title>Java_org_rocksdb_Slice_data0 (203 samples, 5.43%)</title><rect x="967.0" y="739.0" width="64.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="970.0" y="750.0">Java_or..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;CardTableBarrierSet::AccessBarrier&lt;1097812ull, CardTableBarrierSet&gt;, (AccessInternal::BarrierType)2, 1097812ull&gt;::oop_access_barrier(void*) (3 samples, 0.08%)</title><rect x="968.0" y="723.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="971.0" y="734.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="968.6" y="707.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="971.6" y="718.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="968.6" y="691.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="971.6" y="702.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="968.6" y="675.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="971.6" y="686.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.03%)</title><rect x="968.9" y="723.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="971.9" y="734.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="968.9" y="707.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="971.9" y="718.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="968.9" y="691.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="971.9" y="702.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="968.9" y="675.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="971.9" y="686.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="968.9" y="659.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="971.9" y="670.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.03%)</title><rect x="968.9" y="643.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="971.9" y="654.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="968.9" y="627.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="971.9" y="638.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (1 samples, 0.03%)</title><rect x="969.2" y="723.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="972.2" y="734.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (4 samples, 0.11%)</title><rect x="969.5" y="723.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="972.5" y="734.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 0.13%)</title><rect x="970.8" y="723.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="973.8" y="734.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="972.1" y="707.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="975.1" y="718.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="972.1" y="691.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="975.1" y="702.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="972.1" y="675.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="975.1" y="686.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="972.4" y="723.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="975.4" y="734.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.03%)</title><rect x="972.7" y="723.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="975.7" y="734.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (22 samples, 0.59%)</title><rect x="973.0" y="723.0" width="7.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="976.0" y="734.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.03%)</title><rect x="973.6" y="707.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="976.6" y="718.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (10 samples, 0.27%)</title><rect x="974.0" y="707.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="977.0" y="718.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.158] (8 samples, 0.21%)</title><rect x="977.1" y="707.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="980.1" y="718.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="979.6" y="707.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="982.6" y="718.0"></text>
</g>
<g>
<title>jni_NewByteArray (105 samples, 2.81%)</title><rect x="980.0" y="723.0" width="33.1" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="983.0" y="734.0">jn..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;CardTableBarrierSet::AccessBarrier&lt;5292116ull, CardTableBarrierSet&gt;, (AccessInternal::BarrierType)0, 5292116ull&gt;::oop_access_barrier(void*, oopDesc*) (2 samples, 0.05%)</title><rect x="983.4" y="707.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="986.4" y="718.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="983.8" y="691.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="986.8" y="702.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="983.8" y="675.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="986.8" y="686.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="983.8" y="659.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="986.8" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (4 samples, 0.11%)</title><rect x="984.1" y="707.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="987.1" y="718.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (11 samples, 0.29%)</title><rect x="985.3" y="707.0" width="3.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="988.3" y="718.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;CardTableBarrierSet::AccessBarrier&lt;5292116ull, CardTableBarrierSet&gt;, (AccessInternal::BarrierType)0, 5292116ull&gt;::oop_access_barrier(void*, oopDesc*) (1 samples, 0.03%)</title><rect x="988.5" y="691.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="991.5" y="702.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="988.5" y="675.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="991.5" y="686.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="988.5" y="659.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="991.5" y="670.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="988.5" y="643.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="991.5" y="654.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (8 samples, 0.21%)</title><rect x="988.8" y="707.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="991.8" y="718.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="991.0" y="691.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="994.0" y="702.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="991.0" y="675.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="994.0" y="686.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="991.0" y="659.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="994.0" y="670.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.158] (4 samples, 0.11%)</title><rect x="991.3" y="707.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="994.3" y="718.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (62 samples, 1.66%)</title><rect x="992.6" y="707.0" width="19.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="995.6" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (43 samples, 1.15%)</title><rect x="997.6" y="691.0" width="13.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1000.6" y="702.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (2 samples, 0.05%)</title><rect x="998.9" y="675.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1001.9" y="686.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (35 samples, 0.94%)</title><rect x="999.5" y="675.0" width="11.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1002.5" y="686.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (1 samples, 0.03%)</title><rect x="1003.0" y="659.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1006.0" y="670.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (3 samples, 0.08%)</title><rect x="1003.3" y="659.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1006.3" y="670.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (2 samples, 0.05%)</title><rect x="1003.7" y="643.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1006.7" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (1 samples, 0.03%)</title><rect x="1004.0" y="627.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1007.0" y="638.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.03%)</title><rect x="1004.0" y="611.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1007.0" y="622.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="1004.0" y="595.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1007.0" y="606.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="1004.0" y="579.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1007.0" y="590.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="1004.0" y="563.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1007.0" y="574.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (14 samples, 0.37%)</title><rect x="1004.3" y="659.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1007.3" y="670.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.03%)</title><rect x="1007.8" y="643.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1010.8" y="654.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="1007.8" y="627.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1010.8" y="638.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.03%)</title><rect x="1007.8" y="611.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1010.8" y="622.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.03%)</title><rect x="1007.8" y="595.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1010.8" y="606.0"></text>
</g>
<g>
<title>call_on_stack (1 samples, 0.03%)</title><rect x="1007.8" y="579.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1010.8" y="590.0"></text>
</g>
<g>
<title>__do_softirq (1 samples, 0.03%)</title><rect x="1007.8" y="563.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1010.8" y="574.0"></text>
</g>
<g>
<title>run_rebalance_domains (1 samples, 0.03%)</title><rect x="1007.8" y="547.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1010.8" y="558.0"></text>
</g>
<g>
<title>rebalance_domains (1 samples, 0.03%)</title><rect x="1007.8" y="531.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1010.8" y="542.0"></text>
</g>
<g>
<title>update_blocked_averages (1 samples, 0.03%)</title><rect x="1007.8" y="515.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1010.8" y="526.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="1007.8" y="499.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1010.8" y="510.0"></text>
</g>
<g>
<title>resume_userspace (2 samples, 0.05%)</title><rect x="1008.1" y="643.0" width="0.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1011.1" y="654.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.05%)</title><rect x="1008.1" y="627.0" width="0.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1011.1" y="638.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.05%)</title><rect x="1008.1" y="611.0" width="0.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1011.1" y="622.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (5 samples, 0.13%)</title><rect x="1008.7" y="659.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1011.7" y="670.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="1010.0" y="643.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1013.0" y="654.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="1010.0" y="627.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1013.0" y="638.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="1010.0" y="611.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1013.0" y="622.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="1010.3" y="659.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1013.3" y="670.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="1010.3" y="643.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1013.3" y="654.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="1010.3" y="627.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1013.3" y="638.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (2 samples, 0.05%)</title><rect x="1010.6" y="675.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1013.6" y="686.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="1011.2" y="691.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1014.2" y="702.0"></text>
</g>
<g>
<title>resume_userspace (2 samples, 0.05%)</title><rect x="1011.5" y="691.0" width="0.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1014.5" y="702.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.05%)</title><rect x="1011.5" y="675.0" width="0.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1014.5" y="686.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.05%)</title><rect x="1011.5" y="659.0" width="0.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1014.5" y="670.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (3 samples, 0.08%)</title><rect x="1012.2" y="707.0" width="0.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1015.2" y="718.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (55 samples, 1.47%)</title><rect x="1013.1" y="723.0" width="17.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1016.1" y="734.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.03%)</title><rect x="1016.6" y="707.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1019.6" y="718.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (6 samples, 0.16%)</title><rect x="1016.9" y="707.0" width="1.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1019.9" y="718.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.158] (12 samples, 0.32%)</title><rect x="1018.8" y="707.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1021.8" y="718.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="1022.3" y="691.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1025.3" y="702.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="1022.3" y="675.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1025.3" y="686.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="1022.3" y="659.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1025.3" y="670.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="1022.3" y="643.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1025.3" y="654.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.03%)</title><rect x="1022.3" y="627.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1025.3" y="638.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="1022.3" y="611.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1025.3" y="622.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.03%)</title><rect x="1022.3" y="595.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1025.3" y="606.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="1022.3" y="579.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1025.3" y="590.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.03%)</title><rect x="1022.3" y="563.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1025.3" y="574.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.03%)</title><rect x="1022.3" y="547.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1025.3" y="558.0"></text>
</g>
<g>
<title>call_on_stack (1 samples, 0.03%)</title><rect x="1022.3" y="531.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1025.3" y="542.0"></text>
</g>
<g>
<title>__do_softirq (1 samples, 0.03%)</title><rect x="1022.3" y="515.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1025.3" y="526.0"></text>
</g>
<g>
<title>run_rebalance_domains (1 samples, 0.03%)</title><rect x="1022.3" y="499.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1025.3" y="510.0"></text>
</g>
<g>
<title>rebalance_domains (1 samples, 0.03%)</title><rect x="1022.3" y="483.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1025.3" y="494.0"></text>
</g>
<g>
<title>update_blocked_averages (1 samples, 0.03%)</title><rect x="1022.3" y="467.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1025.3" y="478.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="1022.3" y="451.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1025.3" y="462.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (4 samples, 0.11%)</title><rect x="1022.6" y="707.0" width="1.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1025.6" y="718.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="1023.5" y="691.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1026.5" y="702.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="1023.5" y="675.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1026.5" y="686.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="1023.5" y="659.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1026.5" y="670.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (6 samples, 0.16%)</title><rect x="1023.9" y="707.0" width="1.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1026.9" y="718.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.03%)</title><rect x="1024.5" y="691.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1027.5" y="702.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (3 samples, 0.08%)</title><rect x="1024.8" y="691.0" width="1.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1027.8" y="702.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="1025.4" y="675.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1028.4" y="686.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="1025.4" y="659.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1028.4" y="670.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="1025.4" y="643.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1028.4" y="654.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="1025.8" y="707.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1028.8" y="718.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="1025.8" y="691.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1028.8" y="702.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="1025.8" y="675.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1028.8" y="686.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned int) (14 samples, 0.37%)</title><rect x="1026.1" y="707.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1029.1" y="718.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="1030.2" y="691.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1033.2" y="702.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="1030.2" y="675.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1033.2" y="686.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="1030.2" y="659.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1033.2" y="670.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned int) (2 samples, 0.05%)</title><rect x="1030.5" y="723.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1033.5" y="734.0"></text>
</g>
<g>
<title>jni_NewByteArray (2 samples, 0.05%)</title><rect x="1031.1" y="739.0" width="0.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1034.1" y="750.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (2 samples, 0.05%)</title><rect x="1031.8" y="739.0" width="0.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1034.8" y="750.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="1032.4" y="739.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1035.4" y="750.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="1032.4" y="723.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1035.4" y="734.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="1032.4" y="707.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1035.4" y="718.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="1032.4" y="691.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1035.4" y="702.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.03%)</title><rect x="1032.4" y="675.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1035.4" y="686.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="1032.4" y="659.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1035.4" y="670.0"></text>
</g>
<g>
<title>org/rocksdb/util/BytewiseComparator.compare (5 samples, 0.13%)</title><rect x="1032.7" y="787.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1035.7" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 0.13%)</title><rect x="1032.7" y="771.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1035.7" y="782.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.05%)</title><rect x="1032.7" y="755.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1035.7" y="766.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.05%)</title><rect x="1032.7" y="739.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1035.7" y="750.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (2 samples, 0.05%)</title><rect x="1032.7" y="723.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1035.7" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (3 samples, 0.08%)</title><rect x="1033.3" y="755.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1036.3" y="766.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (2 samples, 0.05%)</title><rect x="1033.7" y="739.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1036.7" y="750.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="1034.3" y="803.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1037.3" y="814.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="1034.3" y="787.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1037.3" y="798.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="1034.3" y="771.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1037.3" y="782.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (3 samples, 0.08%)</title><rect x="1034.6" y="819.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1037.6" y="830.0"></text>
</g>
<g>
<title>std::string::append(char const*, unsigned int) (1 samples, 0.03%)</title><rect x="1035.6" y="819.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1038.6" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.getArrayCopySync (2 samples, 0.05%)</title><rect x="1035.9" y="851.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1038.9" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (3 samples, 0.08%)</title><rect x="1036.5" y="995.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1039.5" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.03%)</title><rect x="1036.5" y="979.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1039.5" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="1036.5" y="963.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1039.5" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.03%)</title><rect x="1036.5" y="947.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1039.5" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="1036.5" y="931.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1039.5" y="942.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.03%)</title><rect x="1036.5" y="915.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1039.5" y="926.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (2 samples, 0.05%)</title><rect x="1036.8" y="979.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1039.8" y="990.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (2 samples, 0.05%)</title><rect x="1036.8" y="963.0" width="0.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1039.8" y="974.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (479 samples, 12.82%)</title><rect x="1037.4" y="995.0" width="151.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1040.4" y="1006.0">one/nio/server/Sele..</text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (2 samples, 0.05%)</title><rect x="1039.0" y="979.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1042.0" y="990.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (2 samples, 0.05%)</title><rect x="1039.0" y="963.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1042.0" y="974.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (184 samples, 4.93%)</title><rect x="1039.7" y="979.0" width="58.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1042.7" y="990.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (22 samples, 0.59%)</title><rect x="1042.5" y="963.0" width="6.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1045.5" y="974.0"></text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (1 samples, 0.03%)</title><rect x="1043.1" y="947.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1046.1" y="958.0"></text>
</g>
<g>
<title>__clock_gettime (15 samples, 0.40%)</title><rect x="1043.4" y="947.0" width="4.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1046.4" y="958.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.08%)</title><rect x="1043.8" y="931.0" width="0.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1046.8" y="942.0"></text>
</g>
<g>
<title>__kernel_vsyscall (3 samples, 0.08%)</title><rect x="1043.8" y="915.0" width="0.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1046.8" y="926.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (3 samples, 0.08%)</title><rect x="1043.8" y="899.0" width="0.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1046.8" y="910.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (3 samples, 0.08%)</title><rect x="1043.8" y="883.0" width="0.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1046.8" y="894.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.03%)</title><rect x="1044.7" y="931.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1047.7" y="942.0"></text>
</g>
<g>
<title>__kernel_vsyscall (8 samples, 0.21%)</title><rect x="1045.0" y="931.0" width="2.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1048.0" y="942.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (7 samples, 0.19%)</title><rect x="1045.3" y="915.0" width="2.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1048.3" y="926.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (6 samples, 0.16%)</title><rect x="1045.3" y="899.0" width="1.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1048.3" y="910.0"></text>
</g>
<g>
<title>clockid_to_kclock.part.3 (1 samples, 0.03%)</title><rect x="1045.3" y="883.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1048.3" y="894.0"></text>
</g>
<g>
<title>posix_ktime_get_ts (1 samples, 0.03%)</title><rect x="1045.7" y="883.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1048.7" y="894.0"></text>
</g>
<g>
<title>put_timespec64 (1 samples, 0.03%)</title><rect x="1046.0" y="883.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1049.0" y="894.0"></text>
</g>
<g>
<title>sys_clock_gettime (3 samples, 0.08%)</title><rect x="1046.3" y="883.0" width="0.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1049.3" y="894.0"></text>
</g>
<g>
<title>_copy_to_user (1 samples, 0.03%)</title><rect x="1046.3" y="867.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1049.3" y="878.0"></text>
</g>
<g>
<title>posix_ktime_get_ts (2 samples, 0.05%)</title><rect x="1046.6" y="867.0" width="0.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1049.6" y="878.0"></text>
</g>
<g>
<title>ktime_get_ts64 (2 samples, 0.05%)</title><rect x="1046.6" y="851.0" width="0.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1049.6" y="862.0"></text>
</g>
<g>
<title>kvm_clock_get_cycles (1 samples, 0.03%)</title><rect x="1046.9" y="835.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1049.9" y="846.0"></text>
</g>
<g>
<title>pvclock_clocksource_read (1 samples, 0.03%)</title><rect x="1046.9" y="819.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1049.9" y="830.0"></text>
</g>
<g>
<title>sys_clock_gettime (1 samples, 0.03%)</title><rect x="1047.2" y="899.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1050.2" y="910.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (2 samples, 0.05%)</title><rect x="1047.6" y="931.0" width="0.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1050.6" y="942.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (2 samples, 0.05%)</title><rect x="1048.2" y="947.0" width="0.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1051.2" y="958.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.05%)</title><rect x="1048.8" y="947.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1051.8" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (153 samples, 4.10%)</title><rect x="1049.4" y="963.0" width="48.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1052.4" y="974.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (153 samples, 4.10%)</title><rect x="1049.4" y="947.0" width="48.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1052.4" y="958.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (147 samples, 3.93%)</title><rect x="1051.0" y="931.0" width="46.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1054.0" y="942.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/EPoll.wait (124 samples, 3.32%)</title><rect x="1051.3" y="915.0" width="39.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1054.3" y="926.0">sun..</text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (2 samples, 0.05%)</title><rect x="1052.3" y="899.0" width="0.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1055.3" y="910.0"></text>
</g>
<g>
<title>__kernel_vsyscall (117 samples, 3.13%)</title><rect x="1052.9" y="899.0" width="37.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1055.9" y="910.0">__k..</text>
</g>
<g>
<title>entry_SYSENTER_32 (113 samples, 3.02%)</title><rect x="1054.2" y="883.0" width="35.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1057.2" y="894.0">ent..</text>
</g>
<g>
<title>do_fast_syscall_32 (113 samples, 3.02%)</title><rect x="1054.2" y="867.0" width="35.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1057.2" y="878.0">do_..</text>
</g>
<g>
<title>sys_epoll_wait (112 samples, 3.00%)</title><rect x="1054.5" y="851.0" width="35.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1057.5" y="862.0">sys..</text>
</g>
<g>
<title>__fdget (2 samples, 0.05%)</title><rect x="1055.4" y="835.0" width="0.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1058.4" y="846.0"></text>
</g>
<g>
<title>__fget_light (2 samples, 0.05%)</title><rect x="1055.4" y="819.0" width="0.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1058.4" y="830.0"></text>
</g>
<g>
<title>__fget (2 samples, 0.05%)</title><rect x="1055.4" y="803.0" width="0.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1058.4" y="814.0"></text>
</g>
<g>
<title>_raw_spin_lock_irqsave (1 samples, 0.03%)</title><rect x="1056.1" y="835.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1059.1" y="846.0"></text>
</g>
<g>
<title>ep_poll (106 samples, 2.84%)</title><rect x="1056.4" y="835.0" width="33.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1059.4" y="846.0">ep..</text>
</g>
<g>
<title>__lock_text_start (2 samples, 0.05%)</title><rect x="1056.4" y="819.0" width="0.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1059.4" y="830.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.16 (9 samples, 0.24%)</title><rect x="1057.0" y="819.0" width="2.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1060.0" y="830.0"></text>
</g>
<g>
<title>__lock_text_start (3 samples, 0.08%)</title><rect x="1057.0" y="803.0" width="1.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1060.0" y="814.0"></text>
</g>
<g>
<title>ep_send_events_proc (6 samples, 0.16%)</title><rect x="1058.0" y="803.0" width="1.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1061.0" y="814.0"></text>
</g>
<g>
<title>ep_item_poll.isra.12 (4 samples, 0.11%)</title><rect x="1058.6" y="787.0" width="1.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1061.6" y="798.0"></text>
</g>
<g>
<title>sock_poll (4 samples, 0.11%)</title><rect x="1058.6" y="771.0" width="1.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1061.6" y="782.0"></text>
</g>
<g>
<title>tcp_poll (3 samples, 0.08%)</title><rect x="1058.6" y="755.0" width="1.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1061.6" y="766.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.03%)</title><rect x="1059.2" y="739.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1062.2" y="750.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="1059.2" y="723.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1062.2" y="734.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.03%)</title><rect x="1059.2" y="707.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1062.2" y="718.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.03%)</title><rect x="1059.2" y="691.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1062.2" y="702.0"></text>
</g>
<g>
<title>call_on_stack (1 samples, 0.03%)</title><rect x="1059.2" y="675.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1062.2" y="686.0"></text>
</g>
<g>
<title>__do_softirq (1 samples, 0.03%)</title><rect x="1059.2" y="659.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1062.2" y="670.0"></text>
</g>
<g>
<title>run_rebalance_domains (1 samples, 0.03%)</title><rect x="1059.2" y="643.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1062.2" y="654.0"></text>
</g>
<g>
<title>rebalance_domains (1 samples, 0.03%)</title><rect x="1059.2" y="627.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1062.2" y="638.0"></text>
</g>
<g>
<title>update_blocked_averages (1 samples, 0.03%)</title><rect x="1059.2" y="611.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1062.2" y="622.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="1059.2" y="595.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1062.2" y="606.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (1 samples, 0.03%)</title><rect x="1059.6" y="755.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1062.6" y="766.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (94 samples, 2.52%)</title><rect x="1059.9" y="819.0" width="29.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1062.9" y="830.0">sc..</text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (94 samples, 2.52%)</title><rect x="1059.9" y="803.0" width="29.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1062.9" y="814.0">sc..</text>
</g>
<g>
<title>schedule (93 samples, 2.49%)</title><rect x="1060.2" y="787.0" width="29.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1063.2" y="798.0">sc..</text>
</g>
<g>
<title>__sched_text_start (93 samples, 2.49%)</title><rect x="1060.2" y="771.0" width="29.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1063.2" y="782.0">__..</text>
</g>
<g>
<title>finish_task_switch (92 samples, 2.46%)</title><rect x="1060.5" y="755.0" width="29.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1063.5" y="766.0">fi..</text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (1 samples, 0.03%)</title><rect x="1089.6" y="819.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1092.6" y="830.0"></text>
</g>
<g>
<title>epoll_wait (2 samples, 0.05%)</title><rect x="1089.9" y="899.0" width="0.6" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1092.9" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.processEvents (5 samples, 0.13%)</title><rect x="1090.5" y="915.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1093.5" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.05%)</title><rect x="1090.5" y="899.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1093.5" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.03%)</title><rect x="1090.5" y="883.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1093.5" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.03%)</title><rect x="1090.8" y="883.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1093.8" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/EPoll.getEvents (1 samples, 0.03%)</title><rect x="1091.1" y="899.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1094.1" y="910.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getInt (1 samples, 0.03%)</title><rect x="1091.1" y="883.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1094.1" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (2 samples, 0.05%)</title><rect x="1091.5" y="899.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1094.5" y="910.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.03%)</title><rect x="1091.5" y="883.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1094.5" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.03%)</title><rect x="1091.5" y="867.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1094.5" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.03%)</title><rect x="1091.5" y="851.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1094.5" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.03%)</title><rect x="1091.5" y="835.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1094.5" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.translateAndSetReadyOps (1 samples, 0.03%)</title><rect x="1091.8" y="883.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1094.8" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.processUpdateQueue (2 samples, 0.05%)</title><rect x="1092.1" y="915.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1095.1" y="926.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (1 samples, 0.03%)</title><rect x="1092.4" y="899.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1095.4" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (6 samples, 0.16%)</title><rect x="1092.7" y="915.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1095.7" y="926.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (6 samples, 0.16%)</title><rect x="1092.7" y="899.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1095.7" y="910.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (5 samples, 0.13%)</title><rect x="1092.7" y="883.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1095.7" y="894.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.03%)</title><rect x="1094.3" y="883.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1097.3" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.end (2 samples, 0.05%)</title><rect x="1094.6" y="915.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1097.6" y="926.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (2 samples, 0.05%)</title><rect x="1094.6" y="899.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1097.6" y="910.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (2 samples, 0.05%)</title><rect x="1094.6" y="883.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1097.6" y="894.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.03%)</title><rect x="1094.9" y="867.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1097.9" y="878.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.03%)</title><rect x="1094.9" y="851.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1097.9" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (7 samples, 0.19%)</title><rect x="1095.2" y="915.0" width="2.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1098.2" y="926.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.ensureOpen (1 samples, 0.03%)</title><rect x="1097.5" y="931.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1100.5" y="942.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.isOpen (1 samples, 0.03%)</title><rect x="1097.5" y="915.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1100.5" y="926.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (288 samples, 7.71%)</title><rect x="1097.8" y="979.0" width="90.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1100.8" y="990.0">one/nio/ne..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (286 samples, 7.66%)</title><rect x="1098.4" y="963.0" width="90.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1101.4" y="974.0">one/nio/ht..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (179 samples, 4.79%)</title><rect x="1099.4" y="947.0" width="56.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1102.4" y="958.0">one/ni..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (129 samples, 3.45%)</title><rect x="1106.9" y="931.0" width="40.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1109.9" y="942.0">one..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (128 samples, 3.43%)</title><rect x="1107.2" y="915.0" width="40.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1110.2" y="926.0">one..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (109 samples, 2.92%)</title><rect x="1107.2" y="899.0" width="34.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1110.2" y="910.0">Re..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (7 samples, 0.19%)</title><rect x="1107.2" y="883.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1110.2" y="894.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (3 samples, 0.08%)</title><rect x="1108.5" y="867.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1111.5" y="878.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.03%)</title><rect x="1109.1" y="851.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1112.1" y="862.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.03%)</title><rect x="1109.1" y="835.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1112.1" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ServiceImpl.entity (102 samples, 2.73%)</title><rect x="1109.5" y="883.0" width="32.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1112.5" y="894.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ServiceImpl.executeAsync (102 samples, 2.73%)</title><rect x="1109.5" y="867.0" width="32.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1112.5" y="878.0">ru..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (102 samples, 2.73%)</title><rect x="1109.5" y="851.0" width="32.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1112.5" y="862.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (99 samples, 2.65%)</title><rect x="1110.4" y="835.0" width="31.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1113.4" y="846.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (95 samples, 2.54%)</title><rect x="1110.4" y="819.0" width="30.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1113.4" y="830.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (6 samples, 0.16%)</title><rect x="1110.4" y="803.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1113.4" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (6 samples, 0.16%)</title><rect x="1110.4" y="787.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1113.4" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (6 samples, 0.16%)</title><rect x="1110.4" y="771.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1113.4" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (89 samples, 2.38%)</title><rect x="1112.3" y="803.0" width="28.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1115.3" y="814.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (89 samples, 2.38%)</title><rect x="1112.3" y="787.0" width="28.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1115.3" y="798.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (89 samples, 2.38%)</title><rect x="1112.3" y="771.0" width="28.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1115.3" y="782.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (89 samples, 2.38%)</title><rect x="1112.3" y="755.0" width="28.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1115.3" y="766.0">ja..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (89 samples, 2.38%)</title><rect x="1112.3" y="739.0" width="28.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1115.3" y="750.0">jd..</text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.05%)</title><rect x="1112.3" y="723.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1115.3" y="734.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.03%)</title><rect x="1112.9" y="723.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1115.9" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.201] (1 samples, 0.03%)</title><rect x="1113.2" y="723.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1116.2" y="734.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.03%)</title><rect x="1113.6" y="723.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1116.6" y="734.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.03%)</title><rect x="1113.9" y="723.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1116.9" y="734.0"></text>
</g>
<g>
<title>Unsafe_Unpark (12 samples, 0.32%)</title><rect x="1114.2" y="723.0" width="3.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1117.2" y="734.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (2 samples, 0.05%)</title><rect x="1115.1" y="707.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1118.1" y="718.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.03%)</title><rect x="1115.8" y="707.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1118.8" y="718.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.03%)</title><rect x="1115.8" y="691.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1118.8" y="702.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_lock (1 samples, 0.03%)</title><rect x="1116.1" y="707.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1119.1" y="718.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.03%)</title><rect x="1116.4" y="707.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1119.4" y="718.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.03%)</title><rect x="1116.7" y="707.0" width="0.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1119.7" y="718.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.03%)</title><rect x="1117.0" y="707.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1120.0" y="718.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.03%)</title><rect x="1117.4" y="707.0" width="0.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1120.4" y="718.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.03%)</title><rect x="1117.7" y="707.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1120.7" y="718.0"></text>
</g>
<g>
<title>[unknown] (68 samples, 1.82%)</title><rect x="1118.0" y="723.0" width="21.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1121.0" y="734.0">[..</text>
</g>
<g>
<title>[unknown] (3 samples, 0.08%)</title><rect x="1118.0" y="707.0" width="0.9" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1121.0" y="718.0"></text>
</g>
<g>
<title>__kernel_vsyscall (3 samples, 0.08%)</title><rect x="1118.0" y="691.0" width="0.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1121.0" y="702.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (3 samples, 0.08%)</title><rect x="1118.0" y="675.0" width="0.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1121.0" y="686.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (3 samples, 0.08%)</title><rect x="1118.0" y="659.0" width="0.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1121.0" y="670.0"></text>
</g>
<g>
<title>__kernel_vsyscall (64 samples, 1.71%)</title><rect x="1118.9" y="707.0" width="20.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1121.9" y="718.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (64 samples, 1.71%)</title><rect x="1118.9" y="691.0" width="20.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1121.9" y="702.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (64 samples, 1.71%)</title><rect x="1118.9" y="675.0" width="20.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1121.9" y="686.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="1118.9" y="659.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1121.9" y="670.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="1118.9" y="643.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1121.9" y="654.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.03%)</title><rect x="1118.9" y="627.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1121.9" y="638.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="1118.9" y="611.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1121.9" y="622.0"></text>
</g>
<g>
<title>sys_futex (63 samples, 1.69%)</title><rect x="1119.3" y="659.0" width="19.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1122.3" y="670.0"></text>
</g>
<g>
<title>do_futex (62 samples, 1.66%)</title><rect x="1119.6" y="643.0" width="19.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1122.6" y="654.0"></text>
</g>
<g>
<title>futex_wake (61 samples, 1.63%)</title><rect x="1119.9" y="627.0" width="19.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1122.9" y="638.0"></text>
</g>
<g>
<title>_raw_spin_lock (1 samples, 0.03%)</title><rect x="1120.2" y="611.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1123.2" y="622.0"></text>
</g>
<g>
<title>get_futex_key (1 samples, 0.03%)</title><rect x="1120.5" y="611.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1123.5" y="622.0"></text>
</g>
<g>
<title>hash_futex (2 samples, 0.05%)</title><rect x="1120.8" y="611.0" width="0.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1123.8" y="622.0"></text>
</g>
<g>
<title>mark_wake_futex (1 samples, 0.03%)</title><rect x="1121.5" y="611.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1124.5" y="622.0"></text>
</g>
<g>
<title>wake_up_q (55 samples, 1.47%)</title><rect x="1121.8" y="611.0" width="17.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1124.8" y="622.0"></text>
</g>
<g>
<title>try_to_wake_up (54 samples, 1.45%)</title><rect x="1122.1" y="595.0" width="17.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1125.1" y="606.0"></text>
</g>
<g>
<title>__lock_text_start (54 samples, 1.45%)</title><rect x="1122.1" y="579.0" width="17.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1125.1" y="590.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.03%)</title><rect x="1139.1" y="707.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1142.1" y="718.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.ax (2 samples, 0.05%)</title><rect x="1139.5" y="723.0" width="0.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1142.5" y="734.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.03%)</title><rect x="1140.1" y="723.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1143.1" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (4 samples, 0.11%)</title><rect x="1140.4" y="819.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1143.4" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (4 samples, 0.11%)</title><rect x="1140.4" y="803.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1143.4" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (4 samples, 0.11%)</title><rect x="1140.4" y="787.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1143.4" y="798.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (19 samples, 0.51%)</title><rect x="1141.7" y="899.0" width="6.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1144.7" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.get (19 samples, 0.51%)</title><rect x="1141.7" y="883.0" width="6.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1144.7" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (19 samples, 0.51%)</title><rect x="1141.7" y="867.0" width="6.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1144.7" y="878.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (2 samples, 0.05%)</title><rect x="1147.7" y="931.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1150.7" y="942.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (2 samples, 0.05%)</title><rect x="1147.7" y="915.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1150.7" y="926.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.03%)</title><rect x="1148.0" y="899.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1151.0" y="910.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.03%)</title><rect x="1148.0" y="883.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1151.0" y="894.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (7 samples, 0.19%)</title><rect x="1148.3" y="931.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1151.3" y="942.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (7 samples, 0.19%)</title><rect x="1148.3" y="915.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1151.3" y="926.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (7 samples, 0.19%)</title><rect x="1148.3" y="899.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1151.3" y="910.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (17 samples, 0.46%)</title><rect x="1150.5" y="931.0" width="5.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1153.5" y="942.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (17 samples, 0.46%)</title><rect x="1150.5" y="915.0" width="5.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1153.5" y="926.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (104 samples, 2.78%)</title><rect x="1155.9" y="947.0" width="32.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1158.9" y="958.0">on..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (104 samples, 2.78%)</title><rect x="1155.9" y="931.0" width="32.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1158.9" y="942.0">on..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (104 samples, 2.78%)</title><rect x="1155.9" y="915.0" width="32.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1158.9" y="926.0">su..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (11 samples, 0.29%)</title><rect x="1155.9" y="899.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1158.9" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (11 samples, 0.29%)</title><rect x="1155.9" y="883.0" width="3.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1158.9" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (11 samples, 0.29%)</title><rect x="1155.9" y="867.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1158.9" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (11 samples, 0.29%)</title><rect x="1155.9" y="851.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1158.9" y="862.0"></text>
</g>
<g>
<title>__vdso_gettimeofday (3 samples, 0.08%)</title><rect x="1155.9" y="835.0" width="0.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1158.9" y="846.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (8 samples, 0.21%)</title><rect x="1156.8" y="835.0" width="2.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.8" y="846.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="1157.2" y="819.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1160.2" y="830.0"></text>
</g>
<g>
<title>__kernel_vsyscall (2 samples, 0.05%)</title><rect x="1157.2" y="803.0" width="0.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1160.2" y="814.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (2 samples, 0.05%)</title><rect x="1157.2" y="787.0" width="0.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1160.2" y="798.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (2 samples, 0.05%)</title><rect x="1157.2" y="771.0" width="0.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1160.2" y="782.0"></text>
</g>
<g>
<title>__kernel_vsyscall (5 samples, 0.13%)</title><rect x="1157.8" y="819.0" width="1.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1160.8" y="830.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (4 samples, 0.11%)</title><rect x="1158.1" y="803.0" width="1.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1161.1" y="814.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (4 samples, 0.11%)</title><rect x="1158.1" y="787.0" width="1.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1161.1" y="798.0"></text>
</g>
<g>
<title>sys_gettimeofday (4 samples, 0.11%)</title><rect x="1158.1" y="771.0" width="1.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1161.1" y="782.0"></text>
</g>
<g>
<title>do_gettimeofday (4 samples, 0.11%)</title><rect x="1158.1" y="755.0" width="1.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1161.1" y="766.0"></text>
</g>
<g>
<title>__getnstimeofday64 (3 samples, 0.08%)</title><rect x="1158.4" y="739.0" width="1.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1161.4" y="750.0"></text>
</g>
<g>
<title>kvm_clock_get_cycles (2 samples, 0.05%)</title><rect x="1158.7" y="723.0" width="0.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1161.7" y="734.0"></text>
</g>
<g>
<title>pvclock_clocksource_read (2 samples, 0.05%)</title><rect x="1158.7" y="707.0" width="0.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1161.7" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (93 samples, 2.49%)</title><rect x="1159.4" y="899.0" width="29.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1162.4" y="910.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (93 samples, 2.49%)</title><rect x="1159.4" y="883.0" width="29.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1162.4" y="894.0">su..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (3 samples, 0.08%)</title><rect x="1159.4" y="867.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1162.4" y="878.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (3 samples, 0.08%)</title><rect x="1159.4" y="851.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1162.4" y="862.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (3 samples, 0.08%)</title><rect x="1159.4" y="835.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1162.4" y="846.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (3 samples, 0.08%)</title><rect x="1159.4" y="819.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1162.4" y="830.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (3 samples, 0.08%)</title><rect x="1159.4" y="803.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1162.4" y="814.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (3 samples, 0.08%)</title><rect x="1159.4" y="787.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1162.4" y="798.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.03%)</title><rect x="1159.7" y="771.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1162.7" y="782.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="1159.7" y="755.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1162.7" y="766.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.03%)</title><rect x="1159.7" y="739.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1162.7" y="750.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.03%)</title><rect x="1159.7" y="723.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1162.7" y="734.0"></text>
</g>
<g>
<title>call_on_stack (1 samples, 0.03%)</title><rect x="1159.7" y="707.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1162.7" y="718.0"></text>
</g>
<g>
<title>__do_softirq (1 samples, 0.03%)</title><rect x="1159.7" y="691.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1162.7" y="702.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (1 samples, 0.03%)</title><rect x="1160.0" y="771.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1163.0" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (75 samples, 2.01%)</title><rect x="1160.3" y="867.0" width="23.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1163.3" y="878.0">s..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.03%)</title><rect x="1160.3" y="851.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1163.3" y="862.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.03%)</title><rect x="1160.3" y="835.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1163.3" y="846.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="1160.3" y="819.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1163.3" y="830.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.03%)</title><rect x="1160.3" y="803.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1163.3" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (74 samples, 1.98%)</title><rect x="1160.6" y="851.0" width="23.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1163.6" y="862.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (71 samples, 1.90%)</title><rect x="1161.6" y="835.0" width="22.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1164.6" y="846.0">s..</text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (1 samples, 0.03%)</title><rect x="1161.9" y="819.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1164.9" y="830.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (2 samples, 0.05%)</title><rect x="1162.2" y="819.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1165.2" y="830.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.03%)</title><rect x="1162.5" y="803.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1165.5" y="814.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1162.8" y="819.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1165.8" y="830.0"></text>
</g>
<g>
<title>__kernel_vsyscall (1 samples, 0.03%)</title><rect x="1162.8" y="803.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1165.8" y="814.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (1 samples, 0.03%)</title><rect x="1162.8" y="787.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1165.8" y="798.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (1 samples, 0.03%)</title><rect x="1162.8" y="771.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1165.8" y="782.0"></text>
</g>
<g>
<title>__kernel_vsyscall (62 samples, 1.66%)</title><rect x="1163.2" y="819.0" width="19.5" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1166.2" y="830.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (61 samples, 1.63%)</title><rect x="1163.5" y="803.0" width="19.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1166.5" y="814.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (60 samples, 1.61%)</title><rect x="1163.5" y="787.0" width="18.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1166.5" y="798.0"></text>
</g>
<g>
<title>fput (2 samples, 0.05%)</title><rect x="1163.5" y="771.0" width="0.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1166.5" y="782.0"></text>
</g>
<g>
<title>sys_read (58 samples, 1.55%)</title><rect x="1164.1" y="771.0" width="18.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1167.1" y="782.0"></text>
</g>
<g>
<title>__fdget_pos (2 samples, 0.05%)</title><rect x="1164.7" y="755.0" width="0.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1167.7" y="766.0"></text>
</g>
<g>
<title>__fget_light (2 samples, 0.05%)</title><rect x="1164.7" y="739.0" width="0.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1167.7" y="750.0"></text>
</g>
<g>
<title>__fget (1 samples, 0.03%)</title><rect x="1165.0" y="723.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1168.0" y="734.0"></text>
</g>
<g>
<title>__vfs_read (1 samples, 0.03%)</title><rect x="1165.4" y="755.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1168.4" y="766.0"></text>
</g>
<g>
<title>rw_verify_area (1 samples, 0.03%)</title><rect x="1165.7" y="755.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1168.7" y="766.0"></text>
</g>
<g>
<title>vfs_read (52 samples, 1.39%)</title><rect x="1166.0" y="755.0" width="16.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1169.0" y="766.0"></text>
</g>
<g>
<title>__vfs_read (47 samples, 1.26%)</title><rect x="1166.0" y="739.0" width="14.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1169.0" y="750.0"></text>
</g>
<g>
<title>new_sync_read (46 samples, 1.23%)</title><rect x="1166.0" y="723.0" width="14.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1169.0" y="734.0"></text>
</g>
<g>
<title>sock_read_iter (41 samples, 1.10%)</title><rect x="1167.6" y="707.0" width="12.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1170.6" y="718.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_edi (1 samples, 0.03%)</title><rect x="1167.9" y="691.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1170.9" y="702.0"></text>
</g>
<g>
<title>inet_recvmsg (2 samples, 0.05%)</title><rect x="1168.2" y="691.0" width="0.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1171.2" y="702.0"></text>
</g>
<g>
<title>sock_recvmsg (37 samples, 0.99%)</title><rect x="1168.8" y="691.0" width="11.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1171.8" y="702.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (1 samples, 0.03%)</title><rect x="1168.8" y="675.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1171.8" y="686.0"></text>
</g>
<g>
<title>inet_recvmsg (33 samples, 0.88%)</title><rect x="1169.2" y="675.0" width="10.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1172.2" y="686.0"></text>
</g>
<g>
<title>lock_sock_nested (1 samples, 0.03%)</title><rect x="1169.2" y="659.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1172.2" y="670.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (1 samples, 0.03%)</title><rect x="1169.5" y="659.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1172.5" y="670.0"></text>
</g>
<g>
<title>tcp_recvmsg (31 samples, 0.83%)</title><rect x="1169.8" y="659.0" width="9.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1172.8" y="670.0"></text>
</g>
<g>
<title>__kfree_skb (5 samples, 0.13%)</title><rect x="1172.9" y="643.0" width="1.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1175.9" y="654.0"></text>
</g>
<g>
<title>skb_release_all (2 samples, 0.05%)</title><rect x="1172.9" y="627.0" width="0.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1175.9" y="638.0"></text>
</g>
<g>
<title>sock_rfree (2 samples, 0.05%)</title><rect x="1172.9" y="611.0" width="0.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1175.9" y="622.0"></text>
</g>
<g>
<title>skb_release_data (2 samples, 0.05%)</title><rect x="1173.6" y="627.0" width="0.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1176.6" y="638.0"></text>
</g>
<g>
<title>skb_release_head_state (1 samples, 0.03%)</title><rect x="1174.2" y="627.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1177.2" y="638.0"></text>
</g>
<g>
<title>__tcp_select_window (1 samples, 0.03%)</title><rect x="1174.5" y="643.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1177.5" y="654.0"></text>
</g>
<g>
<title>_copy_to_iter (2 samples, 0.05%)</title><rect x="1174.8" y="643.0" width="0.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1177.8" y="654.0"></text>
</g>
<g>
<title>kfree_skbmem (1 samples, 0.03%)</title><rect x="1175.5" y="643.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1178.5" y="654.0"></text>
</g>
<g>
<title>lock_sock_nested (2 samples, 0.05%)</title><rect x="1175.8" y="643.0" width="0.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1178.8" y="654.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (2 samples, 0.05%)</title><rect x="1175.8" y="627.0" width="0.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1178.8" y="638.0"></text>
</g>
<g>
<title>__pv_queued_spin_lock_slowpath (2 samples, 0.05%)</title><rect x="1175.8" y="611.0" width="0.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1178.8" y="622.0"></text>
</g>
<g>
<title>release_sock (1 samples, 0.03%)</title><rect x="1176.4" y="643.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1179.4" y="654.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.03%)</title><rect x="1176.4" y="627.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1179.4" y="638.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (7 samples, 0.19%)</title><rect x="1176.7" y="643.0" width="2.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1179.7" y="654.0"></text>
</g>
<g>
<title>__check_object_size (3 samples, 0.08%)</title><rect x="1176.7" y="627.0" width="1.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1179.7" y="638.0"></text>
</g>
<g>
<title>__check_heap_object (1 samples, 0.03%)</title><rect x="1177.1" y="611.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1180.1" y="622.0"></text>
</g>
<g>
<title>page_address (1 samples, 0.03%)</title><rect x="1177.1" y="595.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1180.1" y="606.0"></text>
</g>
<g>
<title>__virt_addr_valid (1 samples, 0.03%)</title><rect x="1177.4" y="611.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1180.4" y="622.0"></text>
</g>
<g>
<title>__virt_addr_valid (1 samples, 0.03%)</title><rect x="1177.7" y="627.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1180.7" y="638.0"></text>
</g>
<g>
<title>_copy_to_iter (3 samples, 0.08%)</title><rect x="1178.0" y="627.0" width="0.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1181.0" y="638.0"></text>
</g>
<g>
<title>copyout (2 samples, 0.05%)</title><rect x="1178.3" y="611.0" width="0.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1181.3" y="622.0"></text>
</g>
<g>
<title>__copy_user_ll (2 samples, 0.05%)</title><rect x="1178.3" y="595.0" width="0.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1181.3" y="606.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (1 samples, 0.03%)</title><rect x="1178.9" y="643.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1181.9" y="654.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (1 samples, 0.03%)</title><rect x="1179.3" y="643.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1182.3" y="654.0"></text>
</g>
<g>
<title>security_socket_recvmsg (3 samples, 0.08%)</title><rect x="1179.6" y="675.0" width="0.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1182.6" y="686.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (2 samples, 0.05%)</title><rect x="1179.9" y="659.0" width="0.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1182.9" y="670.0"></text>
</g>
<g>
<title>aa_sk_perm (1 samples, 0.03%)</title><rect x="1180.2" y="643.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1183.2" y="654.0"></text>
</g>
<g>
<title>sock_read_iter (1 samples, 0.03%)</title><rect x="1180.5" y="723.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1183.5" y="734.0"></text>
</g>
<g>
<title>rw_verify_area (5 samples, 0.13%)</title><rect x="1180.8" y="739.0" width="1.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1183.8" y="750.0"></text>
</g>
<g>
<title>security_file_permission (3 samples, 0.08%)</title><rect x="1181.5" y="723.0" width="0.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1184.5" y="734.0"></text>
</g>
<g>
<title>apparmor_file_permission (2 samples, 0.05%)</title><rect x="1181.5" y="707.0" width="0.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1184.5" y="718.0"></text>
</g>
<g>
<title>common_file_perm (2 samples, 0.05%)</title><rect x="1181.5" y="691.0" width="0.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1184.5" y="702.0"></text>
</g>
<g>
<title>fsnotify (1 samples, 0.03%)</title><rect x="1182.1" y="707.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1185.1" y="718.0"></text>
</g>
<g>
<title>sys_read (1 samples, 0.03%)</title><rect x="1182.4" y="787.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1185.4" y="798.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.03%)</title><rect x="1182.7" y="819.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1185.7" y="830.0"></text>
</g>
<g>
<title>read (3 samples, 0.08%)</title><rect x="1183.1" y="819.0" width="0.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1186.1" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (15 samples, 0.40%)</title><rect x="1184.0" y="867.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1187.0" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (15 samples, 0.40%)</title><rect x="1184.0" y="851.0" width="4.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1187.0" y="862.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.rewind (15 samples, 0.40%)</title><rect x="1184.0" y="835.0" width="4.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1187.0" y="846.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.rewind (15 samples, 0.40%)</title><rect x="1184.0" y="819.0" width="4.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1187.0" y="830.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="1188.4" y="803.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1191.4" y="814.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="1188.4" y="787.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1191.4" y="798.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="1188.4" y="771.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1191.4" y="782.0"></text>
</g>
<g>
<title>org/rocksdb/util/BytewiseComparator.compare (3 samples, 0.08%)</title><rect x="1188.7" y="995.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1191.7" y="1006.0"></text>
</g>
<g>
<title>org/rocksdb/util/BytewiseComparator.compare (3 samples, 0.08%)</title><rect x="1188.7" y="979.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1191.7" y="990.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractSlice.data (3 samples, 0.08%)</title><rect x="1188.7" y="963.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1191.7" y="974.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (3 samples, 0.08%)</title><rect x="1188.7" y="947.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1191.7" y="958.0"></text>
</g>
<g>
<title>Thread::current() (3 samples, 0.08%)</title><rect x="1188.7" y="931.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.7" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (1 samples, 0.03%)</title><rect x="1189.7" y="995.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1192.7" y="1006.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="1189.7" y="979.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1192.7" y="990.0"></text>
</g>
</g>
</svg>
