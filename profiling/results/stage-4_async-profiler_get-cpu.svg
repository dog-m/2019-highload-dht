<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1094" onload="init(evt)" viewBox="0 0 1200 1094" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1077"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1077"> </text>
<g id="frames">
<g>
<title>all (2,958 samples, 100.00%)</title><rect x="10.0" y="1043.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1054.0">all</text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="10.0" y="1027.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::klass_holder() const (1 samples, 0.03%)</title><rect x="10.4" y="1027.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.4" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (41 samples, 1.39%)</title><rect x="10.8" y="1027.0" width="16.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.8" y="1038.0"></text>
</g>
<g>
<title>oopFactory::new_objArray(Klass*, int, Thread*) (8 samples, 0.27%)</title><rect x="11.6" y="1011.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="14.6" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (8 samples, 0.27%)</title><rect x="11.6" y="995.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="14.6" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (8 samples, 0.27%)</title><rect x="11.6" y="979.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="14.6" y="990.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (7 samples, 0.24%)</title><rect x="11.6" y="963.0" width="2.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="14.6" y="974.0"></text>
</g>
<g>
<title>GenCollectedHeap::mem_allocate(unsigned int, bool*) (1 samples, 0.03%)</title><rect x="12.0" y="947.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="15.0" y="958.0"></text>
</g>
<g>
<title>DefNewGeneration::should_allocate(unsigned int, bool) (1 samples, 0.03%)</title><rect x="12.0" y="931.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="15.0" y="942.0"></text>
</g>
<g>
<title>JfrAllocationTracer::JfrAllocationTracer(HeapWord*, unsigned int, Thread*) (1 samples, 0.03%)</title><rect x="12.4" y="947.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="15.4" y="958.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.07%)</title><rect x="12.8" y="947.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="15.8" y="958.0"></text>
</g>
<g>
<title>DefNewGeneration::supports_tlab_allocation() const (1 samples, 0.03%)</title><rect x="12.8" y="931.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="15.8" y="942.0"></text>
</g>
<g>
<title>GenCollectedHeap::allocate_new_tlab(unsigned int, unsigned int, unsigned int*) (1 samples, 0.03%)</title><rect x="13.2" y="931.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="16.2" y="942.0"></text>
</g>
<g>
<title>GenCollectedHeap::mem_allocate_work(unsigned int, bool, bool*) (1 samples, 0.03%)</title><rect x="13.2" y="915.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="16.2" y="926.0"></text>
</g>
<g>
<title>DefNewGeneration::should_allocate(unsigned int, bool) (1 samples, 0.03%)</title><rect x="13.2" y="899.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="16.2" y="910.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.03%)</title><rect x="13.6" y="947.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="16.6" y="958.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::myThread() (1 samples, 0.03%)</title><rect x="14.0" y="947.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="17.0" y="958.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="14.4" y="963.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="17.4" y="974.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray(BasicType, int, Thread*) (31 samples, 1.05%)</title><rect x="14.8" y="1011.0" width="12.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="17.8" y="1022.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (31 samples, 1.05%)</title><rect x="14.8" y="995.0" width="12.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="17.8" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (30 samples, 1.01%)</title><rect x="15.2" y="979.0" width="12.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="18.2" y="990.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned int, unsigned int, Thread*) (1 samples, 0.03%)</title><rect x="15.2" y="963.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="18.2" y="974.0"></text>
</g>
<g>
<title>GenCollectedHeap::mem_allocate(unsigned int, bool*) (1 samples, 0.03%)</title><rect x="15.6" y="963.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="18.6" y="974.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (1 samples, 0.03%)</title><rect x="16.0" y="963.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="19.0" y="974.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (27 samples, 0.91%)</title><rect x="16.4" y="963.0" width="10.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="19.4" y="974.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned int, unsigned int, Thread*) (2 samples, 0.07%)</title><rect x="16.4" y="947.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="19.4" y="958.0"></text>
</g>
<g>
<title>LeakProfiler::is_running() (1 samples, 0.03%)</title><rect x="16.8" y="931.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="19.8" y="942.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_outside_tlab(Klass*, HeapWord*, unsigned int, Thread*) (1 samples, 0.03%)</title><rect x="17.2" y="947.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="20.2" y="958.0"></text>
</g>
<g>
<title>LeakProfiler::is_running() (1 samples, 0.03%)</title><rect x="17.2" y="931.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="20.2" y="942.0"></text>
</g>
<g>
<title>GenCollectedHeap::mem_allocate(unsigned int, bool*) (5 samples, 0.17%)</title><rect x="17.6" y="947.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="20.6" y="958.0"></text>
</g>
<g>
<title>DefNewGeneration::par_allocate(unsigned int, bool) (1 samples, 0.03%)</title><rect x="17.6" y="931.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="20.6" y="942.0"></text>
</g>
<g>
<title>DefNewGeneration::should_allocate(unsigned int, bool) (1 samples, 0.03%)</title><rect x="18.0" y="931.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="21.0" y="942.0"></text>
</g>
<g>
<title>GenCollectedHeap::mem_allocate_work(unsigned int, bool, bool*) (2 samples, 0.07%)</title><rect x="18.4" y="931.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="21.4" y="942.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.03%)</title><rect x="19.2" y="931.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="22.2" y="942.0"></text>
</g>
<g>
<title>JfrAllocationTracer::~JfrAllocationTracer() (1 samples, 0.03%)</title><rect x="19.6" y="947.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="22.6" y="958.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (4 samples, 0.14%)</title><rect x="20.0" y="947.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="23.0" y="958.0"></text>
</g>
<g>
<title>DefNewGeneration::unsafe_max_tlab_alloc() const (1 samples, 0.03%)</title><rect x="20.4" y="931.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="23.4" y="942.0"></text>
</g>
<g>
<title>GenCollectedHeap::allocate_new_tlab(unsigned int, unsigned int, unsigned int*) (1 samples, 0.03%)</title><rect x="20.8" y="931.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="23.8" y="942.0"></text>
</g>
<g>
<title>GenCollectedHeap::mem_allocate_work(unsigned int, bool, bool*) (1 samples, 0.03%)</title><rect x="20.8" y="915.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="23.8" y="926.0"></text>
</g>
<g>
<title>DefNewGeneration::par_allocate(unsigned int, bool) (1 samples, 0.03%)</title><rect x="20.8" y="899.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="23.8" y="910.0"></text>
</g>
<g>
<title>ContiguousSpace::par_allocate(unsigned int) (1 samples, 0.03%)</title><rect x="20.8" y="883.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="23.8" y="894.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.03%)</title><rect x="20.8" y="867.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="23.8" y="878.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="20.8" y="851.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="23.8" y="862.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.03%)</title><rect x="20.8" y="835.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="23.8" y="846.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.03%)</title><rect x="20.8" y="819.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="23.8" y="830.0"></text>
</g>
<g>
<title>call_on_stack (1 samples, 0.03%)</title><rect x="20.8" y="803.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="23.8" y="814.0"></text>
</g>
<g>
<title>__do_softirq (1 samples, 0.03%)</title><rect x="20.8" y="787.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="23.8" y="798.0"></text>
</g>
<g>
<title>run_rebalance_domains (1 samples, 0.03%)</title><rect x="20.8" y="771.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="23.8" y="782.0"></text>
</g>
<g>
<title>rebalance_domains (1 samples, 0.03%)</title><rect x="20.8" y="755.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="23.8" y="766.0"></text>
</g>
<g>
<title>update_blocked_averages (1 samples, 0.03%)</title><rect x="20.8" y="739.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="23.8" y="750.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="20.8" y="723.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="23.8" y="734.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.03%)</title><rect x="21.2" y="931.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="24.2" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (1 samples, 0.03%)</title><rect x="21.2" y="915.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="24.2" y="926.0"></text>
</g>
<g>
<title>HandleMark::~HandleMark() (1 samples, 0.03%)</title><rect x="21.2" y="899.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="24.2" y="910.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (10 samples, 0.34%)</title><rect x="21.6" y="947.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="24.6" y="958.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.03%)</title><rect x="24.8" y="931.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="27.8" y="942.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="24.8" y="915.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="27.8" y="926.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.03%)</title><rect x="24.8" y="899.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="27.8" y="910.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.03%)</title><rect x="24.8" y="883.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="27.8" y="894.0"></text>
</g>
<g>
<title>call_on_stack (1 samples, 0.03%)</title><rect x="24.8" y="867.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="27.8" y="878.0"></text>
</g>
<g>
<title>__do_softirq (1 samples, 0.03%)</title><rect x="24.8" y="851.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="27.8" y="862.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="25.2" y="931.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="28.2" y="942.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="25.2" y="915.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="28.2" y="926.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="25.2" y="899.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="28.2" y="910.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (2 samples, 0.07%)</title><rect x="25.6" y="947.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="28.6" y="958.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.03%)</title><rect x="26.4" y="947.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="29.4" y="958.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned int) (1 samples, 0.03%)</title><rect x="26.8" y="947.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="29.8" y="958.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (10 samples, 0.34%)</title><rect x="27.2" y="1027.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="30.2" y="1038.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray_nozero(BasicType, int, Thread*) (10 samples, 0.34%)</title><rect x="27.2" y="1011.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="30.2" y="1022.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (10 samples, 0.34%)</title><rect x="27.2" y="995.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="30.2" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (10 samples, 0.34%)</title><rect x="27.2" y="979.0" width="3.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="30.2" y="990.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (10 samples, 0.34%)</title><rect x="27.2" y="963.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="30.2" y="974.0"></text>
</g>
<g>
<title>DefNewGeneration::unsafe_max_tlab_alloc() const (1 samples, 0.03%)</title><rect x="27.2" y="947.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="30.2" y="958.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="27.2" y="931.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="30.2" y="942.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="27.2" y="915.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="30.2" y="926.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="27.2" y="899.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="30.2" y="910.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (9 samples, 0.30%)</title><rect x="27.6" y="947.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="30.6" y="958.0"></text>
</g>
<g>
<title>DefNewGeneration::supports_tlab_allocation() const (1 samples, 0.03%)</title><rect x="28.4" y="931.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="31.4" y="942.0"></text>
</g>
<g>
<title>DefNewGeneration::unsafe_max_tlab_alloc() const (1 samples, 0.03%)</title><rect x="28.7" y="931.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="31.7" y="942.0"></text>
</g>
<g>
<title>GenCollectedHeap::allocate_new_tlab(unsigned int, unsigned int, unsigned int*) (4 samples, 0.14%)</title><rect x="29.1" y="931.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="32.1" y="942.0"></text>
</g>
<g>
<title>GenCollectedHeap::mem_allocate_work(unsigned int, bool, bool*) (4 samples, 0.14%)</title><rect x="29.1" y="915.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="32.1" y="926.0"></text>
</g>
<g>
<title>ContiguousSpace::par_allocate(unsigned int) (2 samples, 0.07%)</title><rect x="29.1" y="899.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="32.1" y="910.0"></text>
</g>
<g>
<title>DefNewGeneration::par_allocate(unsigned int, bool) (2 samples, 0.07%)</title><rect x="29.9" y="899.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="32.9" y="910.0"></text>
</g>
<g>
<title>ContiguousSpace::par_allocate(unsigned int) (2 samples, 0.07%)</title><rect x="29.9" y="883.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="32.9" y="894.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned int) (1 samples, 0.03%)</title><rect x="30.7" y="931.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="33.7" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (37 samples, 1.25%)</title><rect x="31.1" y="1027.0" width="14.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="34.1" y="1038.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;CardTableBarrierSet::AccessBarrier&lt;1097812ull, CardTableBarrierSet&gt;, (AccessInternal::BarrierType)2, 1097812ull&gt;::oop_access_barrier(void*) (1 samples, 0.03%)</title><rect x="32.3" y="1011.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="35.3" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.03%)</title><rect x="32.7" y="1011.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="35.7" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (30 samples, 1.01%)</title><rect x="33.1" y="1011.0" width="12.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="36.1" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (28 samples, 0.95%)</title><rect x="33.5" y="995.0" width="11.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="36.5" y="1006.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned int, unsigned int, Thread*) (1 samples, 0.03%)</title><rect x="33.5" y="979.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="36.5" y="990.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (25 samples, 0.85%)</title><rect x="33.9" y="979.0" width="10.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="36.9" y="990.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned int, unsigned int, Thread*) (3 samples, 0.10%)</title><rect x="35.1" y="963.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="38.1" y="974.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.ax (1 samples, 0.03%)</title><rect x="35.9" y="947.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="38.9" y="958.0"></text>
</g>
<g>
<title>DefNewGeneration::unsafe_max_tlab_alloc() const (1 samples, 0.03%)</title><rect x="36.3" y="963.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="39.3" y="974.0"></text>
</g>
<g>
<title>GenCollectedHeap::allocate_new_tlab(unsigned int, unsigned int, unsigned int*) (1 samples, 0.03%)</title><rect x="36.7" y="963.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="39.7" y="974.0"></text>
</g>
<g>
<title>JfrAllocationTracer::JfrAllocationTracer(HeapWord*, unsigned int, Thread*) (1 samples, 0.03%)</title><rect x="37.1" y="963.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="40.1" y="974.0"></text>
</g>
<g>
<title>JfrAllocationTracer::~JfrAllocationTracer() (2 samples, 0.07%)</title><rect x="37.5" y="963.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="40.5" y="974.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (9 samples, 0.30%)</title><rect x="38.3" y="963.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="41.3" y="974.0"></text>
</g>
<g>
<title>DefNewGeneration::supports_tlab_allocation() const (2 samples, 0.07%)</title><rect x="38.3" y="947.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="41.3" y="958.0"></text>
</g>
<g>
<title>GenCollectedHeap::allocate_new_tlab(unsigned int, unsigned int, unsigned int*) (3 samples, 0.10%)</title><rect x="39.1" y="947.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="42.1" y="958.0"></text>
</g>
<g>
<title>DefNewGeneration::par_allocate(unsigned int, bool) (1 samples, 0.03%)</title><rect x="39.1" y="931.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="42.1" y="942.0"></text>
</g>
<g>
<title>GenCollectedHeap::mem_allocate_work(unsigned int, bool, bool*) (2 samples, 0.07%)</title><rect x="39.5" y="931.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="42.5" y="942.0"></text>
</g>
<g>
<title>DefNewGeneration::par_allocate(unsigned int, bool) (2 samples, 0.07%)</title><rect x="39.5" y="915.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="42.5" y="926.0"></text>
</g>
<g>
<title>ContiguousSpace::par_allocate(unsigned int) (1 samples, 0.03%)</title><rect x="39.9" y="899.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="42.9" y="910.0"></text>
</g>
<g>
<title>GenCollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.03%)</title><rect x="40.3" y="947.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="43.3" y="958.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (1 samples, 0.03%)</title><rect x="40.7" y="947.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="43.7" y="958.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (2 samples, 0.07%)</title><rect x="41.1" y="947.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="44.1" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (2 samples, 0.07%)</title><rect x="41.1" y="931.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="44.1" y="942.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.03%)</title><rect x="41.5" y="915.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="44.5" y="926.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (3 samples, 0.10%)</title><rect x="41.9" y="963.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="44.9" y="974.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (2 samples, 0.07%)</title><rect x="43.1" y="963.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="46.1" y="974.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (2 samples, 0.07%)</title><rect x="43.9" y="979.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="46.9" y="990.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="44.7" y="995.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="47.7" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::klass_holder() const (1 samples, 0.03%)</title><rect x="45.1" y="1011.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="48.1" y="1022.0"></text>
</g>
<g>
<title>Klass::class_loader() const (1 samples, 0.03%)</title><rect x="45.5" y="1011.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="48.5" y="1022.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (10 samples, 0.34%)</title><rect x="45.9" y="1027.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="48.9" y="1038.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (10 samples, 0.34%)</title><rect x="45.9" y="1011.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="48.9" y="1022.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (3 samples, 0.10%)</title><rect x="45.9" y="995.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="48.9" y="1006.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.63] (2 samples, 0.07%)</title><rect x="46.3" y="979.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="49.3" y="990.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) [clone .part.85] (7 samples, 0.24%)</title><rect x="47.1" y="995.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="50.1" y="1006.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (6 samples, 0.20%)</title><rect x="47.1" y="979.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="50.1" y="990.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.63] (2 samples, 0.07%)</title><rect x="47.5" y="963.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="50.5" y="974.0"></text>
</g>
<g>
<title>common_interrupt (1 samples, 0.03%)</title><rect x="47.9" y="947.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="50.9" y="958.0"></text>
</g>
<g>
<title>do_IRQ (1 samples, 0.03%)</title><rect x="47.9" y="931.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="50.9" y="942.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.03%)</title><rect x="47.9" y="915.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="50.9" y="926.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.03%)</title><rect x="47.9" y="899.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="50.9" y="910.0"></text>
</g>
<g>
<title>call_on_stack (1 samples, 0.03%)</title><rect x="47.9" y="883.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="50.9" y="894.0"></text>
</g>
<g>
<title>__do_softirq (1 samples, 0.03%)</title><rect x="47.9" y="867.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="50.9" y="878.0"></text>
</g>
<g>
<title>__kernel_vsyscall (3 samples, 0.10%)</title><rect x="48.3" y="963.0" width="1.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="51.3" y="974.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (3 samples, 0.10%)</title><rect x="48.3" y="947.0" width="1.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="51.3" y="958.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (3 samples, 0.10%)</title><rect x="48.3" y="931.0" width="1.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="51.3" y="942.0"></text>
</g>
<g>
<title>sys_futex (3 samples, 0.10%)</title><rect x="48.3" y="915.0" width="1.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="51.3" y="926.0"></text>
</g>
<g>
<title>do_futex (3 samples, 0.10%)</title><rect x="48.3" y="899.0" width="1.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="51.3" y="910.0"></text>
</g>
<g>
<title>futex_wait (3 samples, 0.10%)</title><rect x="48.3" y="883.0" width="1.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="51.3" y="894.0"></text>
</g>
<g>
<title>futex_wait_queue_me (3 samples, 0.10%)</title><rect x="48.3" y="867.0" width="1.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="51.3" y="878.0"></text>
</g>
<g>
<title>schedule (3 samples, 0.10%)</title><rect x="48.3" y="851.0" width="1.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="51.3" y="862.0"></text>
</g>
<g>
<title>__sched_text_start (3 samples, 0.10%)</title><rect x="48.3" y="835.0" width="1.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="51.3" y="846.0"></text>
</g>
<g>
<title>finish_task_switch (3 samples, 0.10%)</title><rect x="48.3" y="819.0" width="1.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="51.3" y="830.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.ax (1 samples, 0.03%)</title><rect x="49.5" y="979.0" width="0.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="52.5" y="990.0"></text>
</g>
<g>
<title>[not_walkable] (3 samples, 0.10%)</title><rect x="49.9" y="1027.0" width="1.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="52.9" y="1038.0"></text>
</g>
<g>
<title>[not_walkable_Java] (16 samples, 0.54%)</title><rect x="51.1" y="1027.0" width="6.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="54.1" y="1038.0"></text>
</g>
<g>
<title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (1 samples, 0.03%)</title><rect x="51.1" y="1011.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="54.1" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (3 samples, 0.10%)</title><rect x="51.5" y="1011.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="54.5" y="1022.0"></text>
</g>
<g>
<title>CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*) (2 samples, 0.07%)</title><rect x="51.5" y="995.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="54.5" y="1006.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (1 samples, 0.03%)</title><rect x="52.3" y="995.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="55.3" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (5 samples, 0.17%)</title><rect x="52.7" y="1011.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="55.7" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (5 samples, 0.17%)</title><rect x="52.7" y="995.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="55.7" y="1006.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.03%)</title><rect x="52.7" y="979.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="55.7" y="990.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.03%)</title><rect x="52.7" y="963.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="55.7" y="974.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (4 samples, 0.14%)</title><rect x="53.1" y="979.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="56.1" y="990.0"></text>
</g>
<g>
<title>CompiledMethod::is_compiled() const (1 samples, 0.03%)</title><rect x="53.1" y="963.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="56.1" y="974.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.03%)</title><rect x="53.5" y="963.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="56.5" y="974.0"></text>
</g>
<g>
<title>OopMapStream::find_next() (1 samples, 0.03%)</title><rect x="53.5" y="947.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="56.5" y="958.0"></text>
</g>
<g>
<title>frame::frame(int*, int*, int*, unsigned char*) (1 samples, 0.03%)</title><rect x="53.9" y="963.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="56.9" y="974.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.03%)</title><rect x="53.9" y="947.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="56.9" y="958.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.03%)</title><rect x="53.9" y="931.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="56.9" y="942.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned int, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="54.3" y="963.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="57.3" y="974.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (4 samples, 0.14%)</title><rect x="54.7" y="1011.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="57.7" y="1022.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (3 samples, 0.10%)</title><rect x="55.1" y="995.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="58.1" y="1006.0"></text>
</g>
<g>
<title>CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*) (2 samples, 0.07%)</title><rect x="55.5" y="979.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="58.5" y="990.0"></text>
</g>
<g>
<title>GenCollectedHeap::heap() (1 samples, 0.03%)</title><rect x="55.9" y="963.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="58.9" y="974.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.03%)</title><rect x="55.9" y="947.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="58.9" y="958.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="55.9" y="931.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="58.9" y="942.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.03%)</title><rect x="55.9" y="915.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="58.9" y="926.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.03%)</title><rect x="55.9" y="899.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="58.9" y="910.0"></text>
</g>
<g>
<title>call_on_stack (1 samples, 0.03%)</title><rect x="55.9" y="883.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="58.9" y="894.0"></text>
</g>
<g>
<title>__do_softirq (1 samples, 0.03%)</title><rect x="55.9" y="867.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="58.9" y="878.0"></text>
</g>
<g>
<title>run_rebalance_domains (1 samples, 0.03%)</title><rect x="55.9" y="851.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="58.9" y="862.0"></text>
</g>
<g>
<title>rebalance_domains (1 samples, 0.03%)</title><rect x="55.9" y="835.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="58.9" y="846.0"></text>
</g>
<g>
<title>update_blocked_averages (1 samples, 0.03%)</title><rect x="55.9" y="819.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="58.9" y="830.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="55.9" y="803.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="58.9" y="814.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (3 samples, 0.10%)</title><rect x="56.3" y="1011.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="59.3" y="1022.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.30%)</title><rect x="57.5" y="1027.0" width="3.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="60.5" y="1038.0"></text>
</g>
<g>
<title>/usr/lib/jvm/java-11-openjdk-i386/lib/server/libjvm.so (1 samples, 0.03%)</title><rect x="57.5" y="1011.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="60.5" y="1022.0"></text>
</g>
<g>
<title>__vsnprintf_chk (1 samples, 0.03%)</title><rect x="57.5" y="995.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="60.5" y="1006.0"></text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (1 samples, 0.03%)</title><rect x="57.5" y="979.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="60.5" y="990.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.07%)</title><rect x="57.9" y="1011.0" width="0.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="60.9" y="1022.0"></text>
</g>
<g>
<title>_IO_vfprintf (1 samples, 0.03%)</title><rect x="57.9" y="995.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="60.9" y="1006.0"></text>
</g>
<g>
<title>__vsnprintf_chk (1 samples, 0.03%)</title><rect x="58.3" y="995.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="61.3" y="1006.0"></text>
</g>
<g>
<title>strchrnul (1 samples, 0.03%)</title><rect x="58.3" y="979.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="61.3" y="990.0"></text>
</g>
<g>
<title>__kernel_vsyscall (6 samples, 0.20%)</title><rect x="58.7" y="1011.0" width="2.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="61.7" y="1022.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (6 samples, 0.20%)</title><rect x="58.7" y="995.0" width="2.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="61.7" y="1006.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (6 samples, 0.20%)</title><rect x="58.7" y="979.0" width="2.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="61.7" y="990.0"></text>
</g>
<g>
<title>sys_futex (6 samples, 0.20%)</title><rect x="58.7" y="963.0" width="2.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="61.7" y="974.0"></text>
</g>
<g>
<title>do_futex (6 samples, 0.20%)</title><rect x="58.7" y="947.0" width="2.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="61.7" y="958.0"></text>
</g>
<g>
<title>futex_wake (6 samples, 0.20%)</title><rect x="58.7" y="931.0" width="2.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="61.7" y="942.0"></text>
</g>
<g>
<title>wake_up_q (6 samples, 0.20%)</title><rect x="58.7" y="915.0" width="2.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="61.7" y="926.0"></text>
</g>
<g>
<title>try_to_wake_up (6 samples, 0.20%)</title><rect x="58.7" y="899.0" width="2.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="61.7" y="910.0"></text>
</g>
<g>
<title>__lock_text_start (6 samples, 0.20%)</title><rect x="58.7" y="883.0" width="2.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="61.7" y="894.0"></text>
</g>
<g>
<title>[unknown_Java] (76 samples, 2.57%)</title><rect x="61.1" y="1027.0" width="30.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="64.1" y="1038.0">[u..</text>
</g>
<g>
<title>Thread::current() (1 samples, 0.03%)</title><rect x="89.0" y="1011.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="92.0" y="1022.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.07%)</title><rect x="89.4" y="1011.0" width="0.8" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="92.4" y="1022.0"></text>
</g>
<g>
<title>__kernel_vsyscall (2 samples, 0.07%)</title><rect x="89.4" y="995.0" width="0.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="92.4" y="1006.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (2 samples, 0.07%)</title><rect x="89.4" y="979.0" width="0.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="92.4" y="990.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (2 samples, 0.07%)</title><rect x="89.4" y="963.0" width="0.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="92.4" y="974.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="89.4" y="947.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="92.4" y="958.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="89.4" y="931.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="92.4" y="942.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.03%)</title><rect x="89.4" y="915.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="92.4" y="926.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="89.4" y="899.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="92.4" y="910.0"></text>
</g>
<g>
<title>sys_futex (1 samples, 0.03%)</title><rect x="89.8" y="947.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="92.8" y="958.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.03%)</title><rect x="89.8" y="931.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="92.8" y="942.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.03%)</title><rect x="89.8" y="915.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="92.8" y="926.0"></text>
</g>
<g>
<title>wake_up_q (1 samples, 0.03%)</title><rect x="89.8" y="899.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="92.8" y="910.0"></text>
</g>
<g>
<title>try_to_wake_up (1 samples, 0.03%)</title><rect x="89.8" y="883.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="92.8" y="894.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="89.8" y="867.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="92.8" y="878.0"></text>
</g>
<g>
<title>common_interrupt (1 samples, 0.03%)</title><rect x="90.2" y="1011.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="93.2" y="1022.0"></text>
</g>
<g>
<title>do_IRQ (1 samples, 0.03%)</title><rect x="90.2" y="995.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="93.2" y="1006.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.03%)</title><rect x="90.2" y="979.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="93.2" y="990.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.03%)</title><rect x="90.2" y="963.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="93.2" y="974.0"></text>
</g>
<g>
<title>call_on_stack (1 samples, 0.03%)</title><rect x="90.2" y="947.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="93.2" y="958.0"></text>
</g>
<g>
<title>__do_softirq (1 samples, 0.03%)</title><rect x="90.2" y="931.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="93.2" y="942.0"></text>
</g>
<g>
<title>blk_done_softirq (1 samples, 0.03%)</title><rect x="90.2" y="915.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="93.2" y="926.0"></text>
</g>
<g>
<title>scsi_softirq_done (1 samples, 0.03%)</title><rect x="90.2" y="899.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="93.2" y="910.0"></text>
</g>
<g>
<title>scsi_finish_command (1 samples, 0.03%)</title><rect x="90.2" y="883.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="93.2" y="894.0"></text>
</g>
<g>
<title>scsi_io_completion (1 samples, 0.03%)</title><rect x="90.2" y="867.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="93.2" y="878.0"></text>
</g>
<g>
<title>scsi_end_request (1 samples, 0.03%)</title><rect x="90.2" y="851.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="93.2" y="862.0"></text>
</g>
<g>
<title>blk_update_request (1 samples, 0.03%)</title><rect x="90.2" y="835.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="93.2" y="846.0"></text>
</g>
<g>
<title>bio_endio (1 samples, 0.03%)</title><rect x="90.2" y="819.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="93.2" y="830.0"></text>
</g>
<g>
<title>mpage_end_io (1 samples, 0.03%)</title><rect x="90.2" y="803.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="93.2" y="814.0"></text>
</g>
<g>
<title>unlock_page (1 samples, 0.03%)</title><rect x="90.2" y="787.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="93.2" y="798.0"></text>
</g>
<g>
<title>wake_up_page_bit (1 samples, 0.03%)</title><rect x="90.2" y="771.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="93.2" y="782.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="90.2" y="755.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="93.2" y="766.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.07%)</title><rect x="90.6" y="1011.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="93.6" y="1022.0"></text>
</g>
<g>
<title>clone (50 samples, 1.69%)</title><rect x="91.4" y="1027.0" width="19.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="94.4" y="1038.0"></text>
</g>
<g>
<title>start_thread (50 samples, 1.69%)</title><rect x="91.4" y="1011.0" width="19.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="94.4" y="1022.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (50 samples, 1.69%)</title><rect x="91.4" y="995.0" width="19.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="94.4" y="1006.0"></text>
</g>
<g>
<title>Thread::call_run() (50 samples, 1.69%)</title><rect x="91.4" y="979.0" width="19.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="94.4" y="990.0"></text>
</g>
<g>
<title>JavaThread::run() (10 samples, 0.34%)</title><rect x="91.4" y="963.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="94.4" y="974.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (10 samples, 0.34%)</title><rect x="91.4" y="947.0" width="4.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="94.4" y="958.0"></text>
</g>
<g>
<title>compiler_thread_entry(JavaThread*, Thread*) (10 samples, 0.34%)</title><rect x="91.4" y="931.0" width="4.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="94.4" y="942.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (10 samples, 0.34%)</title><rect x="91.4" y="915.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="94.4" y="926.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (9 samples, 0.30%)</title><rect x="91.4" y="899.0" width="3.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="94.4" y="910.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (9 samples, 0.30%)</title><rect x="91.4" y="883.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="94.4" y="894.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (9 samples, 0.30%)</title><rect x="91.4" y="867.0" width="3.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="94.4" y="878.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (5 samples, 0.17%)</title><rect x="91.4" y="851.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="94.4" y="862.0"></text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.03%)</title><rect x="91.4" y="835.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="94.4" y="846.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.03%)</title><rect x="91.4" y="819.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="94.4" y="830.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.03%)</title><rect x="91.4" y="803.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="94.4" y="814.0"></text>
</g>
<g>
<title>MachNode::emit_size(PhaseRegAlloc*) const (1 samples, 0.03%)</title><rect x="91.4" y="787.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="94.4" y="798.0"></text>
</g>
<g>
<title>storeImmBNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.03%)</title><rect x="91.4" y="771.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="94.4" y="782.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.03%)</title><rect x="91.8" y="835.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="94.8" y="846.0"></text>
</g>
<g>
<title>PhaseBlockLayout::find_edges() (1 samples, 0.03%)</title><rect x="91.8" y="819.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="94.8" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (3 samples, 0.10%)</title><rect x="92.2" y="835.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="95.2" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (2 samples, 0.07%)</title><rect x="92.2" y="819.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="95.2" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.03%)</title><rect x="92.2" y="803.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="95.2" y="814.0"></text>
</g>
<g>
<title>SCMemProjNode::Opcode() const (1 samples, 0.03%)</title><rect x="92.6" y="803.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="95.6" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.81] (1 samples, 0.03%)</title><rect x="93.0" y="819.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="96.0" y="830.0"></text>
</g>
<g>
<title>Compile::Optimize() (3 samples, 0.10%)</title><rect x="93.4" y="851.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="96.4" y="862.0"></text>
</g>
<g>
<title>Compile::print_method(CompilerPhaseType, int) [clone .isra.323] (1 samples, 0.03%)</title><rect x="93.4" y="835.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="96.4" y="846.0"></text>
</g>
<g>
<title>CompositeElapsedCounterSource::now() (1 samples, 0.03%)</title><rect x="93.4" y="819.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="96.4" y="830.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.03%)</title><rect x="93.4" y="803.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="96.4" y="814.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (1 samples, 0.03%)</title><rect x="93.4" y="787.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="96.4" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN&amp;, bool, bool, bool) (2 samples, 0.07%)</title><rect x="93.8" y="835.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="96.8" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool, bool) (2 samples, 0.07%)</title><rect x="93.8" y="819.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="96.8" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.03%)</title><rect x="93.8" y="803.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="96.8" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.03%)</title><rect x="94.2" y="803.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="97.2" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="94.6" y="851.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="97.6" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="94.6" y="835.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="97.6" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="94.6" y="819.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="97.6" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="94.6" y="803.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="97.6" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="94.6" y="787.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="97.6" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="94.6" y="771.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="97.6" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="94.6" y="755.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="97.6" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="94.6" y="739.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="97.6" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="94.6" y="723.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="97.6" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="94.6" y="707.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="97.6" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="94.6" y="691.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="97.6" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="94.6" y="675.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="97.6" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="94.6" y="659.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="97.6" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="94.6" y="643.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="97.6" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="94.6" y="627.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="97.6" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="94.6" y="611.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="97.6" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="94.6" y="595.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="97.6" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="94.6" y="579.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="97.6" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="94.6" y="563.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="97.6" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="94.6" y="547.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="97.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="94.6" y="531.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="97.6" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="94.6" y="515.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="97.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="94.6" y="499.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="97.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="94.6" y="483.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="97.6" y="494.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.03%)</title><rect x="94.6" y="467.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="97.6" y="478.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.03%)</title><rect x="94.6" y="451.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="97.6" y="462.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.03%)</title><rect x="94.6" y="435.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="97.6" y="446.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.03%)</title><rect x="94.6" y="419.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="97.6" y="430.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.03%)</title><rect x="95.0" y="899.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="98.0" y="910.0"></text>
</g>
<g>
<title>VMThread::run() (32 samples, 1.08%)</title><rect x="95.4" y="963.0" width="12.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="98.4" y="974.0"></text>
</g>
<g>
<title>EventMark::~EventMark() (1 samples, 0.03%)</title><rect x="95.4" y="947.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="98.4" y="958.0"></text>
</g>
<g>
<title>common_interrupt (1 samples, 0.03%)</title><rect x="95.4" y="931.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="98.4" y="942.0"></text>
</g>
<g>
<title>do_IRQ (1 samples, 0.03%)</title><rect x="95.4" y="915.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="98.4" y="926.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.03%)</title><rect x="95.4" y="899.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="98.4" y="910.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.03%)</title><rect x="95.4" y="883.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="98.4" y="894.0"></text>
</g>
<g>
<title>call_on_stack (1 samples, 0.03%)</title><rect x="95.4" y="867.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="98.4" y="878.0"></text>
</g>
<g>
<title>__do_softirq (1 samples, 0.03%)</title><rect x="95.4" y="851.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="98.4" y="862.0"></text>
</g>
<g>
<title>blk_done_softirq (1 samples, 0.03%)</title><rect x="95.4" y="835.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="98.4" y="846.0"></text>
</g>
<g>
<title>scsi_softirq_done (1 samples, 0.03%)</title><rect x="95.4" y="819.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="98.4" y="830.0"></text>
</g>
<g>
<title>scsi_finish_command (1 samples, 0.03%)</title><rect x="95.4" y="803.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="98.4" y="814.0"></text>
</g>
<g>
<title>scsi_io_completion (1 samples, 0.03%)</title><rect x="95.4" y="787.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="98.4" y="798.0"></text>
</g>
<g>
<title>scsi_end_request (1 samples, 0.03%)</title><rect x="95.4" y="771.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="98.4" y="782.0"></text>
</g>
<g>
<title>scsi_run_queue (1 samples, 0.03%)</title><rect x="95.4" y="755.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="98.4" y="766.0"></text>
</g>
<g>
<title>blk_run_queue (1 samples, 0.03%)</title><rect x="95.4" y="739.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="98.4" y="750.0"></text>
</g>
<g>
<title>__blk_run_queue (1 samples, 0.03%)</title><rect x="95.4" y="723.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="98.4" y="734.0"></text>
</g>
<g>
<title>scsi_request_fn (1 samples, 0.03%)</title><rect x="95.4" y="707.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="98.4" y="718.0"></text>
</g>
<g>
<title>scsi_dispatch_cmd (1 samples, 0.03%)</title><rect x="95.4" y="691.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="98.4" y="702.0"></text>
</g>
<g>
<title>ata_scsi_queuecmd (1 samples, 0.03%)</title><rect x="95.4" y="675.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="98.4" y="686.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="95.4" y="659.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="98.4" y="670.0"></text>
</g>
<g>
<title>VMThread::loop() (31 samples, 1.05%)</title><rect x="95.8" y="947.0" width="12.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="98.8" y="958.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.07%)</title><rect x="95.8" y="931.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="98.8" y="942.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long long) (2 samples, 0.07%)</title><rect x="95.8" y="915.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="98.8" y="926.0"></text>
</g>
<g>
<title>__kernel_vsyscall (1 samples, 0.03%)</title><rect x="95.8" y="899.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="98.8" y="910.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (1 samples, 0.03%)</title><rect x="95.8" y="883.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="98.8" y="894.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (1 samples, 0.03%)</title><rect x="95.8" y="867.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="98.8" y="878.0"></text>
</g>
<g>
<title>sys_futex (1 samples, 0.03%)</title><rect x="95.8" y="851.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="98.8" y="862.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.03%)</title><rect x="95.8" y="835.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="98.8" y="846.0"></text>
</g>
<g>
<title>futex_wait (1 samples, 0.03%)</title><rect x="95.8" y="819.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="98.8" y="830.0"></text>
</g>
<g>
<title>futex_wait_queue_me (1 samples, 0.03%)</title><rect x="95.8" y="803.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="98.8" y="814.0"></text>
</g>
<g>
<title>hrtimer_start_range_ns (1 samples, 0.03%)</title><rect x="95.8" y="787.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="98.8" y="798.0"></text>
</g>
<g>
<title>lock_hrtimer_base.isra.11 (1 samples, 0.03%)</title><rect x="95.8" y="771.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="98.8" y="782.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (1 samples, 0.03%)</title><rect x="96.2" y="899.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="99.2" y="910.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (19 samples, 0.64%)</title><rect x="96.6" y="931.0" width="7.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="99.6" y="942.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (2 samples, 0.07%)</title><rect x="98.6" y="915.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="101.6" y="926.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (1 samples, 0.03%)</title><rect x="98.6" y="899.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="101.6" y="910.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (1 samples, 0.03%)</title><rect x="98.6" y="883.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="101.6" y="894.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) [clone .part.62] (1 samples, 0.03%)</title><rect x="98.6" y="867.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="101.6" y="878.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.03%)</title><rect x="98.6" y="851.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="101.6" y="862.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.03%)</title><rect x="98.6" y="835.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="101.6" y="846.0"></text>
</g>
<g>
<title>CodeBlob::oop_map_for_return_address(unsigned char*) (1 samples, 0.03%)</title><rect x="98.6" y="819.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="101.6" y="830.0"></text>
</g>
<g>
<title>ImmutableOopMapSet::find_map_at_offset(int) const (1 samples, 0.03%)</title><rect x="98.6" y="803.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="101.6" y="814.0"></text>
</g>
<g>
<title>SubTasksDone::SubTasksDone(unsigned int) (1 samples, 0.03%)</title><rect x="99.0" y="899.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="102.0" y="910.0"></text>
</g>
<g>
<title>AllocateHeap(unsigned int, MemoryType, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="99.0" y="883.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="102.0" y="894.0"></text>
</g>
<g>
<title>MallocTracker::record_malloc(void*, unsigned int, MemoryType, NativeCallStack const&amp;, NMT_TrackingLevel) (1 samples, 0.03%)</title><rect x="99.0" y="867.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="102.0" y="878.0"></text>
</g>
<g>
<title>__kernel_vsyscall (11 samples, 0.37%)</title><rect x="99.4" y="915.0" width="4.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="102.4" y="926.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (11 samples, 0.37%)</title><rect x="99.4" y="899.0" width="4.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="102.4" y="910.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (11 samples, 0.37%)</title><rect x="99.4" y="883.0" width="4.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="102.4" y="894.0"></text>
</g>
<g>
<title>sys_mprotect (11 samples, 0.37%)</title><rect x="99.4" y="867.0" width="4.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="102.4" y="878.0"></text>
</g>
<g>
<title>find_vma (3 samples, 0.10%)</title><rect x="99.4" y="851.0" width="1.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="102.4" y="862.0"></text>
</g>
<g>
<title>vmacache_find (3 samples, 0.10%)</title><rect x="99.4" y="835.0" width="1.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="102.4" y="846.0"></text>
</g>
<g>
<title>mprotect_fixup (8 samples, 0.27%)</title><rect x="100.6" y="851.0" width="3.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="103.6" y="862.0"></text>
</g>
<g>
<title>change_protection (8 samples, 0.27%)</title><rect x="100.6" y="835.0" width="3.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="103.6" y="846.0"></text>
</g>
<g>
<title>change_protection_range (8 samples, 0.27%)</title><rect x="100.6" y="819.0" width="3.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="103.6" y="830.0"></text>
</g>
<g>
<title>atomic64_xchg_cx8 (3 samples, 0.10%)</title><rect x="101.0" y="803.0" width="1.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="104.0" y="814.0"></text>
</g>
<g>
<title>flush_tlb_mm_range (4 samples, 0.14%)</title><rect x="102.2" y="803.0" width="1.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="105.2" y="814.0"></text>
</g>
<g>
<title>native_flush_tlb_others (4 samples, 0.14%)</title><rect x="102.2" y="787.0" width="1.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="105.2" y="798.0"></text>
</g>
<g>
<title>smp_call_function_many (4 samples, 0.14%)</title><rect x="102.2" y="771.0" width="1.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="105.2" y="782.0"></text>
</g>
<g>
<title>smp_call_function_single (4 samples, 0.14%)</title><rect x="102.2" y="755.0" width="1.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="105.2" y="766.0"></text>
</g>
<g>
<title>generic_exec_single (2 samples, 0.07%)</title><rect x="102.9" y="739.0" width="0.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="105.9" y="750.0"></text>
</g>
<g>
<title>native_send_call_func_single_ipi (2 samples, 0.07%)</title><rect x="102.9" y="723.0" width="0.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="105.9" y="734.0"></text>
</g>
<g>
<title>default_send_IPI_single (2 samples, 0.07%)</title><rect x="102.9" y="707.0" width="0.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="105.9" y="718.0"></text>
</g>
<g>
<title>default_send_IPI_mask_logical (2 samples, 0.07%)</title><rect x="102.9" y="691.0" width="0.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="105.9" y="702.0"></text>
</g>
<g>
<title>common_interrupt (1 samples, 0.03%)</title><rect x="103.7" y="915.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="106.7" y="926.0"></text>
</g>
<g>
<title>do_IRQ (1 samples, 0.03%)</title><rect x="103.7" y="899.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="106.7" y="910.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.03%)</title><rect x="103.7" y="883.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="106.7" y="894.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.03%)</title><rect x="103.7" y="867.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="106.7" y="878.0"></text>
</g>
<g>
<title>call_on_stack (1 samples, 0.03%)</title><rect x="103.7" y="851.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="106.7" y="862.0"></text>
</g>
<g>
<title>__do_softirq (1 samples, 0.03%)</title><rect x="103.7" y="835.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="106.7" y="846.0"></text>
</g>
<g>
<title>blk_done_softirq (1 samples, 0.03%)</title><rect x="103.7" y="819.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="106.7" y="830.0"></text>
</g>
<g>
<title>scsi_softirq_done (1 samples, 0.03%)</title><rect x="103.7" y="803.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="106.7" y="814.0"></text>
</g>
<g>
<title>scsi_finish_command (1 samples, 0.03%)</title><rect x="103.7" y="787.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="106.7" y="798.0"></text>
</g>
<g>
<title>scsi_io_completion (1 samples, 0.03%)</title><rect x="103.7" y="771.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="106.7" y="782.0"></text>
</g>
<g>
<title>scsi_end_request (1 samples, 0.03%)</title><rect x="103.7" y="755.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="106.7" y="766.0"></text>
</g>
<g>
<title>scsi_run_queue (1 samples, 0.03%)</title><rect x="103.7" y="739.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="106.7" y="750.0"></text>
</g>
<g>
<title>blk_run_queue (1 samples, 0.03%)</title><rect x="103.7" y="723.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="106.7" y="734.0"></text>
</g>
<g>
<title>__blk_run_queue (1 samples, 0.03%)</title><rect x="103.7" y="707.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="106.7" y="718.0"></text>
</g>
<g>
<title>scsi_request_fn (1 samples, 0.03%)</title><rect x="103.7" y="691.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="106.7" y="702.0"></text>
</g>
<g>
<title>scsi_dispatch_cmd (1 samples, 0.03%)</title><rect x="103.7" y="675.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="106.7" y="686.0"></text>
</g>
<g>
<title>ata_scsi_queuecmd (1 samples, 0.03%)</title><rect x="103.7" y="659.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="106.7" y="670.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="103.7" y="643.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="106.7" y="654.0"></text>
</g>
<g>
<title>SafepointSynchronize::end() (1 samples, 0.03%)</title><rect x="104.1" y="931.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="107.1" y="942.0"></text>
</g>
<g>
<title>__kernel_vsyscall (1 samples, 0.03%)</title><rect x="104.1" y="915.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="107.1" y="926.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (1 samples, 0.03%)</title><rect x="104.1" y="899.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="107.1" y="910.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (1 samples, 0.03%)</title><rect x="104.1" y="883.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="107.1" y="894.0"></text>
</g>
<g>
<title>sys_mprotect (1 samples, 0.03%)</title><rect x="104.1" y="867.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="107.1" y="878.0"></text>
</g>
<g>
<title>mprotect_fixup (1 samples, 0.03%)</title><rect x="104.1" y="851.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="107.1" y="862.0"></text>
</g>
<g>
<title>change_protection (1 samples, 0.03%)</title><rect x="104.1" y="835.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="107.1" y="846.0"></text>
</g>
<g>
<title>change_protection_range (1 samples, 0.03%)</title><rect x="104.1" y="819.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="107.1" y="830.0"></text>
</g>
<g>
<title>flush_tlb_mm_range (1 samples, 0.03%)</title><rect x="104.1" y="803.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="107.1" y="814.0"></text>
</g>
<g>
<title>native_flush_tlb_others (1 samples, 0.03%)</title><rect x="104.1" y="787.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="107.1" y="798.0"></text>
</g>
<g>
<title>smp_call_function_many (1 samples, 0.03%)</title><rect x="104.1" y="771.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="107.1" y="782.0"></text>
</g>
<g>
<title>smp_call_function_single (1 samples, 0.03%)</title><rect x="104.1" y="755.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="107.1" y="766.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.61] (9 samples, 0.30%)</title><rect x="104.5" y="931.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="107.5" y="942.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (9 samples, 0.30%)</title><rect x="104.5" y="915.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="107.5" y="926.0"></text>
</g>
<g>
<title>VM_GenCollectForAllocation::doit() (9 samples, 0.30%)</title><rect x="104.5" y="899.0" width="3.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="107.5" y="910.0"></text>
</g>
<g>
<title>GenCollectedHeap::satisfy_failed_allocation(unsigned int, bool) (9 samples, 0.30%)</title><rect x="104.5" y="883.0" width="3.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="107.5" y="894.0"></text>
</g>
<g>
<title>GenCollectedHeap::do_collection(bool, bool, unsigned int, bool, GenCollectedHeap::GenerationType) (9 samples, 0.30%)</title><rect x="104.5" y="867.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="107.5" y="878.0"></text>
</g>
<g>
<title>GenCollectedHeap::collect_generation(Generation*, bool, unsigned int, bool, bool, bool, bool) (9 samples, 0.30%)</title><rect x="104.5" y="851.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="107.5" y="862.0"></text>
</g>
<g>
<title>DefNewGeneration::collect(bool, bool, unsigned int, bool) (9 samples, 0.30%)</title><rect x="104.5" y="835.0" width="3.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="107.5" y="846.0"></text>
</g>
<g>
<title>GenCollectedHeap::young_process_roots(StrongRootsScope*, OopsInGenClosure*, OopsInGenClosure*, CLDClosure*, OopStorage::ParState&lt;false, false&gt;*) (7 samples, 0.24%)</title><rect x="104.5" y="819.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="107.5" y="830.0"></text>
</g>
<g>
<title>CardGeneration::younger_refs_iterate(OopsInGenClosure*, unsigned int) (3 samples, 0.10%)</title><rect x="104.5" y="803.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="107.5" y="814.0"></text>
</g>
<g>
<title>CardTableRS::younger_refs_in_space_iterate(Space*, OopsInGenClosure*, unsigned int) (3 samples, 0.10%)</title><rect x="104.5" y="787.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="107.5" y="798.0"></text>
</g>
<g>
<title>ClearNoncleanCardWrapper::do_MemRegion(MemRegion) (3 samples, 0.10%)</title><rect x="104.5" y="771.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="107.5" y="782.0"></text>
</g>
<g>
<title>DirtyCardToOopClosure::do_MemRegion(MemRegion) (3 samples, 0.10%)</title><rect x="104.5" y="755.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="107.5" y="766.0"></text>
</g>
<g>
<title>BlockOffsetArrayContigSpace::block_start_unsafe(void const*) const (1 samples, 0.03%)</title><rect x="104.5" y="739.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="107.5" y="750.0"></text>
</g>
<g>
<title>FilteringDCTOC::walk_mem_region(MemRegion, HeapWord*, HeapWord*) (2 samples, 0.07%)</title><rect x="104.9" y="739.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="107.9" y="750.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;FilteringClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, oopDesc*&gt;(FilteringClosure*, oopDesc*, Klass*) (1 samples, 0.03%)</title><rect x="105.3" y="723.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="108.3" y="734.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.03%)</title><rect x="105.7" y="803.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="108.7" y="814.0"></text>
</g>
<g>
<title>StringTable::oops_do(OopClosure*) (2 samples, 0.07%)</title><rect x="106.1" y="803.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="109.1" y="814.0"></text>
</g>
<g>
<title>FastScanClosure::do_oop(oopDesc**) (2 samples, 0.07%)</title><rect x="106.1" y="787.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="109.1" y="798.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (1 samples, 0.03%)</title><rect x="106.9" y="803.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="109.9" y="814.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (1 samples, 0.03%)</title><rect x="106.9" y="787.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="109.9" y="798.0"></text>
</g>
<g>
<title>frame::oops_interpreted_do(OopClosure*, RegisterMap const*, bool) (1 samples, 0.03%)</title><rect x="106.9" y="771.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="109.9" y="782.0"></text>
</g>
<g>
<title>Bytecode_member_ref::signature() const (1 samples, 0.03%)</title><rect x="106.9" y="755.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="109.9" y="766.0"></text>
</g>
<g>
<title>ConstantPool::impl_signature_ref_at(int, bool) (1 samples, 0.03%)</title><rect x="106.9" y="739.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="109.9" y="750.0"></text>
</g>
<g>
<title>ReferenceProcessorPhaseTimes::print_all_references(unsigned int, bool) const (2 samples, 0.07%)</title><rect x="107.3" y="819.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="110.3" y="830.0"></text>
</g>
<g>
<title>outputStream::print_cr(char const*, ...) (2 samples, 0.07%)</title><rect x="107.3" y="803.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="110.3" y="814.0"></text>
</g>
<g>
<title>outputStream::do_vsnprintf_and_write_with_automatic_buffer(char const*, char*, bool) (2 samples, 0.07%)</title><rect x="107.3" y="787.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="110.3" y="798.0"></text>
</g>
<g>
<title>LogStream::write(char const*, unsigned int) (2 samples, 0.07%)</title><rect x="107.3" y="771.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="110.3" y="782.0"></text>
</g>
<g>
<title>LogTargetHandle::print(char const*, ...) (2 samples, 0.07%)</title><rect x="107.3" y="755.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="110.3" y="766.0"></text>
</g>
<g>
<title>LogDecorations::LogDecorations(LogLevel::type, LogTagSet const&amp;, LogDecorators const&amp;) (1 samples, 0.03%)</title><rect x="107.3" y="739.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="110.3" y="750.0"></text>
</g>
<g>
<title>LogTagSet::vwrite(LogLevel::type, char const*, char*) (1 samples, 0.03%)</title><rect x="107.7" y="739.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="110.7" y="750.0"></text>
</g>
<g>
<title>LogDecorations::LogDecorations(LogLevel::type, LogTagSet const&amp;, LogDecorators const&amp;) (1 samples, 0.03%)</title><rect x="107.7" y="723.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="110.7" y="734.0"></text>
</g>
<g>
<title>LogTagSet::label(char*, unsigned int, char const*) const (1 samples, 0.03%)</title><rect x="107.7" y="707.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="110.7" y="718.0"></text>
</g>
<g>
<title>WatcherThread::run() (8 samples, 0.27%)</title><rect x="108.1" y="963.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="111.1" y="974.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (2 samples, 0.07%)</title><rect x="108.1" y="947.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="111.1" y="958.0"></text>
</g>
<g>
<title>StatSamplerTask::task() (1 samples, 0.03%)</title><rect x="108.5" y="931.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="111.5" y="942.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (6 samples, 0.20%)</title><rect x="108.9" y="947.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="111.9" y="958.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (4 samples, 0.14%)</title><rect x="109.3" y="931.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="112.3" y="942.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long long) (4 samples, 0.14%)</title><rect x="109.3" y="915.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="112.3" y="926.0"></text>
</g>
<g>
<title>__kernel_vsyscall (3 samples, 0.10%)</title><rect x="109.3" y="899.0" width="1.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="112.3" y="910.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (2 samples, 0.07%)</title><rect x="109.7" y="883.0" width="0.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="112.7" y="894.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (2 samples, 0.07%)</title><rect x="109.7" y="867.0" width="0.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="112.7" y="878.0"></text>
</g>
<g>
<title>sys_futex (2 samples, 0.07%)</title><rect x="109.7" y="851.0" width="0.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="112.7" y="862.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.03%)</title><rect x="109.7" y="835.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="112.7" y="846.0"></text>
</g>
<g>
<title>futex_wait (1 samples, 0.03%)</title><rect x="109.7" y="819.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="112.7" y="830.0"></text>
</g>
<g>
<title>futex_wait_queue_me (1 samples, 0.03%)</title><rect x="109.7" y="803.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="112.7" y="814.0"></text>
</g>
<g>
<title>hrtimer_start_range_ns (1 samples, 0.03%)</title><rect x="109.7" y="787.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="112.7" y="798.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="109.7" y="771.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="112.7" y="782.0"></text>
</g>
<g>
<title>futex_wait (1 samples, 0.03%)</title><rect x="110.1" y="835.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="113.1" y="846.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (1 samples, 0.03%)</title><rect x="110.5" y="899.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="113.5" y="910.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.03%)</title><rect x="110.9" y="931.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="113.9" y="942.0"></text>
</g>
<g>
<title>java/lang/Thread.run (1,975 samples, 66.77%)</title><rect x="111.3" y="1027.0" width="787.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="114.3" y="1038.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1,975 samples, 66.77%)</title><rect x="111.3" y="1011.0" width="787.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="114.3" y="1022.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.03%)</title><rect x="111.3" y="995.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="114.3" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.03%)</title><rect x="111.3" y="979.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="114.3" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.03%)</title><rect x="111.3" y="963.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="114.3" y="974.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="111.3" y="947.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="114.3" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1,974 samples, 66.73%)</title><rect x="111.7" y="995.0" width="787.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="114.7" y="1006.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (339 samples, 11.46%)</title><rect x="113.3" y="979.0" width="135.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="116.3" y="990.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (331 samples, 11.19%)</title><rect x="116.5" y="963.0" width="132.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="119.5" y="974.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (279 samples, 9.43%)</title><rect x="116.9" y="947.0" width="111.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="119.9" y="958.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (14 samples, 0.47%)</title><rect x="117.3" y="931.0" width="5.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="120.3" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (14 samples, 0.47%)</title><rect x="117.3" y="915.0" width="5.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="120.3" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.03%)</title><rect x="122.5" y="899.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="125.5" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (1 samples, 0.03%)</title><rect x="122.9" y="931.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="125.9" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (1 samples, 0.03%)</title><rect x="122.9" y="915.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="125.9" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (263 samples, 8.89%)</title><rect x="123.3" y="931.0" width="104.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="126.3" y="942.0">java/util/co..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (263 samples, 8.89%)</title><rect x="123.3" y="915.0" width="104.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="126.3" y="926.0">jdk/internal..</text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (7 samples, 0.24%)</title><rect x="123.3" y="899.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="126.3" y="910.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::JfrEvent(EventStartTime) (2 samples, 0.07%)</title><rect x="126.1" y="899.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="129.1" y="910.0"></text>
</g>
<g>
<title>Parker::park(bool, long long) (3 samples, 0.10%)</title><rect x="126.9" y="899.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="129.9" y="910.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.03%)</title><rect x="128.1" y="899.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="131.1" y="910.0"></text>
</g>
<g>
<title>Unsafe_Park (62 samples, 2.10%)</title><rect x="128.5" y="899.0" width="24.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="131.5" y="910.0">U..</text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (1 samples, 0.03%)</title><rect x="129.7" y="883.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="132.7" y="894.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (4 samples, 0.14%)</title><rect x="130.1" y="883.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="133.1" y="894.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (7 samples, 0.24%)</title><rect x="131.7" y="883.0" width="2.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="134.7" y="894.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.03%)</title><rect x="134.1" y="867.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="137.1" y="878.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::JfrEvent(EventStartTime) (2 samples, 0.07%)</title><rect x="134.5" y="883.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="137.5" y="894.0"></text>
</g>
<g>
<title>Parker::park(bool, long long) (13 samples, 0.44%)</title><rect x="135.3" y="883.0" width="5.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="138.3" y="894.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.03%)</title><rect x="138.5" y="867.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="141.5" y="878.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="138.9" y="867.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="141.9" y="878.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (3 samples, 0.10%)</title><rect x="139.2" y="867.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="142.2" y="878.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (5 samples, 0.17%)</title><rect x="140.4" y="883.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="143.4" y="894.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.201] (2 samples, 0.07%)</title><rect x="142.4" y="883.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="145.4" y="894.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.07%)</title><rect x="143.2" y="883.0" width="0.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="146.2" y="894.0"></text>
</g>
<g>
<title>__kernel_vsyscall (2 samples, 0.07%)</title><rect x="143.2" y="867.0" width="0.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="146.2" y="878.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (2 samples, 0.07%)</title><rect x="143.2" y="851.0" width="0.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="146.2" y="862.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (2 samples, 0.07%)</title><rect x="143.2" y="835.0" width="0.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="146.2" y="846.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_trylock (7 samples, 0.24%)</title><rect x="144.0" y="883.0" width="2.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="147.0" y="894.0"></text>
</g>
<g>
<title>__kernel_vsyscall (1 samples, 0.03%)</title><rect x="146.8" y="883.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="149.8" y="894.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (1 samples, 0.03%)</title><rect x="146.8" y="867.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="149.8" y="878.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (1 samples, 0.03%)</title><rect x="146.8" y="851.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="149.8" y="862.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="146.8" y="835.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="149.8" y="846.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="146.8" y="819.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="149.8" y="830.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.03%)</title><rect x="146.8" y="803.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="149.8" y="814.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="146.8" y="787.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="149.8" y="798.0"></text>
</g>
<g>
<title>__pthread_cond_wait (2 samples, 0.07%)</title><rect x="147.2" y="883.0" width="0.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="150.2" y="894.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.ax (4 samples, 0.14%)</title><rect x="148.0" y="883.0" width="1.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="151.0" y="894.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (2 samples, 0.07%)</title><rect x="149.6" y="883.0" width="0.8" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="152.6" y="894.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (3 samples, 0.10%)</title><rect x="150.4" y="883.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="153.4" y="894.0"></text>
</g>
<g>
<title>pthread_cond_wait (4 samples, 0.14%)</title><rect x="151.6" y="883.0" width="1.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="154.6" y="894.0"></text>
</g>
<g>
<title>[unknown] (188 samples, 6.36%)</title><rect x="153.2" y="899.0" width="75.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="156.2" y="910.0">[unknown]</text>
</g>
<g>
<title>[unknown] (5 samples, 0.17%)</title><rect x="153.2" y="883.0" width="2.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="156.2" y="894.0"></text>
</g>
<g>
<title>__kernel_vsyscall (5 samples, 0.17%)</title><rect x="153.2" y="867.0" width="2.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="156.2" y="878.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (5 samples, 0.17%)</title><rect x="153.2" y="851.0" width="2.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="156.2" y="862.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (5 samples, 0.17%)</title><rect x="153.2" y="835.0" width="2.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="156.2" y="846.0"></text>
</g>
<g>
<title>__kernel_vsyscall (174 samples, 5.88%)</title><rect x="155.2" y="883.0" width="69.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="158.2" y="894.0">__kerne..</text>
</g>
<g>
<title>entry_SYSENTER_32 (172 samples, 5.81%)</title><rect x="156.0" y="867.0" width="68.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="159.0" y="878.0">entry_S..</text>
</g>
<g>
<title>do_fast_syscall_32 (171 samples, 5.78%)</title><rect x="156.0" y="851.0" width="68.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="159.0" y="862.0">do_fast..</text>
</g>
<g>
<title>sys_futex (171 samples, 5.78%)</title><rect x="156.0" y="835.0" width="68.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="159.0" y="846.0">sys_futex</text>
</g>
<g>
<title>do_futex (168 samples, 5.68%)</title><rect x="156.0" y="819.0" width="67.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="159.0" y="830.0">do_futex</text>
</g>
<g>
<title>drop_futex_key_refs.isra.11 (1 samples, 0.03%)</title><rect x="156.0" y="803.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="159.0" y="814.0"></text>
</g>
<g>
<title>futex_wait (166 samples, 5.61%)</title><rect x="156.4" y="803.0" width="66.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="159.4" y="814.0">futex_w..</text>
</g>
<g>
<title>__raw_callee_save___pv_queued_spin_unlock (1 samples, 0.03%)</title><rect x="156.8" y="787.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="159.8" y="798.0"></text>
</g>
<g>
<title>futex_wait_queue_me (154 samples, 5.21%)</title><rect x="157.2" y="787.0" width="61.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="160.2" y="798.0">futex_..</text>
</g>
<g>
<title>plist_add (3 samples, 0.10%)</title><rect x="157.6" y="771.0" width="1.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="160.6" y="782.0"></text>
</g>
<g>
<title>schedule (150 samples, 5.07%)</title><rect x="158.8" y="771.0" width="59.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="161.8" y="782.0">schedule</text>
</g>
<g>
<title>__sched_text_start (150 samples, 5.07%)</title><rect x="158.8" y="755.0" width="59.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="161.8" y="766.0">__sche..</text>
</g>
<g>
<title>finish_task_switch (148 samples, 5.00%)</title><rect x="159.6" y="739.0" width="59.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="162.6" y="750.0">finish..</text>
</g>
<g>
<title>futex_wait_setup (7 samples, 0.24%)</title><rect x="218.6" y="787.0" width="2.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="221.6" y="798.0"></text>
</g>
<g>
<title>_raw_spin_lock (1 samples, 0.03%)</title><rect x="219.8" y="771.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="222.8" y="782.0"></text>
</g>
<g>
<title>get_futex_key (1 samples, 0.03%)</title><rect x="220.2" y="771.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="223.2" y="782.0"></text>
</g>
<g>
<title>get_futex_value_locked (2 samples, 0.07%)</title><rect x="220.6" y="771.0" width="0.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="223.6" y="782.0"></text>
</g>
<g>
<title>get_futex_value_locked (1 samples, 0.03%)</title><rect x="221.4" y="787.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="224.4" y="798.0"></text>
</g>
<g>
<title>plist_add (2 samples, 0.07%)</title><rect x="221.8" y="787.0" width="0.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="224.8" y="798.0"></text>
</g>
<g>
<title>futex_wait_queue_me (1 samples, 0.03%)</title><rect x="222.6" y="803.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="225.6" y="814.0"></text>
</g>
<g>
<title>futex_wait (3 samples, 0.10%)</title><rect x="223.0" y="819.0" width="1.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="226.0" y="830.0"></text>
</g>
<g>
<title>sys_futex (1 samples, 0.03%)</title><rect x="224.2" y="851.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="227.2" y="862.0"></text>
</g>
<g>
<title>__pthread_cleanup_pop (1 samples, 0.03%)</title><rect x="224.6" y="883.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="227.6" y="894.0"></text>
</g>
<g>
<title>__pthread_cond_wait (3 samples, 0.10%)</title><rect x="225.0" y="883.0" width="1.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="228.0" y="894.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="225.8" y="867.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="228.8" y="878.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="225.8" y="851.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="228.8" y="862.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="225.8" y="835.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="228.8" y="846.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="225.8" y="819.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="228.8" y="830.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.03%)</title><rect x="225.8" y="803.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="228.8" y="814.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="225.8" y="787.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="228.8" y="798.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.07%)</title><rect x="226.2" y="883.0" width="0.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="229.2" y="894.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.07%)</title><rect x="227.0" y="883.0" width="0.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="230.0" y="894.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.03%)</title><rect x="227.8" y="883.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="230.8" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (3 samples, 0.10%)</title><rect x="228.2" y="947.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="231.2" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (3 samples, 0.10%)</title><rect x="228.2" y="931.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="231.2" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (3 samples, 0.10%)</title><rect x="228.2" y="915.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="231.2" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.03%)</title><rect x="229.4" y="947.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="232.4" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.03%)</title><rect x="229.4" y="931.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="232.4" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (1 samples, 0.03%)</title><rect x="229.4" y="915.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="232.4" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.03%)</title><rect x="229.4" y="899.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="232.4" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (47 samples, 1.59%)</title><rect x="229.8" y="947.0" width="18.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="232.8" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (47 samples, 1.59%)</title><rect x="229.8" y="931.0" width="18.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="232.8" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (47 samples, 1.59%)</title><rect x="229.8" y="915.0" width="18.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="232.8" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (47 samples, 1.59%)</title><rect x="229.8" y="899.0" width="18.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="232.8" y="910.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (47 samples, 1.59%)</title><rect x="229.8" y="883.0" width="18.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="232.8" y="894.0"></text>
</g>
<g>
<title>Unsafe_Unpark (2 samples, 0.07%)</title><rect x="229.8" y="867.0" width="0.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="232.8" y="878.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.03%)</title><rect x="229.8" y="851.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="232.8" y="862.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.03%)</title><rect x="229.8" y="835.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="232.8" y="846.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="230.2" y="851.0" width="0.4" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="233.2" y="862.0"></text>
</g>
<g>
<title>[unknown] (44 samples, 1.49%)</title><rect x="230.6" y="867.0" width="17.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="233.6" y="878.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="230.6" y="851.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="233.6" y="862.0"></text>
</g>
<g>
<title>__kernel_vsyscall (1 samples, 0.03%)</title><rect x="230.6" y="835.0" width="0.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="233.6" y="846.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (1 samples, 0.03%)</title><rect x="230.6" y="819.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="233.6" y="830.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (1 samples, 0.03%)</title><rect x="230.6" y="803.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="233.6" y="814.0"></text>
</g>
<g>
<title>__kernel_vsyscall (42 samples, 1.42%)</title><rect x="231.0" y="851.0" width="16.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="234.0" y="862.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (42 samples, 1.42%)</title><rect x="231.0" y="835.0" width="16.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="234.0" y="846.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (42 samples, 1.42%)</title><rect x="231.0" y="819.0" width="16.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="234.0" y="830.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.07%)</title><rect x="231.0" y="803.0" width="0.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="234.0" y="814.0"></text>
</g>
<g>
<title>schedule (2 samples, 0.07%)</title><rect x="231.0" y="787.0" width="0.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="234.0" y="798.0"></text>
</g>
<g>
<title>__sched_text_start (2 samples, 0.07%)</title><rect x="231.0" y="771.0" width="0.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="234.0" y="782.0"></text>
</g>
<g>
<title>finish_task_switch (2 samples, 0.07%)</title><rect x="231.0" y="755.0" width="0.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="234.0" y="766.0"></text>
</g>
<g>
<title>sys_futex (40 samples, 1.35%)</title><rect x="231.8" y="803.0" width="16.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="234.8" y="814.0"></text>
</g>
<g>
<title>do_futex (40 samples, 1.35%)</title><rect x="231.8" y="787.0" width="16.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="234.8" y="798.0"></text>
</g>
<g>
<title>futex_wake (40 samples, 1.35%)</title><rect x="231.8" y="771.0" width="16.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="234.8" y="782.0"></text>
</g>
<g>
<title>mark_wake_futex (1 samples, 0.03%)</title><rect x="231.8" y="755.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="234.8" y="766.0"></text>
</g>
<g>
<title>wake_q_add (1 samples, 0.03%)</title><rect x="231.8" y="739.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="234.8" y="750.0"></text>
</g>
<g>
<title>wake_up_q (39 samples, 1.32%)</title><rect x="232.2" y="755.0" width="15.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="235.2" y="766.0"></text>
</g>
<g>
<title>try_to_wake_up (39 samples, 1.32%)</title><rect x="232.2" y="739.0" width="15.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="235.2" y="750.0"></text>
</g>
<g>
<title>__lock_text_start (39 samples, 1.32%)</title><rect x="232.2" y="723.0" width="15.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="235.2" y="734.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.03%)</title><rect x="247.8" y="851.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="250.8" y="862.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.03%)</title><rect x="248.2" y="867.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="251.2" y="878.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ServiceImpl$$Lambda$68/16487378.run (1,631 samples, 55.14%)</title><rect x="248.6" y="979.0" width="650.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="251.6" y="990.0">ru/mail/polis/service/dogm/ServiceImpl$$Lambda$68/16487378.run</text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ServiceImpl.lambda$executeAsync$5 (1,631 samples, 55.14%)</title><rect x="248.6" y="963.0" width="650.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="251.6" y="974.0">ru/mail/polis/service/dogm/ServiceImpl.lambda$executeAsync$5</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (746 samples, 25.22%)</title><rect x="249.7" y="947.0" width="297.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="252.7" y="958.0">one/nio/http/HttpSession.sendResponse</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (700 samples, 23.66%)</title><rect x="250.9" y="931.0" width="279.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="253.9" y="942.0">one/nio/http/HttpSession.writeResponse</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (14 samples, 0.47%)</title><rect x="256.5" y="915.0" width="5.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="259.5" y="926.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (7 samples, 0.24%)</title><rect x="259.3" y="899.0" width="2.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="262.3" y="910.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (7 samples, 0.24%)</title><rect x="259.3" y="883.0" width="2.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="262.3" y="894.0"></text>
</g>
<g>
<title>java/lang/String.charAt (7 samples, 0.24%)</title><rect x="259.3" y="867.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="262.3" y="878.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (672 samples, 22.72%)</title><rect x="262.1" y="915.0" width="268.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="265.1" y="926.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (672 samples, 22.72%)</title><rect x="262.1" y="899.0" width="268.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="265.1" y="910.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (672 samples, 22.72%)</title><rect x="262.1" y="883.0" width="268.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="265.1" y="894.0">one/nio/net/Session$ArrayQueueItem.w..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (672 samples, 22.72%)</title><rect x="262.1" y="867.0" width="268.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="265.1" y="878.0">one/nio/net/JavaSocket.write</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.03%)</title><rect x="262.1" y="851.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="265.1" y="862.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="262.1" y="835.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="265.1" y="846.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="262.1" y="819.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="265.1" y="830.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="262.1" y="803.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="265.1" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="262.1" y="787.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="265.1" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (671 samples, 22.68%)</title><rect x="262.5" y="851.0" width="267.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="265.5" y="862.0">sun/nio/ch/SocketChannelImpl.write</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.03%)</title><rect x="262.5" y="835.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="265.5" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="262.5" y="819.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="265.5" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.03%)</title><rect x="262.5" y="803.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="265.5" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="262.5" y="787.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="265.5" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (664 samples, 22.45%)</title><rect x="262.9" y="835.0" width="264.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="265.9" y="846.0">sun/nio/ch/IOUtil.write</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (664 samples, 22.45%)</title><rect x="262.9" y="819.0" width="264.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="265.9" y="830.0">sun/nio/ch/IOUtil.write</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (664 samples, 22.45%)</title><rect x="262.9" y="803.0" width="264.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="265.9" y="814.0">sun/nio/ch/IOUtil.writeFromNativeBu..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (4 samples, 0.14%)</title><rect x="262.9" y="787.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="265.9" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (660 samples, 22.31%)</title><rect x="264.5" y="787.0" width="263.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="267.5" y="798.0">sun/nio/ch/SocketDispatcher.write</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (654 samples, 22.11%)</title><rect x="266.9" y="771.0" width="260.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="269.9" y="782.0">sun/nio/ch/FileDispatcherImpl.write0</text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (1 samples, 0.03%)</title><rect x="269.3" y="755.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="272.3" y="766.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (2 samples, 0.07%)</title><rect x="269.7" y="755.0" width="0.8" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="272.7" y="766.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.10%)</title><rect x="270.5" y="755.0" width="1.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="273.5" y="766.0"></text>
</g>
<g>
<title>__kernel_vsyscall (3 samples, 0.10%)</title><rect x="270.5" y="739.0" width="1.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="273.5" y="750.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (3 samples, 0.10%)</title><rect x="270.5" y="723.0" width="1.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="273.5" y="734.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (3 samples, 0.10%)</title><rect x="270.5" y="707.0" width="1.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="273.5" y="718.0"></text>
</g>
<g>
<title>__kernel_vsyscall (640 samples, 21.64%)</title><rect x="271.7" y="755.0" width="255.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="274.7" y="766.0">__kernel_vsyscall</text>
</g>
<g>
<title>entry_SYSENTER_32 (638 samples, 21.57%)</title><rect x="272.5" y="739.0" width="254.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="275.5" y="750.0">entry_SYSENTER_32</text>
</g>
<g>
<title>do_fast_syscall_32 (638 samples, 21.57%)</title><rect x="272.5" y="723.0" width="254.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="275.5" y="734.0">do_fast_syscall_32</text>
</g>
<g>
<title>exit_to_usermode_loop (40 samples, 1.35%)</title><rect x="272.9" y="707.0" width="15.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="275.9" y="718.0"></text>
</g>
<g>
<title>schedule (39 samples, 1.32%)</title><rect x="273.3" y="691.0" width="15.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="276.3" y="702.0"></text>
</g>
<g>
<title>__sched_text_start (39 samples, 1.32%)</title><rect x="273.3" y="675.0" width="15.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="276.3" y="686.0"></text>
</g>
<g>
<title>finish_task_switch (37 samples, 1.25%)</title><rect x="274.1" y="659.0" width="14.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="277.1" y="670.0"></text>
</g>
<g>
<title>sys_write (597 samples, 20.18%)</title><rect x="288.8" y="707.0" width="238.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="291.8" y="718.0">sys_write</text>
</g>
<g>
<title>__fdget_pos (5 samples, 0.17%)</title><rect x="289.2" y="691.0" width="2.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="292.2" y="702.0"></text>
</g>
<g>
<title>__fget_light (5 samples, 0.17%)</title><rect x="289.2" y="675.0" width="2.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="292.2" y="686.0"></text>
</g>
<g>
<title>__fget (5 samples, 0.17%)</title><rect x="289.2" y="659.0" width="2.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="292.2" y="670.0"></text>
</g>
<g>
<title>vfs_write (591 samples, 19.98%)</title><rect x="291.2" y="691.0" width="235.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="294.2" y="702.0">vfs_write</text>
</g>
<g>
<title>__fsnotify_parent (1 samples, 0.03%)</title><rect x="292.8" y="675.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="295.8" y="686.0"></text>
</g>
<g>
<title>__vfs_write (577 samples, 19.51%)</title><rect x="293.2" y="675.0" width="230.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="296.2" y="686.0">__vfs_write</text>
</g>
<g>
<title>iov_iter_init (1 samples, 0.03%)</title><rect x="293.2" y="659.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="296.2" y="670.0"></text>
</g>
<g>
<title>new_sync_write (575 samples, 19.44%)</title><rect x="293.6" y="659.0" width="229.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="296.6" y="670.0">new_sync_write</text>
</g>
<g>
<title>sock_write_iter (573 samples, 19.37%)</title><rect x="294.4" y="643.0" width="228.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="297.4" y="654.0">sock_write_iter</text>
</g>
<g>
<title>inet_sendmsg (1 samples, 0.03%)</title><rect x="294.4" y="627.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="297.4" y="638.0"></text>
</g>
<g>
<title>sock_sendmsg (572 samples, 19.34%)</title><rect x="294.8" y="627.0" width="228.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="297.8" y="638.0">sock_sendmsg</text>
</g>
<g>
<title>apparmor_socket_sendmsg (1 samples, 0.03%)</title><rect x="295.2" y="611.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="298.2" y="622.0"></text>
</g>
<g>
<title>inet_sendmsg (570 samples, 19.27%)</title><rect x="295.6" y="611.0" width="227.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="298.6" y="622.0">inet_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg (568 samples, 19.20%)</title><rect x="295.6" y="595.0" width="226.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="298.6" y="606.0">tcp_sendmsg</text>
</g>
<g>
<title>_copy_from_iter_full (3 samples, 0.10%)</title><rect x="296.0" y="579.0" width="1.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="299.0" y="590.0"></text>
</g>
<g>
<title>lock_sock_nested (3 samples, 0.10%)</title><rect x="297.2" y="579.0" width="1.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="300.2" y="590.0"></text>
</g>
<g>
<title>__pv_queued_spin_unlock (1 samples, 0.03%)</title><rect x="297.2" y="563.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="300.2" y="574.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (2 samples, 0.07%)</title><rect x="297.6" y="563.0" width="0.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="300.6" y="574.0"></text>
</g>
<g>
<title>release_sock (1 samples, 0.03%)</title><rect x="298.4" y="579.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="301.4" y="590.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (1 samples, 0.03%)</title><rect x="298.4" y="563.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="301.4" y="574.0"></text>
</g>
<g>
<title>skb_put (1 samples, 0.03%)</title><rect x="298.8" y="579.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="301.8" y="590.0"></text>
</g>
<g>
<title>sock_zerocopy_put (1 samples, 0.03%)</title><rect x="299.2" y="579.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="302.2" y="590.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (3 samples, 0.10%)</title><rect x="299.6" y="579.0" width="1.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="302.6" y="590.0"></text>
</g>
<g>
<title>tcp_release_cb (1 samples, 0.03%)</title><rect x="300.8" y="579.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="303.8" y="590.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (553 samples, 18.70%)</title><rect x="301.2" y="579.0" width="220.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="304.2" y="590.0">tcp_sendmsg_locked</text>
</g>
<g>
<title>__check_object_size (3 samples, 0.10%)</title><rect x="303.2" y="563.0" width="1.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="306.2" y="574.0"></text>
</g>
<g>
<title>__virt_addr_valid (1 samples, 0.03%)</title><rect x="303.6" y="547.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="306.6" y="558.0"></text>
</g>
<g>
<title>page_address (1 samples, 0.03%)</title><rect x="304.0" y="547.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="307.0" y="558.0"></text>
</g>
<g>
<title>_copy_from_iter_full (6 samples, 0.20%)</title><rect x="304.4" y="563.0" width="2.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="307.4" y="574.0"></text>
</g>
<g>
<title>copyin (4 samples, 0.14%)</title><rect x="304.8" y="547.0" width="1.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="307.8" y="558.0"></text>
</g>
<g>
<title>__copy_user_ll (4 samples, 0.14%)</title><rect x="304.8" y="531.0" width="1.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="307.8" y="542.0"></text>
</g>
<g>
<title>iov_iter_advance (1 samples, 0.03%)</title><rect x="306.4" y="547.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="309.4" y="558.0"></text>
</g>
<g>
<title>sk_forced_mem_schedule (2 samples, 0.07%)</title><rect x="306.8" y="563.0" width="0.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="309.8" y="574.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (17 samples, 0.57%)</title><rect x="307.6" y="563.0" width="6.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="310.6" y="574.0"></text>
</g>
<g>
<title>__alloc_skb (15 samples, 0.51%)</title><rect x="307.6" y="547.0" width="6.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="310.6" y="558.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.45 (6 samples, 0.20%)</title><rect x="309.6" y="531.0" width="2.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="312.6" y="542.0"></text>
</g>
<g>
<title>__kmalloc_track_caller (3 samples, 0.10%)</title><rect x="309.6" y="515.0" width="1.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="312.6" y="526.0"></text>
</g>
<g>
<title>kmalloc_slab (1 samples, 0.03%)</title><rect x="310.4" y="499.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="313.4" y="510.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.03%)</title><rect x="310.8" y="515.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="313.8" y="526.0"></text>
</g>
<g>
<title>kmalloc_slab (2 samples, 0.07%)</title><rect x="311.2" y="515.0" width="0.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="314.2" y="526.0"></text>
</g>
<g>
<title>kmem_cache_alloc (4 samples, 0.14%)</title><rect x="312.0" y="531.0" width="1.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="315.0" y="542.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.45 (1 samples, 0.03%)</title><rect x="313.6" y="547.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="316.6" y="558.0"></text>
</g>
<g>
<title>kmem_cache_alloc (1 samples, 0.03%)</title><rect x="314.0" y="547.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="317.0" y="558.0"></text>
</g>
<g>
<title>skb_entail (3 samples, 0.10%)</title><rect x="314.4" y="563.0" width="1.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="317.4" y="574.0"></text>
</g>
<g>
<title>tcp_chrono_start (1 samples, 0.03%)</title><rect x="315.6" y="563.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="318.6" y="574.0"></text>
</g>
<g>
<title>tcp_current_mss (1 samples, 0.03%)</title><rect x="316.0" y="563.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="319.0" y="574.0"></text>
</g>
<g>
<title>tcp_push (506 samples, 17.11%)</title><rect x="316.4" y="563.0" width="201.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="319.4" y="574.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (506 samples, 17.11%)</title><rect x="316.4" y="547.0" width="201.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="319.4" y="558.0">__tcp_push_pending_frames</text>
</g>
<g>
<title>tcp_chrono_stop (1 samples, 0.03%)</title><rect x="316.4" y="531.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="319.4" y="542.0"></text>
</g>
<g>
<title>tcp_tso_segs (1 samples, 0.03%)</title><rect x="316.8" y="531.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="319.8" y="542.0"></text>
</g>
<g>
<title>tcp_write_xmit (504 samples, 17.04%)</title><rect x="317.2" y="531.0" width="201.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="320.2" y="542.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_transmit_skb (484 samples, 16.36%)</title><rect x="318.0" y="515.0" width="193.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="321.0" y="526.0">__tcp_transmit_skb</text>
</g>
<g>
<title>__skb_clone (1 samples, 0.03%)</title><rect x="320.4" y="499.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="323.4" y="510.0"></text>
</g>
<g>
<title>__tcp_select_window (1 samples, 0.03%)</title><rect x="320.8" y="499.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="323.8" y="510.0"></text>
</g>
<g>
<title>__tcp_v4_send_check (1 samples, 0.03%)</title><rect x="321.2" y="499.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="324.2" y="510.0"></text>
</g>
<g>
<title>ip_copy_addrs (2 samples, 0.07%)</title><rect x="321.6" y="499.0" width="0.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="324.6" y="510.0"></text>
</g>
<g>
<title>ip_local_out (1 samples, 0.03%)</title><rect x="322.4" y="499.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="325.4" y="510.0"></text>
</g>
<g>
<title>ip_queue_xmit (462 samples, 15.62%)</title><rect x="322.8" y="499.0" width="184.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="325.8" y="510.0">ip_queue_xmit</text>
</g>
<g>
<title>__sk_dst_check (1 samples, 0.03%)</title><rect x="322.8" y="483.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="325.8" y="494.0"></text>
</g>
<g>
<title>ip_local_out (460 samples, 15.55%)</title><rect x="323.2" y="483.0" width="183.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="326.2" y="494.0">ip_local_out</text>
</g>
<g>
<title>ip_output (460 samples, 15.55%)</title><rect x="323.2" y="467.0" width="183.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="326.2" y="478.0">ip_output</text>
</g>
<g>
<title>ip_finish_output2 (1 samples, 0.03%)</title><rect x="323.5" y="451.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="326.5" y="462.0"></text>
</g>
<g>
<title>ip_finish_output (458 samples, 15.48%)</title><rect x="323.9" y="451.0" width="182.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="326.9" y="462.0">ip_finish_output</text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (2 samples, 0.07%)</title><rect x="324.3" y="435.0" width="0.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="327.3" y="446.0"></text>
</g>
<g>
<title>ip_finish_output2 (455 samples, 15.38%)</title><rect x="325.1" y="435.0" width="181.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="328.1" y="446.0">ip_finish_output2</text>
</g>
<g>
<title>__local_bh_enable_ip (404 samples, 13.66%)</title><rect x="328.3" y="419.0" width="161.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="331.3" y="430.0">__local_bh_enable_ip</text>
</g>
<g>
<title>do_softirq.part.15 (403 samples, 13.62%)</title><rect x="328.7" y="403.0" width="160.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="331.7" y="414.0">do_softirq.part.15</text>
</g>
<g>
<title>do_softirq_own_stack (402 samples, 13.59%)</title><rect x="329.1" y="387.0" width="160.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="332.1" y="398.0">do_softirq_own_stack</text>
</g>
<g>
<title>call_on_stack (402 samples, 13.59%)</title><rect x="329.1" y="371.0" width="160.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="332.1" y="382.0">call_on_stack</text>
</g>
<g>
<title>__do_softirq (402 samples, 13.59%)</title><rect x="329.1" y="355.0" width="160.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="332.1" y="366.0">__do_softirq</text>
</g>
<g>
<title>blk_done_softirq (2 samples, 0.07%)</title><rect x="332.3" y="339.0" width="0.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="335.3" y="350.0"></text>
</g>
<g>
<title>scsi_softirq_done (2 samples, 0.07%)</title><rect x="332.3" y="323.0" width="0.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="335.3" y="334.0"></text>
</g>
<g>
<title>scsi_finish_command (2 samples, 0.07%)</title><rect x="332.3" y="307.0" width="0.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="335.3" y="318.0"></text>
</g>
<g>
<title>scsi_io_completion (2 samples, 0.07%)</title><rect x="332.3" y="291.0" width="0.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="335.3" y="302.0"></text>
</g>
<g>
<title>scsi_end_request (2 samples, 0.07%)</title><rect x="332.3" y="275.0" width="0.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="335.3" y="286.0"></text>
</g>
<g>
<title>blk_update_request (1 samples, 0.03%)</title><rect x="332.3" y="259.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="335.3" y="270.0"></text>
</g>
<g>
<title>scsi_run_queue (1 samples, 0.03%)</title><rect x="332.7" y="259.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="335.7" y="270.0"></text>
</g>
<g>
<title>blk_run_queue (1 samples, 0.03%)</title><rect x="332.7" y="243.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="335.7" y="254.0"></text>
</g>
<g>
<title>__blk_run_queue (1 samples, 0.03%)</title><rect x="332.7" y="227.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="335.7" y="238.0"></text>
</g>
<g>
<title>scsi_request_fn (1 samples, 0.03%)</title><rect x="332.7" y="211.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="335.7" y="222.0"></text>
</g>
<g>
<title>scsi_dispatch_cmd (1 samples, 0.03%)</title><rect x="332.7" y="195.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="335.7" y="206.0"></text>
</g>
<g>
<title>ata_scsi_queuecmd (1 samples, 0.03%)</title><rect x="332.7" y="179.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="335.7" y="190.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="332.7" y="163.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="335.7" y="174.0"></text>
</g>
<g>
<title>net_rx_action (392 samples, 13.25%)</title><rect x="333.1" y="339.0" width="156.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="336.1" y="350.0">net_rx_action</text>
</g>
<g>
<title>__kfree_skb_flush (1 samples, 0.03%)</title><rect x="333.5" y="323.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="336.5" y="334.0"></text>
</g>
<g>
<title>process_backlog (390 samples, 13.18%)</title><rect x="333.9" y="323.0" width="155.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="336.9" y="334.0">process_backlog</text>
</g>
<g>
<title>__netif_receive_skb (387 samples, 13.08%)</title><rect x="335.1" y="307.0" width="154.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="338.1" y="318.0">__netif_receive_skb</text>
</g>
<g>
<title>__netif_receive_skb_core (386 samples, 13.05%)</title><rect x="335.5" y="291.0" width="154.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="338.5" y="302.0">__netif_receive_skb..</text>
</g>
<g>
<title>ip_rcv (380 samples, 12.85%)</title><rect x="337.1" y="275.0" width="151.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="340.1" y="286.0">ip_rcv</text>
</g>
<g>
<title>ip_rcv_finish (379 samples, 12.81%)</title><rect x="337.5" y="259.0" width="151.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="340.5" y="270.0">ip_rcv_finish</text>
</g>
<g>
<title>ip_local_deliver (378 samples, 12.78%)</title><rect x="337.5" y="243.0" width="150.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="340.5" y="254.0">ip_local_deliver</text>
</g>
<g>
<title>ip_local_deliver_finish (377 samples, 12.75%)</title><rect x="337.5" y="227.0" width="150.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="340.5" y="238.0">ip_local_deliver_fi..</text>
</g>
<g>
<title>raw_local_deliver (1 samples, 0.03%)</title><rect x="337.9" y="211.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="340.9" y="222.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (1 samples, 0.03%)</title><rect x="338.3" y="211.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="341.3" y="222.0"></text>
</g>
<g>
<title>tcp_v4_rcv (374 samples, 12.64%)</title><rect x="338.7" y="211.0" width="149.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="341.7" y="222.0">tcp_v4_rcv</text>
</g>
<g>
<title>__inet_lookup_established (7 samples, 0.24%)</title><rect x="341.9" y="195.0" width="2.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="344.9" y="206.0"></text>
</g>
<g>
<title>inet_ehashfn (2 samples, 0.07%)</title><rect x="344.7" y="195.0" width="0.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="347.7" y="206.0"></text>
</g>
<g>
<title>security_sock_rcv_skb (1 samples, 0.03%)</title><rect x="345.5" y="195.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="348.5" y="206.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (4 samples, 0.14%)</title><rect x="345.9" y="195.0" width="1.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="348.9" y="206.0"></text>
</g>
<g>
<title>apparmor_socket_sock_rcv_skb (2 samples, 0.07%)</title><rect x="346.7" y="179.0" width="0.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="349.7" y="190.0"></text>
</g>
<g>
<title>tcp_parse_md5sig_option (1 samples, 0.03%)</title><rect x="347.5" y="195.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="350.5" y="206.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (349 samples, 11.80%)</title><rect x="347.9" y="195.0" width="139.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="350.9" y="206.0">tcp_v4_do_rcv</text>
</g>
<g>
<title>tcp_ack (1 samples, 0.03%)</title><rect x="347.9" y="179.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="350.9" y="190.0"></text>
</g>
<g>
<title>tcp_check_space (1 samples, 0.03%)</title><rect x="348.3" y="179.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="351.3" y="190.0"></text>
</g>
<g>
<title>tcp_rcv_established (346 samples, 11.70%)</title><rect x="348.7" y="179.0" width="138.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="351.7" y="190.0">tcp_rcv_established</text>
</g>
<g>
<title>__tcp_ack_snd_check (13 samples, 0.44%)</title><rect x="350.7" y="163.0" width="5.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="353.7" y="174.0"></text>
</g>
<g>
<title>sk_reset_timer (1 samples, 0.03%)</title><rect x="350.7" y="147.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="353.7" y="158.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (12 samples, 0.41%)</title><rect x="351.1" y="147.0" width="4.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="354.1" y="158.0"></text>
</g>
<g>
<title>sk_reset_timer (12 samples, 0.41%)</title><rect x="351.1" y="131.0" width="4.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="354.1" y="142.0"></text>
</g>
<g>
<title>lock_timer_base (1 samples, 0.03%)</title><rect x="351.1" y="115.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="354.1" y="126.0"></text>
</g>
<g>
<title>mod_timer (11 samples, 0.37%)</title><rect x="351.5" y="115.0" width="4.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="354.5" y="126.0"></text>
</g>
<g>
<title>__lock_text_start (8 samples, 0.27%)</title><rect x="352.7" y="99.0" width="3.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="355.7" y="110.0"></text>
</g>
<g>
<title>bictcp_cong_avoid (1 samples, 0.03%)</title><rect x="355.9" y="163.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="358.9" y="174.0"></text>
</g>
<g>
<title>get_seconds (2 samples, 0.07%)</title><rect x="356.3" y="163.0" width="0.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="359.3" y="174.0"></text>
</g>
<g>
<title>sched_clock (1 samples, 0.03%)</title><rect x="357.1" y="163.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="360.1" y="174.0"></text>
</g>
<g>
<title>sched_clock_cpu (6 samples, 0.20%)</title><rect x="357.5" y="163.0" width="2.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="360.5" y="174.0"></text>
</g>
<g>
<title>sched_clock (6 samples, 0.20%)</title><rect x="357.5" y="147.0" width="2.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="360.5" y="158.0"></text>
</g>
<g>
<title>kvm_sched_clock_read (4 samples, 0.14%)</title><rect x="357.5" y="131.0" width="1.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="360.5" y="142.0"></text>
</g>
<g>
<title>pvclock_clocksource_read (3 samples, 0.10%)</title><rect x="357.9" y="115.0" width="1.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="360.9" y="126.0"></text>
</g>
<g>
<title>pvclock_clocksource_read (2 samples, 0.07%)</title><rect x="359.1" y="131.0" width="0.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="362.1" y="142.0"></text>
</g>
<g>
<title>sock_def_readable (1 samples, 0.03%)</title><rect x="359.9" y="163.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="362.9" y="174.0"></text>
</g>
<g>
<title>tcp_ack (39 samples, 1.32%)</title><rect x="360.3" y="163.0" width="15.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="363.3" y="174.0"></text>
</g>
<g>
<title>bictcp_acked (1 samples, 0.03%)</title><rect x="364.6" y="147.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="367.6" y="158.0"></text>
</g>
<g>
<title>bictcp_cong_avoid (1 samples, 0.03%)</title><rect x="365.0" y="147.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="368.0" y="158.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (22 samples, 0.74%)</title><rect x="365.4" y="147.0" width="8.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="368.4" y="158.0"></text>
</g>
<g>
<title>__kfree_skb (7 samples, 0.24%)</title><rect x="368.6" y="131.0" width="2.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="371.6" y="142.0"></text>
</g>
<g>
<title>kfree_skbmem (3 samples, 0.10%)</title><rect x="368.6" y="115.0" width="1.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="371.6" y="126.0"></text>
</g>
<g>
<title>kmem_cache_free (3 samples, 0.10%)</title><rect x="368.6" y="99.0" width="1.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="371.6" y="110.0"></text>
</g>
<g>
<title>__slab_free (1 samples, 0.03%)</title><rect x="369.4" y="83.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="372.4" y="94.0"></text>
</g>
<g>
<title>skb_release_all (4 samples, 0.14%)</title><rect x="369.8" y="115.0" width="1.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="372.8" y="126.0"></text>
</g>
<g>
<title>skb_release_data (3 samples, 0.10%)</title><rect x="369.8" y="99.0" width="1.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="372.8" y="110.0"></text>
</g>
<g>
<title>skb_free_head (3 samples, 0.10%)</title><rect x="369.8" y="83.0" width="1.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="372.8" y="94.0"></text>
</g>
<g>
<title>kfree (3 samples, 0.10%)</title><rect x="369.8" y="67.0" width="1.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="372.8" y="78.0"></text>
</g>
<g>
<title>__slab_free (3 samples, 0.10%)</title><rect x="369.8" y="51.0" width="1.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="372.8" y="62.0"></text>
</g>
<g>
<title>skb_release_head_state (1 samples, 0.03%)</title><rect x="371.0" y="99.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="374.0" y="110.0"></text>
</g>
<g>
<title>bictcp_acked (1 samples, 0.03%)</title><rect x="371.4" y="131.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="374.4" y="142.0"></text>
</g>
<g>
<title>jiffies_to_usecs (3 samples, 0.10%)</title><rect x="371.8" y="131.0" width="1.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="374.8" y="142.0"></text>
</g>
<g>
<title>rb_erase (1 samples, 0.03%)</title><rect x="373.0" y="131.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="376.0" y="142.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.41 (1 samples, 0.03%)</title><rect x="373.4" y="131.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="376.4" y="142.0"></text>
</g>
<g>
<title>tcp_chrono_stop (1 samples, 0.03%)</title><rect x="373.8" y="131.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="376.8" y="142.0"></text>
</g>
<g>
<title>tcp_rate_gen (3 samples, 0.10%)</title><rect x="374.2" y="147.0" width="1.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="377.2" y="158.0"></text>
</g>
<g>
<title>tcp_update_pacing_rate (1 samples, 0.03%)</title><rect x="375.4" y="147.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="378.4" y="158.0"></text>
</g>
<g>
<title>tcp_check_space (3 samples, 0.10%)</title><rect x="375.8" y="163.0" width="1.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="378.8" y="174.0"></text>
</g>
<g>
<title>tcp_data_queue (271 samples, 9.16%)</title><rect x="377.0" y="163.0" width="108.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="380.0" y="174.0">tcp_data_queue</text>
</g>
<g>
<title>sock_def_readable (267 samples, 9.03%)</title><rect x="377.8" y="147.0" width="106.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="380.8" y="158.0">sock_def_read..</text>
</g>
<g>
<title>__wake_up_sync_key (262 samples, 8.86%)</title><rect x="379.8" y="131.0" width="104.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="382.8" y="142.0">__wake_up_sy..</text>
</g>
<g>
<title>__wake_up_common_lock (262 samples, 8.86%)</title><rect x="379.8" y="115.0" width="104.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="382.8" y="126.0">__wake_up_co..</text>
</g>
<g>
<title>__lock_text_start (262 samples, 8.86%)</title><rect x="379.8" y="99.0" width="104.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="382.8" y="110.0">__lock_text_..</text>
</g>
<g>
<title>tcp_queue_rcv (2 samples, 0.07%)</title><rect x="484.3" y="147.0" width="0.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="487.3" y="158.0"></text>
</g>
<g>
<title>tcp_event_data_recv (1 samples, 0.03%)</title><rect x="485.1" y="163.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="488.1" y="174.0"></text>
</g>
<g>
<title>tcp_queue_rcv (2 samples, 0.07%)</title><rect x="485.5" y="163.0" width="0.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="488.5" y="174.0"></text>
</g>
<g>
<title>tcp_update_pacing_rate (1 samples, 0.03%)</title><rect x="486.3" y="163.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="489.3" y="174.0"></text>
</g>
<g>
<title>tcp_urg (1 samples, 0.03%)</title><rect x="486.7" y="179.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="489.7" y="190.0"></text>
</g>
<g>
<title>tcp_v4_inbound_md5_hash (2 samples, 0.07%)</title><rect x="487.1" y="195.0" width="0.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="490.1" y="206.0"></text>
</g>
<g>
<title>tcp_md5_do_lookup (2 samples, 0.07%)</title><rect x="487.1" y="179.0" width="0.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="490.1" y="190.0"></text>
</g>
<g>
<title>raw_local_deliver (1 samples, 0.03%)</title><rect x="487.9" y="227.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="490.9" y="238.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (1 samples, 0.03%)</title><rect x="488.3" y="243.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="491.3" y="254.0"></text>
</g>
<g>
<title>ip_rcv_finish (2 samples, 0.07%)</title><rect x="488.7" y="275.0" width="0.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="491.7" y="286.0"></text>
</g>
<g>
<title>dev_queue_xmit (43 samples, 1.45%)</title><rect x="489.5" y="419.0" width="17.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="492.5" y="430.0"></text>
</g>
<g>
<title>__dev_queue_xmit (43 samples, 1.45%)</title><rect x="489.5" y="403.0" width="17.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="492.5" y="414.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.03%)</title><rect x="492.7" y="387.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="495.7" y="398.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (19 samples, 0.64%)</title><rect x="493.1" y="387.0" width="7.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="496.1" y="398.0"></text>
</g>
<g>
<title>eth_type_trans (2 samples, 0.07%)</title><rect x="493.9" y="371.0" width="0.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="496.9" y="382.0"></text>
</g>
<g>
<title>loopback_xmit (12 samples, 0.41%)</title><rect x="494.7" y="371.0" width="4.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="497.7" y="382.0"></text>
</g>
<g>
<title>eth_type_trans (1 samples, 0.03%)</title><rect x="495.5" y="355.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="498.5" y="366.0"></text>
</g>
<g>
<title>netif_rx (7 samples, 0.24%)</title><rect x="495.9" y="355.0" width="2.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="498.9" y="366.0"></text>
</g>
<g>
<title>enqueue_to_backlog (1 samples, 0.03%)</title><rect x="495.9" y="339.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="498.9" y="350.0"></text>
</g>
<g>
<title>netif_rx_internal (6 samples, 0.20%)</title><rect x="496.3" y="339.0" width="2.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="499.3" y="350.0"></text>
</g>
<g>
<title>enqueue_to_backlog (5 samples, 0.17%)</title><rect x="496.7" y="323.0" width="2.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="499.7" y="334.0"></text>
</g>
<g>
<title>sk_free (1 samples, 0.03%)</title><rect x="498.7" y="355.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="501.7" y="366.0"></text>
</g>
<g>
<title>tcp_wfree (1 samples, 0.03%)</title><rect x="499.1" y="355.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="502.1" y="366.0"></text>
</g>
<g>
<title>netif_rx (3 samples, 0.10%)</title><rect x="499.5" y="371.0" width="1.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="502.5" y="382.0"></text>
</g>
<g>
<title>loopback_xmit (1 samples, 0.03%)</title><rect x="500.7" y="387.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="503.7" y="398.0"></text>
</g>
<g>
<title>netdev_pick_tx (6 samples, 0.20%)</title><rect x="501.1" y="387.0" width="2.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="504.1" y="398.0"></text>
</g>
<g>
<title>validate_xmit_skb (4 samples, 0.14%)</title><rect x="503.5" y="387.0" width="1.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="506.5" y="398.0"></text>
</g>
<g>
<title>netif_skb_features (2 samples, 0.07%)</title><rect x="503.5" y="371.0" width="0.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="506.5" y="382.0"></text>
</g>
<g>
<title>skb_network_protocol (1 samples, 0.03%)</title><rect x="504.3" y="371.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="507.3" y="382.0"></text>
</g>
<g>
<title>validate_xmit_xfrm (1 samples, 0.03%)</title><rect x="504.7" y="371.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="507.7" y="382.0"></text>
</g>
<g>
<title>validate_xmit_xfrm (4 samples, 0.14%)</title><rect x="505.1" y="387.0" width="1.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="508.1" y="398.0"></text>
</g>
<g>
<title>ipv4_dst_check (1 samples, 0.03%)</title><rect x="506.7" y="483.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="509.7" y="494.0"></text>
</g>
<g>
<title>skb_clone (7 samples, 0.24%)</title><rect x="507.1" y="499.0" width="2.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="510.1" y="510.0"></text>
</g>
<g>
<title>__skb_clone (7 samples, 0.24%)</title><rect x="507.1" y="483.0" width="2.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="510.1" y="494.0"></text>
</g>
<g>
<title>__copy_skb_header (6 samples, 0.20%)</title><rect x="507.5" y="467.0" width="2.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="510.5" y="478.0"></text>
</g>
<g>
<title>tcp_v4_send_check (3 samples, 0.10%)</title><rect x="509.8" y="499.0" width="1.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="512.8" y="510.0"></text>
</g>
<g>
<title>__tcp_v4_send_check (3 samples, 0.10%)</title><rect x="509.8" y="483.0" width="1.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="512.8" y="494.0"></text>
</g>
<g>
<title>sched_clock_cpu (3 samples, 0.10%)</title><rect x="511.0" y="515.0" width="1.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="514.0" y="526.0"></text>
</g>
<g>
<title>kvm_sched_clock_read (1 samples, 0.03%)</title><rect x="511.0" y="499.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="514.0" y="510.0"></text>
</g>
<g>
<title>sched_clock (2 samples, 0.07%)</title><rect x="511.4" y="499.0" width="0.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="514.4" y="510.0"></text>
</g>
<g>
<title>kvm_sched_clock_read (2 samples, 0.07%)</title><rect x="511.4" y="483.0" width="0.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="514.4" y="494.0"></text>
</g>
<g>
<title>pvclock_clocksource_read (2 samples, 0.07%)</title><rect x="511.4" y="467.0" width="0.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="514.4" y="478.0"></text>
</g>
<g>
<title>skb_clone (1 samples, 0.03%)</title><rect x="512.2" y="515.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="515.2" y="526.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (9 samples, 0.30%)</title><rect x="512.6" y="515.0" width="3.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="515.6" y="526.0"></text>
</g>
<g>
<title>tcp_rearm_rto (9 samples, 0.30%)</title><rect x="512.6" y="499.0" width="3.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="515.6" y="510.0"></text>
</g>
<g>
<title>tcp_rearm_rto.part.60 (9 samples, 0.30%)</title><rect x="512.6" y="483.0" width="3.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="515.6" y="494.0"></text>
</g>
<g>
<title>sk_reset_timer (9 samples, 0.30%)</title><rect x="512.6" y="467.0" width="3.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="515.6" y="478.0"></text>
</g>
<g>
<title>mod_timer (9 samples, 0.30%)</title><rect x="512.6" y="451.0" width="3.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="515.6" y="462.0"></text>
</g>
<g>
<title>__lock_text_start (8 samples, 0.27%)</title><rect x="513.0" y="435.0" width="3.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="516.0" y="446.0"></text>
</g>
<g>
<title>tcp_rbtree_insert (2 samples, 0.07%)</title><rect x="516.2" y="515.0" width="0.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="519.2" y="526.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (1 samples, 0.03%)</title><rect x="517.0" y="515.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="520.0" y="526.0"></text>
</g>
<g>
<title>mod_timer (1 samples, 0.03%)</title><rect x="517.0" y="499.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="520.0" y="510.0"></text>
</g>
<g>
<title>tcp_tso_segs (1 samples, 0.03%)</title><rect x="517.4" y="515.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="520.4" y="526.0"></text>
</g>
<g>
<title>tcp_v4_send_check (1 samples, 0.03%)</title><rect x="517.8" y="515.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="520.8" y="526.0"></text>
</g>
<g>
<title>tcp_send_mss (9 samples, 0.30%)</title><rect x="518.2" y="563.0" width="3.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="521.2" y="574.0"></text>
</g>
<g>
<title>tcp_current_mss (9 samples, 0.30%)</title><rect x="518.2" y="547.0" width="3.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="521.2" y="558.0"></text>
</g>
<g>
<title>ipv4_mtu (2 samples, 0.07%)</title><rect x="519.0" y="531.0" width="0.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="522.0" y="542.0"></text>
</g>
<g>
<title>tcp_established_options (4 samples, 0.14%)</title><rect x="519.8" y="531.0" width="1.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="522.8" y="542.0"></text>
</g>
<g>
<title>tcp_v4_md5_lookup (1 samples, 0.03%)</title><rect x="521.0" y="515.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="524.0" y="526.0"></text>
</g>
<g>
<title>tcp_md5_do_lookup (1 samples, 0.03%)</title><rect x="521.0" y="499.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="524.0" y="510.0"></text>
</g>
<g>
<title>tcp_v4_md5_lookup (1 samples, 0.03%)</title><rect x="521.4" y="531.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="524.4" y="542.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (1 samples, 0.03%)</title><rect x="521.8" y="579.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="524.8" y="590.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (2 samples, 0.07%)</title><rect x="522.2" y="595.0" width="0.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="525.2" y="606.0"></text>
</g>
<g>
<title>sock_write_iter (1 samples, 0.03%)</title><rect x="523.0" y="659.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="526.0" y="670.0"></text>
</g>
<g>
<title>fsnotify (1 samples, 0.03%)</title><rect x="523.4" y="675.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="526.4" y="686.0"></text>
</g>
<g>
<title>rw_verify_area (8 samples, 0.27%)</title><rect x="523.8" y="675.0" width="3.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="526.8" y="686.0"></text>
</g>
<g>
<title>security_file_permission (7 samples, 0.24%)</title><rect x="524.2" y="659.0" width="2.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="527.2" y="670.0"></text>
</g>
<g>
<title>apparmor_file_permission (6 samples, 0.20%)</title><rect x="524.6" y="643.0" width="2.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="527.6" y="654.0"></text>
</g>
<g>
<title>common_file_perm (6 samples, 0.20%)</title><rect x="524.6" y="627.0" width="2.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="527.6" y="638.0"></text>
</g>
<g>
<title>aa_file_perm (4 samples, 0.14%)</title><rect x="525.4" y="611.0" width="1.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="528.4" y="622.0"></text>
</g>
<g>
<title>__write (1 samples, 0.03%)</title><rect x="527.0" y="755.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="530.0" y="766.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="527.4" y="755.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="530.4" y="766.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="527.4" y="739.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="530.4" y="750.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="527.4" y="723.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="530.4" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginWrite (6 samples, 0.20%)</title><rect x="527.8" y="835.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="530.8" y="846.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (43 samples, 1.45%)</title><rect x="530.2" y="931.0" width="17.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="533.2" y="942.0"></text>
</g>
<g>
<title>__vdso_gettimeofday (4 samples, 0.14%)</title><rect x="532.2" y="915.0" width="1.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="535.2" y="926.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="533.8" y="915.0" width="0.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="536.8" y="926.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.07%)</title><rect x="534.2" y="915.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="537.2" y="926.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.07%)</title><rect x="534.2" y="899.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="537.2" y="910.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.07%)</title><rect x="534.2" y="883.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="537.2" y="894.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.07%)</title><rect x="534.2" y="867.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="537.2" y="878.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (2 samples, 0.07%)</title><rect x="534.2" y="851.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="537.2" y="862.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (2 samples, 0.07%)</title><rect x="534.2" y="835.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="537.2" y="846.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="534.6" y="819.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="537.6" y="830.0"></text>
</g>
<g>
<title>ObjectSynchronizer::slow_exit(oopDesc*, BasicLock*, Thread*) (1 samples, 0.03%)</title><rect x="534.6" y="803.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="537.6" y="814.0"></text>
</g>
<g>
<title>JavaThread::is_lock_owned(unsigned char*) const (1 samples, 0.03%)</title><rect x="534.6" y="787.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="537.6" y="798.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (31 samples, 1.05%)</title><rect x="535.0" y="915.0" width="12.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="538.0" y="926.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.10%)</title><rect x="536.6" y="899.0" width="1.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="539.6" y="910.0"></text>
</g>
<g>
<title>__kernel_vsyscall (3 samples, 0.10%)</title><rect x="536.6" y="883.0" width="1.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="539.6" y="894.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (3 samples, 0.10%)</title><rect x="536.6" y="867.0" width="1.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="539.6" y="878.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (3 samples, 0.10%)</title><rect x="536.6" y="851.0" width="1.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="539.6" y="862.0"></text>
</g>
<g>
<title>__kernel_vsyscall (20 samples, 0.68%)</title><rect x="537.8" y="899.0" width="7.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="540.8" y="910.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (17 samples, 0.57%)</title><rect x="539.0" y="883.0" width="6.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="542.0" y="894.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (17 samples, 0.57%)</title><rect x="539.0" y="867.0" width="6.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="542.0" y="878.0"></text>
</g>
<g>
<title>_copy_to_user (2 samples, 0.07%)</title><rect x="539.8" y="851.0" width="0.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="542.8" y="862.0"></text>
</g>
<g>
<title>do_gettimeofday (3 samples, 0.10%)</title><rect x="540.6" y="851.0" width="1.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="543.6" y="862.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="541.8" y="851.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="544.8" y="862.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="541.8" y="835.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="544.8" y="846.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.03%)</title><rect x="541.8" y="819.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="544.8" y="830.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="541.8" y="803.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="544.8" y="814.0"></text>
</g>
<g>
<title>sys_gettimeofday (9 samples, 0.30%)</title><rect x="542.2" y="851.0" width="3.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="545.2" y="862.0"></text>
</g>
<g>
<title>__copy_user_ll (2 samples, 0.07%)</title><rect x="542.2" y="835.0" width="0.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="545.2" y="846.0"></text>
</g>
<g>
<title>do_gettimeofday (7 samples, 0.24%)</title><rect x="543.0" y="835.0" width="2.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="546.0" y="846.0"></text>
</g>
<g>
<title>__getnstimeofday64 (7 samples, 0.24%)</title><rect x="543.0" y="819.0" width="2.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="546.0" y="830.0"></text>
</g>
<g>
<title>kvm_clock_get_cycles (6 samples, 0.20%)</title><rect x="543.4" y="803.0" width="2.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="546.4" y="814.0"></text>
</g>
<g>
<title>pvclock_clocksource_read (6 samples, 0.20%)</title><rect x="543.4" y="787.0" width="2.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="546.4" y="798.0"></text>
</g>
<g>
<title>__vdso_gettimeofday (4 samples, 0.14%)</title><rect x="545.7" y="899.0" width="1.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="548.7" y="910.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ServiceImpl$$Lambda$67/3594198.act (297 samples, 10.04%)</title><rect x="547.3" y="947.0" width="118.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="550.3" y="958.0">ru/mail/polis/..</text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ServiceImpl.lambda$entity$1 (297 samples, 10.04%)</title><rect x="547.3" y="931.0" width="118.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="550.3" y="942.0">ru/mail/polis/..</text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ServiceImpl.get (297 samples, 10.04%)</title><rect x="547.3" y="915.0" width="118.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="550.3" y="926.0">ru/mail/polis/..</text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.get (297 samples, 10.04%)</title><rect x="547.3" y="899.0" width="118.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="550.3" y="910.0">ru/mail/polis/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.toString (3 samples, 0.10%)</title><rect x="550.9" y="883.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="553.9" y="894.0"></text>
</g>
<g>
<title>java/lang/Class.getName (3 samples, 0.10%)</title><rect x="550.9" y="867.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="553.9" y="878.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="551.7" y="851.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="554.7" y="862.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="551.7" y="835.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="554.7" y="846.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="551.7" y="819.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="554.7" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.07%)</title><rect x="552.1" y="883.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="555.1" y="894.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.07%)</title><rect x="552.1" y="867.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="555.1" y="878.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.07%)</title><rect x="552.1" y="851.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="555.1" y="862.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.07%)</title><rect x="552.1" y="835.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="555.1" y="846.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.07%)</title><rect x="552.1" y="819.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="555.1" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.07%)</title><rect x="552.1" y="803.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="555.1" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.07%)</title><rect x="552.1" y="787.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="555.1" y="798.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="552.5" y="771.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="555.5" y="782.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="552.5" y="755.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="555.5" y="766.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="552.5" y="739.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="555.5" y="750.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (280 samples, 9.47%)</title><rect x="552.9" y="883.0" width="111.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="555.9" y="894.0">org/rocksdb/R..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (279 samples, 9.43%)</title><rect x="553.3" y="867.0" width="111.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="556.3" y="878.0">org/rocksdb/R..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (252 samples, 8.52%)</title><rect x="553.7" y="851.0" width="100.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="556.7" y="862.0">Java_org_roc..</text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (1 samples, 0.03%)</title><rect x="554.9" y="835.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="557.9" y="846.0"></text>
</g>
<g>
<title>/usr/lib/i386-linux-gnu/libstdc++.so.6.0.25 (1 samples, 0.03%)</title><rect x="555.3" y="835.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="558.3" y="846.0"></text>
</g>
<g>
<title>free (12 samples, 0.41%)</title><rect x="555.7" y="835.0" width="4.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="558.7" y="846.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="560.1" y="819.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="563.1" y="830.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="560.1" y="803.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="563.1" y="814.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="560.1" y="787.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="563.1" y="798.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="560.1" y="771.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="563.1" y="782.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.03%)</title><rect x="560.1" y="755.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="563.1" y="766.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="560.1" y="739.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="563.1" y="750.0"></text>
</g>
<g>
<title>malloc (5 samples, 0.17%)</title><rect x="560.5" y="835.0" width="2.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="563.5" y="846.0"></text>
</g>
<g>
<title>operator delete(void*) (3 samples, 0.10%)</title><rect x="562.5" y="835.0" width="1.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="565.5" y="846.0"></text>
</g>
<g>
<title>operator delete[](void*) (3 samples, 0.10%)</title><rect x="563.7" y="835.0" width="1.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="566.7" y="846.0"></text>
</g>
<g>
<title>operator new(unsigned int) (1 samples, 0.03%)</title><rect x="564.9" y="835.0" width="0.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="567.9" y="846.0"></text>
</g>
<g>
<title>operator new[](unsigned int) (2 samples, 0.07%)</title><rect x="565.3" y="835.0" width="0.8" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="568.3" y="846.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, std::string*) (4 samples, 0.14%)</title><rect x="566.1" y="835.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="569.1" y="846.0"></text>
</g>
<g>
<title>rocksdb::JniUtil::createJavaByteArrayWithSizeCheck(JNIEnv_*, char const*, unsigned int) (1 samples, 0.03%)</title><rect x="567.7" y="835.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="570.7" y="846.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (206 samples, 6.96%)</title><rect x="568.1" y="835.0" width="82.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="571.1" y="846.0">rocksdb_g..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;CardTableBarrierSet::AccessBarrier&lt;1097812ull, CardTableBarrierSet&gt;, (AccessInternal::BarrierType)2, 1097812ull&gt;::oop_access_barrier(void*) (1 samples, 0.03%)</title><rect x="569.3" y="819.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="572.3" y="830.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.158] (3 samples, 0.10%)</title><rect x="569.7" y="819.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="572.7" y="830.0"></text>
</g>
<g>
<title>_init (1 samples, 0.03%)</title><rect x="570.9" y="819.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="573.9" y="830.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.07%)</title><rect x="571.3" y="819.0" width="0.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="574.3" y="830.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (3 samples, 0.10%)</title><rect x="572.1" y="819.0" width="1.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="575.1" y="830.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.03%)</title><rect x="572.5" y="803.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="575.5" y="814.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="572.9" y="803.0" width="0.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="575.9" y="814.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (7 samples, 0.24%)</title><rect x="573.3" y="819.0" width="2.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="576.3" y="830.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.07%)</title><rect x="573.3" y="803.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="576.3" y="814.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (4 samples, 0.14%)</title><rect x="574.1" y="803.0" width="1.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="577.1" y="814.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (4 samples, 0.14%)</title><rect x="574.1" y="787.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="577.1" y="798.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned int) (1 samples, 0.03%)</title><rect x="575.7" y="803.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="578.7" y="814.0"></text>
</g>
<g>
<title>jni_NewByteArray (1 samples, 0.03%)</title><rect x="576.1" y="819.0" width="0.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="579.1" y="830.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, std::string*) (169 samples, 5.71%)</title><rect x="576.5" y="819.0" width="67.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="579.5" y="830.0">rocksdb..</text>
</g>
<g>
<title>rocksdb::Cleanable::Cleanable() (1 samples, 0.03%)</title><rect x="576.9" y="803.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="579.9" y="814.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (1 samples, 0.03%)</title><rect x="577.3" y="803.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="580.3" y="814.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, std::string*) (164 samples, 5.54%)</title><rect x="577.7" y="803.0" width="65.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="580.7" y="814.0">rocksdb..</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (163 samples, 5.51%)</title><rect x="577.7" y="787.0" width="65.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="580.7" y="798.0">rocksdb..</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (1 samples, 0.03%)</title><rect x="578.1" y="771.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="581.1" y="782.0"></text>
</g>
<g>
<title>_init (2 samples, 0.07%)</title><rect x="578.5" y="771.0" width="0.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="581.5" y="782.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::cfd() const (4 samples, 0.14%)</title><rect x="579.3" y="771.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="582.3" y="782.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetAndRefSuperVersion(rocksdb::ColumnFamilyData*) (2 samples, 0.07%)</title><rect x="580.9" y="771.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="583.9" y="782.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (144 samples, 4.87%)</title><rect x="581.6" y="771.0" width="57.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="584.6" y="782.0">rocksd..</text>
</g>
<g>
<title>/lib/i386-linux-gnu/ld-2.27.so (6 samples, 0.20%)</title><rect x="583.2" y="755.0" width="2.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="586.2" y="766.0"></text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (2 samples, 0.07%)</title><rect x="585.6" y="755.0" width="0.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="588.6" y="766.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni6408886059666723122.so (1 samples, 0.03%)</title><rect x="586.4" y="755.0" width="0.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="589.4" y="766.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (2 samples, 0.07%)</title><rect x="586.8" y="755.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="589.8" y="766.0"></text>
</g>
<g>
<title>___tls_get_addr (2 samples, 0.07%)</title><rect x="587.6" y="755.0" width="0.8" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="590.6" y="766.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.03%)</title><rect x="588.4" y="755.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="591.4" y="766.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="588.4" y="739.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="591.4" y="750.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.03%)</title><rect x="588.4" y="723.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="591.4" y="734.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.03%)</title><rect x="588.4" y="707.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="591.4" y="718.0"></text>
</g>
<g>
<title>call_on_stack (1 samples, 0.03%)</title><rect x="588.4" y="691.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="591.4" y="702.0"></text>
</g>
<g>
<title>__do_softirq (1 samples, 0.03%)</title><rect x="588.4" y="675.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="591.4" y="686.0"></text>
</g>
<g>
<title>run_rebalance_domains (1 samples, 0.03%)</title><rect x="588.4" y="659.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="591.4" y="670.0"></text>
</g>
<g>
<title>rebalance_domains (1 samples, 0.03%)</title><rect x="588.4" y="643.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="591.4" y="654.0"></text>
</g>
<g>
<title>update_blocked_averages (1 samples, 0.03%)</title><rect x="588.4" y="627.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="591.4" y="638.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="588.4" y="611.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="591.4" y="622.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (1 samples, 0.03%)</title><rect x="588.8" y="755.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="591.8" y="766.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (1 samples, 0.03%)</title><rect x="589.2" y="755.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="592.2" y="766.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetAndRefSuperVersion(rocksdb::ColumnFamilyData*) (14 samples, 0.47%)</title><rect x="589.6" y="755.0" width="5.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="592.6" y="766.0"></text>
</g>
<g>
<title>_init (1 samples, 0.03%)</title><rect x="590.0" y="739.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="593.0" y="750.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (8 samples, 0.27%)</title><rect x="590.4" y="739.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="593.4" y="750.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (3 samples, 0.10%)</title><rect x="590.8" y="723.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="593.8" y="734.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (4 samples, 0.14%)</title><rect x="592.0" y="723.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="595.0" y="734.0"></text>
</g>
<g>
<title>_init (1 samples, 0.03%)</title><rect x="592.0" y="707.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="595.0" y="718.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() (2 samples, 0.07%)</title><rect x="592.4" y="707.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="595.4" y="718.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (1 samples, 0.03%)</title><rect x="593.2" y="707.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="596.2" y="718.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() (1 samples, 0.03%)</title><rect x="593.2" y="691.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="596.2" y="702.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (4 samples, 0.14%)</title><rect x="593.6" y="739.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="596.6" y="750.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::ReturnAndCleanupSuperVersion(rocksdb::ColumnFamilyData*, rocksdb::SuperVersion*) (4 samples, 0.14%)</title><rect x="595.2" y="755.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="598.2" y="766.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (4 samples, 0.14%)</title><rect x="595.2" y="739.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="598.2" y="750.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::CompareAndSwap(void*, void*&amp;) (1 samples, 0.03%)</title><rect x="595.2" y="723.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="598.2" y="734.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::CompareAndSwap(unsigned int, void*, void*&amp;) (1 samples, 0.03%)</title><rect x="595.2" y="707.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="598.2" y="718.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (1 samples, 0.03%)</title><rect x="595.6" y="723.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="598.6" y="734.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::CompareAndSwap(unsigned int, void*, void*&amp;) (2 samples, 0.07%)</title><rect x="596.0" y="723.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="599.0" y="734.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (3 samples, 0.10%)</title><rect x="596.8" y="755.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="599.8" y="766.0"></text>
</g>
<g>
<title>rocksdb::GetContext::GetContext(rocksdb::Comparator const*, rocksdb::MergeOperator const*, rocksdb::Logger*, rocksdb::Statistics*, rocksdb::GetContext::GetState, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::MergeContext*, unsigned long long*, rocksdb::Env*, unsigned long long*, rocksdb::PinnedIteratorsManager*, rocksdb::ReadCallback*, bool*) (1 samples, 0.03%)</title><rect x="598.0" y="755.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="601.0" y="766.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (96 samples, 3.25%)</title><rect x="598.4" y="755.0" width="38.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="601.4" y="766.0">roc..</text>
</g>
<g>
<title>/tmp/librocksdbjni6408886059666723122.so (88 samples, 2.97%)</title><rect x="600.8" y="739.0" width="35.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="603.8" y="750.0">/tm..</text>
</g>
<g>
<title>/tmp/librocksdbjni6408886059666723122.so (7 samples, 0.24%)</title><rect x="601.2" y="723.0" width="2.8" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="604.2" y="734.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="603.6" y="707.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="606.6" y="718.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="603.6" y="691.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="606.6" y="702.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="603.6" y="675.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="606.6" y="686.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::FindGreaterOrEqual(char const*) const (75 samples, 2.54%)</title><rect x="604.0" y="723.0" width="29.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="607.0" y="734.0">ro..</text>
</g>
<g>
<title>/tmp/librocksdbjni6408886059666723122.so (1 samples, 0.03%)</title><rect x="617.6" y="707.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="620.6" y="718.0"></text>
</g>
<g>
<title>___tls_get_addr (1 samples, 0.03%)</title><rect x="618.0" y="707.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="621.0" y="718.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="618.0" y="691.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="621.0" y="702.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="618.0" y="675.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="621.0" y="686.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="618.0" y="659.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="621.0" y="670.0"></text>
</g>
<g>
<title>_init (4 samples, 0.14%)</title><rect x="618.4" y="707.0" width="1.5" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="621.4" y="718.0"></text>
</g>
<g>
<title>resume_userspace (6 samples, 0.20%)</title><rect x="619.9" y="707.0" width="2.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="622.9" y="718.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (6 samples, 0.20%)</title><rect x="619.9" y="691.0" width="2.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="622.9" y="702.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (6 samples, 0.20%)</title><rect x="619.9" y="675.0" width="2.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="622.9" y="686.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (29 samples, 0.98%)</title><rect x="622.3" y="707.0" width="11.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="625.3" y="718.0"></text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (15 samples, 0.51%)</title><rect x="624.7" y="691.0" width="6.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="627.7" y="702.0"></text>
</g>
<g>
<title>resume_userspace (2 samples, 0.07%)</title><rect x="629.9" y="675.0" width="0.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="632.9" y="686.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.07%)</title><rect x="629.9" y="659.0" width="0.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="632.9" y="670.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.07%)</title><rect x="629.9" y="643.0" width="0.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="632.9" y="654.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni6408886059666723122.so (1 samples, 0.03%)</title><rect x="630.7" y="691.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="633.7" y="702.0"></text>
</g>
<g>
<title>___tls_get_addr (3 samples, 0.10%)</title><rect x="631.1" y="691.0" width="1.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="634.1" y="702.0"></text>
</g>
<g>
<title>_init (4 samples, 0.14%)</title><rect x="632.3" y="691.0" width="1.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="635.3" y="702.0"></text>
</g>
<g>
<title>rocksdb::MemTableRep::KeyComparator::decode_key(char const*) const (1 samples, 0.03%)</title><rect x="633.9" y="723.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="636.9" y="734.0"></text>
</g>
<g>
<title>rocksdb::UnPackSequenceAndType(unsigned long long, unsigned long long*, rocksdb::ValueType*) (2 samples, 0.07%)</title><rect x="634.3" y="723.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="637.3" y="734.0"></text>
</g>
<g>
<title>std::string::_M_replace_safe(unsigned int, unsigned int, char const*, unsigned int) (2 samples, 0.07%)</title><rect x="635.1" y="723.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="638.1" y="734.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="635.5" y="707.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="638.5" y="718.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="635.5" y="691.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="638.5" y="702.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="635.5" y="675.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="638.5" y="686.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::FindGreaterOrEqual(char const*) const (1 samples, 0.03%)</title><rect x="635.9" y="739.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="638.9" y="750.0"></text>
</g>
<g>
<title>rocksdb::MemTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;, unsigned long long) (1 samples, 0.03%)</title><rect x="636.3" y="739.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="639.3" y="750.0"></text>
</g>
<g>
<title>rocksdb::MemTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;, unsigned long long) (1 samples, 0.03%)</title><rect x="636.7" y="755.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="639.7" y="766.0"></text>
</g>
<g>
<title>rocksdb::MemTableListVersion::GetFromList(std::list&lt;rocksdb::MemTable*, std::allocator&lt;rocksdb::MemTable*&gt; &gt;*, rocksdb::LookupKey const&amp;, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (2 samples, 0.07%)</title><rect x="637.1" y="755.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="640.1" y="766.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="637.5" y="739.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="640.5" y="750.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="637.5" y="723.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="640.5" y="734.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="637.5" y="707.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="640.5" y="718.0"></text>
</g>
<g>
<title>rocksdb::StopWatch::~StopWatch() (1 samples, 0.03%)</title><rect x="637.9" y="755.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="640.9" y="766.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (2 samples, 0.07%)</title><rect x="638.3" y="755.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="641.3" y="766.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::ReturnAndCleanupSuperVersion(rocksdb::ColumnFamilyData*, rocksdb::SuperVersion*) (3 samples, 0.10%)</title><rect x="639.1" y="771.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="642.1" y="782.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="639.9" y="755.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="642.9" y="766.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="639.9" y="739.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="642.9" y="750.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="639.9" y="723.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="642.9" y="734.0"></text>
</g>
<g>
<title>rocksdb::LookupKey::LookupKey(rocksdb::Slice const&amp;, unsigned long long) (2 samples, 0.07%)</title><rect x="640.3" y="771.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="643.3" y="782.0"></text>
</g>
<g>
<title>rocksdb::StopWatch::~StopWatch() (3 samples, 0.10%)</title><rect x="641.1" y="771.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="644.1" y="782.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (1 samples, 0.03%)</title><rect x="642.3" y="771.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="645.3" y="782.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="642.3" y="755.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="645.3" y="766.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="642.3" y="739.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="645.3" y="750.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="642.3" y="723.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="645.3" y="734.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (1 samples, 0.03%)</title><rect x="642.7" y="787.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="645.7" y="798.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (2 samples, 0.07%)</title><rect x="643.1" y="803.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="646.1" y="814.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (1 samples, 0.03%)</title><rect x="643.9" y="819.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="646.9" y="830.0"></text>
</g>
<g>
<title>rocksdb::JniUtil::createJavaByteArrayWithSizeCheck(JNIEnv_*, char const*, unsigned int) (15 samples, 0.51%)</title><rect x="644.3" y="819.0" width="6.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="647.3" y="830.0"></text>
</g>
<g>
<title>jni_NewByteArray (10 samples, 0.34%)</title><rect x="645.1" y="803.0" width="4.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="648.1" y="814.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (1 samples, 0.03%)</title><rect x="645.5" y="787.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="648.5" y="798.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="645.5" y="771.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="648.5" y="782.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="645.5" y="755.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="648.5" y="766.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="645.5" y="739.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="648.5" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.158] (1 samples, 0.03%)</title><rect x="645.9" y="787.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="648.9" y="798.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (7 samples, 0.24%)</title><rect x="646.3" y="787.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="649.3" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.10%)</title><rect x="647.5" y="771.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="650.5" y="782.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.10%)</title><rect x="647.5" y="755.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="650.5" y="766.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (2 samples, 0.07%)</title><rect x="647.9" y="739.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="650.9" y="750.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="648.7" y="771.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="651.7" y="782.0"></text>
</g>
<g>
<title>common_interrupt (1 samples, 0.03%)</title><rect x="648.7" y="755.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="651.7" y="766.0"></text>
</g>
<g>
<title>do_IRQ (1 samples, 0.03%)</title><rect x="648.7" y="739.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="651.7" y="750.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.03%)</title><rect x="648.7" y="723.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="651.7" y="734.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.03%)</title><rect x="648.7" y="707.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="651.7" y="718.0"></text>
</g>
<g>
<title>call_on_stack (1 samples, 0.03%)</title><rect x="648.7" y="691.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="651.7" y="702.0"></text>
</g>
<g>
<title>__do_softirq (1 samples, 0.03%)</title><rect x="648.7" y="675.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="651.7" y="686.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (3 samples, 0.10%)</title><rect x="649.1" y="803.0" width="1.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="652.1" y="814.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.03%)</title><rect x="649.1" y="787.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="652.1" y="798.0"></text>
</g>
<g>
<title>resume_userspace (2 samples, 0.07%)</title><rect x="649.5" y="787.0" width="0.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="652.5" y="798.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.07%)</title><rect x="649.5" y="771.0" width="0.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="652.5" y="782.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.07%)</title><rect x="649.5" y="755.0" width="0.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="652.5" y="766.0"></text>
</g>
<g>
<title>std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string(std::string const&amp;) (4 samples, 0.14%)</title><rect x="650.3" y="835.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="653.3" y="846.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="651.5" y="819.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="654.5" y="830.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="651.5" y="803.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="654.5" y="814.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="651.5" y="787.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="654.5" y="798.0"></text>
</g>
<g>
<title>std::string::_Rep::_M_destroy(std::allocator&lt;char&gt; const&amp;) (2 samples, 0.07%)</title><rect x="651.9" y="835.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="654.9" y="846.0"></text>
</g>
<g>
<title>std::string::_Rep::_M_dispose(std::allocator&lt;char&gt; const&amp;) (4 samples, 0.14%)</title><rect x="652.7" y="835.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="655.7" y="846.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="653.9" y="819.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="656.9" y="830.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="653.9" y="803.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="656.9" y="814.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="653.9" y="787.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="656.9" y="798.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="653.9" y="771.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="656.9" y="782.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.03%)</title><rect x="653.9" y="755.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="656.9" y="766.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="653.9" y="739.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="656.9" y="750.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.27%)</title><rect x="654.3" y="851.0" width="3.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="657.3" y="862.0"></text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (4 samples, 0.14%)</title><rect x="654.3" y="835.0" width="1.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="657.3" y="846.0"></text>
</g>
<g>
<title>malloc (3 samples, 0.10%)</title><rect x="655.8" y="835.0" width="1.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="658.8" y="846.0"></text>
</g>
<g>
<title>std::string::_M_mutate(unsigned int, unsigned int, unsigned int) (1 samples, 0.03%)</title><rect x="657.0" y="835.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="660.0" y="846.0"></text>
</g>
<g>
<title>_init (3 samples, 0.10%)</title><rect x="657.4" y="851.0" width="1.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="660.4" y="862.0"></text>
</g>
<g>
<title>malloc (3 samples, 0.10%)</title><rect x="658.6" y="851.0" width="1.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="661.6" y="862.0"></text>
</g>
<g>
<title>rocksdb::ReadOptions::ReadOptions() (4 samples, 0.14%)</title><rect x="659.8" y="851.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="662.8" y="862.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (3 samples, 0.10%)</title><rect x="661.4" y="851.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="664.4" y="862.0"></text>
</g>
<g>
<title>std::string::_M_mutate(unsigned int, unsigned int, unsigned int) (2 samples, 0.07%)</title><rect x="662.6" y="851.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="665.6" y="862.0"></text>
</g>
<g>
<title>std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator&lt;char&gt; const&amp;) (3 samples, 0.10%)</title><rect x="663.4" y="851.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="666.4" y="862.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="664.6" y="883.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="667.6" y="894.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="664.6" y="867.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="667.6" y="878.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="664.6" y="851.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="667.6" y="862.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/NoSuchElementExceptionLite.&lt;init&gt; (2 samples, 0.07%)</title><rect x="665.0" y="883.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="668.0" y="894.0"></text>
</g>
<g>
<title>java/util/NoSuchElementException.&lt;init&gt; (1 samples, 0.03%)</title><rect x="665.0" y="867.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="668.0" y="878.0"></text>
</g>
<g>
<title>java/lang/RuntimeException.&lt;init&gt; (1 samples, 0.03%)</title><rect x="665.0" y="851.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="668.0" y="862.0"></text>
</g>
<g>
<title>java/lang/Exception.&lt;init&gt; (1 samples, 0.03%)</title><rect x="665.0" y="835.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="668.0" y="846.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (1 samples, 0.03%)</title><rect x="665.0" y="819.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="668.0" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/NoSuchElementExceptionLite.fillInStackTrace (1 samples, 0.03%)</title><rect x="665.0" y="803.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="668.0" y="814.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="665.4" y="867.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="668.4" y="878.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="665.4" y="851.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="668.4" y="862.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="665.4" y="835.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="668.4" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ServiceImpl$$Lambda$69/31033530.act (585 samples, 19.78%)</title><rect x="665.8" y="947.0" width="233.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="668.8" y="958.0">ru/mail/polis/service/dogm/Serv..</text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ServiceImpl.lambda$entity$0 (585 samples, 19.78%)</title><rect x="665.8" y="931.0" width="233.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="668.8" y="942.0">ru/mail/polis/service/dogm/Serv..</text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ServiceImpl.proxy (585 samples, 19.78%)</title><rect x="665.8" y="915.0" width="233.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="668.8" y="926.0">ru/mail/polis/service/dogm/Serv..</text>
</g>
<g>
<title>ru/mail/polis/service/dogm/Bridges.sendRequestTo (585 samples, 19.78%)</title><rect x="665.8" y="899.0" width="233.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="668.8" y="910.0">ru/mail/polis/service/dogm/Brid..</text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.10%)</title><rect x="665.8" y="883.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="668.8" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.10%)</title><rect x="665.8" y="867.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="668.8" y="878.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (582 samples, 19.68%)</title><rect x="667.0" y="883.0" width="232.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="670.0" y="894.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (582 samples, 19.68%)</title><rect x="667.0" y="867.0" width="232.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="670.0" y="878.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (4 samples, 0.14%)</title><rect x="667.8" y="851.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="670.8" y="862.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 0.14%)</title><rect x="667.8" y="835.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="670.8" y="846.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (4 samples, 0.14%)</title><rect x="667.8" y="819.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="670.8" y="830.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (4 samples, 0.14%)</title><rect x="667.8" y="803.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="670.8" y="814.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (4 samples, 0.14%)</title><rect x="667.8" y="787.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="670.8" y="798.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (104 samples, 3.52%)</title><rect x="669.4" y="851.0" width="41.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="672.4" y="862.0">one..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (94 samples, 3.18%)</title><rect x="673.4" y="835.0" width="37.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="676.4" y="846.0">one..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (94 samples, 3.18%)</title><rect x="673.4" y="819.0" width="37.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="676.4" y="830.0">sun..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.07%)</title><rect x="674.6" y="803.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="677.6" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.07%)</title><rect x="674.6" y="787.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="677.6" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.07%)</title><rect x="674.6" y="771.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="677.6" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.07%)</title><rect x="674.6" y="755.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="677.6" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (83 samples, 2.81%)</title><rect x="675.4" y="803.0" width="33.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="678.4" y="814.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (83 samples, 2.81%)</title><rect x="675.4" y="787.0" width="33.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="678.4" y="798.0">su..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.03%)</title><rect x="675.4" y="771.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="678.4" y="782.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.03%)</title><rect x="675.4" y="755.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="678.4" y="766.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (1 samples, 0.03%)</title><rect x="675.4" y="739.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="678.4" y="750.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (1 samples, 0.03%)</title><rect x="675.4" y="723.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="678.4" y="734.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (1 samples, 0.03%)</title><rect x="675.4" y="707.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="678.4" y="718.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPointer (1 samples, 0.03%)</title><rect x="675.4" y="691.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="678.4" y="702.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkOffset (1 samples, 0.03%)</title><rect x="675.4" y="675.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="678.4" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (82 samples, 2.77%)</title><rect x="675.8" y="771.0" width="32.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="678.8" y="782.0">su..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (82 samples, 2.77%)</title><rect x="675.8" y="755.0" width="32.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="678.8" y="766.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (79 samples, 2.67%)</title><rect x="677.0" y="739.0" width="31.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="680.0" y="750.0">su..</text>
</g>
<g>
<title>[unknown] (2 samples, 0.07%)</title><rect x="677.4" y="723.0" width="0.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="680.4" y="734.0"></text>
</g>
<g>
<title>__kernel_vsyscall (2 samples, 0.07%)</title><rect x="677.4" y="707.0" width="0.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="680.4" y="718.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (2 samples, 0.07%)</title><rect x="677.4" y="691.0" width="0.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="680.4" y="702.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (2 samples, 0.07%)</title><rect x="677.4" y="675.0" width="0.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="680.4" y="686.0"></text>
</g>
<g>
<title>__kernel_vsyscall (74 samples, 2.50%)</title><rect x="678.2" y="723.0" width="29.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="681.2" y="734.0">__..</text>
</g>
<g>
<title>entry_SYSENTER_32 (71 samples, 2.40%)</title><rect x="679.4" y="707.0" width="28.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="682.4" y="718.0">en..</text>
</g>
<g>
<title>do_fast_syscall_32 (71 samples, 2.40%)</title><rect x="679.4" y="691.0" width="28.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="682.4" y="702.0">do..</text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.10%)</title><rect x="679.4" y="675.0" width="1.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="682.4" y="686.0"></text>
</g>
<g>
<title>schedule (3 samples, 0.10%)</title><rect x="679.4" y="659.0" width="1.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="682.4" y="670.0"></text>
</g>
<g>
<title>__sched_text_start (3 samples, 0.10%)</title><rect x="679.4" y="643.0" width="1.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="682.4" y="654.0"></text>
</g>
<g>
<title>finish_task_switch (3 samples, 0.10%)</title><rect x="679.4" y="627.0" width="1.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="682.4" y="638.0"></text>
</g>
<g>
<title>fput (1 samples, 0.03%)</title><rect x="680.6" y="675.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="683.6" y="686.0"></text>
</g>
<g>
<title>sys_read (67 samples, 2.27%)</title><rect x="681.0" y="675.0" width="26.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="684.0" y="686.0">s..</text>
</g>
<g>
<title>__fdget_pos (1 samples, 0.03%)</title><rect x="681.0" y="659.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="684.0" y="670.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.03%)</title><rect x="681.0" y="643.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="684.0" y="654.0"></text>
</g>
<g>
<title>__fget (1 samples, 0.03%)</title><rect x="681.0" y="627.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="684.0" y="638.0"></text>
</g>
<g>
<title>fput (1 samples, 0.03%)</title><rect x="681.4" y="659.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="684.4" y="670.0"></text>
</g>
<g>
<title>vfs_read (65 samples, 2.20%)</title><rect x="681.8" y="659.0" width="25.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="684.8" y="670.0">v..</text>
</g>
<g>
<title>__vfs_read (65 samples, 2.20%)</title><rect x="681.8" y="643.0" width="25.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="684.8" y="654.0">_..</text>
</g>
<g>
<title>new_sync_read (65 samples, 2.20%)</title><rect x="681.8" y="627.0" width="25.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="684.8" y="638.0">n..</text>
</g>
<g>
<title>sock_read_iter (64 samples, 2.16%)</title><rect x="682.2" y="611.0" width="25.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="685.2" y="622.0">s..</text>
</g>
<g>
<title>security_socket_recvmsg (1 samples, 0.03%)</title><rect x="682.6" y="595.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="685.6" y="606.0"></text>
</g>
<g>
<title>sock_recvmsg (62 samples, 2.10%)</title><rect x="683.0" y="595.0" width="24.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="686.0" y="606.0">s..</text>
</g>
<g>
<title>inet_recvmsg (61 samples, 2.06%)</title><rect x="683.0" y="579.0" width="24.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="686.0" y="590.0">i..</text>
</g>
<g>
<title>tcp_recvmsg (61 samples, 2.06%)</title><rect x="683.0" y="563.0" width="24.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="686.0" y="574.0">t..</text>
</g>
<g>
<title>__kfree_skb (1 samples, 0.03%)</title><rect x="683.4" y="547.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="686.4" y="558.0"></text>
</g>
<g>
<title>kfree_skbmem (1 samples, 0.03%)</title><rect x="683.4" y="531.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="686.4" y="542.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.03%)</title><rect x="683.8" y="547.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="686.8" y="558.0"></text>
</g>
<g>
<title>lock_sock_nested (1 samples, 0.03%)</title><rect x="684.2" y="547.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="687.2" y="558.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (1 samples, 0.03%)</title><rect x="684.2" y="531.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="687.2" y="542.0"></text>
</g>
<g>
<title>__pv_queued_spin_lock_slowpath (1 samples, 0.03%)</title><rect x="684.2" y="515.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="687.2" y="526.0"></text>
</g>
<g>
<title>kvm_wait (1 samples, 0.03%)</title><rect x="684.2" y="499.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="687.2" y="510.0"></text>
</g>
<g>
<title>native_safe_halt (1 samples, 0.03%)</title><rect x="684.2" y="483.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="687.2" y="494.0"></text>
</g>
<g>
<title>sk_wait_data (48 samples, 1.62%)</title><rect x="684.6" y="547.0" width="19.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="687.6" y="558.0"></text>
</g>
<g>
<title>lock_sock_nested (3 samples, 0.10%)</title><rect x="685.4" y="531.0" width="1.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="688.4" y="542.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (2 samples, 0.07%)</title><rect x="685.8" y="515.0" width="0.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="688.8" y="526.0"></text>
</g>
<g>
<title>__pv_queued_spin_lock_slowpath (2 samples, 0.07%)</title><rect x="685.8" y="499.0" width="0.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="688.8" y="510.0"></text>
</g>
<g>
<title>release_sock (1 samples, 0.03%)</title><rect x="686.6" y="531.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="689.6" y="542.0"></text>
</g>
<g>
<title>_raw_spin_unlock_bh (1 samples, 0.03%)</title><rect x="686.6" y="515.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="689.6" y="526.0"></text>
</g>
<g>
<title>__raw_callee_save___pv_queued_spin_unlock (1 samples, 0.03%)</title><rect x="686.6" y="499.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="689.6" y="510.0"></text>
</g>
<g>
<title>__pv_queued_spin_unlock (1 samples, 0.03%)</title><rect x="686.6" y="483.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="689.6" y="494.0"></text>
</g>
<g>
<title>schedule_timeout (1 samples, 0.03%)</title><rect x="687.0" y="531.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="690.0" y="542.0"></text>
</g>
<g>
<title>wait_woken (41 samples, 1.39%)</title><rect x="687.4" y="531.0" width="16.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="690.4" y="542.0"></text>
</g>
<g>
<title>schedule_timeout (40 samples, 1.35%)</title><rect x="687.8" y="515.0" width="15.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="690.8" y="526.0"></text>
</g>
<g>
<title>schedule (40 samples, 1.35%)</title><rect x="687.8" y="499.0" width="15.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="690.8" y="510.0"></text>
</g>
<g>
<title>__sched_text_start (40 samples, 1.35%)</title><rect x="687.8" y="483.0" width="15.9" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="690.8" y="494.0"></text>
</g>
<g>
<title>finish_task_switch (40 samples, 1.35%)</title><rect x="687.8" y="467.0" width="15.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="690.8" y="478.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (3 samples, 0.10%)</title><rect x="703.7" y="547.0" width="1.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="706.7" y="558.0"></text>
</g>
<g>
<title>__check_object_size (2 samples, 0.07%)</title><rect x="703.7" y="531.0" width="0.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="706.7" y="542.0"></text>
</g>
<g>
<title>__virt_addr_valid (1 samples, 0.03%)</title><rect x="703.7" y="515.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="706.7" y="526.0"></text>
</g>
<g>
<title>check_stack_object (1 samples, 0.03%)</title><rect x="704.1" y="515.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="707.1" y="526.0"></text>
</g>
<g>
<title>_copy_to_iter (1 samples, 0.03%)</title><rect x="704.5" y="531.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="707.5" y="542.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (3 samples, 0.10%)</title><rect x="704.9" y="547.0" width="1.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="707.9" y="558.0"></text>
</g>
<g>
<title>__tcp_select_window (1 samples, 0.03%)</title><rect x="704.9" y="531.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="707.9" y="542.0"></text>
</g>
<g>
<title>tcp_send_ack (2 samples, 0.07%)</title><rect x="705.3" y="531.0" width="0.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="708.3" y="542.0"></text>
</g>
<g>
<title>__tcp_send_ack.part.38 (2 samples, 0.07%)</title><rect x="705.3" y="515.0" width="0.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="708.3" y="526.0"></text>
</g>
<g>
<title>__alloc_skb (2 samples, 0.07%)</title><rect x="705.3" y="499.0" width="0.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="708.3" y="510.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.45 (1 samples, 0.03%)</title><rect x="705.7" y="483.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="708.7" y="494.0"></text>
</g>
<g>
<title>__kmalloc_track_caller (1 samples, 0.03%)</title><rect x="705.7" y="467.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="708.7" y="478.0"></text>
</g>
<g>
<title>tcp_release_cb (1 samples, 0.03%)</title><rect x="706.1" y="547.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="709.1" y="558.0"></text>
</g>
<g>
<title>wait_woken (2 samples, 0.07%)</title><rect x="706.5" y="547.0" width="0.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="709.5" y="558.0"></text>
</g>
<g>
<title>security_socket_recvmsg (1 samples, 0.03%)</title><rect x="707.3" y="579.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="710.3" y="590.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (1 samples, 0.03%)</title><rect x="707.3" y="563.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="710.3" y="574.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (1 samples, 0.03%)</title><rect x="707.3" y="547.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="710.3" y="558.0"></text>
</g>
<g>
<title>aa_sk_perm (1 samples, 0.03%)</title><rect x="707.3" y="531.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="710.3" y="542.0"></text>
</g>
<g>
<title>aa_label_sk_perm (1 samples, 0.03%)</title><rect x="707.3" y="515.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="710.3" y="526.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.cx (1 samples, 0.03%)</title><rect x="707.7" y="723.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="710.7" y="734.0"></text>
</g>
<g>
<title>read (1 samples, 0.03%)</title><rect x="708.1" y="723.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="711.1" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginRead (3 samples, 0.10%)</title><rect x="708.5" y="803.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="711.5" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.03%)</title><rect x="709.3" y="787.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="712.3" y="798.0"></text>
</g>
<g>
<title>pthread_self (1 samples, 0.03%)</title><rect x="709.3" y="771.0" width="0.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="712.3" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.endRead (3 samples, 0.10%)</title><rect x="709.7" y="803.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="712.7" y="814.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (3 samples, 0.10%)</title><rect x="709.7" y="787.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="712.7" y="798.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (20 samples, 0.68%)</title><rect x="710.9" y="851.0" width="8.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="713.9" y="862.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (10 samples, 0.34%)</title><rect x="713.7" y="835.0" width="4.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="716.7" y="846.0"></text>
</g>
<g>
<title>one/nio/http/Response.addHeader (2 samples, 0.07%)</title><rect x="717.7" y="835.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="720.7" y="846.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (1 samples, 0.03%)</title><rect x="718.5" y="835.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="721.5" y="846.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.03%)</title><rect x="718.5" y="819.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="721.5" y="830.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.03%)</title><rect x="718.5" y="803.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="721.5" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (5 samples, 0.17%)</title><rect x="718.9" y="851.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="721.9" y="862.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (3 samples, 0.10%)</title><rect x="719.7" y="835.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="722.7" y="846.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (3 samples, 0.10%)</title><rect x="719.7" y="819.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="722.7" y="830.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.10%)</title><rect x="719.7" y="803.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="722.7" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (3 samples, 0.10%)</title><rect x="720.9" y="851.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="723.9" y="862.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.10%)</title><rect x="720.9" y="835.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="723.9" y="846.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.10%)</title><rect x="720.9" y="819.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="723.9" y="830.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.setTimeout (2 samples, 0.07%)</title><rect x="722.1" y="851.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="725.1" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.socket (2 samples, 0.07%)</title><rect x="722.1" y="835.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="725.1" y="846.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.writeFully (439 samples, 14.84%)</title><rect x="722.9" y="851.0" width="175.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="725.9" y="862.0">one/nio/net/JavaSocket...</text>
</g>
<g>
<title>java/nio/channels/Channels$1.write (298 samples, 10.07%)</title><rect x="723.3" y="835.0" width="118.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="726.3" y="846.0">java/nio/chann..</text>
</g>
<g>
<title>java/nio/channels/Channels.writeFully (296 samples, 10.01%)</title><rect x="723.7" y="819.0" width="118.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="726.7" y="830.0">java/nio/chann..</text>
</g>
<g>
<title>java/nio/channels/Channels.writeFullyImpl (295 samples, 9.97%)</title><rect x="724.1" y="803.0" width="117.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="727.1" y="814.0">java/nio/chann..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (293 samples, 9.91%)</title><rect x="724.9" y="787.0" width="116.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="727.9" y="798.0">sun/nio/ch/Soc..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (287 samples, 9.70%)</title><rect x="724.9" y="771.0" width="114.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="727.9" y="782.0">sun/nio/ch/IOU..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (286 samples, 9.67%)</title><rect x="725.3" y="755.0" width="114.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="728.3" y="766.0">sun/nio/ch/IOU..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (286 samples, 9.67%)</title><rect x="725.3" y="739.0" width="114.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="728.3" y="750.0">sun/nio/ch/IOU..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (286 samples, 9.67%)</title><rect x="725.3" y="723.0" width="114.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="728.3" y="734.0">sun/nio/ch/Soc..</text>
</g>
<g>
<title>resume_userspace (2 samples, 0.07%)</title><rect x="726.1" y="707.0" width="0.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="729.1" y="718.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.07%)</title><rect x="726.1" y="691.0" width="0.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="729.1" y="702.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.07%)</title><rect x="726.1" y="675.0" width="0.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="729.1" y="686.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="726.5" y="659.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="729.5" y="670.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.03%)</title><rect x="726.5" y="643.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="729.5" y="654.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="726.5" y="627.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="729.5" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (282 samples, 9.53%)</title><rect x="726.9" y="707.0" width="112.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="729.9" y="718.0">sun/nio/ch/Fil..</text>
</g>
<g>
<title>__kernel_vsyscall (279 samples, 9.43%)</title><rect x="727.7" y="691.0" width="111.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="730.7" y="702.0">__kernel_vsys..</text>
</g>
<g>
<title>entry_SYSENTER_32 (277 samples, 9.36%)</title><rect x="728.5" y="675.0" width="110.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="731.5" y="686.0">entry_SYSENTE..</text>
</g>
<g>
<title>do_fast_syscall_32 (277 samples, 9.36%)</title><rect x="728.5" y="659.0" width="110.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="731.5" y="670.0">do_fast_sysca..</text>
</g>
<g>
<title>__fdget_pos (1 samples, 0.03%)</title><rect x="729.2" y="643.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="732.2" y="654.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (32 samples, 1.08%)</title><rect x="729.6" y="643.0" width="12.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="732.6" y="654.0"></text>
</g>
<g>
<title>schedule (31 samples, 1.05%)</title><rect x="730.0" y="627.0" width="12.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="733.0" y="638.0"></text>
</g>
<g>
<title>__sched_text_start (31 samples, 1.05%)</title><rect x="730.0" y="611.0" width="12.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="733.0" y="622.0"></text>
</g>
<g>
<title>finish_task_switch (31 samples, 1.05%)</title><rect x="730.0" y="595.0" width="12.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="733.0" y="606.0"></text>
</g>
<g>
<title>common_interrupt (1 samples, 0.03%)</title><rect x="742.0" y="579.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="745.0" y="590.0"></text>
</g>
<g>
<title>do_IRQ (1 samples, 0.03%)</title><rect x="742.0" y="563.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="745.0" y="574.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.03%)</title><rect x="742.0" y="547.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="745.0" y="558.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.03%)</title><rect x="742.0" y="531.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="745.0" y="542.0"></text>
</g>
<g>
<title>call_on_stack (1 samples, 0.03%)</title><rect x="742.0" y="515.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="745.0" y="526.0"></text>
</g>
<g>
<title>__do_softirq (1 samples, 0.03%)</title><rect x="742.0" y="499.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="745.0" y="510.0"></text>
</g>
<g>
<title>blk_done_softirq (1 samples, 0.03%)</title><rect x="742.0" y="483.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="745.0" y="494.0"></text>
</g>
<g>
<title>scsi_softirq_done (1 samples, 0.03%)</title><rect x="742.0" y="467.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="745.0" y="478.0"></text>
</g>
<g>
<title>scsi_finish_command (1 samples, 0.03%)</title><rect x="742.0" y="451.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="745.0" y="462.0"></text>
</g>
<g>
<title>scsi_io_completion (1 samples, 0.03%)</title><rect x="742.0" y="435.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="745.0" y="446.0"></text>
</g>
<g>
<title>scsi_end_request (1 samples, 0.03%)</title><rect x="742.0" y="419.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="745.0" y="430.0"></text>
</g>
<g>
<title>scsi_run_queue (1 samples, 0.03%)</title><rect x="742.0" y="403.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="745.0" y="414.0"></text>
</g>
<g>
<title>blk_run_queue (1 samples, 0.03%)</title><rect x="742.0" y="387.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="745.0" y="398.0"></text>
</g>
<g>
<title>__blk_run_queue (1 samples, 0.03%)</title><rect x="742.0" y="371.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="745.0" y="382.0"></text>
</g>
<g>
<title>scsi_request_fn (1 samples, 0.03%)</title><rect x="742.0" y="355.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="745.0" y="366.0"></text>
</g>
<g>
<title>scsi_dispatch_cmd (1 samples, 0.03%)</title><rect x="742.0" y="339.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="745.0" y="350.0"></text>
</g>
<g>
<title>ata_scsi_queuecmd (1 samples, 0.03%)</title><rect x="742.0" y="323.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="745.0" y="334.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="742.0" y="307.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="745.0" y="318.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="742.4" y="643.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="745.4" y="654.0"></text>
</g>
<g>
<title>sys_write (241 samples, 8.15%)</title><rect x="742.8" y="643.0" width="96.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="745.8" y="654.0">sys_write</text>
</g>
<g>
<title>__fdget_pos (3 samples, 0.10%)</title><rect x="742.8" y="627.0" width="1.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="745.8" y="638.0"></text>
</g>
<g>
<title>__fget_light (3 samples, 0.10%)</title><rect x="742.8" y="611.0" width="1.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="745.8" y="622.0"></text>
</g>
<g>
<title>__fget (3 samples, 0.10%)</title><rect x="742.8" y="595.0" width="1.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="745.8" y="606.0"></text>
</g>
<g>
<title>vfs_write (238 samples, 8.05%)</title><rect x="744.0" y="627.0" width="95.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="747.0" y="638.0">vfs_write</text>
</g>
<g>
<title>__vfs_write (231 samples, 7.81%)</title><rect x="744.4" y="611.0" width="92.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="747.4" y="622.0">__vfs_write</text>
</g>
<g>
<title>new_sync_write (231 samples, 7.81%)</title><rect x="744.4" y="595.0" width="92.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="747.4" y="606.0">new_sync_wr..</text>
</g>
<g>
<title>iov_iter_init (1 samples, 0.03%)</title><rect x="744.4" y="579.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="747.4" y="590.0"></text>
</g>
<g>
<title>sock_write_iter (230 samples, 7.78%)</title><rect x="744.8" y="579.0" width="91.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="747.8" y="590.0">sock_write_..</text>
</g>
<g>
<title>sock_sendmsg (230 samples, 7.78%)</title><rect x="744.8" y="563.0" width="91.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="747.8" y="574.0">sock_sendmsg</text>
</g>
<g>
<title>apparmor_socket_sendmsg (1 samples, 0.03%)</title><rect x="744.8" y="547.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="747.8" y="558.0"></text>
</g>
<g>
<title>inet_sendmsg (226 samples, 7.64%)</title><rect x="745.2" y="547.0" width="90.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="748.2" y="558.0">inet_sendmsg</text>
</g>
<g>
<title>lock_sock_nested (1 samples, 0.03%)</title><rect x="745.2" y="531.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="748.2" y="542.0"></text>
</g>
<g>
<title>release_sock (1 samples, 0.03%)</title><rect x="745.6" y="531.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="748.6" y="542.0"></text>
</g>
<g>
<title>tcp_sendmsg (223 samples, 7.54%)</title><rect x="746.0" y="531.0" width="89.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="749.0" y="542.0">tcp_sendmsg</text>
</g>
<g>
<title>_copy_from_iter_full (1 samples, 0.03%)</title><rect x="746.0" y="515.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="749.0" y="526.0"></text>
</g>
<g>
<title>lock_sock_nested (2 samples, 0.07%)</title><rect x="746.4" y="515.0" width="0.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="749.4" y="526.0"></text>
</g>
<g>
<title>__raw_callee_save___pv_queued_spin_unlock (1 samples, 0.03%)</title><rect x="746.4" y="499.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="749.4" y="510.0"></text>
</g>
<g>
<title>__pv_queued_spin_unlock (1 samples, 0.03%)</title><rect x="746.4" y="483.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="749.4" y="494.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (1 samples, 0.03%)</title><rect x="746.8" y="499.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="749.8" y="510.0"></text>
</g>
<g>
<title>skb_entail (1 samples, 0.03%)</title><rect x="747.2" y="515.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="750.2" y="526.0"></text>
</g>
<g>
<title>skb_put (1 samples, 0.03%)</title><rect x="747.6" y="515.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="750.6" y="526.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (218 samples, 7.37%)</title><rect x="748.0" y="515.0" width="87.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="751.0" y="526.0">tcp_sendms..</text>
</g>
<g>
<title>_copy_from_iter_full (6 samples, 0.20%)</title><rect x="749.2" y="499.0" width="2.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="752.2" y="510.0"></text>
</g>
<g>
<title>__copy_user_ll (1 samples, 0.03%)</title><rect x="749.6" y="483.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="752.6" y="494.0"></text>
</g>
<g>
<title>copyin (1 samples, 0.03%)</title><rect x="750.0" y="483.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="753.0" y="494.0"></text>
</g>
<g>
<title>__copy_user_ll (1 samples, 0.03%)</title><rect x="750.0" y="467.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="753.0" y="478.0"></text>
</g>
<g>
<title>iov_iter_advance (3 samples, 0.10%)</title><rect x="750.4" y="483.0" width="1.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="753.4" y="494.0"></text>
</g>
<g>
<title>iov_iter_advance (1 samples, 0.03%)</title><rect x="751.6" y="499.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="754.6" y="510.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (10 samples, 0.34%)</title><rect x="752.0" y="499.0" width="4.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="755.0" y="510.0"></text>
</g>
<g>
<title>__alloc_skb (9 samples, 0.30%)</title><rect x="752.0" y="483.0" width="3.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="755.0" y="494.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.45 (2 samples, 0.07%)</title><rect x="752.4" y="467.0" width="0.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="755.4" y="478.0"></text>
</g>
<g>
<title>__kmalloc_track_caller (1 samples, 0.03%)</title><rect x="752.8" y="451.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="755.8" y="462.0"></text>
</g>
<g>
<title>kmalloc_slab (1 samples, 0.03%)</title><rect x="752.8" y="435.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="755.8" y="446.0"></text>
</g>
<g>
<title>kmem_cache_alloc (5 samples, 0.17%)</title><rect x="753.2" y="467.0" width="2.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="756.2" y="478.0"></text>
</g>
<g>
<title>__slab_alloc.constprop.83 (1 samples, 0.03%)</title><rect x="754.4" y="451.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="757.4" y="462.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.03%)</title><rect x="754.8" y="451.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="757.8" y="462.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.03%)</title><rect x="754.8" y="435.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="757.8" y="446.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="754.8" y="419.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="757.8" y="430.0"></text>
</g>
<g>
<title>ksize (1 samples, 0.03%)</title><rect x="755.2" y="467.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="758.2" y="478.0"></text>
</g>
<g>
<title>kmem_cache_alloc (1 samples, 0.03%)</title><rect x="755.6" y="483.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="758.6" y="494.0"></text>
</g>
<g>
<title>skb_entail (1 samples, 0.03%)</title><rect x="756.0" y="499.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="759.0" y="510.0"></text>
</g>
<g>
<title>tcp_chrono_start (1 samples, 0.03%)</title><rect x="756.0" y="483.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="759.0" y="494.0"></text>
</g>
<g>
<title>tcp_push (192 samples, 6.49%)</title><rect x="756.4" y="499.0" width="76.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="759.4" y="510.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (191 samples, 6.46%)</title><rect x="756.4" y="483.0" width="76.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="759.4" y="494.0">__tcp_pu..</text>
</g>
<g>
<title>tcp_write_xmit (191 samples, 6.46%)</title><rect x="756.4" y="467.0" width="76.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="759.4" y="478.0">tcp_writ..</text>
</g>
<g>
<title>__tcp_transmit_skb (185 samples, 6.25%)</title><rect x="756.8" y="451.0" width="73.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="759.8" y="462.0">__tcp_tr..</text>
</g>
<g>
<title>__skb_clone (1 samples, 0.03%)</title><rect x="758.0" y="435.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="761.0" y="446.0"></text>
</g>
<g>
<title>ip_copy_addrs (1 samples, 0.03%)</title><rect x="758.4" y="435.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="761.4" y="446.0"></text>
</g>
<g>
<title>ip_queue_xmit (179 samples, 6.05%)</title><rect x="758.8" y="435.0" width="71.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="761.8" y="446.0">ip_queue..</text>
</g>
<g>
<title>ip_local_out (175 samples, 5.92%)</title><rect x="760.0" y="419.0" width="69.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="763.0" y="430.0">ip_loca..</text>
</g>
<g>
<title>ip_finish_output (1 samples, 0.03%)</title><rect x="760.0" y="403.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="763.0" y="414.0"></text>
</g>
<g>
<title>ip_output (174 samples, 5.88%)</title><rect x="760.4" y="403.0" width="69.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="763.4" y="414.0">ip_output</text>
</g>
<g>
<title>ip_finish_output (173 samples, 5.85%)</title><rect x="760.8" y="387.0" width="69.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="763.8" y="398.0">ip_fini..</text>
</g>
<g>
<title>ip_finish_output2 (173 samples, 5.85%)</title><rect x="760.8" y="371.0" width="69.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="763.8" y="382.0">ip_fini..</text>
</g>
<g>
<title>__dev_queue_xmit (1 samples, 0.03%)</title><rect x="761.6" y="355.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="764.6" y="366.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (154 samples, 5.21%)</title><rect x="762.0" y="355.0" width="61.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="765.0" y="366.0">__loca..</text>
</g>
<g>
<title>do_softirq.part.15 (154 samples, 5.21%)</title><rect x="762.0" y="339.0" width="61.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="765.0" y="350.0">do_sof..</text>
</g>
<g>
<title>do_softirq_own_stack (153 samples, 5.17%)</title><rect x="762.4" y="323.0" width="61.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="765.4" y="334.0">do_sof..</text>
</g>
<g>
<title>call_on_stack (153 samples, 5.17%)</title><rect x="762.4" y="307.0" width="61.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="765.4" y="318.0">call_o..</text>
</g>
<g>
<title>__do_softirq (152 samples, 5.14%)</title><rect x="762.4" y="291.0" width="60.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="765.4" y="302.0">__do_s..</text>
</g>
<g>
<title>net_rx_action (151 samples, 5.10%)</title><rect x="762.8" y="275.0" width="60.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="765.8" y="286.0">net_rx..</text>
</g>
<g>
<title>__netif_receive_skb (1 samples, 0.03%)</title><rect x="764.0" y="259.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="767.0" y="270.0"></text>
</g>
<g>
<title>process_backlog (147 samples, 4.97%)</title><rect x="764.4" y="259.0" width="58.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="767.4" y="270.0">proces..</text>
</g>
<g>
<title>__netif_receive_skb (146 samples, 4.94%)</title><rect x="764.8" y="243.0" width="58.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="767.8" y="254.0">__neti..</text>
</g>
<g>
<title>__netif_receive_skb_core (146 samples, 4.94%)</title><rect x="764.8" y="227.0" width="58.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="767.8" y="238.0">__neti..</text>
</g>
<g>
<title>ip_rcv (142 samples, 4.80%)</title><rect x="765.9" y="211.0" width="56.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="768.9" y="222.0">ip_rcv</text>
</g>
<g>
<title>ip_rcv_finish (141 samples, 4.77%)</title><rect x="766.3" y="195.0" width="56.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="769.3" y="206.0">ip_rcv..</text>
</g>
<g>
<title>ip_local_deliver (139 samples, 4.70%)</title><rect x="767.1" y="179.0" width="55.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="770.1" y="190.0">ip_lo..</text>
</g>
<g>
<title>ip_local_deliver_finish (138 samples, 4.67%)</title><rect x="767.1" y="163.0" width="55.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="770.1" y="174.0">ip_lo..</text>
</g>
<g>
<title>raw_local_deliver (1 samples, 0.03%)</title><rect x="767.5" y="147.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="770.5" y="158.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (1 samples, 0.03%)</title><rect x="767.9" y="147.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="770.9" y="158.0"></text>
</g>
<g>
<title>sock_put (1 samples, 0.03%)</title><rect x="768.3" y="147.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="771.3" y="158.0"></text>
</g>
<g>
<title>tcp_v4_rcv (134 samples, 4.53%)</title><rect x="768.7" y="147.0" width="53.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="771.7" y="158.0">tcp_v..</text>
</g>
<g>
<title>__inet_lookup_established (2 samples, 0.07%)</title><rect x="769.5" y="131.0" width="0.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="772.5" y="142.0"></text>
</g>
<g>
<title>inet_ehashfn (1 samples, 0.03%)</title><rect x="769.9" y="115.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="772.9" y="126.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (2 samples, 0.07%)</title><rect x="770.3" y="131.0" width="0.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="773.3" y="142.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (1 samples, 0.03%)</title><rect x="770.3" y="115.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="773.3" y="126.0"></text>
</g>
<g>
<title>apparmor_socket_sock_rcv_skb (1 samples, 0.03%)</title><rect x="770.7" y="115.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="773.7" y="126.0"></text>
</g>
<g>
<title>tcp_rcv_established (1 samples, 0.03%)</title><rect x="771.1" y="131.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="774.1" y="142.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (127 samples, 4.29%)</title><rect x="771.5" y="131.0" width="50.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="774.5" y="142.0">tcp_v..</text>
</g>
<g>
<title>tcp_data_queue (2 samples, 0.07%)</title><rect x="771.5" y="115.0" width="0.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="774.5" y="126.0"></text>
</g>
<g>
<title>tcp_rcv_established (124 samples, 4.19%)</title><rect x="772.3" y="115.0" width="49.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="775.3" y="126.0">tcp_r..</text>
</g>
<g>
<title>__tcp_ack_snd_check (2 samples, 0.07%)</title><rect x="773.1" y="99.0" width="0.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="776.1" y="110.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (2 samples, 0.07%)</title><rect x="773.1" y="83.0" width="0.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="776.1" y="94.0"></text>
</g>
<g>
<title>sk_reset_timer (2 samples, 0.07%)</title><rect x="773.1" y="67.0" width="0.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="776.1" y="78.0"></text>
</g>
<g>
<title>mod_timer (2 samples, 0.07%)</title><rect x="773.1" y="51.0" width="0.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="776.1" y="62.0"></text>
</g>
<g>
<title>__lock_text_start (2 samples, 0.07%)</title><rect x="773.1" y="35.0" width="0.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="776.1" y="46.0"></text>
</g>
<g>
<title>bictcp_cong_avoid (1 samples, 0.03%)</title><rect x="773.9" y="99.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="776.9" y="110.0"></text>
</g>
<g>
<title>sched_clock_cpu (2 samples, 0.07%)</title><rect x="774.3" y="99.0" width="0.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="777.3" y="110.0"></text>
</g>
<g>
<title>sched_clock (2 samples, 0.07%)</title><rect x="774.3" y="83.0" width="0.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="777.3" y="94.0"></text>
</g>
<g>
<title>kvm_sched_clock_read (2 samples, 0.07%)</title><rect x="774.3" y="67.0" width="0.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="777.3" y="78.0"></text>
</g>
<g>
<title>pvclock_clocksource_read (2 samples, 0.07%)</title><rect x="774.3" y="51.0" width="0.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="777.3" y="62.0"></text>
</g>
<g>
<title>sock_def_readable (4 samples, 0.14%)</title><rect x="775.1" y="99.0" width="1.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="778.1" y="110.0"></text>
</g>
<g>
<title>__wake_up_sync_key (4 samples, 0.14%)</title><rect x="775.1" y="83.0" width="1.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="778.1" y="94.0"></text>
</g>
<g>
<title>__wake_up_common_lock (4 samples, 0.14%)</title><rect x="775.1" y="67.0" width="1.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="778.1" y="78.0"></text>
</g>
<g>
<title>__lock_text_start (4 samples, 0.14%)</title><rect x="775.1" y="51.0" width="1.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="778.1" y="62.0"></text>
</g>
<g>
<title>tcp_ack (8 samples, 0.27%)</title><rect x="776.7" y="99.0" width="3.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="779.7" y="110.0"></text>
</g>
<g>
<title>bictcp_acked (2 samples, 0.07%)</title><rect x="777.1" y="83.0" width="0.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="780.1" y="94.0"></text>
</g>
<g>
<title>bictcp_cong_avoid (1 samples, 0.03%)</title><rect x="777.9" y="83.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="780.9" y="94.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (4 samples, 0.14%)</title><rect x="778.3" y="83.0" width="1.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="781.3" y="94.0"></text>
</g>
<g>
<title>bictcp_acked (1 samples, 0.03%)</title><rect x="778.3" y="67.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="781.3" y="78.0"></text>
</g>
<g>
<title>minmax_running_min (1 samples, 0.03%)</title><rect x="778.7" y="67.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="781.7" y="78.0"></text>
</g>
<g>
<title>tcp_rack_advance (2 samples, 0.07%)</title><rect x="779.1" y="67.0" width="0.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="782.1" y="78.0"></text>
</g>
<g>
<title>tcp_check_space (1 samples, 0.03%)</title><rect x="779.9" y="99.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="782.9" y="110.0"></text>
</g>
<g>
<title>tcp_data_queue (104 samples, 3.52%)</title><rect x="780.3" y="99.0" width="41.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="783.3" y="110.0">tcp..</text>
</g>
<g>
<title>sock_def_readable (103 samples, 3.48%)</title><rect x="780.3" y="83.0" width="41.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="783.3" y="94.0">soc..</text>
</g>
<g>
<title>__wake_up_sync_key (100 samples, 3.38%)</title><rect x="781.5" y="67.0" width="39.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="784.5" y="78.0">__w..</text>
</g>
<g>
<title>__wake_up_common_lock (100 samples, 3.38%)</title><rect x="781.5" y="51.0" width="39.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="784.5" y="62.0">__w..</text>
</g>
<g>
<title>__lock_text_start (100 samples, 3.38%)</title><rect x="781.5" y="35.0" width="39.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="784.5" y="46.0">__l..</text>
</g>
<g>
<title>tcp_event_data_recv (1 samples, 0.03%)</title><rect x="821.4" y="83.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="824.4" y="94.0"></text>
</g>
<g>
<title>tcp_urg (1 samples, 0.03%)</title><rect x="821.8" y="115.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="824.8" y="126.0"></text>
</g>
<g>
<title>tcp_v4_rcv (1 samples, 0.03%)</title><rect x="822.2" y="163.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="825.2" y="174.0"></text>
</g>
<g>
<title>ip_rcv_finish (1 samples, 0.03%)</title><rect x="822.6" y="211.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="825.6" y="222.0"></text>
</g>
<g>
<title>net_rx_action (1 samples, 0.03%)</title><rect x="823.0" y="291.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="826.0" y="302.0"></text>
</g>
<g>
<title>dev_queue_xmit (16 samples, 0.54%)</title><rect x="823.4" y="355.0" width="6.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="826.4" y="366.0"></text>
</g>
<g>
<title>__dev_queue_xmit (16 samples, 0.54%)</title><rect x="823.4" y="339.0" width="6.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="826.4" y="350.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (8 samples, 0.27%)</title><rect x="824.6" y="323.0" width="3.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="827.6" y="334.0"></text>
</g>
<g>
<title>eth_type_trans (2 samples, 0.07%)</title><rect x="825.8" y="307.0" width="0.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="828.8" y="318.0"></text>
</g>
<g>
<title>loopback_xmit (2 samples, 0.07%)</title><rect x="826.6" y="307.0" width="0.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="829.6" y="318.0"></text>
</g>
<g>
<title>netif_rx (1 samples, 0.03%)</title><rect x="827.0" y="291.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="830.0" y="302.0"></text>
</g>
<g>
<title>netif_rx_internal (1 samples, 0.03%)</title><rect x="827.0" y="275.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="830.0" y="286.0"></text>
</g>
<g>
<title>enqueue_to_backlog (1 samples, 0.03%)</title><rect x="827.0" y="259.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="830.0" y="270.0"></text>
</g>
<g>
<title>skb_clone_tx_timestamp (1 samples, 0.03%)</title><rect x="827.4" y="307.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="830.4" y="318.0"></text>
</g>
<g>
<title>loopback_xmit (1 samples, 0.03%)</title><rect x="827.8" y="323.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="830.8" y="334.0"></text>
</g>
<g>
<title>netdev_pick_tx (1 samples, 0.03%)</title><rect x="828.2" y="323.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="831.2" y="334.0"></text>
</g>
<g>
<title>validate_xmit_skb (2 samples, 0.07%)</title><rect x="828.6" y="323.0" width="0.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="831.6" y="334.0"></text>
</g>
<g>
<title>netif_skb_features (1 samples, 0.03%)</title><rect x="829.0" y="307.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="832.0" y="318.0"></text>
</g>
<g>
<title>validate_xmit_xfrm (1 samples, 0.03%)</title><rect x="829.4" y="323.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="832.4" y="334.0"></text>
</g>
<g>
<title>ipv4_dst_check (1 samples, 0.03%)</title><rect x="829.8" y="419.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="832.8" y="430.0"></text>
</g>
<g>
<title>tcp_options_write (1 samples, 0.03%)</title><rect x="830.2" y="435.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="833.2" y="446.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (1 samples, 0.03%)</title><rect x="830.6" y="451.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="833.6" y="462.0"></text>
</g>
<g>
<title>sched_clock_cpu (1 samples, 0.03%)</title><rect x="831.0" y="451.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="834.0" y="462.0"></text>
</g>
<g>
<title>kvm_sched_clock_read (1 samples, 0.03%)</title><rect x="831.0" y="435.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="834.0" y="446.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (1 samples, 0.03%)</title><rect x="831.4" y="451.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="834.4" y="462.0"></text>
</g>
<g>
<title>rb_insert_color (1 samples, 0.03%)</title><rect x="831.4" y="435.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="834.4" y="446.0"></text>
</g>
<g>
<title>tcp_init_tso_segs (1 samples, 0.03%)</title><rect x="831.8" y="451.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="834.8" y="462.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (1 samples, 0.03%)</title><rect x="832.2" y="451.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="835.2" y="462.0"></text>
</g>
<g>
<title>tcp_write_xmit (1 samples, 0.03%)</title><rect x="832.6" y="483.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="835.6" y="494.0"></text>
</g>
<g>
<title>tcp_send_mss (5 samples, 0.17%)</title><rect x="833.0" y="499.0" width="2.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="836.0" y="510.0"></text>
</g>
<g>
<title>ipv4_mtu (1 samples, 0.03%)</title><rect x="833.4" y="483.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="836.4" y="494.0"></text>
</g>
<g>
<title>tcp_current_mss (3 samples, 0.10%)</title><rect x="833.8" y="483.0" width="1.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="836.8" y="494.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (1 samples, 0.03%)</title><rect x="835.0" y="531.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="838.0" y="542.0"></text>
</g>
<g>
<title>security_socket_sendmsg (2 samples, 0.07%)</title><rect x="835.4" y="547.0" width="0.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="838.4" y="558.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (2 samples, 0.07%)</title><rect x="835.4" y="531.0" width="0.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="838.4" y="542.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (2 samples, 0.07%)</title><rect x="835.4" y="515.0" width="0.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="838.4" y="526.0"></text>
</g>
<g>
<title>tcp_sendmsg (1 samples, 0.03%)</title><rect x="836.2" y="547.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="839.2" y="558.0"></text>
</g>
<g>
<title>fsnotify (3 samples, 0.10%)</title><rect x="836.6" y="611.0" width="1.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="839.6" y="622.0"></text>
</g>
<g>
<title>rw_verify_area (3 samples, 0.10%)</title><rect x="837.8" y="611.0" width="1.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="840.8" y="622.0"></text>
</g>
<g>
<title>security_file_permission (1 samples, 0.03%)</title><rect x="838.6" y="595.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="841.6" y="606.0"></text>
</g>
<g>
<title>apparmor_file_permission (1 samples, 0.03%)</title><rect x="838.6" y="579.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="841.6" y="590.0"></text>
</g>
<g>
<title>common_file_perm (1 samples, 0.03%)</title><rect x="838.6" y="563.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="841.6" y="574.0"></text>
</g>
<g>
<title>aa_file_perm (1 samples, 0.03%)</title><rect x="838.6" y="547.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="841.6" y="558.0"></text>
</g>
<g>
<title>__write (1 samples, 0.03%)</title><rect x="839.0" y="691.0" width="0.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="842.0" y="702.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginWrite (5 samples, 0.17%)</title><rect x="839.4" y="771.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="842.4" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (2 samples, 0.07%)</title><rect x="840.5" y="755.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="843.5" y="766.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_NativeThread_current (2 samples, 0.07%)</title><rect x="840.5" y="739.0" width="0.8" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="843.5" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.endWrite (1 samples, 0.03%)</title><rect x="841.3" y="771.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="844.3" y="782.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (1 samples, 0.03%)</title><rect x="841.3" y="755.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="844.3" y="766.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="841.7" y="819.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="844.7" y="830.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="841.7" y="803.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="844.7" y="814.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="841.7" y="787.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="844.7" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor.getOutputStream (140 samples, 4.73%)</title><rect x="842.1" y="835.0" width="55.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="845.1" y="846.0">sun/n..</text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (133 samples, 4.50%)</title><rect x="844.9" y="819.0" width="53.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="847.9" y="830.0">java/..</text>
</g>
<g>
<title>JVM_DoPrivileged (7 samples, 0.24%)</title><rect x="845.3" y="803.0" width="2.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="848.3" y="814.0"></text>
</g>
<g>
<title>Java_java_security_AccessController_doPrivileged__Ljava_security_PrivilegedExceptionAction_2 (117 samples, 3.96%)</title><rect x="848.1" y="803.0" width="46.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="851.1" y="814.0">Java..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;CardTableBarrierSet::AccessBarrier&lt;1097812ull, CardTableBarrierSet&gt;, (AccessInternal::BarrierType)2, 1097812ull&gt;::oop_access_barrier(void*) (1 samples, 0.03%)</title><rect x="848.9" y="787.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="851.9" y="798.0"></text>
</g>
<g>
<title>GrowableArray&lt;Metadata*&gt;::append(Metadata* const&amp;) (2 samples, 0.07%)</title><rect x="849.3" y="787.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="852.3" y="798.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (5 samples, 0.17%)</title><rect x="850.1" y="787.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="853.1" y="798.0"></text>
</g>
<g>
<title>JVM_DoPrivileged (96 samples, 3.25%)</title><rect x="852.1" y="787.0" width="38.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="855.1" y="798.0">JVM..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;CardTableBarrierSet::AccessBarrier&lt;5292116ull, CardTableBarrierSet&gt;, (AccessInternal::BarrierType)0, 5292116ull&gt;::oop_access_barrier(void*, oopDesc*) (1 samples, 0.03%)</title><rect x="853.7" y="771.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="856.7" y="782.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (1 samples, 0.03%)</title><rect x="854.1" y="771.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="857.1" y="782.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.03%)</title><rect x="854.5" y="771.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="857.5" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.03%)</title><rect x="854.9" y="771.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="857.9" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) [clone .constprop.224] (1 samples, 0.03%)</title><rect x="854.9" y="755.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="857.9" y="766.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (24 samples, 0.81%)</title><rect x="855.3" y="771.0" width="9.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="858.3" y="782.0"></text>
</g>
<g>
<title>.L409 (9 samples, 0.30%)</title><rect x="855.7" y="755.0" width="3.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="858.7" y="766.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (2 samples, 0.07%)</title><rect x="855.7" y="739.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="858.7" y="750.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (3 samples, 0.10%)</title><rect x="856.5" y="739.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="859.5" y="750.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (3 samples, 0.10%)</title><rect x="856.5" y="723.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="859.5" y="734.0"></text>
</g>
<g>
<title>JavaThread::can_call_java() const (3 samples, 0.10%)</title><rect x="857.7" y="739.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="860.7" y="750.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (1 samples, 0.03%)</title><rect x="858.9" y="739.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="861.9" y="750.0"></text>
</g>
<g>
<title>JNIHandleBlock::release_block(JNIHandleBlock*, Thread*) (1 samples, 0.03%)</title><rect x="859.3" y="755.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="862.3" y="766.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (7 samples, 0.24%)</title><rect x="859.7" y="755.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="862.7" y="766.0"></text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="860.5" y="739.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="863.5" y="750.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (3 samples, 0.10%)</title><rect x="860.9" y="739.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="863.9" y="750.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="862.1" y="739.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="865.1" y="750.0"></text>
</g>
<g>
<title>os::current_stack_pointer() (4 samples, 0.14%)</title><rect x="862.5" y="755.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="865.5" y="766.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (2 samples, 0.07%)</title><rect x="864.1" y="755.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="867.1" y="766.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.03%)</title><rect x="864.9" y="771.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="867.9" y="782.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.03%)</title><rect x="865.3" y="771.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="868.3" y="782.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.03%)</title><rect x="865.7" y="771.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="868.7" y="782.0"></text>
</g>
<g>
<title>Method::is_ignored_by_security_stack_walk() const (2 samples, 0.07%)</title><rect x="866.1" y="771.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="869.1" y="782.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.186] (2 samples, 0.07%)</title><rect x="866.9" y="771.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="869.9" y="782.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="867.7" y="771.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="870.7" y="782.0"></text>
</g>
<g>
<title>frame::is_interpreted_frame() const (1 samples, 0.03%)</title><rect x="868.1" y="771.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="871.1" y="782.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (2 samples, 0.07%)</title><rect x="868.5" y="771.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="871.5" y="782.0"></text>
</g>
<g>
<title>os::os_exception_wrapper(void (*)(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*), JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.07%)</title><rect x="869.3" y="771.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="872.3" y="782.0"></text>
</g>
<g>
<title>vframeStream::vframeStream(JavaThread*, bool) (27 samples, 0.91%)</title><rect x="870.1" y="771.0" width="10.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="873.1" y="782.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.07%)</title><rect x="871.3" y="755.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="874.3" y="766.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (22 samples, 0.74%)</title><rect x="872.1" y="755.0" width="8.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="875.1" y="766.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (13 samples, 0.44%)</title><rect x="873.3" y="739.0" width="5.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="876.3" y="750.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (8 samples, 0.27%)</title><rect x="875.3" y="723.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="878.3" y="734.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.03%)</title><rect x="878.4" y="739.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="881.4" y="750.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (2 samples, 0.07%)</title><rect x="878.8" y="739.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="881.8" y="750.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (3 samples, 0.10%)</title><rect x="879.6" y="739.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="882.6" y="750.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_get_caller_frame(int) (24 samples, 0.81%)</title><rect x="880.8" y="771.0" width="9.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="883.8" y="782.0"></text>
</g>
<g>
<title>Klass::is_subclass_of(Klass const*) const (1 samples, 0.03%)</title><rect x="883.6" y="755.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="886.6" y="766.0"></text>
</g>
<g>
<title>Method::is_ignored_by_security_stack_walk() const (4 samples, 0.14%)</title><rect x="884.0" y="755.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="887.0" y="766.0"></text>
</g>
<g>
<title>Klass::is_subclass_of(Klass const*) const (2 samples, 0.07%)</title><rect x="884.8" y="739.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="887.8" y="750.0"></text>
</g>
<g>
<title>PcDescContainer::find_pc_desc_internal(unsigned char*, bool, PcDescSearch const&amp;) (1 samples, 0.03%)</title><rect x="885.6" y="755.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="888.6" y="766.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (9 samples, 0.30%)</title><rect x="886.0" y="755.0" width="3.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="889.0" y="766.0"></text>
</g>
<g>
<title>CodeBlob::is_deoptimization_stub() const (2 samples, 0.07%)</title><rect x="886.8" y="739.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="889.8" y="750.0"></text>
</g>
<g>
<title>frame::frame(int*, int*, int*, unsigned char*) (5 samples, 0.17%)</title><rect x="887.6" y="739.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="890.6" y="750.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (5 samples, 0.17%)</title><rect x="887.6" y="723.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="890.6" y="734.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (5 samples, 0.17%)</title><rect x="887.6" y="707.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="890.6" y="718.0"></text>
</g>
<g>
<title>resume_userspace (2 samples, 0.07%)</title><rect x="889.6" y="755.0" width="0.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="892.6" y="766.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.07%)</title><rect x="889.6" y="739.0" width="0.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="892.6" y="750.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.07%)</title><rect x="889.6" y="723.0" width="0.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="892.6" y="734.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.03%)</title><rect x="890.4" y="787.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="893.4" y="798.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.186] (2 samples, 0.07%)</title><rect x="890.8" y="787.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="893.8" y="798.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (2 samples, 0.07%)</title><rect x="891.6" y="787.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="894.6" y="798.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="892.0" y="771.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="895.0" y="782.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="892.0" y="755.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="895.0" y="766.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="892.0" y="739.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="895.0" y="750.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;false&gt;(_jobject*) (1 samples, 0.03%)</title><rect x="892.4" y="787.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="895.4" y="798.0"></text>
</g>
<g>
<title>vframeStream::vframeStream(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="892.8" y="787.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="895.8" y="798.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_get_caller_frame(int) (4 samples, 0.14%)</title><rect x="893.2" y="787.0" width="1.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="896.2" y="798.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="894.8" y="803.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="897.8" y="814.0"></text>
</g>
<g>
<title>__kernel_vsyscall (1 samples, 0.03%)</title><rect x="894.8" y="787.0" width="0.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="897.8" y="798.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (1 samples, 0.03%)</title><rect x="894.8" y="771.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="897.8" y="782.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (1 samples, 0.03%)</title><rect x="894.8" y="755.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="897.8" y="766.0"></text>
</g>
<g>
<title>sys_futex (1 samples, 0.03%)</title><rect x="894.8" y="739.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="897.8" y="750.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.03%)</title><rect x="894.8" y="723.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="897.8" y="734.0"></text>
</g>
<g>
<title>futex_wait (1 samples, 0.03%)</title><rect x="894.8" y="707.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="897.8" y="718.0"></text>
</g>
<g>
<title>futex_wait_queue_me (1 samples, 0.03%)</title><rect x="894.8" y="691.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="897.8" y="702.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="894.8" y="675.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="897.8" y="686.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.03%)</title><rect x="894.8" y="659.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="897.8" y="670.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="894.8" y="643.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="897.8" y="654.0"></text>
</g>
<g>
<title>call_stub (1 samples, 0.03%)</title><rect x="895.2" y="803.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="898.2" y="814.0"></text>
</g>
<g>
<title>resume_userspace (2 samples, 0.07%)</title><rect x="895.6" y="803.0" width="0.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="898.6" y="814.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.07%)</title><rect x="895.6" y="787.0" width="0.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="898.6" y="798.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.07%)</title><rect x="895.6" y="771.0" width="0.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="898.6" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor$2.run (4 samples, 0.14%)</title><rect x="896.4" y="803.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="899.4" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor$2.run (3 samples, 0.10%)</title><rect x="896.8" y="787.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="899.8" y="798.0"></text>
</g>
<g>
<title>java/nio/channels/Channels.newOutputStream (3 samples, 0.10%)</title><rect x="896.8" y="771.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="899.8" y="782.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (3 samples, 0.10%)</title><rect x="898.0" y="851.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="901.0" y="862.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LI_I (1 samples, 0.03%)</title><rect x="899.2" y="1027.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="902.2" y="1038.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.getAndSet (1 samples, 0.03%)</title><rect x="899.2" y="1011.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="902.2" y="1022.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getAndSetInt (1 samples, 0.03%)</title><rect x="899.2" y="995.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="902.2" y="1006.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.weakCompareAndSetInt (1 samples, 0.03%)</title><rect x="899.2" y="979.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="902.2" y="990.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (2 samples, 0.07%)</title><rect x="899.6" y="1027.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="902.6" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (1 samples, 0.03%)</title><rect x="899.6" y="1011.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="902.6" y="1022.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.03%)</title><rect x="899.6" y="995.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="902.6" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.03%)</title><rect x="900.0" y="1011.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="903.0" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.03%)</title><rect x="900.0" y="995.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="903.0" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.03%)</title><rect x="900.0" y="979.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="903.0" y="990.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.03%)</title><rect x="900.0" y="963.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="903.0" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.03%)</title><rect x="900.0" y="947.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="903.0" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.03%)</title><rect x="900.0" y="931.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="903.0" y="942.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.03%)</title><rect x="900.0" y="915.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="903.0" y="926.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (723 samples, 24.44%)</title><rect x="900.4" y="1027.0" width="288.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="903.4" y="1038.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>__vdso_gettimeofday (1 samples, 0.03%)</title><rect x="900.8" y="1011.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="903.8" y="1022.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (282 samples, 9.53%)</title><rect x="901.2" y="1011.0" width="112.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="904.2" y="1022.0">one/nio/net/Ja..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (17 samples, 0.57%)</title><rect x="901.2" y="995.0" width="6.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="904.2" y="1006.0"></text>
</g>
<g>
<title>__clock_gettime (10 samples, 0.34%)</title><rect x="903.2" y="979.0" width="4.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="906.2" y="990.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.07%)</title><rect x="903.6" y="963.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="906.6" y="974.0"></text>
</g>
<g>
<title>__kernel_vsyscall (2 samples, 0.07%)</title><rect x="903.6" y="947.0" width="0.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="906.6" y="958.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (2 samples, 0.07%)</title><rect x="903.6" y="931.0" width="0.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="906.6" y="942.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (2 samples, 0.07%)</title><rect x="903.6" y="915.0" width="0.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="906.6" y="926.0"></text>
</g>
<g>
<title>__kernel_vsyscall (6 samples, 0.20%)</title><rect x="904.4" y="963.0" width="2.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="907.4" y="974.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (6 samples, 0.20%)</title><rect x="904.4" y="947.0" width="2.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="907.4" y="958.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (5 samples, 0.17%)</title><rect x="904.4" y="931.0" width="2.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="907.4" y="942.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="904.4" y="915.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="907.4" y="926.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="904.4" y="899.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="907.4" y="910.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.03%)</title><rect x="904.4" y="883.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="907.4" y="894.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="904.4" y="867.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="907.4" y="878.0"></text>
</g>
<g>
<title>sys_clock_gettime (4 samples, 0.14%)</title><rect x="904.8" y="915.0" width="1.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="907.8" y="926.0"></text>
</g>
<g>
<title>_copy_to_user (1 samples, 0.03%)</title><rect x="905.6" y="899.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="908.6" y="910.0"></text>
</g>
<g>
<title>clockid_to_kclock.part.3 (1 samples, 0.03%)</title><rect x="906.0" y="899.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="909.0" y="910.0"></text>
</g>
<g>
<title>sys_clock_gettime (1 samples, 0.03%)</title><rect x="906.4" y="931.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="909.4" y="942.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (1 samples, 0.03%)</title><rect x="906.8" y="963.0" width="0.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="909.8" y="974.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (2 samples, 0.07%)</title><rect x="907.2" y="979.0" width="0.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="910.2" y="990.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (4 samples, 0.14%)</title><rect x="908.0" y="995.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="911.0" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (4 samples, 0.14%)</title><rect x="908.0" y="979.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="911.0" y="990.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (261 samples, 8.82%)</title><rect x="909.6" y="995.0" width="104.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="912.6" y="1006.0">sun/nio/ch/S..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (260 samples, 8.79%)</title><rect x="910.0" y="979.0" width="103.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="913.0" y="990.0">sun/nio/ch/S..</text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (253 samples, 8.55%)</title><rect x="912.8" y="963.0" width="100.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="915.8" y="974.0">sun/nio/ch/E..</text>
</g>
<g>
<title>java/lang/Math.min (1 samples, 0.03%)</title><rect x="913.9" y="947.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="916.9" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/EPoll.wait (234 samples, 7.91%)</title><rect x="914.3" y="947.0" width="93.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="917.3" y="958.0">sun/nio/ch/..</text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (4 samples, 0.14%)</title><rect x="916.3" y="931.0" width="1.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="919.3" y="942.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_EPoll_wait (3 samples, 0.10%)</title><rect x="917.9" y="931.0" width="1.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="920.9" y="942.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="918.7" y="915.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="921.7" y="926.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="918.7" y="899.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="921.7" y="910.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="918.7" y="883.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="921.7" y="894.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="919.1" y="931.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="922.1" y="942.0"></text>
</g>
<g>
<title>__kernel_vsyscall (1 samples, 0.03%)</title><rect x="919.1" y="915.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="922.1" y="926.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (1 samples, 0.03%)</title><rect x="919.1" y="899.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="922.1" y="910.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (1 samples, 0.03%)</title><rect x="919.1" y="883.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="922.1" y="894.0"></text>
</g>
<g>
<title>__kernel_vsyscall (214 samples, 7.23%)</title><rect x="919.5" y="931.0" width="85.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="922.5" y="942.0">__kernel_v..</text>
</g>
<g>
<title>entry_SYSENTER_32 (212 samples, 7.17%)</title><rect x="920.3" y="915.0" width="84.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="923.3" y="926.0">entry_SYSE..</text>
</g>
<g>
<title>do_fast_syscall_32 (212 samples, 7.17%)</title><rect x="920.3" y="899.0" width="84.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="923.3" y="910.0">do_fast_sy..</text>
</g>
<g>
<title>sys_epoll_wait (210 samples, 7.10%)</title><rect x="921.1" y="883.0" width="83.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="924.1" y="894.0">sys_epoll..</text>
</g>
<g>
<title>_raw_spin_lock_irqsave (1 samples, 0.03%)</title><rect x="921.9" y="867.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="924.9" y="878.0"></text>
</g>
<g>
<title>ep_poll (204 samples, 6.90%)</title><rect x="922.3" y="867.0" width="81.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="925.3" y="878.0">ep_poll</text>
</g>
<g>
<title>__lock_text_start (7 samples, 0.24%)</title><rect x="922.7" y="851.0" width="2.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="925.7" y="862.0"></text>
</g>
<g>
<title>_raw_spin_lock_irqsave (1 samples, 0.03%)</title><rect x="925.5" y="851.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="928.5" y="862.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.16 (18 samples, 0.61%)</title><rect x="925.9" y="851.0" width="7.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="928.9" y="862.0"></text>
</g>
<g>
<title>__lock_text_start (3 samples, 0.10%)</title><rect x="925.9" y="835.0" width="1.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="928.9" y="846.0"></text>
</g>
<g>
<title>_raw_spin_lock_irqsave (1 samples, 0.03%)</title><rect x="927.1" y="835.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="930.1" y="846.0"></text>
</g>
<g>
<title>ep_send_events_proc (14 samples, 0.47%)</title><rect x="927.5" y="835.0" width="5.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="930.5" y="846.0"></text>
</g>
<g>
<title>ep_item_poll.isra.12 (7 samples, 0.24%)</title><rect x="929.1" y="819.0" width="2.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="932.1" y="830.0"></text>
</g>
<g>
<title>sock_poll (6 samples, 0.20%)</title><rect x="929.5" y="803.0" width="2.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="932.5" y="814.0"></text>
</g>
<g>
<title>tcp_poll (2 samples, 0.07%)</title><rect x="931.1" y="787.0" width="0.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="934.1" y="798.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (1 samples, 0.03%)</title><rect x="931.5" y="771.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="934.5" y="782.0"></text>
</g>
<g>
<title>sock_poll (3 samples, 0.10%)</title><rect x="931.9" y="819.0" width="1.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="934.9" y="830.0"></text>
</g>
<g>
<title>mutex_lock (1 samples, 0.03%)</title><rect x="933.1" y="851.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="936.1" y="862.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (176 samples, 5.95%)</title><rect x="933.5" y="851.0" width="70.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="936.5" y="862.0">schedule..</text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (176 samples, 5.95%)</title><rect x="933.5" y="835.0" width="70.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="936.5" y="846.0">schedule..</text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.03%)</title><rect x="933.5" y="819.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="936.5" y="830.0"></text>
</g>
<g>
<title>schedule (175 samples, 5.92%)</title><rect x="933.9" y="819.0" width="69.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="936.9" y="830.0">schedule</text>
</g>
<g>
<title>__sched_text_start (175 samples, 5.92%)</title><rect x="933.9" y="803.0" width="69.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="936.9" y="814.0">__sched..</text>
</g>
<g>
<title>finish_task_switch (170 samples, 5.75%)</title><rect x="935.9" y="787.0" width="67.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="938.9" y="798.0">finish_..</text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.03%)</title><rect x="1003.3" y="771.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1006.3" y="782.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="1003.3" y="755.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1006.3" y="766.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.03%)</title><rect x="1003.3" y="739.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1006.3" y="750.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.03%)</title><rect x="1003.3" y="723.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1006.3" y="734.0"></text>
</g>
<g>
<title>call_on_stack (1 samples, 0.03%)</title><rect x="1003.3" y="707.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1006.3" y="718.0"></text>
</g>
<g>
<title>__do_softirq (1 samples, 0.03%)</title><rect x="1003.3" y="691.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1006.3" y="702.0"></text>
</g>
<g>
<title>fput (3 samples, 0.10%)</title><rect x="1003.7" y="867.0" width="1.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1006.7" y="878.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="1004.9" y="931.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1007.9" y="942.0"></text>
</g>
<g>
<title>epoll_wait (6 samples, 0.20%)</title><rect x="1005.3" y="931.0" width="2.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1008.3" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.processEvents (8 samples, 0.27%)</title><rect x="1007.7" y="947.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1010.7" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/EPoll.getEvent (1 samples, 0.03%)</title><rect x="1008.9" y="931.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1011.9" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (4 samples, 0.14%)</title><rect x="1009.3" y="931.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1012.3" y="942.0"></text>
</g>
<g>
<title>java/util/HashSet.add (3 samples, 0.10%)</title><rect x="1009.3" y="915.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1012.3" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.10%)</title><rect x="1009.3" y="899.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1012.3" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.03%)</title><rect x="1009.3" y="883.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1012.3" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.07%)</title><rect x="1009.7" y="883.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1012.7" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.07%)</title><rect x="1009.7" y="867.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1012.7" y="878.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.03%)</title><rect x="1010.5" y="915.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1013.5" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.03%)</title><rect x="1010.5" y="899.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1013.5" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.03%)</title><rect x="1010.5" y="883.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1013.5" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.processUpdateQueue (1 samples, 0.03%)</title><rect x="1010.9" y="947.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1013.9" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (2 samples, 0.07%)</title><rect x="1011.3" y="947.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1014.3" y="958.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (2 samples, 0.07%)</title><rect x="1011.3" y="931.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1014.3" y="942.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.03%)</title><rect x="1011.3" y="915.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1014.3" y="926.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.03%)</title><rect x="1011.7" y="915.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1014.7" y="926.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.end (3 samples, 0.10%)</title><rect x="1012.1" y="947.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1015.1" y="958.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (3 samples, 0.10%)</title><rect x="1012.1" y="931.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1015.1" y="942.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (3 samples, 0.10%)</title><rect x="1012.1" y="915.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1015.1" y="926.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.03%)</title><rect x="1012.9" y="899.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1015.9" y="910.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.03%)</title><rect x="1012.9" y="883.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1015.9" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (1 samples, 0.03%)</title><rect x="1013.3" y="947.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1016.3" y="958.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="1013.3" y="931.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1016.3" y="942.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="1013.3" y="915.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1016.3" y="926.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="1013.3" y="899.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1016.3" y="910.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (430 samples, 14.54%)</title><rect x="1013.7" y="1011.0" width="171.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1016.7" y="1022.0">one/nio/net/Session.pr..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (430 samples, 14.54%)</title><rect x="1013.7" y="995.0" width="171.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1016.7" y="1006.0">one/nio/http/HttpSessi..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (285 samples, 9.63%)</title><rect x="1013.7" y="979.0" width="113.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1016.7" y="990.0">one/nio/http/H..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (264 samples, 8.92%)</title><rect x="1022.1" y="963.0" width="105.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1025.1" y="974.0">one/nio/http/..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (264 samples, 8.92%)</title><rect x="1022.1" y="947.0" width="105.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1025.1" y="958.0">one/nio/http/..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (242 samples, 8.18%)</title><rect x="1023.3" y="931.0" width="96.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1026.3" y="942.0">RequestHand..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (4 samples, 0.14%)</title><rect x="1023.3" y="915.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1026.3" y="926.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.03%)</title><rect x="1024.4" y="899.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1027.4" y="910.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ServiceImpl.entity (238 samples, 8.05%)</title><rect x="1024.8" y="915.0" width="95.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1027.8" y="926.0">ru/mail/pol..</text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ServiceImpl.executeAsync (238 samples, 8.05%)</title><rect x="1024.8" y="899.0" width="95.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1027.8" y="910.0">ru/mail/pol..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (238 samples, 8.05%)</title><rect x="1024.8" y="883.0" width="95.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1027.8" y="894.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (226 samples, 7.64%)</title><rect x="1029.6" y="867.0" width="90.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1032.6" y="878.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (215 samples, 7.27%)</title><rect x="1029.6" y="851.0" width="85.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1032.6" y="862.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (4 samples, 0.14%)</title><rect x="1029.6" y="835.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1032.6" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (4 samples, 0.14%)</title><rect x="1029.6" y="819.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1032.6" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (4 samples, 0.14%)</title><rect x="1029.6" y="803.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1032.6" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (211 samples, 7.13%)</title><rect x="1031.2" y="835.0" width="84.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1034.2" y="846.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (211 samples, 7.13%)</title><rect x="1031.2" y="819.0" width="84.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1034.2" y="830.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (211 samples, 7.13%)</title><rect x="1031.2" y="803.0" width="84.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1034.2" y="814.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (211 samples, 7.13%)</title><rect x="1031.2" y="787.0" width="84.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1034.2" y="798.0">java/util/..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (210 samples, 7.10%)</title><rect x="1031.6" y="771.0" width="83.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1034.6" y="782.0">jdk/inter..</text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.07%)</title><rect x="1031.6" y="755.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1034.6" y="766.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.03%)</title><rect x="1032.4" y="755.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1035.4" y="766.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (2 samples, 0.07%)</title><rect x="1032.8" y="755.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1035.8" y="766.0"></text>
</g>
<g>
<title>Unsafe_Unpark (27 samples, 0.91%)</title><rect x="1033.6" y="755.0" width="10.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1036.6" y="766.0"></text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (1 samples, 0.03%)</title><rect x="1034.8" y="739.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1037.8" y="750.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;CardTableBarrierSet::AccessBarrier&lt;1097812ull, CardTableBarrierSet&gt;, (AccessInternal::BarrierType)2, 1097812ull&gt;::oop_access_barrier(void*) (3 samples, 0.10%)</title><rect x="1035.2" y="739.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1038.2" y="750.0"></text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.07%)</title><rect x="1036.4" y="739.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1039.4" y="750.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.07%)</title><rect x="1037.2" y="739.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1040.2" y="750.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.03%)</title><rect x="1037.2" y="723.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1040.2" y="734.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.03%)</title><rect x="1037.6" y="723.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1040.6" y="734.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (2 samples, 0.07%)</title><rect x="1038.0" y="739.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1041.0" y="750.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_lock (4 samples, 0.14%)</title><rect x="1038.8" y="739.0" width="1.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1041.8" y="750.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (2 samples, 0.07%)</title><rect x="1040.4" y="739.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1043.4" y="750.0"></text>
</g>
<g>
<title>_init (2 samples, 0.07%)</title><rect x="1041.2" y="739.0" width="0.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1044.2" y="750.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.03%)</title><rect x="1042.0" y="739.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1045.0" y="750.0"></text>
</g>
<g>
<title>pthread_cond_signal (2 samples, 0.07%)</title><rect x="1042.4" y="739.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1045.4" y="750.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.03%)</title><rect x="1043.2" y="739.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1046.2" y="750.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (2 samples, 0.07%)</title><rect x="1043.6" y="739.0" width="0.8" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1046.6" y="750.0"></text>
</g>
<g>
<title>[unknown] (175 samples, 5.92%)</title><rect x="1044.4" y="755.0" width="69.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1047.4" y="766.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1044.4" y="739.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1047.4" y="750.0"></text>
</g>
<g>
<title>__kernel_vsyscall (1 samples, 0.03%)</title><rect x="1044.4" y="723.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1047.4" y="734.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (1 samples, 0.03%)</title><rect x="1044.4" y="707.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1047.4" y="718.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (1 samples, 0.03%)</title><rect x="1044.4" y="691.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1047.4" y="702.0"></text>
</g>
<g>
<title>__kernel_vsyscall (174 samples, 5.88%)</title><rect x="1044.8" y="739.0" width="69.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1047.8" y="750.0">__kerne..</text>
</g>
<g>
<title>entry_SYSENTER_32 (174 samples, 5.88%)</title><rect x="1044.8" y="723.0" width="69.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1047.8" y="734.0">entry_S..</text>
</g>
<g>
<title>do_fast_syscall_32 (174 samples, 5.88%)</title><rect x="1044.8" y="707.0" width="69.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1047.8" y="718.0">do_fast..</text>
</g>
<g>
<title>do_futex (1 samples, 0.03%)</title><rect x="1044.8" y="691.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1047.8" y="702.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="1045.2" y="691.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1048.2" y="702.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="1045.2" y="675.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1048.2" y="686.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.03%)</title><rect x="1045.2" y="659.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1048.2" y="670.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="1045.2" y="643.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1048.2" y="654.0"></text>
</g>
<g>
<title>sys_futex (172 samples, 5.81%)</title><rect x="1045.6" y="691.0" width="68.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1048.6" y="702.0">sys_futex</text>
</g>
<g>
<title>do_futex (171 samples, 5.78%)</title><rect x="1045.6" y="675.0" width="68.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1048.6" y="686.0">do_futex</text>
</g>
<g>
<title>futex_wake (169 samples, 5.71%)</title><rect x="1046.0" y="659.0" width="67.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1049.0" y="670.0">futex_w..</text>
</g>
<g>
<title>__pv_queued_spin_unlock (1 samples, 0.03%)</title><rect x="1047.6" y="643.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1050.6" y="654.0"></text>
</g>
<g>
<title>__raw_callee_save___pv_queued_spin_unlock (1 samples, 0.03%)</title><rect x="1048.0" y="643.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1051.0" y="654.0"></text>
</g>
<g>
<title>__pv_queued_spin_unlock (1 samples, 0.03%)</title><rect x="1048.0" y="627.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1051.0" y="638.0"></text>
</g>
<g>
<title>drop_futex_key_refs.isra.11 (1 samples, 0.03%)</title><rect x="1048.4" y="643.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1051.4" y="654.0"></text>
</g>
<g>
<title>get_futex_key (4 samples, 0.14%)</title><rect x="1048.8" y="643.0" width="1.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1051.8" y="654.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.10 (1 samples, 0.03%)</title><rect x="1050.4" y="643.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1053.4" y="654.0"></text>
</g>
<g>
<title>mark_wake_futex (5 samples, 0.17%)</title><rect x="1050.8" y="643.0" width="2.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1053.8" y="654.0"></text>
</g>
<g>
<title>plist_del (3 samples, 0.10%)</title><rect x="1051.2" y="627.0" width="1.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1054.2" y="638.0"></text>
</g>
<g>
<title>wake_q_add (1 samples, 0.03%)</title><rect x="1052.4" y="627.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1055.4" y="638.0"></text>
</g>
<g>
<title>wake_up_q (152 samples, 5.14%)</title><rect x="1052.8" y="643.0" width="60.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1055.8" y="654.0">wake_u..</text>
</g>
<g>
<title>try_to_wake_up (152 samples, 5.14%)</title><rect x="1052.8" y="627.0" width="60.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1055.8" y="638.0">try_to..</text>
</g>
<g>
<title>__lock_text_start (152 samples, 5.14%)</title><rect x="1052.8" y="611.0" width="60.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1055.8" y="622.0">__lock..</text>
</g>
<g>
<title>common_interrupt (1 samples, 0.03%)</title><rect x="1113.0" y="595.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1116.0" y="606.0"></text>
</g>
<g>
<title>do_IRQ (1 samples, 0.03%)</title><rect x="1113.0" y="579.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1116.0" y="590.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.03%)</title><rect x="1113.0" y="563.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1116.0" y="574.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.03%)</title><rect x="1113.0" y="547.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1116.0" y="558.0"></text>
</g>
<g>
<title>call_on_stack (1 samples, 0.03%)</title><rect x="1113.0" y="531.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1116.0" y="542.0"></text>
</g>
<g>
<title>__do_softirq (1 samples, 0.03%)</title><rect x="1113.0" y="515.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1116.0" y="526.0"></text>
</g>
<g>
<title>blk_done_softirq (1 samples, 0.03%)</title><rect x="1113.0" y="499.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1116.0" y="510.0"></text>
</g>
<g>
<title>scsi_softirq_done (1 samples, 0.03%)</title><rect x="1113.0" y="483.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1116.0" y="494.0"></text>
</g>
<g>
<title>scsi_finish_command (1 samples, 0.03%)</title><rect x="1113.0" y="467.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1116.0" y="478.0"></text>
</g>
<g>
<title>scsi_io_completion (1 samples, 0.03%)</title><rect x="1113.0" y="451.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1116.0" y="462.0"></text>
</g>
<g>
<title>scsi_end_request (1 samples, 0.03%)</title><rect x="1113.0" y="435.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1116.0" y="446.0"></text>
</g>
<g>
<title>scsi_run_queue (1 samples, 0.03%)</title><rect x="1113.0" y="419.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1116.0" y="430.0"></text>
</g>
<g>
<title>blk_run_queue (1 samples, 0.03%)</title><rect x="1113.0" y="403.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1116.0" y="414.0"></text>
</g>
<g>
<title>__blk_run_queue (1 samples, 0.03%)</title><rect x="1113.0" y="387.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1116.0" y="398.0"></text>
</g>
<g>
<title>scsi_request_fn (1 samples, 0.03%)</title><rect x="1113.0" y="371.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1116.0" y="382.0"></text>
</g>
<g>
<title>scsi_dispatch_cmd (1 samples, 0.03%)</title><rect x="1113.0" y="355.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1116.0" y="366.0"></text>
</g>
<g>
<title>ata_scsi_queuecmd (1 samples, 0.03%)</title><rect x="1113.0" y="339.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1116.0" y="350.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="1113.0" y="323.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1116.0" y="334.0"></text>
</g>
<g>
<title>get_futex_key (1 samples, 0.03%)</title><rect x="1113.4" y="659.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1116.4" y="670.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.03%)</title><rect x="1113.8" y="675.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1116.8" y="686.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.ax (2 samples, 0.07%)</title><rect x="1114.2" y="755.0" width="0.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1117.2" y="766.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.03%)</title><rect x="1115.0" y="755.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1118.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.03%)</title><rect x="1115.4" y="851.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1118.4" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.03%)</title><rect x="1115.4" y="835.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1118.4" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.03%)</title><rect x="1115.4" y="819.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1118.4" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.03%)</title><rect x="1115.8" y="851.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1118.8" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.03%)</title><rect x="1115.8" y="835.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1118.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.03%)</title><rect x="1115.8" y="819.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1118.8" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (9 samples, 0.30%)</title><rect x="1116.2" y="851.0" width="3.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1119.2" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 0.30%)</title><rect x="1116.2" y="835.0" width="3.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1119.2" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 0.30%)</title><rect x="1116.2" y="819.0" width="3.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1119.2" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (9 samples, 0.30%)</title><rect x="1116.2" y="803.0" width="3.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1119.2" y="814.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (19 samples, 0.64%)</title><rect x="1119.8" y="931.0" width="7.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1122.8" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.get (19 samples, 0.64%)</title><rect x="1119.8" y="915.0" width="7.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1122.8" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (19 samples, 0.64%)</title><rect x="1119.8" y="899.0" width="7.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1122.8" y="910.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (145 samples, 4.90%)</title><rect x="1127.4" y="979.0" width="57.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1130.4" y="990.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (138 samples, 4.67%)</title><rect x="1130.2" y="963.0" width="55.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1133.2" y="974.0">one/n..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (138 samples, 4.67%)</title><rect x="1130.2" y="947.0" width="55.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1133.2" y="958.0">sun/n..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.03%)</title><rect x="1130.2" y="931.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1133.2" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="1130.2" y="915.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1133.2" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.03%)</title><rect x="1130.2" y="899.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1133.2" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="1130.2" y="883.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1133.2" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (130 samples, 4.39%)</title><rect x="1130.6" y="931.0" width="51.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1133.6" y="942.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (130 samples, 4.39%)</title><rect x="1130.6" y="915.0" width="51.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1133.6" y="926.0">sun/n..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (2 samples, 0.07%)</title><rect x="1130.6" y="899.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1133.6" y="910.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (2 samples, 0.07%)</title><rect x="1130.6" y="883.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1133.6" y="894.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (2 samples, 0.07%)</title><rect x="1130.6" y="867.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1133.6" y="878.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (2 samples, 0.07%)</title><rect x="1130.6" y="851.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1133.6" y="862.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (2 samples, 0.07%)</title><rect x="1130.6" y="835.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1133.6" y="846.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPointer (2 samples, 0.07%)</title><rect x="1130.6" y="819.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1133.6" y="830.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkOffset (2 samples, 0.07%)</title><rect x="1130.6" y="803.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1133.6" y="814.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="1131.0" y="787.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1134.0" y="798.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="1131.0" y="771.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1134.0" y="782.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="1131.0" y="755.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1134.0" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (126 samples, 4.26%)</title><rect x="1131.4" y="899.0" width="50.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1134.4" y="910.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (126 samples, 4.26%)</title><rect x="1131.4" y="883.0" width="50.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1134.4" y="894.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (114 samples, 3.85%)</title><rect x="1136.1" y="867.0" width="45.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1139.1" y="878.0">sun/..</text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (1 samples, 0.03%)</title><rect x="1138.5" y="851.0" width="0.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1141.5" y="862.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (4 samples, 0.14%)</title><rect x="1138.9" y="851.0" width="1.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1141.9" y="862.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="1139.7" y="835.0" width="0.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1142.7" y="846.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.03%)</title><rect x="1140.1" y="835.0" width="0.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1143.1" y="846.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.14%)</title><rect x="1140.5" y="851.0" width="1.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1143.5" y="862.0"></text>
</g>
<g>
<title>__kernel_vsyscall (4 samples, 0.14%)</title><rect x="1140.5" y="835.0" width="1.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1143.5" y="846.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (4 samples, 0.14%)</title><rect x="1140.5" y="819.0" width="1.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1143.5" y="830.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (4 samples, 0.14%)</title><rect x="1140.5" y="803.0" width="1.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1143.5" y="814.0"></text>
</g>
<g>
<title>__kernel_vsyscall (90 samples, 3.04%)</title><rect x="1142.1" y="851.0" width="35.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1145.1" y="862.0">__k..</text>
</g>
<g>
<title>entry_SYSENTER_32 (87 samples, 2.94%)</title><rect x="1143.3" y="835.0" width="34.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1146.3" y="846.0">en..</text>
</g>
<g>
<title>do_fast_syscall_32 (86 samples, 2.91%)</title><rect x="1143.3" y="819.0" width="34.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1146.3" y="830.0">do..</text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.07%)</title><rect x="1143.7" y="803.0" width="0.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1146.7" y="814.0"></text>
</g>
<g>
<title>schedule (2 samples, 0.07%)</title><rect x="1143.7" y="787.0" width="0.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1146.7" y="798.0"></text>
</g>
<g>
<title>__sched_text_start (2 samples, 0.07%)</title><rect x="1143.7" y="771.0" width="0.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1146.7" y="782.0"></text>
</g>
<g>
<title>finish_task_switch (2 samples, 0.07%)</title><rect x="1143.7" y="755.0" width="0.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1146.7" y="766.0"></text>
</g>
<g>
<title>sys_read (83 samples, 2.81%)</title><rect x="1144.5" y="803.0" width="33.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1147.5" y="814.0">sy..</text>
</g>
<g>
<title>__fdget_pos (4 samples, 0.14%)</title><rect x="1144.9" y="787.0" width="1.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1147.9" y="798.0"></text>
</g>
<g>
<title>__fget_light (3 samples, 0.10%)</title><rect x="1145.3" y="771.0" width="1.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1148.3" y="782.0"></text>
</g>
<g>
<title>__fget (1 samples, 0.03%)</title><rect x="1146.1" y="755.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1149.1" y="766.0"></text>
</g>
<g>
<title>vfs_read (78 samples, 2.64%)</title><rect x="1146.5" y="787.0" width="31.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1149.5" y="798.0">vf..</text>
</g>
<g>
<title>__vfs_read (60 samples, 2.03%)</title><rect x="1146.5" y="771.0" width="24.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1149.5" y="782.0">_..</text>
</g>
<g>
<title>new_sync_read (59 samples, 1.99%)</title><rect x="1146.5" y="755.0" width="23.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1149.5" y="766.0">n..</text>
</g>
<g>
<title>sock_read_iter (56 samples, 1.89%)</title><rect x="1147.7" y="739.0" width="22.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1150.7" y="750.0">s..</text>
</g>
<g>
<title>inet_recvmsg (2 samples, 0.07%)</title><rect x="1148.9" y="723.0" width="0.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1151.9" y="734.0"></text>
</g>
<g>
<title>sock_recvmsg (51 samples, 1.72%)</title><rect x="1149.7" y="723.0" width="20.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1152.7" y="734.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_esi (1 samples, 0.03%)</title><rect x="1149.7" y="707.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1152.7" y="718.0"></text>
</g>
<g>
<title>inet_recvmsg (46 samples, 1.56%)</title><rect x="1150.1" y="707.0" width="18.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1153.1" y="718.0"></text>
</g>
<g>
<title>__kfree_skb (1 samples, 0.03%)</title><rect x="1150.1" y="691.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1153.1" y="702.0"></text>
</g>
<g>
<title>release_sock (1 samples, 0.03%)</title><rect x="1150.5" y="691.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1153.5" y="702.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (1 samples, 0.03%)</title><rect x="1150.9" y="691.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1153.9" y="702.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (1 samples, 0.03%)</title><rect x="1151.3" y="691.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1154.3" y="702.0"></text>
</g>
<g>
<title>tcp_recvmsg (42 samples, 1.42%)</title><rect x="1151.7" y="691.0" width="16.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1154.7" y="702.0"></text>
</g>
<g>
<title>__kfree_skb (9 samples, 0.30%)</title><rect x="1154.5" y="675.0" width="3.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1157.5" y="686.0"></text>
</g>
<g>
<title>skb_release_all (7 samples, 0.24%)</title><rect x="1154.9" y="659.0" width="2.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1157.9" y="670.0"></text>
</g>
<g>
<title>skb_release_data (4 samples, 0.14%)</title><rect x="1154.9" y="643.0" width="1.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1157.9" y="654.0"></text>
</g>
<g>
<title>skb_release_head_state (1 samples, 0.03%)</title><rect x="1156.5" y="643.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1159.5" y="654.0"></text>
</g>
<g>
<title>sock_rfree (1 samples, 0.03%)</title><rect x="1156.5" y="627.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1159.5" y="638.0"></text>
</g>
<g>
<title>sock_rfree (2 samples, 0.07%)</title><rect x="1156.9" y="643.0" width="0.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1159.9" y="654.0"></text>
</g>
<g>
<title>skb_release_data (1 samples, 0.03%)</title><rect x="1157.7" y="659.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1160.7" y="670.0"></text>
</g>
<g>
<title>_copy_to_iter (2 samples, 0.07%)</title><rect x="1158.1" y="675.0" width="0.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1161.1" y="686.0"></text>
</g>
<g>
<title>lock_sock_nested (6 samples, 0.20%)</title><rect x="1158.9" y="675.0" width="2.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1161.9" y="686.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (6 samples, 0.20%)</title><rect x="1158.9" y="659.0" width="2.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1161.9" y="670.0"></text>
</g>
<g>
<title>__pv_queued_spin_lock_slowpath (5 samples, 0.17%)</title><rect x="1159.3" y="643.0" width="2.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1162.3" y="654.0"></text>
</g>
<g>
<title>sched_clock_cpu (1 samples, 0.03%)</title><rect x="1161.3" y="675.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1164.3" y="686.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (8 samples, 0.27%)</title><rect x="1161.7" y="675.0" width="3.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1164.7" y="686.0"></text>
</g>
<g>
<title>__check_heap_object (1 samples, 0.03%)</title><rect x="1162.1" y="659.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1165.1" y="670.0"></text>
</g>
<g>
<title>__check_object_size (3 samples, 0.10%)</title><rect x="1162.5" y="659.0" width="1.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1165.5" y="670.0"></text>
</g>
<g>
<title>__check_heap_object (1 samples, 0.03%)</title><rect x="1162.5" y="643.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1165.5" y="654.0"></text>
</g>
<g>
<title>__virt_addr_valid (1 samples, 0.03%)</title><rect x="1162.9" y="643.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1165.9" y="654.0"></text>
</g>
<g>
<title>page_address (1 samples, 0.03%)</title><rect x="1163.3" y="643.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1166.3" y="654.0"></text>
</g>
<g>
<title>_copy_to_iter (3 samples, 0.10%)</title><rect x="1163.7" y="659.0" width="1.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1166.7" y="670.0"></text>
</g>
<g>
<title>copyout (3 samples, 0.10%)</title><rect x="1163.7" y="643.0" width="1.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1166.7" y="654.0"></text>
</g>
<g>
<title>__copy_user_ll (3 samples, 0.10%)</title><rect x="1163.7" y="627.0" width="1.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1166.7" y="638.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (5 samples, 0.17%)</title><rect x="1164.9" y="675.0" width="2.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1167.9" y="686.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (3 samples, 0.10%)</title><rect x="1166.9" y="675.0" width="1.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1169.9" y="686.0"></text>
</g>
<g>
<title>sched_clock_cpu (3 samples, 0.10%)</title><rect x="1166.9" y="659.0" width="1.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1169.9" y="670.0"></text>
</g>
<g>
<title>sched_clock (3 samples, 0.10%)</title><rect x="1166.9" y="643.0" width="1.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1169.9" y="654.0"></text>
</g>
<g>
<title>kvm_sched_clock_read (3 samples, 0.10%)</title><rect x="1166.9" y="627.0" width="1.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1169.9" y="638.0"></text>
</g>
<g>
<title>pvclock_clocksource_read (3 samples, 0.10%)</title><rect x="1166.9" y="611.0" width="1.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1169.9" y="622.0"></text>
</g>
<g>
<title>tcp_release_cb (1 samples, 0.03%)</title><rect x="1168.1" y="675.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1171.1" y="686.0"></text>
</g>
<g>
<title>security_socket_recvmsg (4 samples, 0.14%)</title><rect x="1168.5" y="707.0" width="1.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1171.5" y="718.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (1 samples, 0.03%)</title><rect x="1168.5" y="691.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1171.5" y="702.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (3 samples, 0.10%)</title><rect x="1168.9" y="691.0" width="1.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1171.9" y="702.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (2 samples, 0.07%)</title><rect x="1169.3" y="675.0" width="0.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1172.3" y="686.0"></text>
</g>
<g>
<title>aa_label_sk_perm (1 samples, 0.03%)</title><rect x="1169.3" y="659.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1172.3" y="670.0"></text>
</g>
<g>
<title>aa_sk_perm (1 samples, 0.03%)</title><rect x="1169.7" y="659.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1172.7" y="670.0"></text>
</g>
<g>
<title>aa_label_sk_perm (1 samples, 0.03%)</title><rect x="1169.7" y="643.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1172.7" y="654.0"></text>
</g>
<g>
<title>sock_read_iter (1 samples, 0.03%)</title><rect x="1170.1" y="755.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1173.1" y="766.0"></text>
</g>
<g>
<title>rw_verify_area (18 samples, 0.61%)</title><rect x="1170.5" y="771.0" width="7.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1173.5" y="782.0"></text>
</g>
<g>
<title>__fsnotify_parent (1 samples, 0.03%)</title><rect x="1170.5" y="755.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1173.5" y="766.0"></text>
</g>
<g>
<title>security_file_permission (17 samples, 0.57%)</title><rect x="1170.9" y="755.0" width="6.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1173.9" y="766.0"></text>
</g>
<g>
<title>apparmor_file_permission (10 samples, 0.34%)</title><rect x="1172.4" y="739.0" width="4.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1175.4" y="750.0"></text>
</g>
<g>
<title>common_file_perm (10 samples, 0.34%)</title><rect x="1172.4" y="723.0" width="4.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1175.4" y="734.0"></text>
</g>
<g>
<title>aa_file_perm (3 samples, 0.10%)</title><rect x="1175.2" y="707.0" width="1.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1178.2" y="718.0"></text>
</g>
<g>
<title>common_file_perm (2 samples, 0.07%)</title><rect x="1176.4" y="739.0" width="0.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1179.4" y="750.0"></text>
</g>
<g>
<title>fsnotify (1 samples, 0.03%)</title><rect x="1177.2" y="739.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1180.2" y="750.0"></text>
</g>
<g>
<title>sys_read (1 samples, 0.03%)</title><rect x="1177.6" y="819.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1180.6" y="830.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="1178.0" y="851.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1181.0" y="862.0"></text>
</g>
<g>
<title>convertReturnVal (1 samples, 0.03%)</title><rect x="1178.4" y="851.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1181.4" y="862.0"></text>
</g>
<g>
<title>fdval (4 samples, 0.14%)</title><rect x="1178.8" y="851.0" width="1.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1181.8" y="862.0"></text>
</g>
<g>
<title>read (3 samples, 0.10%)</title><rect x="1180.4" y="851.0" width="1.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1183.4" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (2 samples, 0.07%)</title><rect x="1181.6" y="899.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1184.6" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.07%)</title><rect x="1181.6" y="883.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1184.6" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.07%)</title><rect x="1181.6" y="867.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1184.6" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginRead (5 samples, 0.17%)</title><rect x="1182.4" y="931.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1185.4" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.endRead (2 samples, 0.07%)</title><rect x="1184.4" y="931.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1187.4" y="942.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (2 samples, 0.07%)</title><rect x="1184.4" y="915.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1187.4" y="926.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (9 samples, 0.30%)</title><rect x="1185.2" y="1011.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.2" y="1022.0"></text>
</g>
<g>
<title>__kernel_vsyscall (6 samples, 0.20%)</title><rect x="1185.6" y="995.0" width="2.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1188.6" y="1006.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (2 samples, 0.07%)</title><rect x="1187.2" y="979.0" width="0.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1190.2" y="990.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (2 samples, 0.07%)</title><rect x="1187.2" y="963.0" width="0.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1190.2" y="974.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="1187.2" y="947.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1190.2" y="958.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="1187.2" y="931.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1190.2" y="942.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.03%)</title><rect x="1187.2" y="915.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1190.2" y="926.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="1187.2" y="899.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1190.2" y="910.0"></text>
</g>
<g>
<title>sys_gettimeofday (1 samples, 0.03%)</title><rect x="1187.6" y="947.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1190.6" y="958.0"></text>
</g>
<g>
<title>__getnstimeofday64 (1 samples, 0.03%)</title><rect x="1187.6" y="931.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1190.6" y="942.0"></text>
</g>
<g>
<title>__vdso_gettimeofday (2 samples, 0.07%)</title><rect x="1188.0" y="995.0" width="0.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1191.0" y="1006.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ServiceImpl$$Lambda$67/3594198.act (1 samples, 0.03%)</title><rect x="1188.8" y="1027.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1191.8" y="1038.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ServiceImpl.lambda$entity$1 (1 samples, 0.03%)</title><rect x="1188.8" y="1011.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1191.8" y="1022.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ServiceImpl.get (1 samples, 0.03%)</title><rect x="1188.8" y="995.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1191.8" y="1006.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.get (1 samples, 0.03%)</title><rect x="1188.8" y="979.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1191.8" y="990.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferUtils.restoreByteArray (1 samples, 0.03%)</title><rect x="1188.8" y="963.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1191.8" y="974.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferUtils.getByteArray (1 samples, 0.03%)</title><rect x="1188.8" y="947.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1191.8" y="958.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1 samples, 0.03%)</title><rect x="1188.8" y="931.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1191.8" y="942.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="1188.8" y="915.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1191.8" y="926.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="1188.8" y="899.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1191.8" y="910.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="1188.8" y="883.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1191.8" y="894.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="1188.8" y="867.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1191.8" y="878.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.03%)</title><rect x="1188.8" y="851.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1191.8" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (1 samples, 0.03%)</title><rect x="1189.2" y="1027.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1192.2" y="1038.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.03%)</title><rect x="1189.2" y="1011.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1192.2" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.03%)</title><rect x="1189.6" y="1027.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1192.6" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.03%)</title><rect x="1189.6" y="1011.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1192.6" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.03%)</title><rect x="1189.6" y="995.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1192.6" y="1006.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="1189.6" y="979.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1192.6" y="990.0"></text>
</g>
</g>
</svg>
