<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="373"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="373"> </text>
<g id="frames">
<g>
<title>all (111,049 samples, 100.00%)</title><rect x="10.0" y="339.0" width="1180.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="13.0" y="350.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (53,605 samples, 48.27%)</title><rect x="10.0" y="323.0" width="569.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.0" y="334.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (53,605 samples, 48.27%)</title><rect x="10.0" y="307.0" width="569.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="13.0" y="318.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (53,605 samples, 48.27%)</title><rect x="10.0" y="291.0" width="569.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.0" y="302.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (922 samples, 0.83%)</title><rect x="10.0" y="275.0" width="9.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (922 samples, 0.83%)</title><rect x="10.0" y="259.0" width="9.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (922 samples, 0.83%)</title><rect x="10.0" y="243.0" width="9.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (922 samples, 0.83%)</title><rect x="10.0" y="227.0" width="9.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (894 samples, 0.81%)</title><rect x="10.0" y="211.0" width="9.5" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (28 samples, 0.03%)</title><rect x="19.5" y="211.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="22.5" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ServiceImpl$$Lambda$68/16487378.run (52,683 samples, 47.44%)</title><rect x="19.8" y="275.0" width="559.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="22.8" y="286.0">ru/mail/polis/service/dogm/ServiceImpl$$Lambda$68/16487378.run</text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ServiceImpl.lambda$executeAsync$5 (52,683 samples, 47.44%)</title><rect x="19.8" y="259.0" width="559.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="22.8" y="270.0">ru/mail/polis/service/dogm/ServiceImpl.lambda$executeAsync$5</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (10,047 samples, 9.05%)</title><rect x="19.8" y="243.0" width="106.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="22.8" y="254.0">one/nio/http/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (10,047 samples, 9.05%)</title><rect x="19.8" y="227.0" width="106.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.8" y="238.0">one/nio/http/..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (5,362 samples, 4.83%)</title><rect x="19.8" y="211.0" width="57.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="22.8" y="222.0">one/ni..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (5,362 samples, 4.83%)</title><rect x="19.8" y="195.0" width="57.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="22.8" y="206.0">one/ni..</text>
</g>
<g>
<title>byte[] (3,749 samples, 3.38%)</title><rect x="19.8" y="179.0" width="39.8" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="22.8" y="190.0">byt..</text>
</g>
<g>
<title>byte[] (1,613 samples, 1.45%)</title><rect x="59.6" y="179.0" width="17.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="62.6" y="190.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (4,685 samples, 4.22%)</title><rect x="76.8" y="211.0" width="49.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="79.8" y="222.0">one/n..</text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (1,084 samples, 0.98%)</title><rect x="76.8" y="195.0" width="11.5" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="79.8" y="206.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (26 samples, 0.02%)</title><rect x="88.3" y="195.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="91.3" y="206.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (3,575 samples, 3.22%)</title><rect x="88.6" y="195.0" width="38.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="91.6" y="206.0">one..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (3,575 samples, 3.22%)</title><rect x="88.6" y="179.0" width="38.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="91.6" y="190.0">one..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (3,575 samples, 3.22%)</title><rect x="88.6" y="163.0" width="38.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="91.6" y="174.0">one..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3,575 samples, 3.22%)</title><rect x="88.6" y="147.0" width="38.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="91.6" y="158.0">jav..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (3,543 samples, 3.19%)</title><rect x="88.6" y="131.0" width="37.6" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="91.6" y="142.0">jav..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (32 samples, 0.03%)</title><rect x="126.2" y="131.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="129.2" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ServiceImpl$$Lambda$69/31033530.act (31,844 samples, 28.68%)</title><rect x="126.6" y="243.0" width="338.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="129.6" y="254.0">ru/mail/polis/service/dogm/ServiceImpl$$Lambda..</text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ServiceImpl.lambda$entity$0 (31,844 samples, 28.68%)</title><rect x="126.6" y="227.0" width="338.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="129.6" y="238.0">ru/mail/polis/service/dogm/ServiceImpl.lambda$..</text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ServiceImpl.proxy (31,844 samples, 28.68%)</title><rect x="126.6" y="211.0" width="338.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="129.6" y="222.0">ru/mail/polis/service/dogm/ServiceImpl.proxy</text>
</g>
<g>
<title>ru/mail/polis/service/dogm/Bridges.sendRequestTo (31,844 samples, 28.68%)</title><rect x="126.6" y="195.0" width="338.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="129.6" y="206.0">ru/mail/polis/service/dogm/Bridges.sendRequestTo</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (31,844 samples, 28.68%)</title><rect x="126.6" y="179.0" width="338.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="129.6" y="190.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (31,844 samples, 28.68%)</title><rect x="126.6" y="163.0" width="338.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="129.6" y="174.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one.nio.http.HttpClient$ResponseReader (377 samples, 0.34%)</title><rect x="126.6" y="147.0" width="4.0" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="129.6" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (24,909 samples, 22.43%)</title><rect x="130.6" y="147.0" width="264.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="133.6" y="158.0">one/nio/http/HttpClient$ResponseRea..</text>
</g>
<g>
<title>byte[] (4,651 samples, 4.19%)</title><rect x="130.6" y="131.0" width="49.5" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="133.6" y="142.0">byte[]</text>
</g>
<g>
<title>byte[] (20,258 samples, 18.24%)</title><rect x="180.1" y="131.0" width="215.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="183.1" y="142.0">byte[]</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (2,623 samples, 2.36%)</title><rect x="395.3" y="147.0" width="27.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="398.3" y="158.0">o..</text>
</g>
<g>
<title>byte[] (203 samples, 0.18%)</title><rect x="395.3" y="131.0" width="2.2" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="398.3" y="142.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (1,841 samples, 1.66%)</title><rect x="397.5" y="131.0" width="19.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="400.5" y="142.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1,841 samples, 1.66%)</title><rect x="397.5" y="115.0" width="19.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="400.5" y="126.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1,841 samples, 1.66%)</title><rect x="397.5" y="99.0" width="19.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="400.5" y="110.0"></text>
</g>
<g>
<title>char[] (678 samples, 0.61%)</title><rect x="397.5" y="83.0" width="7.2" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="400.5" y="94.0"></text>
</g>
<g>
<title>java.lang.String (611 samples, 0.55%)</title><rect x="404.8" y="83.0" width="6.4" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="407.8" y="94.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (550 samples, 0.50%)</title><rect x="411.3" y="83.0" width="5.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="414.3" y="94.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (550 samples, 0.50%)</title><rect x="411.3" y="67.0" width="5.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="414.3" y="78.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (550 samples, 0.50%)</title><rect x="411.3" y="51.0" width="5.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="414.3" y="62.0"></text>
</g>
<g>
<title>byte[] (548 samples, 0.49%)</title><rect x="411.3" y="35.0" width="5.8" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="414.3" y="46.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (573 samples, 0.52%)</title><rect x="417.1" y="131.0" width="6.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="420.1" y="142.0"></text>
</g>
<g>
<title>java/lang/String.substring (573 samples, 0.52%)</title><rect x="417.1" y="115.0" width="6.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="420.1" y="126.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (573 samples, 0.52%)</title><rect x="417.1" y="99.0" width="6.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="420.1" y="110.0"></text>
</g>
<g>
<title>java.lang.String (331 samples, 0.30%)</title><rect x="417.1" y="83.0" width="3.5" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="420.1" y="94.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (241 samples, 0.22%)</title><rect x="420.6" y="83.0" width="2.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="423.6" y="94.0"></text>
</g>
<g>
<title>byte[] (241 samples, 0.22%)</title><rect x="420.6" y="67.0" width="2.6" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="423.6" y="78.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (1,657 samples, 1.49%)</title><rect x="423.2" y="147.0" width="17.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="426.2" y="158.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1,657 samples, 1.49%)</title><rect x="423.2" y="131.0" width="17.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="426.2" y="142.0"></text>
</g>
<g>
<title>byte[] (1,651 samples, 1.49%)</title><rect x="423.2" y="115.0" width="17.5" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="426.2" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (709 samples, 0.64%)</title><rect x="440.8" y="147.0" width="7.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="443.8" y="158.0"></text>
</g>
<g>
<title>java/lang/String.substring (709 samples, 0.64%)</title><rect x="440.8" y="131.0" width="7.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="443.8" y="142.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (709 samples, 0.64%)</title><rect x="440.8" y="115.0" width="7.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="443.8" y="126.0"></text>
</g>
<g>
<title>java.lang.String (350 samples, 0.32%)</title><rect x="440.8" y="99.0" width="3.7" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="443.8" y="110.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (357 samples, 0.32%)</title><rect x="444.5" y="99.0" width="3.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="447.5" y="110.0"></text>
</g>
<g>
<title>byte[] (356 samples, 0.32%)</title><rect x="444.5" y="83.0" width="3.8" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="447.5" y="94.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.writeFully (1,211 samples, 1.09%)</title><rect x="448.3" y="147.0" width="12.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="451.3" y="158.0"></text>
</g>
<g>
<title>java/nio/channels/Channels$1.write (661 samples, 0.60%)</title><rect x="448.3" y="131.0" width="7.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="451.3" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (661 samples, 0.60%)</title><rect x="448.3" y="115.0" width="7.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="451.3" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (661 samples, 0.60%)</title><rect x="448.3" y="99.0" width="7.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="451.3" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (654 samples, 0.59%)</title><rect x="448.3" y="83.0" width="7.0" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="451.3" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor.getOutputStream (550 samples, 0.50%)</title><rect x="455.4" y="131.0" width="5.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="458.4" y="142.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (309 samples, 0.28%)</title><rect x="455.4" y="115.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="458.4" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor$2.run (309 samples, 0.28%)</title><rect x="455.4" y="99.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="458.4" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor$2.run (309 samples, 0.28%)</title><rect x="455.4" y="83.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="458.4" y="94.0"></text>
</g>
<g>
<title>java/nio/channels/Channels.newOutputStream (309 samples, 0.28%)</title><rect x="455.4" y="67.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="458.4" y="78.0"></text>
</g>
<g>
<title>java.nio.channels.Channels$1 (304 samples, 0.27%)</title><rect x="455.4" y="51.0" width="3.2" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="458.4" y="62.0"></text>
</g>
<g>
<title>sun.nio.ch.SocketAdaptor$2 (236 samples, 0.21%)</title><rect x="458.6" y="115.0" width="2.6" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="461.6" y="126.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (351 samples, 0.32%)</title><rect x="461.2" y="147.0" width="3.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="464.2" y="158.0"></text>
</g>
<g>
<title>java/util/LinkedList.addFirst (351 samples, 0.32%)</title><rect x="461.2" y="131.0" width="3.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="464.2" y="142.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkFirst (351 samples, 0.32%)</title><rect x="461.2" y="115.0" width="3.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="464.2" y="126.0"></text>
</g>
<g>
<title>java.util.LinkedList$Node (349 samples, 0.31%)</title><rect x="461.2" y="99.0" width="3.7" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="464.2" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ServiceImpl$$Lambda$70/18151396.act (10,792 samples, 9.72%)</title><rect x="464.9" y="243.0" width="114.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="467.9" y="254.0">ru/mail/polis/..</text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ServiceImpl.lambda$entity$2 (10,792 samples, 9.72%)</title><rect x="464.9" y="227.0" width="114.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="467.9" y="238.0">ru/mail/polis/..</text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ServiceImpl.put (10,792 samples, 9.72%)</title><rect x="464.9" y="211.0" width="114.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="467.9" y="222.0">ru/mail/polis/..</text>
</g>
<g>
<title>java/lang/String.getBytes (1,413 samples, 1.27%)</title><rect x="464.9" y="195.0" width="15.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="467.9" y="206.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1,413 samples, 1.27%)</title><rect x="464.9" y="179.0" width="15.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="467.9" y="190.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (1,413 samples, 1.27%)</title><rect x="464.9" y="163.0" width="15.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="467.9" y="174.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1,413 samples, 1.27%)</title><rect x="464.9" y="147.0" width="15.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="467.9" y="158.0"></text>
</g>
<g>
<title>byte[] (1,408 samples, 1.27%)</title><rect x="464.9" y="131.0" width="15.0" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="467.9" y="142.0"></text>
</g>
<g>
<title>one.nio.http.Response (1,139 samples, 1.03%)</title><rect x="480.0" y="195.0" width="12.1" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="483.0" y="206.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (2,614 samples, 2.35%)</title><rect x="492.2" y="195.0" width="27.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="495.2" y="206.0">o..</text>
</g>
<g>
<title>byte[] (1,390 samples, 1.25%)</title><rect x="492.2" y="179.0" width="14.7" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="495.2" y="190.0"></text>
</g>
<g>
<title>java.lang.String[] (420 samples, 0.38%)</title><rect x="507.2" y="179.0" width="4.4" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="510.2" y="190.0"></text>
</g>
<g>
<title>java.lang.String (750 samples, 0.68%)</title><rect x="511.8" y="179.0" width="7.9" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="514.8" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.upsert (5,615 samples, 5.06%)</title><rect x="519.9" y="195.0" width="59.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="522.9" y="206.0">ru/mai..</text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferUtils.getByteArray (3,262 samples, 2.94%)</title><rect x="519.9" y="179.0" width="34.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="522.9" y="190.0">ru..</text>
</g>
<g>
<title>byte[] (872 samples, 0.79%)</title><rect x="519.9" y="163.0" width="9.3" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="522.9" y="174.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2,376 samples, 2.14%)</title><rect x="529.4" y="163.0" width="25.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="532.4" y="174.0">j..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (2,358 samples, 2.12%)</title><rect x="529.4" y="147.0" width="25.0" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="532.4" y="158.0">j..</text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferUtils.restoreByteArray (2,353 samples, 2.12%)</title><rect x="554.6" y="179.0" width="25.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="557.6" y="190.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferUtils.getByteArray (2,353 samples, 2.12%)</title><rect x="554.6" y="163.0" width="25.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="557.6" y="174.0">r..</text>
</g>
<g>
<title>byte[] (573 samples, 0.52%)</title><rect x="554.6" y="147.0" width="6.1" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="557.6" y="158.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1,775 samples, 1.60%)</title><rect x="560.8" y="147.0" width="18.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="563.8" y="158.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,770 samples, 1.59%)</title><rect x="560.8" y="131.0" width="18.8" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="563.8" y="142.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (57,436 samples, 51.72%)</title><rect x="579.7" y="323.0" width="610.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="582.7" y="334.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (7,198 samples, 6.48%)</title><rect x="579.7" y="307.0" width="76.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="582.7" y="318.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (4,596 samples, 4.14%)</title><rect x="579.7" y="291.0" width="48.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="582.7" y="302.0">one/..</text>
</g>
<g>
<title>one.nio.net.JavaSelector$1 (311 samples, 0.28%)</title><rect x="579.7" y="275.0" width="3.3" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="582.7" y="286.0"></text>
</g>
<g>
<title>one.nio.net.JavaSelector$1 (28 samples, 0.03%)</title><rect x="583.0" y="275.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="586.0" y="286.0"></text>
</g>
<g>
<title>one.nio.net.Session[] (4,206 samples, 3.79%)</title><rect x="583.3" y="275.0" width="44.7" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="586.3" y="286.0">one...</text>
</g>
<g>
<title>one.nio.net.Session[] (51 samples, 0.05%)</title><rect x="628.0" y="275.0" width="0.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="631.0" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (2,602 samples, 2.34%)</title><rect x="628.5" y="291.0" width="27.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="631.5" y="302.0">s..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (2,602 samples, 2.34%)</title><rect x="628.5" y="275.0" width="27.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="631.5" y="286.0">s..</text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (2,602 samples, 2.34%)</title><rect x="628.5" y="259.0" width="27.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="631.5" y="270.0">s..</text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.processEvents (2,602 samples, 2.34%)</title><rect x="628.5" y="243.0" width="27.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="631.5" y="254.0">s..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (2,602 samples, 2.34%)</title><rect x="628.5" y="227.0" width="27.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="631.5" y="238.0">s..</text>
</g>
<g>
<title>java/util/HashSet.add (2,602 samples, 2.34%)</title><rect x="628.5" y="211.0" width="27.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="631.5" y="222.0">j..</text>
</g>
<g>
<title>java/util/HashMap.put (2,602 samples, 2.34%)</title><rect x="628.5" y="195.0" width="27.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="631.5" y="206.0">j..</text>
</g>
<g>
<title>java/util/HashMap.putVal (2,602 samples, 2.34%)</title><rect x="628.5" y="179.0" width="27.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="631.5" y="190.0">j..</text>
</g>
<g>
<title>java/util/HashMap.newNode (2,602 samples, 2.34%)</title><rect x="628.5" y="163.0" width="27.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="631.5" y="174.0">j..</text>
</g>
<g>
<title>java.util.HashMap$Node (2,591 samples, 2.33%)</title><rect x="628.5" y="147.0" width="27.6" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="631.5" y="158.0">j..</text>
</g>
<g>
<title>one/nio/net/Session.process (50,238 samples, 45.24%)</title><rect x="656.2" y="307.0" width="533.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="659.2" y="318.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (50,238 samples, 45.24%)</title><rect x="656.2" y="291.0" width="533.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="659.2" y="302.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (50,234 samples, 45.24%)</title><rect x="656.2" y="275.0" width="533.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="659.2" y="286.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (11,000 samples, 9.91%)</title><rect x="656.2" y="259.0" width="116.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="659.2" y="270.0">one/nio/http/H..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (11,000 samples, 9.91%)</title><rect x="656.2" y="243.0" width="116.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="659.2" y="254.0">one/nio/http/H..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (4,305 samples, 3.88%)</title><rect x="656.2" y="227.0" width="45.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="659.2" y="238.0">Requ..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1,662 samples, 1.50%)</title><rect x="656.2" y="211.0" width="17.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="659.2" y="222.0"></text>
</g>
<g>
<title>java/lang/String.substring (1,662 samples, 1.50%)</title><rect x="656.2" y="195.0" width="17.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="659.2" y="206.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1,662 samples, 1.50%)</title><rect x="656.2" y="179.0" width="17.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="659.2" y="190.0"></text>
</g>
<g>
<title>java.lang.String (864 samples, 0.78%)</title><rect x="656.2" y="163.0" width="9.2" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="659.2" y="174.0"></text>
</g>
<g>
<title>java.lang.String (65 samples, 0.06%)</title><rect x="665.4" y="163.0" width="0.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="668.4" y="174.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (733 samples, 0.66%)</title><rect x="666.1" y="163.0" width="7.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="669.1" y="174.0"></text>
</g>
<g>
<title>byte[] (671 samples, 0.60%)</title><rect x="666.1" y="147.0" width="7.1" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="669.1" y="158.0"></text>
</g>
<g>
<title>byte[] (62 samples, 0.06%)</title><rect x="673.2" y="147.0" width="0.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="676.2" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ServiceImpl.entity (2,643 samples, 2.38%)</title><rect x="673.8" y="211.0" width="28.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="676.8" y="222.0">ru..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1,007 samples, 0.91%)</title><rect x="673.8" y="195.0" width="10.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="676.8" y="206.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1,007 samples, 0.91%)</title><rect x="673.8" y="179.0" width="10.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="676.8" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ServiceImpl$$Lambda$69/31033530.get$Lambda (612 samples, 0.55%)</title><rect x="673.8" y="163.0" width="6.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="676.8" y="174.0"></text>
</g>
<g>
<title>ru.mail.polis.service.dogm.ServiceImpl$$Lambda$69 (591 samples, 0.53%)</title><rect x="673.8" y="147.0" width="6.3" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="676.8" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ServiceImpl$$Lambda$70/18151396.get$Lambda (395 samples, 0.36%)</title><rect x="680.3" y="163.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="683.3" y="174.0"></text>
</g>
<g>
<title>ru.mail.polis.service.dogm.ServiceImpl$$Lambda$70 (357 samples, 0.32%)</title><rect x="680.3" y="147.0" width="3.8" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="683.3" y="158.0"></text>
</g>
<g>
<title>ru.mail.polis.service.dogm.ServiceImpl$$Lambda$70 (38 samples, 0.03%)</title><rect x="684.1" y="147.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="687.1" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ServiceImpl.executeAsync (1,636 samples, 1.47%)</title><rect x="684.5" y="195.0" width="17.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="687.5" y="206.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1,199 samples, 1.08%)</title><rect x="684.5" y="179.0" width="12.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="687.5" y="190.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1,199 samples, 1.08%)</title><rect x="684.5" y="163.0" width="12.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="687.5" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ServiceImpl$$Lambda$68/16487378.get$Lambda (1,199 samples, 1.08%)</title><rect x="684.5" y="147.0" width="12.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="687.5" y="158.0"></text>
</g>
<g>
<title>ru.mail.polis.service.dogm.ServiceImpl$$Lambda$68 (1,133 samples, 1.02%)</title><rect x="684.5" y="131.0" width="12.1" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="687.5" y="142.0"></text>
</g>
<g>
<title>ru.mail.polis.service.dogm.ServiceImpl$$Lambda$68 (66 samples, 0.06%)</title><rect x="696.6" y="131.0" width="0.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="699.6" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (437 samples, 0.39%)</title><rect x="697.3" y="179.0" width="4.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="700.3" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (437 samples, 0.39%)</title><rect x="697.3" y="163.0" width="4.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="700.3" y="174.0"></text>
</g>
<g>
<title>java.util.concurrent.LinkedBlockingQueue$Node (374 samples, 0.34%)</title><rect x="697.3" y="147.0" width="4.0" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="700.3" y="158.0"></text>
</g>
<g>
<title>java.util.concurrent.LinkedBlockingQueue$Node (61 samples, 0.05%)</title><rect x="701.3" y="147.0" width="0.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="704.3" y="158.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (6,695 samples, 6.03%)</title><rect x="701.9" y="227.0" width="71.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="704.9" y="238.0">one/nio/..</text>
</g>
<g>
<title>java/lang/String.substring (6,695 samples, 6.03%)</title><rect x="701.9" y="211.0" width="71.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="704.9" y="222.0">java/lan..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (6,695 samples, 6.03%)</title><rect x="701.9" y="195.0" width="71.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="704.9" y="206.0">java/lan..</text>
</g>
<g>
<title>java.lang.String (2,011 samples, 1.81%)</title><rect x="701.9" y="179.0" width="21.4" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="704.9" y="190.0">j..</text>
</g>
<g>
<title>java.lang.String (53 samples, 0.05%)</title><rect x="723.3" y="179.0" width="0.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="726.3" y="190.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (4,631 samples, 4.17%)</title><rect x="723.9" y="179.0" width="49.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="726.9" y="190.0">java/..</text>
</g>
<g>
<title>byte[] (4,560 samples, 4.11%)</title><rect x="723.9" y="163.0" width="48.4" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="726.9" y="174.0">byte[]</text>
</g>
<g>
<title>byte[] (71 samples, 0.06%)</title><rect x="772.3" y="163.0" width="0.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="775.3" y="174.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (18,327 samples, 16.50%)</title><rect x="773.1" y="259.0" width="194.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="776.1" y="270.0">one/nio/http/HttpSession...</text>
</g>
<g>
<title>one.nio.http.Request (5,570 samples, 5.02%)</title><rect x="773.1" y="243.0" width="59.2" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="776.1" y="254.0">one.ni..</text>
</g>
<g>
<title>one.nio.http.Request (51 samples, 0.05%)</title><rect x="832.3" y="243.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="835.3" y="254.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (7,186 samples, 6.47%)</title><rect x="832.8" y="243.0" width="76.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="835.8" y="254.0">one/nio/..</text>
</g>
<g>
<title>java.lang.String[] (2,047 samples, 1.84%)</title><rect x="832.8" y="227.0" width="21.7" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="835.8" y="238.0">j..</text>
</g>
<g>
<title>java.lang.String[] (5,139 samples, 4.63%)</title><rect x="854.5" y="227.0" width="54.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="857.5" y="238.0">java...</text>
</g>
<g>
<title>one/nio/util/Utf8.read (5,520 samples, 4.97%)</title><rect x="909.2" y="243.0" width="58.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="912.2" y="254.0">one/ni..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (5,520 samples, 4.97%)</title><rect x="909.2" y="227.0" width="58.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="912.2" y="238.0">one/ni..</text>
</g>
<g>
<title>char[] (2,144 samples, 1.93%)</title><rect x="909.2" y="211.0" width="22.7" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="912.2" y="222.0">c..</text>
</g>
<g>
<title>char[] (205 samples, 0.18%)</title><rect x="931.9" y="211.0" width="2.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="934.9" y="222.0"></text>
</g>
<g>
<title>java.lang.String (916 samples, 0.82%)</title><rect x="934.1" y="211.0" width="9.8" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="937.1" y="222.0"></text>
</g>
<g>
<title>java.lang.String (40 samples, 0.04%)</title><rect x="943.9" y="211.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="946.9" y="222.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2,215 samples, 1.99%)</title><rect x="944.3" y="211.0" width="23.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="947.3" y="222.0">j..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2,215 samples, 1.99%)</title><rect x="944.3" y="195.0" width="23.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="947.3" y="206.0">j..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (2,215 samples, 1.99%)</title><rect x="944.3" y="179.0" width="23.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="947.3" y="190.0">j..</text>
</g>
<g>
<title>byte[] (2,170 samples, 1.95%)</title><rect x="944.3" y="163.0" width="23.0" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="947.3" y="174.0">b..</text>
</g>
<g>
<title>byte[] (45 samples, 0.04%)</title><rect x="967.3" y="163.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="970.3" y="174.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (1,059 samples, 0.95%)</title><rect x="967.8" y="259.0" width="11.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="970.8" y="270.0"></text>
</g>
<g>
<title>byte[] (1,007 samples, 0.91%)</title><rect x="967.8" y="243.0" width="10.7" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="970.8" y="254.0"></text>
</g>
<g>
<title>byte[] (52 samples, 0.05%)</title><rect x="978.5" y="243.0" width="0.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="981.5" y="254.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1,547 samples, 1.39%)</title><rect x="979.1" y="259.0" width="16.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="982.1" y="270.0"></text>
</g>
<g>
<title>java/lang/String.substring (1,547 samples, 1.39%)</title><rect x="979.1" y="243.0" width="16.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="982.1" y="254.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1,547 samples, 1.39%)</title><rect x="979.1" y="227.0" width="16.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="982.1" y="238.0"></text>
</g>
<g>
<title>java.lang.String (943 samples, 0.85%)</title><rect x="979.1" y="211.0" width="10.0" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="982.1" y="222.0"></text>
</g>
<g>
<title>java.lang.String (54 samples, 0.05%)</title><rect x="989.1" y="211.0" width="0.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="992.1" y="222.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (550 samples, 0.50%)</title><rect x="989.7" y="211.0" width="5.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="992.7" y="222.0"></text>
</g>
<g>
<title>byte[] (493 samples, 0.44%)</title><rect x="989.7" y="195.0" width="5.2" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="992.7" y="206.0"></text>
</g>
<g>
<title>byte[] (57 samples, 0.05%)</title><rect x="994.9" y="195.0" width="0.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="997.9" y="206.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (18,301 samples, 16.48%)</title><rect x="995.5" y="259.0" width="194.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="998.5" y="270.0">one/nio/util/Utf8.read</text>
</g>
<g>
<title>one/nio/util/Utf8.read (18,301 samples, 16.48%)</title><rect x="995.5" y="243.0" width="194.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="998.5" y="254.0">one/nio/util/Utf8.read</text>
</g>
<g>
<title>char[] (8,496 samples, 7.65%)</title><rect x="995.5" y="227.0" width="90.3" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="998.5" y="238.0">char[]</text>
</g>
<g>
<title>char[] (363 samples, 0.33%)</title><rect x="1085.8" y="227.0" width="3.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1088.8" y="238.0"></text>
</g>
<g>
<title>java.lang.String (6,639 samples, 5.98%)</title><rect x="1089.6" y="227.0" width="70.6" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="1092.6" y="238.0">java.lan..</text>
</g>
<g>
<title>java.lang.String (95 samples, 0.09%)</title><rect x="1160.2" y="227.0" width="1.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1163.2" y="238.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2,708 samples, 2.44%)</title><rect x="1161.2" y="227.0" width="28.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1164.2" y="238.0">ja..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2,708 samples, 2.44%)</title><rect x="1161.2" y="211.0" width="28.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1164.2" y="222.0">ja..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (2,708 samples, 2.44%)</title><rect x="1161.2" y="195.0" width="28.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1164.2" y="206.0">ja..</text>
</g>
<g>
<title>byte[] (2,604 samples, 2.34%)</title><rect x="1161.2" y="179.0" width="27.7" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="1164.2" y="190.0">b..</text>
</g>
<g>
<title>byte[] (104 samples, 0.09%)</title><rect x="1188.9" y="179.0" width="1.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1191.9" y="190.0"></text>
</g>
</g>
</svg>
