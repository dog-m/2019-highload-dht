<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1174" onload="init(evt)" viewBox="0 0 1200 1174" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1157"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1157"> </text>
<g id="frames">
<g>
<title>all (6,307 samples, 100.00%)</title><rect x="10.0" y="1123.0" width="1180.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="13.0" y="1134.0">all</text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (2 samples, 0.03%)</title><rect x="10.0" y="1107.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.03%)</title><rect x="10.4" y="1107.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.4" y="1118.0"></text>
</g>
<g>
<title>InstanceKlass::klass_holder() const (3 samples, 0.05%)</title><rect x="10.7" y="1107.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.7" y="1118.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (125 samples, 1.98%)</title><rect x="11.5" y="1107.0" width="23.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="14.5" y="1118.0">O..</text>
</g>
<g>
<title>oopFactory::new_objArray(Klass*, int, Thread*) (12 samples, 0.19%)</title><rect x="12.4" y="1091.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="15.4" y="1102.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (9 samples, 0.14%)</title><rect x="12.4" y="1075.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="15.4" y="1086.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (7 samples, 0.11%)</title><rect x="12.8" y="1059.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="15.8" y="1070.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (7 samples, 0.11%)</title><rect x="12.8" y="1043.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="15.8" y="1054.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (4 samples, 0.06%)</title><rect x="13.2" y="1027.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="16.2" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::array_klass_impl(bool, int, Thread*) (3 samples, 0.05%)</title><rect x="14.1" y="1075.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="17.1" y="1086.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray(BasicType, int, Thread*) (108 samples, 1.71%)</title><rect x="14.7" y="1091.0" width="20.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="17.7" y="1102.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (105 samples, 1.66%)</title><rect x="15.2" y="1075.0" width="19.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="18.2" y="1086.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (98 samples, 1.55%)</title><rect x="16.0" y="1059.0" width="18.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="19.0" y="1070.0"></text>
</g>
<g>
<title>GenCollectedHeap::mem_allocate(unsigned int, bool*) (3 samples, 0.05%)</title><rect x="16.2" y="1043.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="19.2" y="1054.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (2 samples, 0.03%)</title><rect x="16.7" y="1043.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="19.7" y="1054.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (92 samples, 1.46%)</title><rect x="17.1" y="1043.0" width="17.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="20.1" y="1054.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_outside_tlab(Klass*, HeapWord*, unsigned int, Thread*) (4 samples, 0.06%)</title><rect x="17.9" y="1027.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="20.9" y="1038.0"></text>
</g>
<g>
<title>GenCollectedHeap::allocate_new_tlab(unsigned int, unsigned int, unsigned int*) (2 samples, 0.03%)</title><rect x="18.6" y="1027.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="21.6" y="1038.0"></text>
</g>
<g>
<title>GenCollectedHeap::mem_allocate(unsigned int, bool*) (17 samples, 0.27%)</title><rect x="19.0" y="1027.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="22.0" y="1038.0"></text>
</g>
<g>
<title>DefNewGeneration::should_allocate(unsigned int, bool) (4 samples, 0.06%)</title><rect x="19.0" y="1011.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="22.0" y="1022.0"></text>
</g>
<g>
<title>GenCollectedHeap::mem_allocate_work(unsigned int, bool, bool*) (12 samples, 0.19%)</title><rect x="19.7" y="1011.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="22.7" y="1022.0"></text>
</g>
<g>
<title>ContiguousSpace::par_allocate(unsigned int) (2 samples, 0.03%)</title><rect x="20.1" y="995.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="23.1" y="1006.0"></text>
</g>
<g>
<title>DefNewGeneration::par_allocate(unsigned int, bool) (8 samples, 0.13%)</title><rect x="20.5" y="995.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="23.5" y="1006.0"></text>
</g>
<g>
<title>ContiguousSpace::par_allocate(unsigned int) (6 samples, 0.10%)</title><rect x="20.9" y="979.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="23.9" y="990.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (10 samples, 0.16%)</title><rect x="22.5" y="1027.0" width="1.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="25.5" y="1038.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (2 samples, 0.03%)</title><rect x="23.8" y="1011.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="26.8" y="1022.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (49 samples, 0.78%)</title><rect x="24.4" y="1027.0" width="9.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="27.4" y="1038.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (3 samples, 0.05%)</title><rect x="33.6" y="1027.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="36.6" y="1038.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.05%)</title><rect x="34.3" y="1059.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="37.3" y="1070.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (12 samples, 0.19%)</title><rect x="34.9" y="1107.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="37.9" y="1118.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray_nozero(BasicType, int, Thread*) (11 samples, 0.17%)</title><rect x="35.1" y="1091.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="38.1" y="1102.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (10 samples, 0.16%)</title><rect x="35.3" y="1075.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="38.3" y="1086.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (10 samples, 0.16%)</title><rect x="35.3" y="1059.0" width="1.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="38.3" y="1070.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (10 samples, 0.16%)</title><rect x="35.3" y="1043.0" width="1.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="38.3" y="1054.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (6 samples, 0.10%)</title><rect x="36.0" y="1027.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="39.0" y="1038.0"></text>
</g>
<g>
<title>GenCollectedHeap::allocate_new_tlab(unsigned int, unsigned int, unsigned int*) (2 samples, 0.03%)</title><rect x="36.2" y="1011.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="39.2" y="1022.0"></text>
</g>
<g>
<title>GenCollectedHeap::mem_allocate_work(unsigned int, bool, bool*) (2 samples, 0.03%)</title><rect x="36.2" y="995.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="39.2" y="1006.0"></text>
</g>
<g>
<title>ContiguousSpace::par_allocate(unsigned int) (2 samples, 0.03%)</title><rect x="36.2" y="979.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="39.2" y="990.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (2 samples, 0.03%)</title><rect x="36.8" y="1011.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="39.8" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (69 samples, 1.09%)</title><rect x="37.1" y="1107.0" width="12.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="40.1" y="1118.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (7 samples, 0.11%)</title><rect x="38.3" y="1091.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="41.3" y="1102.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (50 samples, 0.79%)</title><rect x="39.7" y="1091.0" width="9.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="42.7" y="1102.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (50 samples, 0.79%)</title><rect x="39.7" y="1075.0" width="9.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="42.7" y="1086.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (49 samples, 0.78%)</title><rect x="39.7" y="1059.0" width="9.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="42.7" y="1070.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned int, unsigned int, Thread*) (3 samples, 0.05%)</title><rect x="40.1" y="1043.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="43.1" y="1054.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.ax (2 samples, 0.03%)</title><rect x="40.3" y="1027.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="43.3" y="1038.0"></text>
</g>
<g>
<title>GenCollectedHeap::unsafe_max_tlab_alloc(Thread*) const (4 samples, 0.06%)</title><rect x="41.1" y="1043.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="44.1" y="1054.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (26 samples, 0.41%)</title><rect x="42.0" y="1043.0" width="4.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="45.0" y="1054.0"></text>
</g>
<g>
<title>DefNewGeneration::supports_tlab_allocation() const (2 samples, 0.03%)</title><rect x="43.3" y="1027.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="46.3" y="1038.0"></text>
</g>
<g>
<title>DefNewGeneration::unsafe_max_tlab_alloc() const (3 samples, 0.05%)</title><rect x="43.7" y="1027.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="46.7" y="1038.0"></text>
</g>
<g>
<title>GenCollectedHeap::allocate_new_tlab(unsigned int, unsigned int, unsigned int*) (8 samples, 0.13%)</title><rect x="44.2" y="1027.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="47.2" y="1038.0"></text>
</g>
<g>
<title>GenCollectedHeap::mem_allocate_work(unsigned int, bool, bool*) (5 samples, 0.08%)</title><rect x="44.8" y="1011.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="47.8" y="1022.0"></text>
</g>
<g>
<title>ContiguousSpace::par_allocate(unsigned int) (2 samples, 0.03%)</title><rect x="44.8" y="995.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="47.8" y="1006.0"></text>
</g>
<g>
<title>DefNewGeneration::par_allocate(unsigned int, bool) (3 samples, 0.05%)</title><rect x="45.2" y="995.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="48.2" y="1006.0"></text>
</g>
<g>
<title>ContiguousSpace::par_allocate(unsigned int) (2 samples, 0.03%)</title><rect x="45.4" y="979.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="48.4" y="990.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (4 samples, 0.06%)</title><rect x="45.9" y="1027.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="48.9" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (2 samples, 0.03%)</title><rect x="45.9" y="1011.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="48.9" y="1022.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (2 samples, 0.03%)</title><rect x="46.3" y="1011.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="49.3" y="1022.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (6 samples, 0.10%)</title><rect x="46.9" y="1043.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="49.9" y="1054.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (2 samples, 0.03%)</title><rect x="48.0" y="1043.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="51.0" y="1054.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.ax (2 samples, 0.03%)</title><rect x="48.5" y="1043.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="51.5" y="1054.0"></text>
</g>
<g>
<title>InstanceKlass::klass_holder() const (4 samples, 0.06%)</title><rect x="49.1" y="1091.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="52.1" y="1102.0"></text>
</g>
<g>
<title>Klass::class_loader() const (2 samples, 0.03%)</title><rect x="49.5" y="1075.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="52.5" y="1086.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (30 samples, 0.48%)</title><rect x="50.0" y="1107.0" width="5.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="53.0" y="1118.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (30 samples, 0.48%)</title><rect x="50.0" y="1091.0" width="5.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="53.0" y="1102.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (5 samples, 0.08%)</title><rect x="50.6" y="1075.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="53.6" y="1086.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.63] (4 samples, 0.06%)</title><rect x="50.8" y="1059.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="53.8" y="1070.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) [clone .part.85] (21 samples, 0.33%)</title><rect x="51.5" y="1075.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="54.5" y="1086.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (21 samples, 0.33%)</title><rect x="51.5" y="1059.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="54.5" y="1070.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.63] (6 samples, 0.10%)</title><rect x="51.5" y="1043.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="54.5" y="1054.0"></text>
</g>
<g>
<title>__kernel_vsyscall (11 samples, 0.17%)</title><rect x="52.7" y="1043.0" width="2.0" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="55.7" y="1054.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (10 samples, 0.16%)</title><rect x="52.8" y="1027.0" width="1.9" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="55.8" y="1038.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (9 samples, 0.14%)</title><rect x="52.8" y="1011.0" width="1.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="55.8" y="1022.0"></text>
</g>
<g>
<title>sys_futex (9 samples, 0.14%)</title><rect x="52.8" y="995.0" width="1.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="55.8" y="1006.0"></text>
</g>
<g>
<title>do_futex (9 samples, 0.14%)</title><rect x="52.8" y="979.0" width="1.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="55.8" y="990.0"></text>
</g>
<g>
<title>futex_wait (9 samples, 0.14%)</title><rect x="52.8" y="963.0" width="1.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="55.8" y="974.0"></text>
</g>
<g>
<title>futex_wait_queue_me (9 samples, 0.14%)</title><rect x="52.8" y="947.0" width="1.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="55.8" y="958.0"></text>
</g>
<g>
<title>schedule (9 samples, 0.14%)</title><rect x="52.8" y="931.0" width="1.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="55.8" y="942.0"></text>
</g>
<g>
<title>__sched_text_start (8 samples, 0.13%)</title><rect x="53.0" y="915.0" width="1.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="56.0" y="926.0"></text>
</g>
<g>
<title>finish_task_switch (8 samples, 0.13%)</title><rect x="53.0" y="899.0" width="1.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="56.0" y="910.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long long) (2 samples, 0.03%)</title><rect x="54.9" y="1043.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="57.9" y="1054.0"></text>
</g>
<g>
<title>[not_walkable] (2 samples, 0.03%)</title><rect x="55.7" y="1107.0" width="0.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="58.7" y="1118.0"></text>
</g>
<g>
<title>[not_walkable_Java] (45 samples, 0.71%)</title><rect x="56.0" y="1107.0" width="8.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="59.0" y="1118.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (6 samples, 0.10%)</title><rect x="56.0" y="1091.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="59.0" y="1102.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (2 samples, 0.03%)</title><rect x="56.8" y="1075.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="59.8" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (26 samples, 0.41%)</title><rect x="57.1" y="1091.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="60.1" y="1102.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (20 samples, 0.32%)</title><rect x="57.7" y="1075.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="60.7" y="1086.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (6 samples, 0.10%)</title><rect x="57.9" y="1059.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="60.9" y="1070.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (2 samples, 0.03%)</title><rect x="57.9" y="1043.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="60.9" y="1054.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (3 samples, 0.05%)</title><rect x="58.3" y="1043.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="61.3" y="1054.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (2 samples, 0.03%)</title><rect x="58.5" y="1027.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="61.5" y="1038.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (12 samples, 0.19%)</title><rect x="59.2" y="1059.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="62.2" y="1070.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (6 samples, 0.10%)</title><rect x="59.6" y="1043.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="62.6" y="1054.0"></text>
</g>
<g>
<title>ImmutableOopMapSet::find_map_at_offset(int) const (2 samples, 0.03%)</title><rect x="60.1" y="1027.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="63.1" y="1038.0"></text>
</g>
<g>
<title>frame::frame(int*, int*, int*, unsigned char*) (4 samples, 0.06%)</title><rect x="60.7" y="1043.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="63.7" y="1054.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (3 samples, 0.05%)</title><rect x="60.7" y="1027.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="63.7" y="1038.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (2 samples, 0.03%)</title><rect x="60.9" y="1011.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="63.9" y="1022.0"></text>
</g>
<g>
<title>frame::is_deoptimized_frame() const (2 samples, 0.03%)</title><rect x="61.6" y="1075.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="64.6" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (11 samples, 0.17%)</title><rect x="62.0" y="1091.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="65.0" y="1102.0"></text>
</g>
<g>
<title>CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*) (2 samples, 0.03%)</title><rect x="62.2" y="1075.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="65.2" y="1086.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (8 samples, 0.13%)</title><rect x="62.6" y="1075.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="65.6" y="1086.0"></text>
</g>
<g>
<title>CardTableRS::is_in_young(oopDesc*) const (2 samples, 0.03%)</title><rect x="63.1" y="1059.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="66.1" y="1070.0"></text>
</g>
<g>
<title>GenCollectedHeap::is_in_young(oopDesc*) (3 samples, 0.05%)</title><rect x="63.5" y="1059.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="66.5" y="1070.0"></text>
</g>
<g>
<title>[unknown] (19 samples, 0.30%)</title><rect x="64.4" y="1107.0" width="3.6" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="67.4" y="1118.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.06%)</title><rect x="64.6" y="1091.0" width="0.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="67.6" y="1102.0"></text>
</g>
<g>
<title>__vsnprintf_chk (3 samples, 0.05%)</title><rect x="64.8" y="1075.0" width="0.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="67.8" y="1086.0"></text>
</g>
<g>
<title>__kernel_vsyscall (12 samples, 0.19%)</title><rect x="65.4" y="1091.0" width="2.2" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="68.4" y="1102.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (12 samples, 0.19%)</title><rect x="65.4" y="1075.0" width="2.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="68.4" y="1086.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (12 samples, 0.19%)</title><rect x="65.4" y="1059.0" width="2.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="68.4" y="1070.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="65.4" y="1043.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="68.4" y="1054.0"></text>
</g>
<g>
<title>schedule (2 samples, 0.03%)</title><rect x="65.4" y="1027.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="68.4" y="1038.0"></text>
</g>
<g>
<title>__sched_text_start (2 samples, 0.03%)</title><rect x="65.4" y="1011.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="68.4" y="1022.0"></text>
</g>
<g>
<title>finish_task_switch (2 samples, 0.03%)</title><rect x="65.4" y="995.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="68.4" y="1006.0"></text>
</g>
<g>
<title>sys_futex (10 samples, 0.16%)</title><rect x="65.8" y="1043.0" width="1.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="68.8" y="1054.0"></text>
</g>
<g>
<title>do_futex (10 samples, 0.16%)</title><rect x="65.8" y="1027.0" width="1.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="68.8" y="1038.0"></text>
</g>
<g>
<title>futex_wait (5 samples, 0.08%)</title><rect x="65.8" y="1011.0" width="0.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="68.8" y="1022.0"></text>
</g>
<g>
<title>futex_wait_queue_me (5 samples, 0.08%)</title><rect x="65.8" y="995.0" width="0.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="68.8" y="1006.0"></text>
</g>
<g>
<title>schedule (5 samples, 0.08%)</title><rect x="65.8" y="979.0" width="0.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="68.8" y="990.0"></text>
</g>
<g>
<title>__sched_text_start (5 samples, 0.08%)</title><rect x="65.8" y="963.0" width="0.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="68.8" y="974.0"></text>
</g>
<g>
<title>finish_task_switch (5 samples, 0.08%)</title><rect x="65.8" y="947.0" width="0.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="68.8" y="958.0"></text>
</g>
<g>
<title>futex_wake (5 samples, 0.08%)</title><rect x="66.7" y="1011.0" width="0.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="69.7" y="1022.0"></text>
</g>
<g>
<title>wake_up_q (4 samples, 0.06%)</title><rect x="66.9" y="995.0" width="0.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="69.9" y="1006.0"></text>
</g>
<g>
<title>try_to_wake_up (4 samples, 0.06%)</title><rect x="66.9" y="979.0" width="0.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="69.9" y="990.0"></text>
</g>
<g>
<title>__lock_text_start (4 samples, 0.06%)</title><rect x="66.9" y="963.0" width="0.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="69.9" y="974.0"></text>
</g>
<g>
<title>__vsnprintf_chk (2 samples, 0.03%)</title><rect x="67.6" y="1091.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="70.6" y="1102.0"></text>
</g>
<g>
<title>_IO_vfprintf (2 samples, 0.03%)</title><rect x="67.6" y="1075.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="70.6" y="1086.0"></text>
</g>
<g>
<title>[unknown_Java] (191 samples, 3.03%)</title><rect x="68.0" y="1107.0" width="35.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="71.0" y="1118.0">[un..</text>
</g>
<g>
<title>Thread::current() (5 samples, 0.08%)</title><rect x="98.3" y="1091.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="101.3" y="1102.0"></text>
</g>
<g>
<title>[unknown] (15 samples, 0.24%)</title><rect x="99.2" y="1091.0" width="2.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="102.2" y="1102.0"></text>
</g>
<g>
<title>JavaThread::~JavaThread() (4 samples, 0.06%)</title><rect x="99.2" y="1075.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="102.2" y="1086.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.06%)</title><rect x="99.2" y="1059.0" width="0.8" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="102.2" y="1070.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (4 samples, 0.06%)</title><rect x="99.2" y="1043.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="102.2" y="1054.0"></text>
</g>
<g>
<title>__kernel_vsyscall (6 samples, 0.10%)</title><rect x="100.2" y="1075.0" width="1.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="103.2" y="1086.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (6 samples, 0.10%)</title><rect x="100.2" y="1059.0" width="1.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="103.2" y="1070.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (6 samples, 0.10%)</title><rect x="100.2" y="1043.0" width="1.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="103.2" y="1054.0"></text>
</g>
<g>
<title>sys_futex (5 samples, 0.08%)</title><rect x="100.4" y="1027.0" width="0.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="103.4" y="1038.0"></text>
</g>
<g>
<title>do_futex (5 samples, 0.08%)</title><rect x="100.4" y="1011.0" width="0.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="103.4" y="1022.0"></text>
</g>
<g>
<title>futex_wake (5 samples, 0.08%)</title><rect x="100.4" y="995.0" width="0.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="103.4" y="1006.0"></text>
</g>
<g>
<title>wake_up_q (4 samples, 0.06%)</title><rect x="100.6" y="979.0" width="0.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="103.6" y="990.0"></text>
</g>
<g>
<title>try_to_wake_up (4 samples, 0.06%)</title><rect x="100.6" y="963.0" width="0.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="103.6" y="974.0"></text>
</g>
<g>
<title>__lock_text_start (4 samples, 0.06%)</title><rect x="100.6" y="947.0" width="0.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="103.6" y="958.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.05%)</title><rect x="101.3" y="1075.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="104.3" y="1086.0"></text>
</g>
<g>
<title>apic_timer_interrupt (3 samples, 0.05%)</title><rect x="102.1" y="1091.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="105.1" y="1102.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (3 samples, 0.05%)</title><rect x="102.1" y="1075.0" width="0.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="105.1" y="1086.0"></text>
</g>
<g>
<title>irq_exit (3 samples, 0.05%)</title><rect x="102.1" y="1059.0" width="0.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="105.1" y="1070.0"></text>
</g>
<g>
<title>do_softirq_own_stack (3 samples, 0.05%)</title><rect x="102.1" y="1043.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="105.1" y="1054.0"></text>
</g>
<g>
<title>call_on_stack (3 samples, 0.05%)</title><rect x="102.1" y="1027.0" width="0.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="105.1" y="1038.0"></text>
</g>
<g>
<title>__do_softirq (3 samples, 0.05%)</title><rect x="102.1" y="1011.0" width="0.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="105.1" y="1022.0"></text>
</g>
<g>
<title>run_rebalance_domains (2 samples, 0.03%)</title><rect x="102.2" y="995.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="105.2" y="1006.0"></text>
</g>
<g>
<title>rebalance_domains (2 samples, 0.03%)</title><rect x="102.2" y="979.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="105.2" y="990.0"></text>
</g>
<g>
<title>update_blocked_averages (2 samples, 0.03%)</title><rect x="102.2" y="963.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="105.2" y="974.0"></text>
</g>
<g>
<title>__lock_text_start (2 samples, 0.03%)</title><rect x="102.2" y="947.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="105.2" y="958.0"></text>
</g>
<g>
<title>resume_userspace (5 samples, 0.08%)</title><rect x="102.8" y="1091.0" width="0.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="105.8" y="1102.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (5 samples, 0.08%)</title><rect x="102.8" y="1075.0" width="0.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="105.8" y="1086.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (5 samples, 0.08%)</title><rect x="102.8" y="1059.0" width="0.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="105.8" y="1070.0"></text>
</g>
<g>
<title>clone (141 samples, 2.24%)</title><rect x="103.9" y="1107.0" width="26.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="106.9" y="1118.0">c..</text>
</g>
<g>
<title>start_thread (141 samples, 2.24%)</title><rect x="103.9" y="1091.0" width="26.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="106.9" y="1102.0">s..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (141 samples, 2.24%)</title><rect x="103.9" y="1075.0" width="26.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="106.9" y="1086.0">t..</text>
</g>
<g>
<title>Thread::call_run() (141 samples, 2.24%)</title><rect x="103.9" y="1059.0" width="26.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="106.9" y="1070.0">T..</text>
</g>
<g>
<title>JavaThread::run() (39 samples, 0.62%)</title><rect x="103.9" y="1043.0" width="7.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="106.9" y="1054.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (39 samples, 0.62%)</title><rect x="103.9" y="1027.0" width="7.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="106.9" y="1038.0"></text>
</g>
<g>
<title>compiler_thread_entry(JavaThread*, Thread*) (37 samples, 0.59%)</title><rect x="104.1" y="1011.0" width="6.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="107.1" y="1022.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (37 samples, 0.59%)</title><rect x="104.1" y="995.0" width="6.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="107.1" y="1006.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (37 samples, 0.59%)</title><rect x="104.1" y="979.0" width="6.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="107.1" y="990.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (36 samples, 0.57%)</title><rect x="104.1" y="963.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="107.1" y="974.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (36 samples, 0.57%)</title><rect x="104.1" y="947.0" width="6.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="107.1" y="958.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (17 samples, 0.27%)</title><rect x="104.1" y="931.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="107.1" y="942.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 0.03%)</title><rect x="104.1" y="915.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="107.1" y="926.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.03%)</title><rect x="104.1" y="899.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="107.1" y="910.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.03%)</title><rect x="104.1" y="883.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="107.1" y="894.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.03%)</title><rect x="104.1" y="867.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="107.1" y="878.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.03%)</title><rect x="104.7" y="915.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="107.7" y="926.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.03%)</title><rect x="104.7" y="899.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="107.7" y="910.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (2 samples, 0.03%)</title><rect x="104.7" y="883.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="107.7" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (11 samples, 0.17%)</title><rect x="105.2" y="915.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="108.2" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 0.05%)</title><rect x="105.6" y="899.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="108.6" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (3 samples, 0.05%)</title><rect x="106.2" y="899.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="109.2" y="910.0"></text>
</g>
<g>
<title>Compile::Optimize() (15 samples, 0.24%)</title><rect x="107.3" y="931.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="110.3" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN&amp;, bool, bool, bool) (9 samples, 0.14%)</title><rect x="107.5" y="915.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="110.5" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool, bool) (9 samples, 0.14%)</title><rect x="107.5" y="899.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="110.5" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 0.05%)</title><rect x="107.9" y="883.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="110.9" y="894.0"></text>
</g>
<g>
<title>common_exception (2 samples, 0.03%)</title><rect x="108.0" y="867.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="111.0" y="878.0"></text>
</g>
<g>
<title>do_page_fault (2 samples, 0.03%)</title><rect x="108.0" y="851.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="111.0" y="862.0"></text>
</g>
<g>
<title>__do_page_fault (2 samples, 0.03%)</title><rect x="108.0" y="835.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="111.0" y="846.0"></text>
</g>
<g>
<title>handle_mm_fault (2 samples, 0.03%)</title><rect x="108.0" y="819.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="111.0" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.03%)</title><rect x="108.4" y="883.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="111.4" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 0.08%)</title><rect x="109.2" y="915.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="112.2" y="926.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 0.08%)</title><rect x="109.2" y="899.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="112.2" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.06%)</title><rect x="110.1" y="931.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="113.1" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.06%)</title><rect x="110.1" y="915.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="113.1" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.06%)</title><rect x="110.1" y="899.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="113.1" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.06%)</title><rect x="110.1" y="883.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="113.1" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.06%)</title><rect x="110.1" y="867.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="113.1" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.06%)</title><rect x="110.1" y="851.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="113.1" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.05%)</title><rect x="110.1" y="835.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="113.1" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.05%)</title><rect x="110.1" y="819.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="113.1" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.05%)</title><rect x="110.1" y="803.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="113.1" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.05%)</title><rect x="110.1" y="787.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="113.1" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.05%)</title><rect x="110.1" y="771.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="113.1" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.05%)</title><rect x="110.1" y="755.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="113.1" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.05%)</title><rect x="110.1" y="739.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="113.1" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.05%)</title><rect x="110.1" y="723.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="113.1" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.05%)</title><rect x="110.1" y="707.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="113.1" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.05%)</title><rect x="110.1" y="691.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="113.1" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.05%)</title><rect x="110.1" y="675.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="113.1" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.05%)</title><rect x="110.1" y="659.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="113.1" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="110.1" y="643.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="113.1" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="110.1" y="627.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="113.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.03%)</title><rect x="110.1" y="611.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="113.1" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.03%)</title><rect x="110.1" y="595.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="113.1" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.03%)</title><rect x="110.1" y="579.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="113.1" y="590.0"></text>
</g>
<g>
<title>VMThread::run() (93 samples, 1.47%)</title><rect x="111.2" y="1043.0" width="17.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="114.2" y="1054.0"></text>
</g>
<g>
<title>VMThread::loop() (93 samples, 1.47%)</title><rect x="111.2" y="1027.0" width="17.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="114.2" y="1038.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (24 samples, 0.38%)</title><rect x="112.0" y="1011.0" width="4.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="115.0" y="1022.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (5 samples, 0.08%)</title><rect x="112.3" y="995.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="115.3" y="1006.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (5 samples, 0.08%)</title><rect x="112.3" y="979.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="115.3" y="990.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (5 samples, 0.08%)</title><rect x="112.3" y="963.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="115.3" y="974.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) [clone .part.62] (4 samples, 0.06%)</title><rect x="112.3" y="947.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="115.3" y="958.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (4 samples, 0.06%)</title><rect x="112.3" y="931.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="115.3" y="942.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (2 samples, 0.03%)</title><rect x="112.5" y="915.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="115.5" y="926.0"></text>
</g>
<g>
<title>CodeBlob::oop_map_for_return_address(unsigned char*) (2 samples, 0.03%)</title><rect x="112.5" y="899.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="115.5" y="910.0"></text>
</g>
<g>
<title>ImmutableOopMapSet::find_map_at_offset(int) const (2 samples, 0.03%)</title><rect x="112.5" y="883.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="115.5" y="894.0"></text>
</g>
<g>
<title>__kernel_vsyscall (16 samples, 0.25%)</title><rect x="113.5" y="995.0" width="3.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="116.5" y="1006.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (16 samples, 0.25%)</title><rect x="113.5" y="979.0" width="3.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="116.5" y="990.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (16 samples, 0.25%)</title><rect x="113.5" y="963.0" width="3.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="116.5" y="974.0"></text>
</g>
<g>
<title>sys_mprotect (16 samples, 0.25%)</title><rect x="113.5" y="947.0" width="3.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="116.5" y="958.0"></text>
</g>
<g>
<title>mprotect_fixup (16 samples, 0.25%)</title><rect x="113.5" y="931.0" width="3.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="116.5" y="942.0"></text>
</g>
<g>
<title>change_protection (16 samples, 0.25%)</title><rect x="113.5" y="915.0" width="3.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="116.5" y="926.0"></text>
</g>
<g>
<title>change_protection_range (16 samples, 0.25%)</title><rect x="113.5" y="899.0" width="3.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="116.5" y="910.0"></text>
</g>
<g>
<title>atomic64_xchg_cx8 (7 samples, 0.11%)</title><rect x="113.8" y="883.0" width="1.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="116.8" y="894.0"></text>
</g>
<g>
<title>flush_tlb_mm_range (7 samples, 0.11%)</title><rect x="115.1" y="883.0" width="1.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="118.1" y="894.0"></text>
</g>
<g>
<title>native_flush_tlb_others (6 samples, 0.10%)</title><rect x="115.3" y="867.0" width="1.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="118.3" y="878.0"></text>
</g>
<g>
<title>smp_call_function_many (6 samples, 0.10%)</title><rect x="115.3" y="851.0" width="1.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="118.3" y="862.0"></text>
</g>
<g>
<title>smp_call_function_single (6 samples, 0.10%)</title><rect x="115.3" y="835.0" width="1.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="118.3" y="846.0"></text>
</g>
<g>
<title>SafepointSynchronize::end() (21 samples, 0.33%)</title><rect x="116.5" y="1011.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="119.5" y="1022.0"></text>
</g>
<g>
<title>__kernel_vsyscall (20 samples, 0.32%)</title><rect x="116.6" y="995.0" width="3.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="119.6" y="1006.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (20 samples, 0.32%)</title><rect x="116.6" y="979.0" width="3.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="119.6" y="990.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (20 samples, 0.32%)</title><rect x="116.6" y="963.0" width="3.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="119.6" y="974.0"></text>
</g>
<g>
<title>sys_mprotect (20 samples, 0.32%)</title><rect x="116.6" y="947.0" width="3.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="119.6" y="958.0"></text>
</g>
<g>
<title>mprotect_fixup (17 samples, 0.27%)</title><rect x="117.0" y="931.0" width="3.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="120.0" y="942.0"></text>
</g>
<g>
<title>change_protection (16 samples, 0.25%)</title><rect x="117.0" y="915.0" width="3.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="120.0" y="926.0"></text>
</g>
<g>
<title>change_protection_range (16 samples, 0.25%)</title><rect x="117.0" y="899.0" width="3.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="120.0" y="910.0"></text>
</g>
<g>
<title>__ptep_modify_prot_commit (2 samples, 0.03%)</title><rect x="117.0" y="883.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="120.0" y="894.0"></text>
</g>
<g>
<title>native_set_pte_at (2 samples, 0.03%)</title><rect x="117.0" y="867.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="120.0" y="878.0"></text>
</g>
<g>
<title>flush_tlb_mm_range (13 samples, 0.21%)</title><rect x="117.6" y="883.0" width="2.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="120.6" y="894.0"></text>
</g>
<g>
<title>native_flush_tlb_others (12 samples, 0.19%)</title><rect x="117.8" y="867.0" width="2.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="120.8" y="878.0"></text>
</g>
<g>
<title>smp_call_function_many (12 samples, 0.19%)</title><rect x="117.8" y="851.0" width="2.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="120.8" y="862.0"></text>
</g>
<g>
<title>smp_call_function_single (12 samples, 0.19%)</title><rect x="117.8" y="835.0" width="2.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="120.8" y="846.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.61] (44 samples, 0.70%)</title><rect x="120.4" y="1011.0" width="8.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="123.4" y="1022.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (44 samples, 0.70%)</title><rect x="120.4" y="995.0" width="8.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="123.4" y="1006.0"></text>
</g>
<g>
<title>VM_GenCollectForAllocation::doit() (43 samples, 0.68%)</title><rect x="120.6" y="979.0" width="8.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="123.6" y="990.0"></text>
</g>
<g>
<title>GenCollectedHeap::satisfy_failed_allocation(unsigned int, bool) (42 samples, 0.67%)</title><rect x="120.8" y="963.0" width="7.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="123.8" y="974.0"></text>
</g>
<g>
<title>GenCollectedHeap::do_collection(bool, bool, unsigned int, bool, GenCollectedHeap::GenerationType) (40 samples, 0.63%)</title><rect x="120.9" y="947.0" width="7.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="123.9" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::print_heap_after_gc() (3 samples, 0.05%)</title><rect x="120.9" y="931.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="123.9" y="942.0"></text>
</g>
<g>
<title>GenCollectedHeap::print_on(outputStream*) const (3 samples, 0.05%)</title><rect x="120.9" y="915.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="123.9" y="926.0"></text>
</g>
<g>
<title>DefNewGeneration::print_on(outputStream*) const (2 samples, 0.03%)</title><rect x="120.9" y="899.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="123.9" y="910.0"></text>
</g>
<g>
<title>Generation::print_on(outputStream*) const (2 samples, 0.03%)</title><rect x="120.9" y="883.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="123.9" y="894.0"></text>
</g>
<g>
<title>GenCollectedHeap::collect_generation(Generation*, bool, unsigned int, bool, bool, bool, bool) (36 samples, 0.57%)</title><rect x="121.5" y="931.0" width="6.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="124.5" y="942.0"></text>
</g>
<g>
<title>DefNewGeneration::collect(bool, bool, unsigned int, bool) (33 samples, 0.52%)</title><rect x="121.5" y="915.0" width="6.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="124.5" y="926.0"></text>
</g>
<g>
<title>GenCollectedHeap::young_process_roots(StrongRootsScope*, OopsInGenClosure*, OopsInGenClosure*, CLDClosure*, OopStorage::ParState&lt;false, false&gt;*) (27 samples, 0.43%)</title><rect x="121.5" y="899.0" width="5.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="124.5" y="910.0"></text>
</g>
<g>
<title>CardGeneration::younger_refs_iterate(OopsInGenClosure*, unsigned int) (6 samples, 0.10%)</title><rect x="121.5" y="883.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="124.5" y="894.0"></text>
</g>
<g>
<title>CardTableRS::younger_refs_in_space_iterate(Space*, OopsInGenClosure*, unsigned int) (6 samples, 0.10%)</title><rect x="121.5" y="867.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="124.5" y="878.0"></text>
</g>
<g>
<title>ClearNoncleanCardWrapper::do_MemRegion(MemRegion) (6 samples, 0.10%)</title><rect x="121.5" y="851.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="124.5" y="862.0"></text>
</g>
<g>
<title>DirtyCardToOopClosure::do_MemRegion(MemRegion) (6 samples, 0.10%)</title><rect x="121.5" y="835.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="124.5" y="846.0"></text>
</g>
<g>
<title>BlockOffsetArrayContigSpace::block_start_unsafe(void const*) const (3 samples, 0.05%)</title><rect x="121.5" y="819.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="124.5" y="830.0"></text>
</g>
<g>
<title>ContiguousSpace::block_size(HeapWord const*) const (2 samples, 0.03%)</title><rect x="121.7" y="803.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="124.7" y="814.0"></text>
</g>
<g>
<title>FilteringDCTOC::walk_mem_region(MemRegion, HeapWord*, HeapWord*) (3 samples, 0.05%)</title><rect x="122.1" y="819.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="125.1" y="830.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (2 samples, 0.03%)</title><rect x="122.6" y="883.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="125.6" y="894.0"></text>
</g>
<g>
<title>StringTable::oops_do(OopClosure*) (8 samples, 0.13%)</title><rect x="123.0" y="883.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="126.0" y="894.0"></text>
</g>
<g>
<title>FastScanClosure::do_oop(oopDesc**) (3 samples, 0.05%)</title><rect x="123.9" y="867.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="126.9" y="878.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (11 samples, 0.17%)</title><rect x="124.5" y="883.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="127.5" y="894.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (10 samples, 0.16%)</title><rect x="124.7" y="867.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="127.7" y="878.0"></text>
</g>
<g>
<title>MarkingCodeBlobClosure::do_code_blob(CodeBlob*) (2 samples, 0.03%)</title><rect x="125.1" y="851.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="128.1" y="862.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CodeBlobClosure*, RegisterMap*, bool) (3 samples, 0.05%)</title><rect x="125.4" y="851.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="128.4" y="862.0"></text>
</g>
<g>
<title>OopMapSet::oops_do(frame const*, RegisterMap const*, OopClosure*) (2 samples, 0.03%)</title><rect x="125.6" y="835.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="128.6" y="846.0"></text>
</g>
<g>
<title>frame::oops_interpreted_do(OopClosure*, RegisterMap const*, bool) (3 samples, 0.05%)</title><rect x="126.0" y="851.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="129.0" y="862.0"></text>
</g>
<g>
<title>WeakProcessor::weak_oops_do(BoolObjectClosure*, OopClosure*) (2 samples, 0.03%)</title><rect x="127.1" y="899.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="130.1" y="910.0"></text>
</g>
<g>
<title>WatcherThread::run() (9 samples, 0.14%)</title><rect x="128.6" y="1043.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="131.6" y="1054.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (8 samples, 0.13%)</title><rect x="128.8" y="1027.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="131.8" y="1038.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (8 samples, 0.13%)</title><rect x="128.8" y="1011.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="131.8" y="1022.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long long) (6 samples, 0.10%)</title><rect x="128.8" y="995.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="131.8" y="1006.0"></text>
</g>
<g>
<title>__kernel_vsyscall (5 samples, 0.08%)</title><rect x="128.8" y="979.0" width="0.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="131.8" y="990.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (3 samples, 0.05%)</title><rect x="129.2" y="963.0" width="0.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="132.2" y="974.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (3 samples, 0.05%)</title><rect x="129.2" y="947.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="132.2" y="958.0"></text>
</g>
<g>
<title>sys_futex (3 samples, 0.05%)</title><rect x="129.2" y="931.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="132.2" y="942.0"></text>
</g>
<g>
<title>do_futex (3 samples, 0.05%)</title><rect x="129.2" y="915.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="132.2" y="926.0"></text>
</g>
<g>
<title>futex_wait (3 samples, 0.05%)</title><rect x="129.2" y="899.0" width="0.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="132.2" y="910.0"></text>
</g>
<g>
<title>futex_wait_queue_me (3 samples, 0.05%)</title><rect x="129.2" y="883.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="132.2" y="894.0"></text>
</g>
<g>
<title>schedule (3 samples, 0.05%)</title><rect x="129.2" y="867.0" width="0.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="132.2" y="878.0"></text>
</g>
<g>
<title>__sched_text_start (3 samples, 0.05%)</title><rect x="129.2" y="851.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="132.2" y="862.0"></text>
</g>
<g>
<title>finish_task_switch (3 samples, 0.05%)</title><rect x="129.2" y="835.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="132.2" y="846.0"></text>
</g>
<g>
<title>java/lang/Thread.run (4,260 samples, 67.54%)</title><rect x="130.3" y="1107.0" width="797.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="133.3" y="1118.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (4,260 samples, 67.54%)</title><rect x="130.3" y="1091.0" width="797.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="133.3" y="1102.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (4,260 samples, 67.54%)</title><rect x="130.3" y="1075.0" width="797.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="133.3" y="1086.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (8 samples, 0.13%)</title><rect x="131.2" y="1059.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="134.2" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 0.13%)</title><rect x="131.2" y="1043.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="134.2" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (8 samples, 0.13%)</title><rect x="131.2" y="1027.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="134.2" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (8 samples, 0.13%)</title><rect x="131.2" y="1011.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="134.2" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (620 samples, 9.83%)</title><rect x="132.7" y="1059.0" width="116.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="135.7" y="1070.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (612 samples, 9.70%)</title><rect x="134.2" y="1043.0" width="114.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="137.2" y="1054.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (476 samples, 7.55%)</title><rect x="136.1" y="1027.0" width="89.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="139.1" y="1038.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (12 samples, 0.19%)</title><rect x="136.7" y="1011.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="139.7" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (12 samples, 0.19%)</title><rect x="136.7" y="995.0" width="2.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="139.7" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (2 samples, 0.03%)</title><rect x="138.9" y="1011.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="141.9" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (2 samples, 0.03%)</title><rect x="138.9" y="995.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="141.9" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (459 samples, 7.28%)</title><rect x="139.3" y="1011.0" width="85.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="142.3" y="1022.0">java/util/..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (458 samples, 7.26%)</title><rect x="139.5" y="995.0" width="85.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="142.5" y="1006.0">jdk/intern..</text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (2 samples, 0.03%)</title><rect x="141.3" y="979.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="144.3" y="990.0"></text>
</g>
<g>
<title>Parker::park(bool, long long) (6 samples, 0.10%)</title><rect x="141.9" y="979.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="144.9" y="990.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.201] (3 samples, 0.05%)</title><rect x="143.2" y="979.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="146.2" y="990.0"></text>
</g>
<g>
<title>Unsafe_Park (110 samples, 1.74%)</title><rect x="143.8" y="979.0" width="20.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="146.8" y="990.0"></text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (2 samples, 0.03%)</title><rect x="147.0" y="963.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="150.0" y="974.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (9 samples, 0.14%)</title><rect x="147.3" y="963.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="150.3" y="974.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (8 samples, 0.13%)</title><rect x="149.0" y="963.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="152.0" y="974.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::JfrEvent(EventStartTime) (2 samples, 0.03%)</title><rect x="150.5" y="963.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="153.5" y="974.0"></text>
</g>
<g>
<title>Parker::park(bool, long long) (19 samples, 0.30%)</title><rect x="150.9" y="963.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="153.9" y="974.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.03%)</title><rect x="152.4" y="947.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="155.4" y="958.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (6 samples, 0.10%)</title><rect x="153.3" y="947.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="156.3" y="958.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (5 samples, 0.08%)</title><rect x="154.4" y="963.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="157.4" y="974.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="155.7" y="963.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="158.7" y="974.0"></text>
</g>
<g>
<title>__kernel_vsyscall (3 samples, 0.05%)</title><rect x="155.7" y="947.0" width="0.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="158.7" y="958.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (3 samples, 0.05%)</title><rect x="155.7" y="931.0" width="0.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="158.7" y="942.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (2 samples, 0.03%)</title><rect x="155.9" y="915.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="158.9" y="926.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_trylock (10 samples, 0.16%)</title><rect x="156.3" y="963.0" width="1.9" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="159.3" y="974.0"></text>
</g>
<g>
<title>__kernel_vsyscall (6 samples, 0.10%)</title><rect x="158.2" y="963.0" width="1.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="161.2" y="974.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (6 samples, 0.10%)</title><rect x="158.2" y="947.0" width="1.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="161.2" y="958.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (5 samples, 0.08%)</title><rect x="158.2" y="931.0" width="0.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="161.2" y="942.0"></text>
</g>
<g>
<title>sys_futex (3 samples, 0.05%)</title><rect x="158.6" y="915.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="161.6" y="926.0"></text>
</g>
<g>
<title>do_futex (2 samples, 0.03%)</title><rect x="158.7" y="899.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="161.7" y="910.0"></text>
</g>
<g>
<title>futex_wake (2 samples, 0.03%)</title><rect x="158.7" y="883.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="161.7" y="894.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.ax (4 samples, 0.06%)</title><rect x="159.5" y="963.0" width="0.7" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="162.5" y="974.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (10 samples, 0.16%)</title><rect x="160.4" y="963.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="163.4" y="974.0"></text>
</g>
<g>
<title>pthread_cond_wait (9 samples, 0.14%)</title><rect x="162.3" y="963.0" width="1.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="165.3" y="974.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (2 samples, 0.03%)</title><rect x="164.0" y="963.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="167.0" y="974.0"></text>
</g>
<g>
<title>[unknown] (325 samples, 5.15%)</title><rect x="164.4" y="979.0" width="60.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="167.4" y="990.0">[unkno..</text>
</g>
<g>
<title>[unknown] (4 samples, 0.06%)</title><rect x="164.4" y="963.0" width="0.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="167.4" y="974.0"></text>
</g>
<g>
<title>__kernel_vsyscall (4 samples, 0.06%)</title><rect x="164.4" y="947.0" width="0.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="167.4" y="958.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (4 samples, 0.06%)</title><rect x="164.4" y="931.0" width="0.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="167.4" y="942.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (4 samples, 0.06%)</title><rect x="164.4" y="915.0" width="0.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="167.4" y="926.0"></text>
</g>
<g>
<title>__kernel_vsyscall (303 samples, 4.80%)</title><rect x="165.3" y="963.0" width="56.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="168.3" y="974.0">__kern..</text>
</g>
<g>
<title>entry_SYSENTER_32 (300 samples, 4.76%)</title><rect x="165.7" y="947.0" width="56.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="168.7" y="958.0">entry_..</text>
</g>
<g>
<title>do_fast_syscall_32 (299 samples, 4.74%)</title><rect x="165.7" y="931.0" width="55.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="168.7" y="942.0">do_fa..</text>
</g>
<g>
<title>sys_futex (298 samples, 4.72%)</title><rect x="165.8" y="915.0" width="55.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="168.8" y="926.0">sys_f..</text>
</g>
<g>
<title>do_futex (293 samples, 4.65%)</title><rect x="166.4" y="899.0" width="54.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="169.4" y="910.0">do_fu..</text>
</g>
<g>
<title>futex_wait (285 samples, 4.52%)</title><rect x="167.7" y="883.0" width="53.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="170.7" y="894.0">futex..</text>
</g>
<g>
<title>futex_wait_queue_me (266 samples, 4.22%)</title><rect x="168.1" y="867.0" width="49.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="171.1" y="878.0">futex..</text>
</g>
<g>
<title>schedule (264 samples, 4.19%)</title><rect x="168.5" y="851.0" width="49.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="171.5" y="862.0">sched..</text>
</g>
<g>
<title>__sched_text_start (264 samples, 4.19%)</title><rect x="168.5" y="835.0" width="49.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="171.5" y="846.0">__sch..</text>
</g>
<g>
<title>finish_task_switch (260 samples, 4.12%)</title><rect x="169.2" y="819.0" width="48.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="172.2" y="830.0">fini..</text>
</g>
<g>
<title>futex_wait_setup (14 samples, 0.22%)</title><rect x="217.9" y="867.0" width="2.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="220.9" y="878.0"></text>
</g>
<g>
<title>get_futex_key (2 samples, 0.03%)</title><rect x="219.5" y="851.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="222.5" y="862.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.10 (2 samples, 0.03%)</title><rect x="219.5" y="835.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="222.5" y="846.0"></text>
</g>
<g>
<title>get_futex_value_locked (3 samples, 0.05%)</title><rect x="219.9" y="851.0" width="0.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="222.9" y="862.0"></text>
</g>
<g>
<title>futex_wait (2 samples, 0.03%)</title><rect x="221.2" y="899.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="224.2" y="910.0"></text>
</g>
<g>
<title>__pthread_cleanup_pop (2 samples, 0.03%)</title><rect x="222.0" y="963.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="225.0" y="974.0"></text>
</g>
<g>
<title>__pthread_cond_wait (8 samples, 0.13%)</title><rect x="222.5" y="963.0" width="1.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="225.5" y="974.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.03%)</title><rect x="224.0" y="963.0" width="0.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="227.0" y="974.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.03%)</title><rect x="224.6" y="963.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="227.6" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 0.03%)</title><rect x="225.2" y="1027.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="228.2" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 0.03%)</title><rect x="225.2" y="1011.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="228.2" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 0.03%)</title><rect x="225.2" y="995.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="228.2" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (124 samples, 1.97%)</title><rect x="225.5" y="1027.0" width="23.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="228.5" y="1038.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (124 samples, 1.97%)</title><rect x="225.5" y="1011.0" width="23.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="228.5" y="1022.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (124 samples, 1.97%)</title><rect x="225.5" y="995.0" width="23.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="228.5" y="1006.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (124 samples, 1.97%)</title><rect x="225.5" y="979.0" width="23.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="228.5" y="990.0">j..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (123 samples, 1.95%)</title><rect x="225.7" y="963.0" width="23.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="228.7" y="974.0">j..</text>
</g>
<g>
<title>Unsafe_Unpark (6 samples, 0.10%)</title><rect x="225.7" y="947.0" width="1.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="228.7" y="958.0"></text>
</g>
<g>
<title>[unknown] (117 samples, 1.86%)</title><rect x="226.8" y="947.0" width="21.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="229.8" y="958.0">[..</text>
</g>
<g>
<title>__kernel_vsyscall (115 samples, 1.82%)</title><rect x="226.8" y="931.0" width="21.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="229.8" y="942.0">_..</text>
</g>
<g>
<title>entry_SYSENTER_32 (115 samples, 1.82%)</title><rect x="226.8" y="915.0" width="21.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="229.8" y="926.0">e..</text>
</g>
<g>
<title>do_fast_syscall_32 (115 samples, 1.82%)</title><rect x="226.8" y="899.0" width="21.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="229.8" y="910.0">d..</text>
</g>
<g>
<title>sys_futex (115 samples, 1.82%)</title><rect x="226.8" y="883.0" width="21.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="229.8" y="894.0">s..</text>
</g>
<g>
<title>do_futex (115 samples, 1.82%)</title><rect x="226.8" y="867.0" width="21.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="229.8" y="878.0">d..</text>
</g>
<g>
<title>futex_wake (115 samples, 1.82%)</title><rect x="226.8" y="851.0" width="21.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="229.8" y="862.0">f..</text>
</g>
<g>
<title>mark_wake_futex (2 samples, 0.03%)</title><rect x="227.0" y="835.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="230.0" y="846.0"></text>
</g>
<g>
<title>plist_del (2 samples, 0.03%)</title><rect x="227.0" y="819.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="230.0" y="830.0"></text>
</g>
<g>
<title>wake_up_q (112 samples, 1.78%)</title><rect x="227.4" y="835.0" width="21.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="230.4" y="846.0"></text>
</g>
<g>
<title>try_to_wake_up (112 samples, 1.78%)</title><rect x="227.4" y="819.0" width="21.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="230.4" y="830.0"></text>
</g>
<g>
<title>__lock_text_start (112 samples, 1.78%)</title><rect x="227.4" y="803.0" width="21.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="230.4" y="814.0"></text>
</g>
<g>
<title>__pthread_cond_signal (2 samples, 0.03%)</title><rect x="248.4" y="931.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="251.4" y="942.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ServiceImpl$$Lambda$67/23099948.run (3,627 samples, 57.51%)</title><rect x="248.7" y="1059.0" width="678.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="251.7" y="1070.0">ru/mail/polis/service/dogm/ServiceImpl$$Lambda$67/23099948.run</text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ServiceImpl.lambda$executeAsync$2 (3,627 samples, 57.51%)</title><rect x="248.7" y="1043.0" width="678.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="251.7" y="1054.0">ru/mail/polis/service/dogm/ServiceImpl.lambda$executeAsync$2</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1,341 samples, 21.26%)</title><rect x="249.9" y="1027.0" width="250.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="252.9" y="1038.0">one/nio/http/HttpSession.sendResp..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (42 samples, 0.67%)</title><rect x="251.7" y="1011.0" width="7.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="254.7" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (42 samples, 0.67%)</title><rect x="251.7" y="995.0" width="7.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="254.7" y="1006.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (42 samples, 0.67%)</title><rect x="251.7" y="979.0" width="7.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="254.7" y="990.0"></text>
</g>
<g>
<title>__vdso_gettimeofday (4 samples, 0.06%)</title><rect x="252.8" y="963.0" width="0.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="255.8" y="974.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (32 samples, 0.51%)</title><rect x="253.6" y="963.0" width="6.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="256.6" y="974.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.08%)</title><rect x="254.2" y="947.0" width="0.9" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="257.2" y="958.0"></text>
</g>
<g>
<title>__kernel_vsyscall (5 samples, 0.08%)</title><rect x="254.2" y="931.0" width="0.9" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="257.2" y="942.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (5 samples, 0.08%)</title><rect x="254.2" y="915.0" width="0.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="257.2" y="926.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (5 samples, 0.08%)</title><rect x="254.2" y="899.0" width="0.9" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="257.2" y="910.0"></text>
</g>
<g>
<title>__kernel_vsyscall (23 samples, 0.36%)</title><rect x="255.1" y="947.0" width="4.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="258.1" y="958.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (19 samples, 0.30%)</title><rect x="255.8" y="931.0" width="3.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="258.8" y="942.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (18 samples, 0.29%)</title><rect x="255.8" y="915.0" width="3.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="258.8" y="926.0"></text>
</g>
<g>
<title>_copy_to_user (2 samples, 0.03%)</title><rect x="256.2" y="899.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="259.2" y="910.0"></text>
</g>
<g>
<title>sys_gettimeofday (14 samples, 0.22%)</title><rect x="256.6" y="899.0" width="2.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="259.6" y="910.0"></text>
</g>
<g>
<title>__getnstimeofday64 (5 samples, 0.08%)</title><rect x="256.6" y="883.0" width="0.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="259.6" y="894.0"></text>
</g>
<g>
<title>do_gettimeofday (8 samples, 0.13%)</title><rect x="257.7" y="883.0" width="1.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="260.7" y="894.0"></text>
</g>
<g>
<title>__getnstimeofday64 (6 samples, 0.10%)</title><rect x="257.9" y="867.0" width="1.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="260.9" y="878.0"></text>
</g>
<g>
<title>kvm_clock_get_cycles (4 samples, 0.06%)</title><rect x="258.3" y="851.0" width="0.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="261.3" y="862.0"></text>
</g>
<g>
<title>pvclock_clocksource_read (3 samples, 0.05%)</title><rect x="258.5" y="835.0" width="0.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="261.5" y="846.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (1,273 samples, 20.18%)</title><rect x="259.6" y="1011.0" width="238.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="262.6" y="1022.0">one/nio/http/HttpSession.writeRe..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (34 samples, 0.54%)</title><rect x="259.8" y="995.0" width="6.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="262.8" y="1006.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (13 samples, 0.21%)</title><rect x="263.3" y="979.0" width="2.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="266.3" y="990.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (13 samples, 0.21%)</title><rect x="263.3" y="963.0" width="2.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="266.3" y="974.0"></text>
</g>
<g>
<title>java/lang/String.charAt (13 samples, 0.21%)</title><rect x="263.3" y="947.0" width="2.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="266.3" y="958.0"></text>
</g>
<g>
<title>resume_userspace (2 samples, 0.03%)</title><rect x="265.8" y="979.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="268.8" y="990.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="265.8" y="963.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="268.8" y="974.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="265.8" y="947.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="268.8" y="958.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1,238 samples, 19.63%)</title><rect x="266.1" y="995.0" width="231.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="269.1" y="1006.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (1,238 samples, 19.63%)</title><rect x="266.1" y="979.0" width="231.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="269.1" y="990.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (1,236 samples, 19.60%)</title><rect x="266.5" y="963.0" width="231.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="269.5" y="974.0">one/nio/net/Session$ArrayQueueI..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (1,234 samples, 19.57%)</title><rect x="266.9" y="947.0" width="230.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="269.9" y="958.0">one/nio/net/JavaSocket.write</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (6 samples, 0.10%)</title><rect x="266.9" y="931.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="269.9" y="942.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (6 samples, 0.10%)</title><rect x="266.9" y="915.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="269.9" y="926.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.10%)</title><rect x="266.9" y="899.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="269.9" y="910.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (6 samples, 0.10%)</title><rect x="266.9" y="883.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="269.9" y="894.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (5 samples, 0.08%)</title><rect x="266.9" y="867.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="269.9" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1,228 samples, 19.47%)</title><rect x="268.0" y="931.0" width="229.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="271.0" y="942.0">sun/nio/ch/SocketChannelImpl.w..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (6 samples, 0.10%)</title><rect x="268.2" y="915.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="271.2" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.10%)</title><rect x="268.2" y="899.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="271.2" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 0.10%)</title><rect x="268.2" y="883.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="271.2" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 0.10%)</title><rect x="268.2" y="867.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="271.2" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1,218 samples, 19.31%)</title><rect x="269.3" y="915.0" width="227.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="272.3" y="926.0">sun/nio/ch/IOUtil.write</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1,217 samples, 19.30%)</title><rect x="269.5" y="899.0" width="227.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="272.5" y="910.0">sun/nio/ch/IOUtil.write</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (1,217 samples, 19.30%)</title><rect x="269.5" y="883.0" width="227.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="272.5" y="894.0">sun/nio/ch/IOUtil.writeFromNat..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (7 samples, 0.11%)</title><rect x="269.5" y="867.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="272.5" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (1,210 samples, 19.19%)</title><rect x="270.8" y="867.0" width="226.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="273.8" y="878.0">sun/nio/ch/SocketDispatcher.wr..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (1,191 samples, 18.88%)</title><rect x="274.4" y="851.0" width="222.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="277.4" y="862.0">sun/nio/ch/FileDispatcherImpl..</text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (5 samples, 0.08%)</title><rect x="276.0" y="835.0" width="1.0" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="279.0" y="846.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (6 samples, 0.10%)</title><rect x="277.0" y="835.0" width="1.1" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="280.0" y="846.0"></text>
</g>
<g>
<title>fdval (2 samples, 0.03%)</title><rect x="277.7" y="819.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="280.7" y="830.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.13%)</title><rect x="278.1" y="835.0" width="1.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="281.1" y="846.0"></text>
</g>
<g>
<title>__kernel_vsyscall (8 samples, 0.13%)</title><rect x="278.1" y="819.0" width="1.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="281.1" y="830.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (8 samples, 0.13%)</title><rect x="278.1" y="803.0" width="1.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="281.1" y="814.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (8 samples, 0.13%)</title><rect x="278.1" y="787.0" width="1.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="281.1" y="798.0"></text>
</g>
<g>
<title>__kernel_vsyscall (1,159 samples, 18.38%)</title><rect x="279.6" y="835.0" width="216.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="282.6" y="846.0">__kernel_vsyscall</text>
</g>
<g>
<title>entry_SYSENTER_32 (1,156 samples, 18.33%)</title><rect x="280.2" y="819.0" width="216.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="283.2" y="830.0">entry_SYSENTER_32</text>
</g>
<g>
<title>do_fast_syscall_32 (1,154 samples, 18.30%)</title><rect x="280.2" y="803.0" width="215.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="283.2" y="814.0">do_fast_syscall_32</text>
</g>
<g>
<title>exit_to_usermode_loop (38 samples, 0.60%)</title><rect x="280.9" y="787.0" width="7.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="283.9" y="798.0"></text>
</g>
<g>
<title>schedule (37 samples, 0.59%)</title><rect x="281.1" y="771.0" width="6.9" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="284.1" y="782.0"></text>
</g>
<g>
<title>__sched_text_start (37 samples, 0.59%)</title><rect x="281.1" y="755.0" width="6.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="284.1" y="766.0"></text>
</g>
<g>
<title>finish_task_switch (35 samples, 0.55%)</title><rect x="281.5" y="739.0" width="6.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="284.5" y="750.0"></text>
</g>
<g>
<title>sys_write (1,112 samples, 17.63%)</title><rect x="288.0" y="787.0" width="208.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="291.0" y="798.0">sys_write</text>
</g>
<g>
<title>__fdget_pos (11 samples, 0.17%)</title><rect x="288.2" y="771.0" width="2.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="291.2" y="782.0"></text>
</g>
<g>
<title>__fget_light (10 samples, 0.16%)</title><rect x="288.4" y="755.0" width="1.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="291.4" y="766.0"></text>
</g>
<g>
<title>__fget (7 samples, 0.11%)</title><rect x="289.0" y="739.0" width="1.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="292.0" y="750.0"></text>
</g>
<g>
<title>__fget_light (2 samples, 0.03%)</title><rect x="290.3" y="771.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="293.3" y="782.0"></text>
</g>
<g>
<title>__fsnotify_parent (3 samples, 0.05%)</title><rect x="290.6" y="771.0" width="0.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="293.6" y="782.0"></text>
</g>
<g>
<title>fput (2 samples, 0.03%)</title><rect x="291.2" y="771.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="294.2" y="782.0"></text>
</g>
<g>
<title>vfs_write (1,091 samples, 17.30%)</title><rect x="292.0" y="771.0" width="204.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="295.0" y="782.0">vfs_write</text>
</g>
<g>
<title>__vfs_write (1,063 samples, 16.85%)</title><rect x="293.3" y="755.0" width="198.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="296.3" y="766.0">__vfs_write</text>
</g>
<g>
<title>new_sync_write (1,059 samples, 16.79%)</title><rect x="293.8" y="739.0" width="198.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="296.8" y="750.0">new_sync_write</text>
</g>
<g>
<title>sock_write_iter (1,058 samples, 16.78%)</title><rect x="294.0" y="723.0" width="198.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="297.0" y="734.0">sock_write_iter</text>
</g>
<g>
<title>sock_sendmsg (1,055 samples, 16.73%)</title><rect x="294.6" y="707.0" width="197.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="297.6" y="718.0">sock_sendmsg</text>
</g>
<g>
<title>inet_sendmsg (1,042 samples, 16.52%)</title><rect x="294.8" y="691.0" width="194.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="297.8" y="702.0">inet_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg (1,038 samples, 16.46%)</title><rect x="295.3" y="675.0" width="194.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="298.3" y="686.0">tcp_sendmsg</text>
</g>
<g>
<title>_copy_from_iter_full (4 samples, 0.06%)</title><rect x="296.1" y="659.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="299.1" y="670.0"></text>
</g>
<g>
<title>lock_sock_nested (3 samples, 0.05%)</title><rect x="296.8" y="659.0" width="0.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="299.8" y="670.0"></text>
</g>
<g>
<title>tcp_push (3 samples, 0.05%)</title><rect x="297.6" y="659.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="300.6" y="670.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (1,021 samples, 16.19%)</title><rect x="298.3" y="659.0" width="191.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="301.3" y="670.0">tcp_sendmsg_locked</text>
</g>
<g>
<title>__alloc_skb (2 samples, 0.03%)</title><rect x="298.9" y="643.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="301.9" y="654.0"></text>
</g>
<g>
<title>__check_object_size (7 samples, 0.11%)</title><rect x="299.2" y="643.0" width="1.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="302.2" y="654.0"></text>
</g>
<g>
<title>__check_heap_object (2 samples, 0.03%)</title><rect x="299.4" y="627.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="302.4" y="638.0"></text>
</g>
<g>
<title>check_stack_object (3 samples, 0.05%)</title><rect x="299.8" y="627.0" width="0.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="302.8" y="638.0"></text>
</g>
<g>
<title>_copy_from_iter_full (7 samples, 0.11%)</title><rect x="300.7" y="643.0" width="1.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="303.7" y="654.0"></text>
</g>
<g>
<title>copyin (4 samples, 0.06%)</title><rect x="300.7" y="627.0" width="0.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="303.7" y="638.0"></text>
</g>
<g>
<title>__copy_user_ll (4 samples, 0.06%)</title><rect x="300.7" y="611.0" width="0.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="303.7" y="622.0"></text>
</g>
<g>
<title>iov_iter_advance (3 samples, 0.05%)</title><rect x="301.5" y="627.0" width="0.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="304.5" y="638.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (32 samples, 0.51%)</title><rect x="302.6" y="643.0" width="6.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="305.6" y="654.0"></text>
</g>
<g>
<title>__alloc_skb (27 samples, 0.43%)</title><rect x="303.4" y="627.0" width="5.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="306.4" y="638.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.45 (9 samples, 0.14%)</title><rect x="304.5" y="611.0" width="1.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="307.5" y="622.0"></text>
</g>
<g>
<title>__kmalloc_track_caller (9 samples, 0.14%)</title><rect x="304.5" y="595.0" width="1.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="307.5" y="606.0"></text>
</g>
<g>
<title>kmem_cache_alloc (9 samples, 0.14%)</title><rect x="306.4" y="611.0" width="1.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="309.4" y="622.0"></text>
</g>
<g>
<title>__slab_alloc.constprop.83 (2 samples, 0.03%)</title><rect x="307.5" y="595.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="310.5" y="606.0"></text>
</g>
<g>
<title>ksize (2 samples, 0.03%)</title><rect x="308.0" y="611.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="311.0" y="622.0"></text>
</g>
<g>
<title>tcp_current_mss (2 samples, 0.03%)</title><rect x="309.0" y="643.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="312.0" y="654.0"></text>
</g>
<g>
<title>tcp_push (949 samples, 15.05%)</title><rect x="309.3" y="643.0" width="177.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="312.3" y="654.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (946 samples, 15.00%)</title><rect x="309.7" y="627.0" width="177.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="312.7" y="638.0">__tcp_push_pending_frames</text>
</g>
<g>
<title>tcp_write_xmit (944 samples, 14.97%)</title><rect x="310.1" y="611.0" width="176.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="313.1" y="622.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_select_window (2 samples, 0.03%)</title><rect x="312.3" y="595.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="315.3" y="606.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (903 samples, 14.32%)</title><rect x="312.7" y="595.0" width="169.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="315.7" y="606.0">__tcp_transmit_skb</text>
</g>
<g>
<title>__skb_clone (2 samples, 0.03%)</title><rect x="315.9" y="579.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="318.9" y="590.0"></text>
</g>
<g>
<title>ip_copy_addrs (3 samples, 0.05%)</title><rect x="316.8" y="579.0" width="0.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="319.8" y="590.0"></text>
</g>
<g>
<title>ip_queue_xmit (871 samples, 13.81%)</title><rect x="317.4" y="579.0" width="163.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="320.4" y="590.0">ip_queue_xmit</text>
</g>
<g>
<title>ip_local_out (863 samples, 13.68%)</title><rect x="318.3" y="563.0" width="161.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="321.3" y="574.0">ip_local_out</text>
</g>
<g>
<title>__ip_local_out (2 samples, 0.03%)</title><rect x="318.3" y="547.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="321.3" y="558.0"></text>
</g>
<g>
<title>ip_output (861 samples, 13.65%)</title><rect x="318.7" y="547.0" width="161.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="321.7" y="558.0">ip_output</text>
</g>
<g>
<title>ip_finish_output2 (4 samples, 0.06%)</title><rect x="319.5" y="531.0" width="0.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="322.5" y="542.0"></text>
</g>
<g>
<title>ip_finish_output (852 samples, 13.51%)</title><rect x="320.2" y="531.0" width="159.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="323.2" y="542.0">ip_finish_output</text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (2 samples, 0.03%)</title><rect x="320.9" y="515.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="323.9" y="526.0"></text>
</g>
<g>
<title>ip_finish_output2 (846 samples, 13.41%)</title><rect x="321.3" y="515.0" width="158.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="324.3" y="526.0">ip_finish_output2</text>
</g>
<g>
<title>__local_bh_enable_ip (797 samples, 12.64%)</title><rect x="323.2" y="499.0" width="149.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="326.2" y="510.0">__local_bh_enable_ip</text>
</g>
<g>
<title>do_softirq.part.15 (797 samples, 12.64%)</title><rect x="323.2" y="483.0" width="149.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="326.2" y="494.0">do_softirq.part.15</text>
</g>
<g>
<title>do_softirq_own_stack (796 samples, 12.62%)</title><rect x="323.4" y="467.0" width="148.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="326.4" y="478.0">do_softirq_own_stack</text>
</g>
<g>
<title>call_on_stack (796 samples, 12.62%)</title><rect x="323.4" y="451.0" width="148.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="326.4" y="462.0">call_on_stack</text>
</g>
<g>
<title>__do_softirq (796 samples, 12.62%)</title><rect x="323.4" y="435.0" width="148.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="326.4" y="446.0">__do_softirq</text>
</g>
<g>
<title>__kfree_skb_flush (3 samples, 0.05%)</title><rect x="324.7" y="419.0" width="0.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="327.7" y="430.0"></text>
</g>
<g>
<title>net_rx_action (786 samples, 12.46%)</title><rect x="325.3" y="419.0" width="147.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="328.3" y="430.0">net_rx_action</text>
</g>
<g>
<title>__kfree_skb_flush (2 samples, 0.03%)</title><rect x="325.8" y="403.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="328.8" y="414.0"></text>
</g>
<g>
<title>process_backlog (781 samples, 12.38%)</title><rect x="326.2" y="403.0" width="146.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="329.2" y="414.0">process_backlog</text>
</g>
<g>
<title>__netif_receive_skb (776 samples, 12.30%)</title><rect x="327.1" y="387.0" width="145.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="330.1" y="398.0">__netif_receive_skb</text>
</g>
<g>
<title>__netif_receive_skb_core (774 samples, 12.27%)</title><rect x="327.1" y="371.0" width="144.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="330.1" y="382.0">__netif_receive_sk..</text>
</g>
<g>
<title>ip_rcv (764 samples, 12.11%)</title><rect x="329.0" y="355.0" width="142.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="332.0" y="366.0">ip_rcv</text>
</g>
<g>
<title>ip_rcv_finish (758 samples, 12.02%)</title><rect x="330.1" y="339.0" width="141.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="333.1" y="350.0">ip_rcv_finish</text>
</g>
<g>
<title>ip_local_deliver (754 samples, 11.95%)</title><rect x="330.7" y="323.0" width="141.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="333.7" y="334.0">ip_local_deliver</text>
</g>
<g>
<title>ip_local_deliver_finish (751 samples, 11.91%)</title><rect x="330.7" y="307.0" width="140.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="333.7" y="318.0">ip_local_deliver_f..</text>
</g>
<g>
<title>__inet_lookup_established (2 samples, 0.03%)</title><rect x="331.2" y="291.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="334.2" y="302.0"></text>
</g>
<g>
<title>raw_local_deliver (2 samples, 0.03%)</title><rect x="331.8" y="291.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="334.8" y="302.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (6 samples, 0.10%)</title><rect x="332.2" y="291.0" width="1.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="335.2" y="302.0"></text>
</g>
<g>
<title>tcp_v4_rcv (734 samples, 11.64%)</title><rect x="333.9" y="291.0" width="137.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="336.9" y="302.0">tcp_v4_rcv</text>
</g>
<g>
<title>__inet_lookup_established (7 samples, 0.11%)</title><rect x="336.1" y="275.0" width="1.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="339.1" y="286.0"></text>
</g>
<g>
<title>security_sock_rcv_skb (6 samples, 0.10%)</title><rect x="338.0" y="275.0" width="1.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="341.0" y="286.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (8 samples, 0.13%)</title><rect x="339.1" y="275.0" width="1.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="342.1" y="286.0"></text>
</g>
<g>
<title>apparmor_socket_sock_rcv_skb (2 samples, 0.03%)</title><rect x="339.3" y="259.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="342.3" y="270.0"></text>
</g>
<g>
<title>security_sock_rcv_skb (5 samples, 0.08%)</title><rect x="339.7" y="259.0" width="0.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="342.7" y="270.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (686 samples, 10.88%)</title><rect x="340.8" y="275.0" width="128.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="343.8" y="286.0">tcp_v4_do_rcv</text>
</g>
<g>
<title>tcp_ack (2 samples, 0.03%)</title><rect x="341.2" y="259.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="344.2" y="270.0"></text>
</g>
<g>
<title>tcp_rcv_established (682 samples, 10.81%)</title><rect x="341.5" y="259.0" width="127.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="344.5" y="270.0">tcp_rcv_establis..</text>
</g>
<g>
<title>__tcp_ack_snd_check (13 samples, 0.21%)</title><rect x="342.8" y="243.0" width="2.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="345.8" y="254.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (13 samples, 0.21%)</title><rect x="342.8" y="227.0" width="2.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="345.8" y="238.0"></text>
</g>
<g>
<title>sk_reset_timer (13 samples, 0.21%)</title><rect x="342.8" y="211.0" width="2.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="345.8" y="222.0"></text>
</g>
<g>
<title>lock_timer_base (2 samples, 0.03%)</title><rect x="342.8" y="195.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="345.8" y="206.0"></text>
</g>
<g>
<title>mod_timer (11 samples, 0.17%)</title><rect x="343.2" y="195.0" width="2.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="346.2" y="206.0"></text>
</g>
<g>
<title>__lock_text_start (11 samples, 0.17%)</title><rect x="343.2" y="179.0" width="2.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="346.2" y="190.0"></text>
</g>
<g>
<title>sched_clock_cpu (4 samples, 0.06%)</title><rect x="345.6" y="243.0" width="0.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="348.6" y="254.0"></text>
</g>
<g>
<title>sched_clock (3 samples, 0.05%)</title><rect x="345.8" y="227.0" width="0.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="348.8" y="238.0"></text>
</g>
<g>
<title>kvm_sched_clock_read (3 samples, 0.05%)</title><rect x="345.8" y="211.0" width="0.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="348.8" y="222.0"></text>
</g>
<g>
<title>pvclock_clocksource_read (3 samples, 0.05%)</title><rect x="345.8" y="195.0" width="0.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="348.8" y="206.0"></text>
</g>
<g>
<title>tcp_ack (74 samples, 1.17%)</title><rect x="346.6" y="243.0" width="13.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="349.6" y="254.0"></text>
</g>
<g>
<title>bictcp_acked (4 samples, 0.06%)</title><rect x="349.9" y="227.0" width="0.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="352.9" y="238.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (40 samples, 0.63%)</title><rect x="351.4" y="227.0" width="7.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="354.4" y="238.0"></text>
</g>
<g>
<title>__kfree_skb (16 samples, 0.25%)</title><rect x="353.1" y="211.0" width="3.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="356.1" y="222.0"></text>
</g>
<g>
<title>kfree_skbmem (3 samples, 0.05%)</title><rect x="353.3" y="195.0" width="0.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="356.3" y="206.0"></text>
</g>
<g>
<title>kmem_cache_free (3 samples, 0.05%)</title><rect x="353.3" y="179.0" width="0.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="356.3" y="190.0"></text>
</g>
<g>
<title>skb_release_all (11 samples, 0.17%)</title><rect x="354.1" y="195.0" width="2.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="357.1" y="206.0"></text>
</g>
<g>
<title>skb_release_data (9 samples, 0.14%)</title><rect x="354.1" y="179.0" width="1.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="357.1" y="190.0"></text>
</g>
<g>
<title>skb_free_head (5 samples, 0.08%)</title><rect x="354.8" y="163.0" width="0.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="357.8" y="174.0"></text>
</g>
<g>
<title>kfree (5 samples, 0.08%)</title><rect x="354.8" y="147.0" width="0.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="357.8" y="158.0"></text>
</g>
<g>
<title>skb_release_head_state (2 samples, 0.03%)</title><rect x="355.7" y="179.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="358.7" y="190.0"></text>
</g>
<g>
<title>jiffies_to_usecs (4 samples, 0.06%)</title><rect x="356.3" y="211.0" width="0.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="359.3" y="222.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.41 (6 samples, 0.10%)</title><rect x="357.2" y="211.0" width="1.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="360.2" y="222.0"></text>
</g>
<g>
<title>minmax_running_min (3 samples, 0.05%)</title><rect x="357.6" y="195.0" width="0.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="360.6" y="206.0"></text>
</g>
<g>
<title>minmax_subwin_update (2 samples, 0.03%)</title><rect x="357.8" y="179.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="360.8" y="190.0"></text>
</g>
<g>
<title>tcp_rate_skb_delivered (2 samples, 0.03%)</title><rect x="358.6" y="211.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="361.6" y="222.0"></text>
</g>
<g>
<title>tcp_rate_gen (4 samples, 0.06%)</title><rect x="358.9" y="227.0" width="0.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="361.9" y="238.0"></text>
</g>
<g>
<title>tcp_rate_skb_delivered (2 samples, 0.03%)</title><rect x="359.7" y="227.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="362.7" y="238.0"></text>
</g>
<g>
<title>tcp_check_space (2 samples, 0.03%)</title><rect x="360.4" y="243.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="363.4" y="254.0"></text>
</g>
<g>
<title>tcp_data_queue (573 samples, 9.09%)</title><rect x="361.0" y="243.0" width="107.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="364.0" y="254.0">tcp_data_queue</text>
</g>
<g>
<title>sock_def_readable (564 samples, 8.94%)</title><rect x="361.7" y="227.0" width="105.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="364.7" y="238.0">sock_def_read..</text>
</g>
<g>
<title>__wake_up_sync_key (557 samples, 8.83%)</title><rect x="363.0" y="211.0" width="104.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="366.0" y="222.0">__wake_up_sy..</text>
</g>
<g>
<title>__wake_up_common_lock (557 samples, 8.83%)</title><rect x="363.0" y="195.0" width="104.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="366.0" y="206.0">__wake_up_co..</text>
</g>
<g>
<title>__lock_text_start (557 samples, 8.83%)</title><rect x="363.0" y="179.0" width="104.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="366.0" y="190.0">__lock_text_..</text>
</g>
<g>
<title>tcp_event_data_recv (2 samples, 0.03%)</title><rect x="467.3" y="227.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="470.3" y="238.0"></text>
</g>
<g>
<title>tcp_queue_rcv (3 samples, 0.05%)</title><rect x="467.6" y="227.0" width="0.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="470.6" y="238.0"></text>
</g>
<g>
<title>tcp_event_data_recv (4 samples, 0.06%)</title><rect x="468.2" y="243.0" width="0.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="471.2" y="254.0"></text>
</g>
<g>
<title>tcp_v4_fill_cb (8 samples, 0.13%)</title><rect x="469.1" y="275.0" width="1.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="472.1" y="286.0"></text>
</g>
<g>
<title>memmove (4 samples, 0.06%)</title><rect x="469.9" y="259.0" width="0.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="472.9" y="270.0"></text>
</g>
<g>
<title>tcp_v4_inbound_md5_hash (3 samples, 0.05%)</title><rect x="470.6" y="275.0" width="0.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="473.6" y="286.0"></text>
</g>
<g>
<title>tcp_v4_rcv (2 samples, 0.03%)</title><rect x="471.4" y="307.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="474.4" y="318.0"></text>
</g>
<g>
<title>ip_rcv (2 samples, 0.03%)</title><rect x="471.9" y="371.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="474.9" y="382.0"></text>
</g>
<g>
<title>dev_queue_xmit (38 samples, 0.60%)</title><rect x="472.3" y="499.0" width="7.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="475.3" y="510.0"></text>
</g>
<g>
<title>__dev_queue_xmit (38 samples, 0.60%)</title><rect x="472.3" y="483.0" width="7.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="475.3" y="494.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (21 samples, 0.33%)</title><rect x="473.6" y="467.0" width="3.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="476.6" y="478.0"></text>
</g>
<g>
<title>eth_type_trans (2 samples, 0.03%)</title><rect x="474.2" y="451.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="477.2" y="462.0"></text>
</g>
<g>
<title>loopback_xmit (12 samples, 0.19%)</title><rect x="474.6" y="451.0" width="2.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="477.6" y="462.0"></text>
</g>
<g>
<title>netif_rx (7 samples, 0.11%)</title><rect x="474.7" y="435.0" width="1.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="477.7" y="446.0"></text>
</g>
<g>
<title>netif_rx_internal (6 samples, 0.10%)</title><rect x="474.9" y="419.0" width="1.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="477.9" y="430.0"></text>
</g>
<g>
<title>enqueue_to_backlog (6 samples, 0.10%)</title><rect x="474.9" y="403.0" width="1.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="477.9" y="414.0"></text>
</g>
<g>
<title>sk_free (2 samples, 0.03%)</title><rect x="476.1" y="435.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="479.1" y="446.0"></text>
</g>
<g>
<title>tcp_wfree (2 samples, 0.03%)</title><rect x="476.4" y="435.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="479.4" y="446.0"></text>
</g>
<g>
<title>tcp_wfree (2 samples, 0.03%)</title><rect x="477.2" y="451.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="480.2" y="462.0"></text>
</g>
<g>
<title>loopback_xmit (2 samples, 0.03%)</title><rect x="477.5" y="467.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="480.5" y="478.0"></text>
</g>
<g>
<title>netdev_pick_tx (2 samples, 0.03%)</title><rect x="477.9" y="467.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="480.9" y="478.0"></text>
</g>
<g>
<title>netif_skb_features (2 samples, 0.03%)</title><rect x="478.3" y="467.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="481.3" y="478.0"></text>
</g>
<g>
<title>validate_xmit_xfrm (3 samples, 0.05%)</title><rect x="478.9" y="467.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="481.9" y="478.0"></text>
</g>
<g>
<title>ipv4_dst_check (3 samples, 0.05%)</title><rect x="479.8" y="563.0" width="0.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="482.8" y="574.0"></text>
</g>
<g>
<title>skb_clone (3 samples, 0.05%)</title><rect x="480.4" y="579.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="483.4" y="590.0"></text>
</g>
<g>
<title>__skb_clone (3 samples, 0.05%)</title><rect x="480.4" y="563.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="483.4" y="574.0"></text>
</g>
<g>
<title>__copy_skb_header (3 samples, 0.05%)</title><rect x="480.4" y="547.0" width="0.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="483.4" y="558.0"></text>
</g>
<g>
<title>tcp_established_options (2 samples, 0.03%)</title><rect x="480.9" y="579.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="483.9" y="590.0"></text>
</g>
<g>
<title>tcp_v4_md5_lookup (2 samples, 0.03%)</title><rect x="481.3" y="579.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="484.3" y="590.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (2 samples, 0.03%)</title><rect x="481.7" y="595.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="484.7" y="606.0"></text>
</g>
<g>
<title>sched_clock (2 samples, 0.03%)</title><rect x="482.0" y="595.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="485.0" y="606.0"></text>
</g>
<g>
<title>sched_clock_cpu (5 samples, 0.08%)</title><rect x="482.4" y="595.0" width="0.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="485.4" y="606.0"></text>
</g>
<g>
<title>sched_clock (5 samples, 0.08%)</title><rect x="482.4" y="579.0" width="0.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="485.4" y="590.0"></text>
</g>
<g>
<title>kvm_sched_clock_read (4 samples, 0.06%)</title><rect x="482.4" y="563.0" width="0.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="485.4" y="574.0"></text>
</g>
<g>
<title>pvclock_clocksource_read (3 samples, 0.05%)</title><rect x="482.6" y="547.0" width="0.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="485.6" y="558.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (10 samples, 0.16%)</title><rect x="483.3" y="595.0" width="1.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="486.3" y="606.0"></text>
</g>
<g>
<title>tcp_rearm_rto (5 samples, 0.08%)</title><rect x="484.3" y="579.0" width="0.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="487.3" y="590.0"></text>
</g>
<g>
<title>tcp_rearm_rto.part.60 (5 samples, 0.08%)</title><rect x="484.3" y="563.0" width="0.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="487.3" y="574.0"></text>
</g>
<g>
<title>sk_reset_timer (5 samples, 0.08%)</title><rect x="484.3" y="547.0" width="0.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="487.3" y="558.0"></text>
</g>
<g>
<title>mod_timer (5 samples, 0.08%)</title><rect x="484.3" y="531.0" width="0.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="487.3" y="542.0"></text>
</g>
<g>
<title>__lock_text_start (4 samples, 0.06%)</title><rect x="484.5" y="515.0" width="0.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="487.5" y="526.0"></text>
</g>
<g>
<title>tcp_options_write (3 samples, 0.05%)</title><rect x="485.4" y="595.0" width="0.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="488.4" y="606.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (2 samples, 0.03%)</title><rect x="486.2" y="595.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="489.2" y="606.0"></text>
</g>
<g>
<title>tcp_send_mss (13 samples, 0.21%)</title><rect x="486.9" y="643.0" width="2.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="489.9" y="654.0"></text>
</g>
<g>
<title>tcp_current_mss (8 samples, 0.13%)</title><rect x="487.7" y="627.0" width="1.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="490.7" y="638.0"></text>
</g>
<g>
<title>tcp_established_options (5 samples, 0.08%)</title><rect x="488.2" y="611.0" width="0.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="491.2" y="622.0"></text>
</g>
<g>
<title>tcp_md5_do_lookup (2 samples, 0.03%)</title><rect x="488.8" y="595.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="491.8" y="606.0"></text>
</g>
<g>
<title>security_socket_sendmsg (12 samples, 0.19%)</title><rect x="489.7" y="691.0" width="2.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="492.7" y="702.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (4 samples, 0.06%)</title><rect x="489.9" y="675.0" width="0.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="492.9" y="686.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (7 samples, 0.11%)</title><rect x="490.6" y="675.0" width="1.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="493.6" y="686.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (6 samples, 0.10%)</title><rect x="490.8" y="659.0" width="1.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="493.8" y="670.0"></text>
</g>
<g>
<title>aa_sk_perm (4 samples, 0.06%)</title><rect x="491.2" y="643.0" width="0.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="494.2" y="654.0"></text>
</g>
<g>
<title>aa_label_sk_perm (4 samples, 0.06%)</title><rect x="491.2" y="627.0" width="0.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="494.2" y="638.0"></text>
</g>
<g>
<title>fsnotify (10 samples, 0.16%)</title><rect x="492.1" y="755.0" width="1.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="495.1" y="766.0"></text>
</g>
<g>
<title>rw_verify_area (9 samples, 0.14%)</title><rect x="494.2" y="755.0" width="1.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="497.2" y="766.0"></text>
</g>
<g>
<title>security_file_permission (8 samples, 0.13%)</title><rect x="494.4" y="739.0" width="1.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="497.4" y="750.0"></text>
</g>
<g>
<title>apparmor_file_permission (6 samples, 0.10%)</title><rect x="494.8" y="723.0" width="1.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="497.8" y="734.0"></text>
</g>
<g>
<title>common_file_perm (6 samples, 0.10%)</title><rect x="494.8" y="707.0" width="1.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="497.8" y="718.0"></text>
</g>
<g>
<title>sys_write (2 samples, 0.03%)</title><rect x="496.1" y="803.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="499.1" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginWrite (3 samples, 0.05%)</title><rect x="497.2" y="915.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="500.2" y="926.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (14 samples, 0.22%)</title><rect x="497.8" y="1011.0" width="2.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="500.8" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (14 samples, 0.22%)</title><rect x="497.8" y="995.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="500.8" y="1006.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (14 samples, 0.22%)</title><rect x="497.8" y="979.0" width="2.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="500.8" y="990.0"></text>
</g>
<g>
<title>resume_userspace (2 samples, 0.03%)</title><rect x="500.4" y="1011.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="503.4" y="1022.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="500.4" y="995.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="503.4" y="1006.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="500.4" y="979.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="503.4" y="990.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ServiceImpl$$Lambda$66/25175452.act (2,280 samples, 36.15%)</title><rect x="500.7" y="1027.0" width="426.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="503.7" y="1038.0">ru/mail/polis/service/dogm/ServiceImpl$$Lambda$66/25175452..</text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ServiceImpl.lambda$entity$0 (2,280 samples, 36.15%)</title><rect x="500.7" y="1011.0" width="426.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="503.7" y="1022.0">ru/mail/polis/service/dogm/ServiceImpl.lambda$entity$0</text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ServiceImpl.processEntityRequest (2,280 samples, 36.15%)</title><rect x="500.7" y="995.0" width="426.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="503.7" y="1006.0">ru/mail/polis/service/dogm/ServiceImpl.processEntityRequest</text>
</g>
<g>
<title>java/util/HashMap.get (13 samples, 0.21%)</title><rect x="501.7" y="979.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="504.7" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (13 samples, 0.21%)</title><rect x="501.7" y="963.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="504.7" y="974.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dogm/processors/ProcessorGet.processEntityDirectly (419 samples, 6.64%)</title><rect x="504.1" y="979.0" width="78.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="507.1" y="990.0">ru/mail/p..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.06%)</title><rect x="504.3" y="963.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="507.3" y="974.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.06%)</title><rect x="504.3" y="947.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="507.3" y="958.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.06%)</title><rect x="504.3" y="931.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="507.3" y="942.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.06%)</title><rect x="504.3" y="915.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="507.3" y="926.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.06%)</title><rect x="504.3" y="899.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="507.3" y="910.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/dogm/DataWithTimestamp.toBytes (5 samples, 0.08%)</title><rect x="505.0" y="963.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="508.0" y="974.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (4 samples, 0.06%)</title><rect x="505.0" y="947.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="508.0" y="958.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.06%)</title><rect x="505.0" y="931.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="508.0" y="942.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.06%)</title><rect x="505.0" y="915.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="508.0" y="926.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.06%)</title><rect x="505.0" y="899.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="508.0" y="910.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/dogm/RocksDAO.getWithTimestamp (409 samples, 6.48%)</title><rect x="506.0" y="963.0" width="76.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="509.0" y="974.0">ru/mail/..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (404 samples, 6.41%)</title><rect x="506.0" y="947.0" width="75.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="509.0" y="958.0">org/rock..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (402 samples, 6.37%)</title><rect x="506.4" y="931.0" width="75.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="509.4" y="942.0">org/rock..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (372 samples, 5.90%)</title><rect x="506.9" y="915.0" width="69.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="509.9" y="926.0">Java_or..</text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (2 samples, 0.03%)</title><rect x="507.3" y="899.0" width="0.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="510.3" y="910.0"></text>
</g>
<g>
<title>/usr/lib/i386-linux-gnu/libstdc++.so.6.0.25 (2 samples, 0.03%)</title><rect x="507.7" y="899.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="510.7" y="910.0"></text>
</g>
<g>
<title>free (5 samples, 0.08%)</title><rect x="508.0" y="899.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="511.0" y="910.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (3 samples, 0.05%)</title><rect x="509.0" y="899.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="512.0" y="910.0"></text>
</g>
<g>
<title>malloc (6 samples, 0.10%)</title><rect x="509.7" y="899.0" width="1.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="512.7" y="910.0"></text>
</g>
<g>
<title>operator delete(void*) (4 samples, 0.06%)</title><rect x="510.8" y="899.0" width="0.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="513.8" y="910.0"></text>
</g>
<g>
<title>operator delete[](void*) (2 samples, 0.03%)</title><rect x="511.6" y="899.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="514.6" y="910.0"></text>
</g>
<g>
<title>operator new(unsigned int) (2 samples, 0.03%)</title><rect x="512.0" y="899.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="515.0" y="910.0"></text>
</g>
<g>
<title>operator new[](unsigned int) (3 samples, 0.05%)</title><rect x="512.3" y="899.0" width="0.6" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="515.3" y="910.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (336 samples, 5.33%)</title><rect x="513.1" y="899.0" width="62.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="516.1" y="910.0">rocksd..</text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (3 samples, 0.05%)</title><rect x="515.3" y="883.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="518.3" y="894.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (3 samples, 0.05%)</title><rect x="516.5" y="883.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="519.5" y="894.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (10 samples, 0.16%)</title><rect x="517.0" y="883.0" width="1.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="520.0" y="894.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.03%)</title><rect x="517.4" y="867.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="520.4" y="878.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (6 samples, 0.10%)</title><rect x="517.8" y="867.0" width="1.1" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="520.8" y="878.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (5 samples, 0.08%)</title><rect x="518.0" y="851.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="521.0" y="862.0"></text>
</g>
<g>
<title>jni_NewByteArray (3 samples, 0.05%)</title><rect x="518.9" y="883.0" width="0.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="521.9" y="894.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, std::string*) (272 samples, 4.31%)</title><rect x="519.5" y="883.0" width="50.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="522.5" y="894.0">rocks..</text>
</g>
<g>
<title>rocksdb::Cleanable::Cleanable() (3 samples, 0.05%)</title><rect x="519.5" y="867.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="522.5" y="878.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, std::string*) (267 samples, 4.23%)</title><rect x="520.2" y="867.0" width="50.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="523.2" y="878.0">rocks..</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (262 samples, 4.15%)</title><rect x="520.8" y="851.0" width="49.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="523.8" y="862.0">rocks..</text>
</g>
<g>
<title>___tls_get_addr (3 samples, 0.05%)</title><rect x="521.1" y="835.0" width="0.6" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="524.1" y="846.0"></text>
</g>
<g>
<title>_init (2 samples, 0.03%)</title><rect x="521.7" y="835.0" width="0.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="524.7" y="846.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetAndRefSuperVersion(rocksdb::ColumnFamilyData*) (2 samples, 0.03%)</title><rect x="522.4" y="835.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="525.4" y="846.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (241 samples, 3.82%)</title><rect x="522.8" y="835.0" width="45.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="525.8" y="846.0">rock..</text>
</g>
<g>
<title>/lib/i386-linux-gnu/ld-2.27.so (2 samples, 0.03%)</title><rect x="526.8" y="819.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="529.8" y="830.0"></text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (7 samples, 0.11%)</title><rect x="527.1" y="819.0" width="1.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="530.1" y="830.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni13873297829581089396.so (3 samples, 0.05%)</title><rect x="528.4" y="819.0" width="0.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="531.4" y="830.0"></text>
</g>
<g>
<title>___tls_get_addr (6 samples, 0.10%)</title><rect x="529.2" y="819.0" width="1.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="532.2" y="830.0"></text>
</g>
<g>
<title>_init (2 samples, 0.03%)</title><rect x="530.3" y="819.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="533.3" y="830.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (2 samples, 0.03%)</title><rect x="530.9" y="819.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="533.9" y="830.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetAndRefSuperVersion(rocksdb::ColumnFamilyData*) (18 samples, 0.29%)</title><rect x="531.2" y="819.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="534.2" y="830.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (14 samples, 0.22%)</title><rect x="531.2" y="803.0" width="2.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="534.2" y="814.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (12 samples, 0.19%)</title><rect x="531.6" y="787.0" width="2.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="534.6" y="798.0"></text>
</g>
<g>
<title>_init (3 samples, 0.05%)</title><rect x="531.8" y="771.0" width="0.6" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="534.8" y="782.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (2 samples, 0.03%)</title><rect x="532.4" y="771.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="535.4" y="782.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() (2 samples, 0.03%)</title><rect x="532.7" y="771.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="535.7" y="782.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (4 samples, 0.06%)</title><rect x="533.1" y="771.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="536.1" y="782.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (4 samples, 0.06%)</title><rect x="533.9" y="803.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="536.9" y="814.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::ReturnAndCleanupSuperVersion(rocksdb::ColumnFamilyData*, rocksdb::SuperVersion*) (5 samples, 0.08%)</title><rect x="534.6" y="819.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="537.6" y="830.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (3 samples, 0.05%)</title><rect x="534.6" y="803.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="537.6" y="814.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::CompareAndSwap(void*, void*&amp;) (2 samples, 0.03%)</title><rect x="535.2" y="803.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="538.2" y="814.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (7 samples, 0.11%)</title><rect x="535.5" y="819.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="538.5" y="830.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (145 samples, 2.30%)</title><rect x="537.0" y="819.0" width="27.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="540.0" y="830.0">r..</text>
</g>
<g>
<title>/tmp/librocksdbjni13873297829581089396.so (135 samples, 2.14%)</title><rect x="538.5" y="803.0" width="25.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="541.5" y="814.0">/..</text>
</g>
<g>
<title>/tmp/librocksdbjni13873297829581089396.so (11 samples, 0.17%)</title><rect x="539.1" y="787.0" width="2.1" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="542.1" y="798.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::FindGreaterOrEqual(char const*) const (108 samples, 1.71%)</title><rect x="541.5" y="787.0" width="20.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="544.5" y="798.0"></text>
</g>
<g>
<title>/lib/i386-linux-gnu/ld-2.27.so (3 samples, 0.05%)</title><rect x="552.8" y="771.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="555.8" y="782.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni13873297829581089396.so (3 samples, 0.05%)</title><rect x="553.3" y="771.0" width="0.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="556.3" y="782.0"></text>
</g>
<g>
<title>___tls_get_addr (6 samples, 0.10%)</title><rect x="553.9" y="771.0" width="1.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="556.9" y="782.0"></text>
</g>
<g>
<title>_init (4 samples, 0.06%)</title><rect x="555.0" y="771.0" width="0.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="558.0" y="782.0"></text>
</g>
<g>
<title>resume_userspace (3 samples, 0.05%)</title><rect x="555.8" y="771.0" width="0.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="558.8" y="782.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.05%)</title><rect x="555.8" y="755.0" width="0.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="558.8" y="766.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.05%)</title><rect x="555.8" y="739.0" width="0.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="558.8" y="750.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (29 samples, 0.46%)</title><rect x="556.3" y="771.0" width="5.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="559.3" y="782.0"></text>
</g>
<g>
<title>/lib/i386-linux-gnu/ld-2.27.so (3 samples, 0.05%)</title><rect x="557.4" y="755.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="560.4" y="766.0"></text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (11 samples, 0.17%)</title><rect x="558.0" y="755.0" width="2.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="561.0" y="766.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni13873297829581089396.so (2 samples, 0.03%)</title><rect x="560.1" y="755.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="563.1" y="766.0"></text>
</g>
<g>
<title>_init (6 samples, 0.10%)</title><rect x="560.6" y="755.0" width="1.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="563.6" y="766.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (3 samples, 0.05%)</title><rect x="561.7" y="787.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="564.7" y="798.0"></text>
</g>
<g>
<title>rocksdb::UnPackSequenceAndType(unsigned long long, unsigned long long*, rocksdb::ValueType*) (5 samples, 0.08%)</title><rect x="562.3" y="787.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="565.3" y="798.0"></text>
</g>
<g>
<title>std::string::assign(char const*, unsigned int) (3 samples, 0.05%)</title><rect x="563.2" y="787.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="566.2" y="798.0"></text>
</g>
<g>
<title>_init (2 samples, 0.03%)</title><rect x="563.8" y="803.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="566.8" y="814.0"></text>
</g>
<g>
<title>rocksdb::MemTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;, unsigned long long) (7 samples, 0.11%)</title><rect x="564.2" y="819.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="567.2" y="830.0"></text>
</g>
<g>
<title>rocksdb::PackSequenceAndType(unsigned long long, rocksdb::ValueType) (2 samples, 0.03%)</title><rect x="565.7" y="819.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="568.7" y="830.0"></text>
</g>
<g>
<title>rocksdb::PinnedIteratorsManager::~PinnedIteratorsManager() (2 samples, 0.03%)</title><rect x="566.0" y="819.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="569.0" y="830.0"></text>
</g>
<g>
<title>rocksdb::Status::operator=(rocksdb::Status&amp;&amp;) (3 samples, 0.05%)</title><rect x="566.4" y="819.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="569.4" y="830.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (5 samples, 0.08%)</title><rect x="567.0" y="819.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="570.0" y="830.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() (2 samples, 0.03%)</title><rect x="567.4" y="803.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="570.4" y="814.0"></text>
</g>
<g>
<title>rocksdb::LookupKey::LookupKey(rocksdb::Slice const&amp;, unsigned long long) (4 samples, 0.06%)</title><rect x="567.9" y="835.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="570.9" y="846.0"></text>
</g>
<g>
<title>rocksdb::StopWatch::~StopWatch() (3 samples, 0.05%)</title><rect x="569.0" y="835.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="572.0" y="846.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (2 samples, 0.03%)</title><rect x="569.8" y="851.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="572.8" y="862.0"></text>
</g>
<g>
<title>rocksdb::JniUtil::createJavaByteArrayWithSizeCheck(JNIEnv_*, char const*, unsigned int) (27 samples, 0.43%)</title><rect x="570.5" y="883.0" width="5.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="573.5" y="894.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (2 samples, 0.03%)</title><rect x="570.9" y="867.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="573.9" y="878.0"></text>
</g>
<g>
<title>jni_NewByteArray (17 samples, 0.27%)</title><rect x="571.7" y="867.0" width="3.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="574.7" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.05%)</title><rect x="572.0" y="851.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="575.0" y="862.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (12 samples, 0.19%)</title><rect x="572.6" y="851.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="575.6" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (5 samples, 0.08%)</title><rect x="573.3" y="835.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="576.3" y="846.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (5 samples, 0.08%)</title><rect x="573.3" y="819.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="576.3" y="830.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.05%)</title><rect x="574.3" y="835.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="577.3" y="846.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (4 samples, 0.06%)</title><rect x="574.8" y="867.0" width="0.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="577.8" y="878.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned int) (2 samples, 0.03%)</title><rect x="575.6" y="883.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="578.6" y="894.0"></text>
</g>
<g>
<title>std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string(std::string const&amp;) (3 samples, 0.05%)</title><rect x="576.0" y="899.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="579.0" y="910.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.13%)</title><rect x="576.5" y="915.0" width="1.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="579.5" y="926.0"></text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (2 samples, 0.03%)</title><rect x="576.5" y="899.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="579.5" y="910.0"></text>
</g>
<g>
<title>malloc (5 samples, 0.08%)</title><rect x="576.9" y="899.0" width="0.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="579.9" y="910.0"></text>
</g>
<g>
<title>_init (4 samples, 0.06%)</title><rect x="578.0" y="915.0" width="0.8" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="581.0" y="926.0"></text>
</g>
<g>
<title>rocksdb::ReadOptions::ReadOptions() (4 samples, 0.06%)</title><rect x="579.0" y="915.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="582.0" y="926.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (6 samples, 0.10%)</title><rect x="579.7" y="915.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="582.7" y="926.0"></text>
</g>
<g>
<title>std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator&lt;char&gt; const&amp;) (3 samples, 0.05%)</title><rect x="581.0" y="915.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="584.0" y="926.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/dogm/DataWithTimestamp.fromBytes (4 samples, 0.06%)</title><rect x="581.8" y="947.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="584.8" y="958.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.getLong (3 samples, 0.05%)</title><rect x="581.9" y="931.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="584.9" y="942.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dogm/processors/ProcessorGet.processEntityRequest (1,843 samples, 29.22%)</title><rect x="582.5" y="979.0" width="344.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="585.5" y="990.0">ru/mail/polis/service/dogm/processors/Processor..</text>
</g>
<g>
<title>ru/mail/polis/service/dogm/processors/ProcessorGet.extractDataFromGetResponse (4 samples, 0.06%)</title><rect x="583.1" y="963.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="586.1" y="974.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/dogm/DataWithTimestamp.fromBytes (3 samples, 0.05%)</title><rect x="583.3" y="947.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="586.3" y="958.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.03%)</title><rect x="583.3" y="931.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="586.3" y="942.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.03%)</title><rect x="583.3" y="915.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="586.3" y="926.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="583.3" y="899.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="586.3" y="910.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dogm/processors/ProcessorGet.processEntityDirectly (244 samples, 3.87%)</title><rect x="583.8" y="963.0" width="45.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="586.8" y="974.0">ru/m..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (5 samples, 0.08%)</title><rect x="583.8" y="947.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="586.8" y="958.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (5 samples, 0.08%)</title><rect x="583.8" y="931.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="586.8" y="942.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (5 samples, 0.08%)</title><rect x="583.8" y="915.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="586.8" y="926.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.08%)</title><rect x="583.8" y="899.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="586.8" y="910.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/dogm/DataWithTimestamp.toBytes (3 samples, 0.05%)</title><rect x="584.8" y="947.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="587.8" y="958.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (2 samples, 0.03%)</title><rect x="584.8" y="931.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="587.8" y="942.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="584.8" y="915.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="587.8" y="926.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="584.8" y="899.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="587.8" y="910.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/dogm/RocksDAO.getWithTimestamp (236 samples, 3.74%)</title><rect x="585.3" y="947.0" width="44.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="588.3" y="958.0">ru/m..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (232 samples, 3.68%)</title><rect x="585.3" y="931.0" width="43.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="588.3" y="942.0">org/..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (229 samples, 3.63%)</title><rect x="585.9" y="915.0" width="42.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="588.9" y="926.0">org/..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (205 samples, 3.25%)</title><rect x="585.9" y="899.0" width="38.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="588.9" y="910.0">Jav..</text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (2 samples, 0.03%)</title><rect x="586.2" y="883.0" width="0.4" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="589.2" y="894.0"></text>
</g>
<g>
<title>/usr/lib/i386-linux-gnu/libstdc++.so.6.0.25 (3 samples, 0.05%)</title><rect x="586.6" y="883.0" width="0.6" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="589.6" y="894.0"></text>
</g>
<g>
<title>free (2 samples, 0.03%)</title><rect x="587.2" y="883.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="590.2" y="894.0"></text>
</g>
<g>
<title>malloc (3 samples, 0.05%)</title><rect x="587.9" y="883.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="590.9" y="894.0"></text>
</g>
<g>
<title>operator delete(void*) (2 samples, 0.03%)</title><rect x="588.5" y="883.0" width="0.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="591.5" y="894.0"></text>
</g>
<g>
<title>operator delete[](void*) (2 samples, 0.03%)</title><rect x="588.9" y="883.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="591.9" y="894.0"></text>
</g>
<g>
<title>operator new(unsigned int) (2 samples, 0.03%)</title><rect x="589.2" y="883.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="592.2" y="894.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (181 samples, 2.87%)</title><rect x="590.2" y="883.0" width="33.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="593.2" y="894.0">ro..</text>
</g>
<g>
<title>jni_ExceptionCheck (3 samples, 0.05%)</title><rect x="590.7" y="867.0" width="0.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="593.7" y="878.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (8 samples, 0.13%)</title><rect x="591.3" y="867.0" width="1.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="594.3" y="878.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.03%)</title><rect x="591.3" y="851.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="594.3" y="862.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (4 samples, 0.06%)</title><rect x="592.0" y="851.0" width="0.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="595.0" y="862.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, std::string*) (160 samples, 2.54%)</title><rect x="593.0" y="867.0" width="29.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="596.0" y="878.0">ro..</text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, std::string*) (157 samples, 2.49%)</title><rect x="593.4" y="851.0" width="29.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="596.4" y="862.0">ro..</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (155 samples, 2.46%)</title><rect x="593.7" y="835.0" width="29.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="596.7" y="846.0">ro..</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (3 samples, 0.05%)</title><rect x="593.7" y="819.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="596.7" y="830.0"></text>
</g>
<g>
<title>___tls_get_addr (3 samples, 0.05%)</title><rect x="594.3" y="819.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="597.3" y="830.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (138 samples, 2.19%)</title><rect x="595.0" y="819.0" width="25.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="598.0" y="830.0">r..</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (2 samples, 0.03%)</title><rect x="596.9" y="803.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="599.9" y="814.0"></text>
</g>
<g>
<title>___tls_get_addr (2 samples, 0.03%)</title><rect x="597.3" y="803.0" width="0.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="600.3" y="814.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (3 samples, 0.05%)</title><rect x="597.7" y="803.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="600.7" y="814.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetAndRefSuperVersion(rocksdb::ColumnFamilyData*) (14 samples, 0.22%)</title><rect x="598.4" y="803.0" width="2.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="601.4" y="814.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (10 samples, 0.16%)</title><rect x="598.6" y="787.0" width="1.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="601.6" y="798.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (4 samples, 0.06%)</title><rect x="599.3" y="771.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="602.3" y="782.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (2 samples, 0.03%)</title><rect x="600.1" y="771.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="603.1" y="782.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (3 samples, 0.05%)</title><rect x="600.5" y="787.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="603.5" y="798.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::ReturnAndCleanupSuperVersion(rocksdb::ColumnFamilyData*, rocksdb::SuperVersion*) (5 samples, 0.08%)</title><rect x="601.0" y="803.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="604.0" y="814.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (3 samples, 0.05%)</title><rect x="601.0" y="787.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="604.0" y="798.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::CompareAndSwap(void*, void*&amp;) (2 samples, 0.03%)</title><rect x="601.0" y="771.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="604.0" y="782.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::CompareAndSwap(unsigned int, void*, void*&amp;) (2 samples, 0.03%)</title><rect x="601.0" y="755.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="604.0" y="766.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::CompareAndSwap(void*, void*&amp;) (2 samples, 0.03%)</title><rect x="601.6" y="787.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="604.6" y="798.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (4 samples, 0.06%)</title><rect x="602.0" y="803.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="605.0" y="814.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (90 samples, 1.43%)</title><rect x="602.9" y="803.0" width="16.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="605.9" y="814.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni13873297829581089396.so (80 samples, 1.27%)</title><rect x="604.0" y="787.0" width="15.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="607.0" y="798.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni13873297829581089396.so (6 samples, 0.10%)</title><rect x="604.2" y="771.0" width="1.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="607.2" y="782.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::FindGreaterOrEqual(char const*) const (67 samples, 1.06%)</title><rect x="605.5" y="771.0" width="12.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="608.5" y="782.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni13873297829581089396.so (2 samples, 0.03%)</title><rect x="610.9" y="755.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="613.9" y="766.0"></text>
</g>
<g>
<title>resume_userspace (4 samples, 0.06%)</title><rect x="611.9" y="755.0" width="0.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="614.9" y="766.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (4 samples, 0.06%)</title><rect x="611.9" y="739.0" width="0.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="614.9" y="750.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (4 samples, 0.06%)</title><rect x="611.9" y="723.0" width="0.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="614.9" y="734.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (29 samples, 0.46%)</title><rect x="612.6" y="755.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="615.6" y="766.0"></text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (12 samples, 0.19%)</title><rect x="613.9" y="739.0" width="2.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="616.9" y="750.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni13873297829581089396.so (2 samples, 0.03%)</title><rect x="616.2" y="739.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="619.2" y="750.0"></text>
</g>
<g>
<title>___tls_get_addr (2 samples, 0.03%)</title><rect x="616.7" y="739.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="619.7" y="750.0"></text>
</g>
<g>
<title>_init (3 samples, 0.05%)</title><rect x="617.1" y="739.0" width="0.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="620.1" y="750.0"></text>
</g>
<g>
<title>resume_userspace (2 samples, 0.03%)</title><rect x="617.7" y="739.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="620.7" y="750.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="617.7" y="723.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="620.7" y="734.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="617.7" y="707.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="620.7" y="718.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (2 samples, 0.03%)</title><rect x="618.1" y="771.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="621.1" y="782.0"></text>
</g>
<g>
<title>rocksdb::UnPackSequenceAndType(unsigned long long, unsigned long long*, rocksdb::ValueType*) (2 samples, 0.03%)</title><rect x="618.4" y="771.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="621.4" y="782.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::FindGreaterOrEqual(char const*) const (3 samples, 0.05%)</title><rect x="619.0" y="787.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="622.0" y="798.0"></text>
</g>
<g>
<title>rocksdb::PinnedIteratorsManager::~PinnedIteratorsManager() (2 samples, 0.03%)</title><rect x="620.1" y="803.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="623.1" y="814.0"></text>
</g>
<g>
<title>rocksdb::LookupKey::LookupKey(rocksdb::Slice const&amp;, unsigned long long) (3 samples, 0.05%)</title><rect x="620.9" y="819.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="623.9" y="830.0"></text>
</g>
<g>
<title>rocksdb::StopWatch::~StopWatch() (4 samples, 0.06%)</title><rect x="621.6" y="819.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="624.6" y="830.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (2 samples, 0.03%)</title><rect x="622.4" y="819.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="625.4" y="830.0"></text>
</g>
<g>
<title>rocksdb::JniUtil::createJavaByteArrayWithSizeCheck(JNIEnv_*, char const*, unsigned int) (6 samples, 0.10%)</title><rect x="622.9" y="867.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="625.9" y="878.0"></text>
</g>
<g>
<title>jni_NewByteArray (5 samples, 0.08%)</title><rect x="623.1" y="851.0" width="0.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="626.1" y="862.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.06%)</title><rect x="623.3" y="835.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="626.3" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.05%)</title><rect x="623.5" y="819.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="626.5" y="830.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.05%)</title><rect x="623.5" y="803.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="626.5" y="814.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="624.2" y="899.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="627.2" y="910.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.03%)</title><rect x="624.4" y="883.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="627.4" y="894.0"></text>
</g>
<g>
<title>_init (5 samples, 0.08%)</title><rect x="624.8" y="899.0" width="0.9" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="627.8" y="910.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.03%)</title><rect x="625.9" y="899.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="628.9" y="910.0"></text>
</g>
<g>
<title>operator new(unsigned int) (2 samples, 0.03%)</title><rect x="626.3" y="899.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="629.3" y="910.0"></text>
</g>
<g>
<title>rocksdb::ReadOptions::ReadOptions() (2 samples, 0.03%)</title><rect x="626.7" y="899.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="629.7" y="910.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (4 samples, 0.06%)</title><rect x="627.0" y="899.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="630.0" y="910.0"></text>
</g>
<g>
<title>std::string::_M_mutate(unsigned int, unsigned int, unsigned int) (3 samples, 0.05%)</title><rect x="627.8" y="899.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="630.8" y="910.0"></text>
</g>
<g>
<title>std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator&lt;char&gt; const&amp;) (2 samples, 0.03%)</title><rect x="628.3" y="899.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="631.3" y="910.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/dogm/ByteBufferUtils.restoreByteArray (2 samples, 0.03%)</title><rect x="628.7" y="931.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="631.7" y="942.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/dogm/ByteBufferUtils.getByteArray (2 samples, 0.03%)</title><rect x="628.7" y="915.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="631.7" y="926.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/dogm/DataWithTimestamp.fromBytes (2 samples, 0.03%)</title><rect x="629.1" y="931.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="632.1" y="942.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dogm/processors/ProcessorGet.resolveSuitableGetResponse (6 samples, 0.10%)</title><rect x="629.5" y="963.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="632.5" y="974.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dogm/processors/SimpleRequestProcessor.processEntityRemotely (1,586 samples, 25.15%)</title><rect x="630.6" y="963.0" width="296.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="633.6" y="974.0">ru/mail/polis/service/dogm/processors/Si..</text>
</g>
<g>
<title>ru/mail/polis/service/dogm/Bridges.sendRequestTo (1,586 samples, 25.15%)</title><rect x="630.6" y="947.0" width="296.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="633.6" y="958.0">ru/mail/polis/service/dogm/Bridges.sendR..</text>
</g>
<g>
<title>java/util/HashMap.get (20 samples, 0.32%)</title><rect x="630.6" y="931.0" width="3.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="633.6" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (15 samples, 0.24%)</title><rect x="630.6" y="915.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="633.6" y="926.0"></text>
</g>
<g>
<title>java/lang/String.equals (4 samples, 0.06%)</title><rect x="632.5" y="899.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="635.5" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (5 samples, 0.08%)</title><rect x="633.4" y="915.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="636.4" y="926.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (5 samples, 0.08%)</title><rect x="633.4" y="899.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="636.4" y="910.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (1,566 samples, 24.83%)</title><rect x="634.3" y="931.0" width="293.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="637.3" y="942.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (1,565 samples, 24.81%)</title><rect x="634.3" y="915.0" width="292.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="637.3" y="926.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (2 samples, 0.03%)</title><rect x="634.5" y="899.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="637.5" y="910.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.03%)</title><rect x="634.5" y="883.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="637.5" y="894.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.03%)</title><rect x="634.5" y="867.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="637.5" y="878.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (269 samples, 4.27%)</title><rect x="634.9" y="899.0" width="50.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="637.9" y="910.0">one/n..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (242 samples, 3.84%)</title><rect x="639.8" y="883.0" width="45.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="642.8" y="894.0">one/..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (242 samples, 3.84%)</title><rect x="639.8" y="867.0" width="45.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="642.8" y="878.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (213 samples, 3.38%)</title><rect x="641.3" y="851.0" width="39.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="644.3" y="862.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (213 samples, 3.38%)</title><rect x="641.3" y="835.0" width="39.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="644.3" y="846.0">sun..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (2 samples, 0.03%)</title><rect x="641.3" y="819.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="644.3" y="830.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (2 samples, 0.03%)</title><rect x="641.3" y="803.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="644.3" y="814.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (2 samples, 0.03%)</title><rect x="641.3" y="787.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="644.3" y="798.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (2 samples, 0.03%)</title><rect x="641.3" y="771.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="644.3" y="782.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (2 samples, 0.03%)</title><rect x="641.3" y="755.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="644.3" y="766.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPointer (2 samples, 0.03%)</title><rect x="641.3" y="739.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="644.3" y="750.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkOffset (2 samples, 0.03%)</title><rect x="641.3" y="723.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="644.3" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (211 samples, 3.35%)</title><rect x="641.6" y="819.0" width="39.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="644.6" y="830.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (211 samples, 3.35%)</title><rect x="641.6" y="803.0" width="39.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="644.6" y="814.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (204 samples, 3.23%)</title><rect x="642.9" y="787.0" width="38.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="645.9" y="798.0">sun..</text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (2 samples, 0.03%)</title><rect x="644.1" y="771.0" width="0.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="647.1" y="782.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (3 samples, 0.05%)</title><rect x="644.4" y="771.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="647.4" y="782.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="645.0" y="771.0" width="0.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="648.0" y="782.0"></text>
</g>
<g>
<title>__kernel_vsyscall (3 samples, 0.05%)</title><rect x="645.0" y="755.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="648.0" y="766.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (3 samples, 0.05%)</title><rect x="645.0" y="739.0" width="0.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="648.0" y="750.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (3 samples, 0.05%)</title><rect x="645.0" y="723.0" width="0.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="648.0" y="734.0"></text>
</g>
<g>
<title>__kernel_vsyscall (186 samples, 2.95%)</title><rect x="645.6" y="771.0" width="34.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="648.6" y="782.0">__..</text>
</g>
<g>
<title>entry_SYSENTER_32 (184 samples, 2.92%)</title><rect x="645.9" y="755.0" width="34.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="648.9" y="766.0">en..</text>
</g>
<g>
<title>do_fast_syscall_32 (183 samples, 2.90%)</title><rect x="646.1" y="739.0" width="34.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="649.1" y="750.0">do..</text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.05%)</title><rect x="646.1" y="723.0" width="0.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="649.1" y="734.0"></text>
</g>
<g>
<title>schedule (3 samples, 0.05%)</title><rect x="646.1" y="707.0" width="0.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="649.1" y="718.0"></text>
</g>
<g>
<title>__sched_text_start (3 samples, 0.05%)</title><rect x="646.1" y="691.0" width="0.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="649.1" y="702.0"></text>
</g>
<g>
<title>finish_task_switch (3 samples, 0.05%)</title><rect x="646.1" y="675.0" width="0.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="649.1" y="686.0"></text>
</g>
<g>
<title>sys_read (179 samples, 2.84%)</title><rect x="646.9" y="723.0" width="33.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="649.9" y="734.0">sy..</text>
</g>
<g>
<title>vfs_read (176 samples, 2.79%)</title><rect x="647.4" y="707.0" width="33.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="650.4" y="718.0">vf..</text>
</g>
<g>
<title>__vfs_read (171 samples, 2.71%)</title><rect x="647.6" y="691.0" width="32.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="650.6" y="702.0">__..</text>
</g>
<g>
<title>new_sync_read (169 samples, 2.68%)</title><rect x="647.8" y="675.0" width="31.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="650.8" y="686.0">ne..</text>
</g>
<g>
<title>sock_read_iter (169 samples, 2.68%)</title><rect x="647.8" y="659.0" width="31.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="650.8" y="670.0">so..</text>
</g>
<g>
<title>sock_recvmsg (166 samples, 2.63%)</title><rect x="648.4" y="643.0" width="31.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="651.4" y="654.0">so..</text>
</g>
<g>
<title>inet_recvmsg (161 samples, 2.55%)</title><rect x="648.9" y="627.0" width="30.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="651.9" y="638.0">in..</text>
</g>
<g>
<title>tcp_recvmsg (158 samples, 2.51%)</title><rect x="649.5" y="611.0" width="29.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="652.5" y="622.0">tc..</text>
</g>
<g>
<title>__kfree_skb (3 samples, 0.05%)</title><rect x="651.2" y="595.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="654.2" y="606.0"></text>
</g>
<g>
<title>skb_release_all (3 samples, 0.05%)</title><rect x="651.2" y="579.0" width="0.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="654.2" y="590.0"></text>
</g>
<g>
<title>_copy_to_iter (2 samples, 0.03%)</title><rect x="651.7" y="595.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="654.7" y="606.0"></text>
</g>
<g>
<title>lock_sock_nested (4 samples, 0.06%)</title><rect x="652.1" y="595.0" width="0.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="655.1" y="606.0"></text>
</g>
<g>
<title>_cond_resched (2 samples, 0.03%)</title><rect x="652.3" y="579.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="655.3" y="590.0"></text>
</g>
<g>
<title>rcu_all_qs (2 samples, 0.03%)</title><rect x="652.3" y="563.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="655.3" y="574.0"></text>
</g>
<g>
<title>release_sock (3 samples, 0.05%)</title><rect x="652.9" y="595.0" width="0.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="655.9" y="606.0"></text>
</g>
<g>
<title>sk_wait_data (127 samples, 2.01%)</title><rect x="653.4" y="595.0" width="23.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="656.4" y="606.0">s..</text>
</g>
<g>
<title>add_wait_queue (3 samples, 0.05%)</title><rect x="654.0" y="579.0" width="0.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="657.0" y="590.0"></text>
</g>
<g>
<title>__lock_text_start (3 samples, 0.05%)</title><rect x="654.0" y="563.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="657.0" y="574.0"></text>
</g>
<g>
<title>lock_sock_nested (3 samples, 0.05%)</title><rect x="654.5" y="579.0" width="0.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="657.5" y="590.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (3 samples, 0.05%)</title><rect x="654.5" y="563.0" width="0.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="657.5" y="574.0"></text>
</g>
<g>
<title>__pv_queued_spin_lock_slowpath (3 samples, 0.05%)</title><rect x="654.5" y="547.0" width="0.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="657.5" y="558.0"></text>
</g>
<g>
<title>schedule_timeout (4 samples, 0.06%)</title><rect x="655.3" y="579.0" width="0.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="658.3" y="590.0"></text>
</g>
<g>
<title>wait_woken (113 samples, 1.79%)</title><rect x="656.0" y="579.0" width="21.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="659.0" y="590.0">w..</text>
</g>
<g>
<title>schedule_timeout (111 samples, 1.76%)</title><rect x="656.4" y="563.0" width="20.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="659.4" y="574.0"></text>
</g>
<g>
<title>schedule (110 samples, 1.74%)</title><rect x="656.6" y="547.0" width="20.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="659.6" y="558.0"></text>
</g>
<g>
<title>__sched_text_start (110 samples, 1.74%)</title><rect x="656.6" y="531.0" width="20.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="659.6" y="542.0"></text>
</g>
<g>
<title>finish_task_switch (109 samples, 1.73%)</title><rect x="656.8" y="515.0" width="20.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="659.8" y="526.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (3 samples, 0.05%)</title><rect x="677.2" y="595.0" width="0.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="680.2" y="606.0"></text>
</g>
<g>
<title>_copy_to_iter (3 samples, 0.05%)</title><rect x="677.2" y="579.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="680.2" y="590.0"></text>
</g>
<g>
<title>copyout (3 samples, 0.05%)</title><rect x="677.2" y="563.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="680.2" y="574.0"></text>
</g>
<g>
<title>__copy_user_ll (2 samples, 0.03%)</title><rect x="677.4" y="547.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="680.4" y="558.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (3 samples, 0.05%)</title><rect x="677.7" y="595.0" width="0.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="680.7" y="606.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (2 samples, 0.03%)</title><rect x="678.3" y="595.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="681.3" y="606.0"></text>
</g>
<g>
<title>rw_verify_area (3 samples, 0.05%)</title><rect x="679.8" y="691.0" width="0.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="682.8" y="702.0"></text>
</g>
<g>
<title>security_file_permission (3 samples, 0.05%)</title><rect x="679.8" y="675.0" width="0.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="682.8" y="686.0"></text>
</g>
<g>
<title>apparmor_file_permission (2 samples, 0.03%)</title><rect x="680.0" y="659.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="683.0" y="670.0"></text>
</g>
<g>
<title>read (4 samples, 0.06%)</title><rect x="680.4" y="771.0" width="0.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="683.4" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginRead (16 samples, 0.25%)</title><rect x="681.1" y="851.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="684.1" y="862.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (5 samples, 0.08%)</title><rect x="682.8" y="835.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="685.8" y="846.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (5 samples, 0.08%)</title><rect x="682.8" y="819.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="685.8" y="830.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (5 samples, 0.08%)</title><rect x="682.8" y="803.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="685.8" y="814.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (5 samples, 0.08%)</title><rect x="682.8" y="787.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="685.8" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (2 samples, 0.03%)</title><rect x="683.7" y="835.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="686.7" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.endRead (5 samples, 0.08%)</title><rect x="684.1" y="851.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="687.1" y="862.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (3 samples, 0.05%)</title><rect x="684.5" y="835.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="687.5" y="846.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (38 samples, 0.60%)</title><rect x="685.2" y="899.0" width="7.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="688.2" y="910.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (23 samples, 0.36%)</title><rect x="687.3" y="883.0" width="4.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="690.3" y="894.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (8 samples, 0.13%)</title><rect x="690.1" y="867.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="693.1" y="878.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (8 samples, 0.13%)</title><rect x="690.1" y="851.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="693.1" y="862.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (2 samples, 0.03%)</title><rect x="691.8" y="883.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="694.8" y="894.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.03%)</title><rect x="691.8" y="867.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="694.8" y="878.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.03%)</title><rect x="691.8" y="851.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="694.8" y="862.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (33 samples, 0.52%)</title><rect x="692.3" y="899.0" width="6.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="695.3" y="910.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (15 samples, 0.24%)</title><rect x="695.3" y="883.0" width="2.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="698.3" y="894.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (15 samples, 0.24%)</title><rect x="695.3" y="867.0" width="2.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="698.3" y="878.0"></text>
</g>
<g>
<title>java/lang/String.charAt (15 samples, 0.24%)</title><rect x="695.3" y="851.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="698.3" y="862.0"></text>
</g>
<g>
<title>resume_userspace (2 samples, 0.03%)</title><rect x="698.1" y="883.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="701.1" y="894.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="698.1" y="867.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="701.1" y="878.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="698.1" y="851.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="701.1" y="862.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (2 samples, 0.03%)</title><rect x="698.5" y="899.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="701.5" y="910.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.03%)</title><rect x="698.5" y="883.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="701.5" y="894.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.03%)</title><rect x="698.5" y="867.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="701.5" y="878.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.setTimeout (2 samples, 0.03%)</title><rect x="698.9" y="899.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="701.9" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.socket (2 samples, 0.03%)</title><rect x="698.9" y="883.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="701.9" y="894.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.writeFully (1,214 samples, 19.25%)</title><rect x="699.3" y="899.0" width="227.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="702.3" y="910.0">one/nio/net/JavaSocket.writeFu..</text>
</g>
<g>
<title>java/nio/channels/Channels$1.write (938 samples, 14.87%)</title><rect x="699.4" y="883.0" width="175.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="702.4" y="894.0">java/nio/channels/Chann..</text>
</g>
<g>
<title>java/nio/channels/Channels.writeFully (934 samples, 14.81%)</title><rect x="700.2" y="867.0" width="174.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="703.2" y="878.0">java/nio/channels/Chan..</text>
</g>
<g>
<title>java/nio/channels/Channels.writeFullyImpl (932 samples, 14.78%)</title><rect x="700.6" y="851.0" width="174.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="703.6" y="862.0">java/nio/channels/Chan..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (927 samples, 14.70%)</title><rect x="701.5" y="835.0" width="173.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="704.5" y="846.0">sun/nio/ch/SocketChann..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (895 samples, 14.19%)</title><rect x="701.5" y="819.0" width="167.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="704.5" y="830.0">sun/nio/ch/IOUtil.write</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (895 samples, 14.19%)</title><rect x="701.5" y="803.0" width="167.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="704.5" y="814.0">sun/nio/ch/IOUtil.write</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (895 samples, 14.19%)</title><rect x="701.5" y="787.0" width="167.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="704.5" y="798.0">sun/nio/ch/IOUtil.wri..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (2 samples, 0.03%)</title><rect x="701.5" y="771.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="704.5" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (893 samples, 14.16%)</title><rect x="701.9" y="771.0" width="167.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="704.9" y="782.0">sun/nio/ch/SocketDisp..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (884 samples, 14.02%)</title><rect x="703.6" y="755.0" width="165.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="706.6" y="766.0">sun/nio/ch/FileDispat..</text>
</g>
<g>
<title>[unknown] (8 samples, 0.13%)</title><rect x="704.5" y="739.0" width="1.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="707.5" y="750.0"></text>
</g>
<g>
<title>__kernel_vsyscall (8 samples, 0.13%)</title><rect x="704.5" y="723.0" width="1.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="707.5" y="734.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (8 samples, 0.13%)</title><rect x="704.5" y="707.0" width="1.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="707.5" y="718.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (7 samples, 0.11%)</title><rect x="704.7" y="691.0" width="1.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="707.7" y="702.0"></text>
</g>
<g>
<title>__kernel_vsyscall (868 samples, 13.76%)</title><rect x="706.0" y="739.0" width="162.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="709.0" y="750.0">__kernel_vsyscall</text>
</g>
<g>
<title>entry_SYSENTER_32 (867 samples, 13.75%)</title><rect x="706.2" y="723.0" width="162.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="709.2" y="734.0">entry_SYSENTER_32</text>
</g>
<g>
<title>do_fast_syscall_32 (866 samples, 13.73%)</title><rect x="706.2" y="707.0" width="162.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="709.2" y="718.0">do_fast_syscall_32</text>
</g>
<g>
<title>exit_to_usermode_loop (81 samples, 1.28%)</title><rect x="706.2" y="691.0" width="15.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="709.2" y="702.0"></text>
</g>
<g>
<title>schedule (79 samples, 1.25%)</title><rect x="706.5" y="675.0" width="14.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="709.5" y="686.0"></text>
</g>
<g>
<title>__sched_text_start (79 samples, 1.25%)</title><rect x="706.5" y="659.0" width="14.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="709.5" y="670.0"></text>
</g>
<g>
<title>finish_task_switch (76 samples, 1.21%)</title><rect x="707.1" y="643.0" width="14.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="710.1" y="654.0"></text>
</g>
<g>
<title>sys_write (784 samples, 12.43%)</title><rect x="721.5" y="691.0" width="146.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="724.5" y="702.0">sys_write</text>
</g>
<g>
<title>__fdget_pos (6 samples, 0.10%)</title><rect x="721.7" y="675.0" width="1.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="724.7" y="686.0"></text>
</g>
<g>
<title>__fget_light (6 samples, 0.10%)</title><rect x="721.7" y="659.0" width="1.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="724.7" y="670.0"></text>
</g>
<g>
<title>__fget (4 samples, 0.06%)</title><rect x="722.1" y="643.0" width="0.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="725.1" y="654.0"></text>
</g>
<g>
<title>vfs_write (776 samples, 12.30%)</title><rect x="723.0" y="675.0" width="145.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="726.0" y="686.0">vfs_write</text>
</g>
<g>
<title>__vfs_write (755 samples, 11.97%)</title><rect x="724.5" y="659.0" width="141.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="727.5" y="670.0">__vfs_write</text>
</g>
<g>
<title>new_sync_write (754 samples, 11.95%)</title><rect x="724.5" y="643.0" width="141.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="727.5" y="654.0">new_sync_write</text>
</g>
<g>
<title>sock_write_iter (753 samples, 11.94%)</title><rect x="724.7" y="627.0" width="140.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="727.7" y="638.0">sock_write_iter</text>
</g>
<g>
<title>sock_sendmsg (751 samples, 11.91%)</title><rect x="725.1" y="611.0" width="140.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="728.1" y="622.0">sock_sendmsg</text>
</g>
<g>
<title>inet_sendmsg (744 samples, 11.80%)</title><rect x="725.3" y="595.0" width="139.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="728.3" y="606.0">inet_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg (743 samples, 11.78%)</title><rect x="725.4" y="579.0" width="139.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="728.4" y="590.0">tcp_sendmsg</text>
</g>
<g>
<title>lock_sock_nested (3 samples, 0.05%)</title><rect x="725.8" y="563.0" width="0.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="728.8" y="574.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (2 samples, 0.03%)</title><rect x="725.8" y="547.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="728.8" y="558.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (4 samples, 0.06%)</title><rect x="726.6" y="563.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="729.6" y="574.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (732 samples, 11.61%)</title><rect x="727.3" y="563.0" width="137.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="730.3" y="574.0">tcp_sendmsg_locked</text>
</g>
<g>
<title>__check_object_size (4 samples, 0.06%)</title><rect x="729.7" y="547.0" width="0.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="732.7" y="558.0"></text>
</g>
<g>
<title>__check_heap_object (2 samples, 0.03%)</title><rect x="729.7" y="531.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="732.7" y="542.0"></text>
</g>
<g>
<title>page_address (2 samples, 0.03%)</title><rect x="730.1" y="531.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="733.1" y="542.0"></text>
</g>
<g>
<title>__virt_addr_valid (2 samples, 0.03%)</title><rect x="730.5" y="547.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="733.5" y="558.0"></text>
</g>
<g>
<title>_copy_from_iter_full (7 samples, 0.11%)</title><rect x="730.9" y="547.0" width="1.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="733.9" y="558.0"></text>
</g>
<g>
<title>copyin (3 samples, 0.05%)</title><rect x="731.2" y="531.0" width="0.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="734.2" y="542.0"></text>
</g>
<g>
<title>__copy_user_ll (3 samples, 0.05%)</title><rect x="731.2" y="515.0" width="0.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="734.2" y="526.0"></text>
</g>
<g>
<title>iov_iter_advance (2 samples, 0.03%)</title><rect x="731.8" y="531.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="734.8" y="542.0"></text>
</g>
<g>
<title>iov_iter_advance (3 samples, 0.05%)</title><rect x="732.2" y="547.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="735.2" y="558.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (25 samples, 0.40%)</title><rect x="732.9" y="547.0" width="4.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="735.9" y="558.0"></text>
</g>
<g>
<title>__alloc_skb (21 samples, 0.33%)</title><rect x="733.1" y="531.0" width="3.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="736.1" y="542.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.45 (10 samples, 0.16%)</title><rect x="733.9" y="515.0" width="1.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="736.9" y="526.0"></text>
</g>
<g>
<title>__kmalloc_track_caller (9 samples, 0.14%)</title><rect x="733.9" y="499.0" width="1.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="736.9" y="510.0"></text>
</g>
<g>
<title>__slab_alloc.constprop.83 (2 samples, 0.03%)</title><rect x="735.2" y="483.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="738.2" y="494.0"></text>
</g>
<g>
<title>kmem_cache_alloc (6 samples, 0.10%)</title><rect x="735.9" y="515.0" width="1.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="738.9" y="526.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.45 (2 samples, 0.03%)</title><rect x="737.0" y="531.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="740.0" y="542.0"></text>
</g>
<g>
<title>tcp_push (662 samples, 10.50%)</title><rect x="738.0" y="547.0" width="123.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="741.0" y="558.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (658 samples, 10.43%)</title><rect x="738.5" y="531.0" width="123.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="741.5" y="542.0">__tcp_push_pend..</text>
</g>
<g>
<title>sched_clock_cpu (2 samples, 0.03%)</title><rect x="738.7" y="515.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="741.7" y="526.0"></text>
</g>
<g>
<title>tcp_small_queue_check.isra.28 (2 samples, 0.03%)</title><rect x="739.3" y="515.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="742.3" y="526.0"></text>
</g>
<g>
<title>tcp_write_xmit (652 samples, 10.34%)</title><rect x="739.7" y="515.0" width="122.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="742.7" y="526.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_transmit_skb (632 samples, 10.02%)</title><rect x="740.2" y="499.0" width="118.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="743.2" y="510.0">__tcp_transmit..</text>
</g>
<g>
<title>__sk_dst_check (2 samples, 0.03%)</title><rect x="741.7" y="483.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="744.7" y="494.0"></text>
</g>
<g>
<title>ip_queue_xmit (614 samples, 9.74%)</title><rect x="742.1" y="483.0" width="114.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="745.1" y="494.0">ip_queue_xmit</text>
</g>
<g>
<title>ip_local_out (603 samples, 9.56%)</title><rect x="743.6" y="467.0" width="112.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="746.6" y="478.0">ip_local_out</text>
</g>
<g>
<title>__ip_local_out (4 samples, 0.06%)</title><rect x="743.8" y="451.0" width="0.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="746.8" y="462.0"></text>
</g>
<g>
<title>ip_output (598 samples, 9.48%)</title><rect x="744.5" y="451.0" width="111.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="747.5" y="462.0">ip_output</text>
</g>
<g>
<title>ip_finish_output (595 samples, 9.43%)</title><rect x="745.1" y="435.0" width="111.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="748.1" y="446.0">ip_finish_out..</text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (4 samples, 0.06%)</title><rect x="745.1" y="419.0" width="0.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="748.1" y="430.0"></text>
</g>
<g>
<title>ip_finish_output2 (591 samples, 9.37%)</title><rect x="745.8" y="419.0" width="110.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="748.8" y="430.0">ip_finish_out..</text>
</g>
<g>
<title>__local_bh_enable_ip (556 samples, 8.82%)</title><rect x="746.8" y="403.0" width="104.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="749.8" y="414.0">__local_bh_e..</text>
</g>
<g>
<title>do_softirq.part.15 (556 samples, 8.82%)</title><rect x="746.8" y="387.0" width="104.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="749.8" y="398.0">do_softirq.p..</text>
</g>
<g>
<title>do_softirq_own_stack (556 samples, 8.82%)</title><rect x="746.8" y="371.0" width="104.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="749.8" y="382.0">do_softirq_o..</text>
</g>
<g>
<title>call_on_stack (556 samples, 8.82%)</title><rect x="746.8" y="355.0" width="104.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="749.8" y="366.0">call_on_stack</text>
</g>
<g>
<title>__do_softirq (555 samples, 8.80%)</title><rect x="746.8" y="339.0" width="103.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="749.8" y="350.0">__do_softirq</text>
</g>
<g>
<title>net_rx_action (550 samples, 8.72%)</title><rect x="747.5" y="323.0" width="102.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="750.5" y="334.0">net_rx_action</text>
</g>
<g>
<title>process_backlog (548 samples, 8.69%)</title><rect x="747.9" y="307.0" width="102.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="750.9" y="318.0">process_back..</text>
</g>
<g>
<title>__netif_receive_skb (544 samples, 8.63%)</title><rect x="748.6" y="291.0" width="101.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="751.6" y="302.0">__netif_rece..</text>
</g>
<g>
<title>__netif_receive_skb_core (542 samples, 8.59%)</title><rect x="748.6" y="275.0" width="101.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="751.6" y="286.0">__netif_rece..</text>
</g>
<g>
<title>ip_rcv (534 samples, 8.47%)</title><rect x="750.1" y="259.0" width="100.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="753.1" y="270.0">ip_rcv</text>
</g>
<g>
<title>ip_rcv_finish (524 samples, 8.31%)</title><rect x="752.0" y="243.0" width="98.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="755.0" y="254.0">ip_rcv_finish</text>
</g>
<g>
<title>ip_local_deliver (517 samples, 8.20%)</title><rect x="752.9" y="227.0" width="96.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="755.9" y="238.0">ip_local_de..</text>
</g>
<g>
<title>ip_local_deliver_finish (514 samples, 8.15%)</title><rect x="752.9" y="211.0" width="96.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="755.9" y="222.0">ip_local_de..</text>
</g>
<g>
<title>__inet_lookup_established (2 samples, 0.03%)</title><rect x="753.1" y="195.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="756.1" y="206.0"></text>
</g>
<g>
<title>raw_local_deliver (2 samples, 0.03%)</title><rect x="753.5" y="195.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="756.5" y="206.0"></text>
</g>
<g>
<title>tcp_v4_rcv (507 samples, 8.04%)</title><rect x="754.3" y="195.0" width="94.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="757.3" y="206.0">tcp_v4_rcv</text>
</g>
<g>
<title>__inet_lookup_established (4 samples, 0.06%)</title><rect x="756.1" y="179.0" width="0.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="759.1" y="190.0"></text>
</g>
<g>
<title>inet_ehashfn (2 samples, 0.03%)</title><rect x="756.5" y="163.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="759.5" y="174.0"></text>
</g>
<g>
<title>inet_ehashfn (2 samples, 0.03%)</title><rect x="757.1" y="179.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="760.1" y="190.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (3 samples, 0.05%)</title><rect x="757.6" y="179.0" width="0.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="760.6" y="190.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (2 samples, 0.03%)</title><rect x="757.6" y="163.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="760.6" y="174.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (483 samples, 7.66%)</title><rect x="758.4" y="179.0" width="90.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="761.4" y="190.0">tcp_v4_do_..</text>
</g>
<g>
<title>tcp_rcv_established (481 samples, 7.63%)</title><rect x="758.7" y="163.0" width="90.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="761.7" y="174.0">tcp_rcv_es..</text>
</g>
<g>
<title>__tcp_ack_snd_check (6 samples, 0.10%)</title><rect x="759.1" y="147.0" width="1.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="762.1" y="158.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (5 samples, 0.08%)</title><rect x="759.3" y="131.0" width="0.9" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="762.3" y="142.0"></text>
</g>
<g>
<title>sk_reset_timer (5 samples, 0.08%)</title><rect x="759.3" y="115.0" width="0.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="762.3" y="126.0"></text>
</g>
<g>
<title>mod_timer (4 samples, 0.06%)</title><rect x="759.5" y="99.0" width="0.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="762.5" y="110.0"></text>
</g>
<g>
<title>__lock_text_start (3 samples, 0.05%)</title><rect x="759.7" y="83.0" width="0.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="762.7" y="94.0"></text>
</g>
<g>
<title>bictcp_cong_avoid (2 samples, 0.03%)</title><rect x="760.2" y="147.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="763.2" y="158.0"></text>
</g>
<g>
<title>sched_clock_cpu (2 samples, 0.03%)</title><rect x="761.0" y="147.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="764.0" y="158.0"></text>
</g>
<g>
<title>sched_clock (2 samples, 0.03%)</title><rect x="761.0" y="131.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="764.0" y="142.0"></text>
</g>
<g>
<title>kvm_sched_clock_read (2 samples, 0.03%)</title><rect x="761.0" y="115.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="764.0" y="126.0"></text>
</g>
<g>
<title>pvclock_clocksource_read (2 samples, 0.03%)</title><rect x="761.0" y="99.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="764.0" y="110.0"></text>
</g>
<g>
<title>tcp_ack (53 samples, 0.84%)</title><rect x="761.6" y="147.0" width="9.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="764.6" y="158.0"></text>
</g>
<g>
<title>bictcp_acked (3 samples, 0.05%)</title><rect x="764.4" y="131.0" width="0.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="767.4" y="142.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (32 samples, 0.51%)</title><rect x="764.9" y="131.0" width="6.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="767.9" y="142.0"></text>
</g>
<g>
<title>__kfree_skb (14 samples, 0.22%)</title><rect x="766.4" y="115.0" width="2.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="769.4" y="126.0"></text>
</g>
<g>
<title>kfree_skbmem (4 samples, 0.06%)</title><rect x="766.4" y="99.0" width="0.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="769.4" y="110.0"></text>
</g>
<g>
<title>kmem_cache_free (4 samples, 0.06%)</title><rect x="766.4" y="83.0" width="0.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="769.4" y="94.0"></text>
</g>
<g>
<title>__slab_free (2 samples, 0.03%)</title><rect x="766.8" y="67.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="769.8" y="78.0"></text>
</g>
<g>
<title>skb_release_all (10 samples, 0.16%)</title><rect x="767.2" y="99.0" width="1.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="770.2" y="110.0"></text>
</g>
<g>
<title>skb_release_data (9 samples, 0.14%)</title><rect x="767.4" y="83.0" width="1.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="770.4" y="94.0"></text>
</g>
<g>
<title>skb_free_head (5 samples, 0.08%)</title><rect x="768.1" y="67.0" width="0.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="771.1" y="78.0"></text>
</g>
<g>
<title>kfree (5 samples, 0.08%)</title><rect x="768.1" y="51.0" width="0.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="771.1" y="62.0"></text>
</g>
<g>
<title>__slab_free (3 samples, 0.05%)</title><rect x="768.5" y="35.0" width="0.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="771.5" y="46.0"></text>
</g>
<g>
<title>__usecs_to_jiffies (2 samples, 0.03%)</title><rect x="769.0" y="115.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="772.0" y="126.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.41 (4 samples, 0.06%)</title><rect x="769.8" y="115.0" width="0.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="772.8" y="126.0"></text>
</g>
<g>
<title>tcp_rate_skb_delivered (2 samples, 0.03%)</title><rect x="770.5" y="115.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="773.5" y="126.0"></text>
</g>
<g>
<title>tcp_check_space (3 samples, 0.05%)</title><rect x="771.5" y="147.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="774.5" y="158.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (2 samples, 0.03%)</title><rect x="772.0" y="147.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="775.0" y="158.0"></text>
</g>
<g>
<title>tcp_data_queue (406 samples, 6.44%)</title><rect x="772.4" y="147.0" width="76.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="775.4" y="158.0">tcp_data..</text>
</g>
<g>
<title>sock_def_readable (397 samples, 6.29%)</title><rect x="772.8" y="131.0" width="74.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="775.8" y="142.0">sock_def..</text>
</g>
<g>
<title>__wake_up_sync_key (390 samples, 6.18%)</title><rect x="774.1" y="115.0" width="73.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="777.1" y="126.0">__wake_u..</text>
</g>
<g>
<title>__wake_up_common_lock (389 samples, 6.17%)</title><rect x="774.1" y="99.0" width="72.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="777.1" y="110.0">__wake_u..</text>
</g>
<g>
<title>__lock_text_start (389 samples, 6.17%)</title><rect x="774.1" y="83.0" width="72.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="777.1" y="94.0">__lock_t..</text>
</g>
<g>
<title>tcp_event_data_recv (5 samples, 0.08%)</title><rect x="847.1" y="131.0" width="0.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="850.1" y="142.0"></text>
</g>
<g>
<title>tcp_queue_rcv (2 samples, 0.03%)</title><rect x="848.0" y="131.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="851.0" y="142.0"></text>
</g>
<g>
<title>tcp_rack_update_reo_wnd (2 samples, 0.03%)</title><rect x="848.4" y="147.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="851.4" y="158.0"></text>
</g>
<g>
<title>tcp_v4_rcv (2 samples, 0.03%)</title><rect x="849.3" y="211.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="852.3" y="222.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (2 samples, 0.03%)</title><rect x="849.7" y="227.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="852.7" y="238.0"></text>
</g>
<g>
<title>dev_queue_xmit (30 samples, 0.48%)</title><rect x="850.8" y="403.0" width="5.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="853.8" y="414.0"></text>
</g>
<g>
<title>__dev_queue_xmit (29 samples, 0.46%)</title><rect x="850.8" y="387.0" width="5.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="853.8" y="398.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (14 samples, 0.22%)</title><rect x="852.1" y="371.0" width="2.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="855.1" y="382.0"></text>
</g>
<g>
<title>loopback_xmit (10 samples, 0.16%)</title><rect x="852.7" y="355.0" width="1.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="855.7" y="366.0"></text>
</g>
<g>
<title>netif_rx (6 samples, 0.10%)</title><rect x="853.2" y="339.0" width="1.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="856.2" y="350.0"></text>
</g>
<g>
<title>netif_rx_internal (6 samples, 0.10%)</title><rect x="853.2" y="323.0" width="1.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="856.2" y="334.0"></text>
</g>
<g>
<title>enqueue_to_backlog (6 samples, 0.10%)</title><rect x="853.2" y="307.0" width="1.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="856.2" y="318.0"></text>
</g>
<g>
<title>validate_xmit_skb (7 samples, 0.11%)</title><rect x="854.7" y="371.0" width="1.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="857.7" y="382.0"></text>
</g>
<g>
<title>netif_skb_features (4 samples, 0.06%)</title><rect x="854.9" y="355.0" width="0.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="857.9" y="366.0"></text>
</g>
<g>
<title>ipv4_dst_check (2 samples, 0.03%)</title><rect x="856.6" y="467.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="859.6" y="478.0"></text>
</g>
<g>
<title>skb_clone (4 samples, 0.06%)</title><rect x="857.0" y="483.0" width="0.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="860.0" y="494.0"></text>
</g>
<g>
<title>__skb_clone (4 samples, 0.06%)</title><rect x="857.0" y="467.0" width="0.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="860.0" y="478.0"></text>
</g>
<g>
<title>__copy_skb_header (2 samples, 0.03%)</title><rect x="857.3" y="451.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="860.3" y="462.0"></text>
</g>
<g>
<title>skb_push (2 samples, 0.03%)</title><rect x="857.7" y="483.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="860.7" y="494.0"></text>
</g>
<g>
<title>tcp_options_write (2 samples, 0.03%)</title><rect x="858.1" y="483.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="861.1" y="494.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (2 samples, 0.03%)</title><rect x="858.5" y="499.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="861.5" y="510.0"></text>
</g>
<g>
<title>sched_clock_cpu (4 samples, 0.06%)</title><rect x="859.2" y="499.0" width="0.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="862.2" y="510.0"></text>
</g>
<g>
<title>sched_clock (4 samples, 0.06%)</title><rect x="859.2" y="483.0" width="0.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="862.2" y="494.0"></text>
</g>
<g>
<title>kvm_sched_clock_read (4 samples, 0.06%)</title><rect x="859.2" y="467.0" width="0.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="862.2" y="478.0"></text>
</g>
<g>
<title>pvclock_clocksource_read (3 samples, 0.05%)</title><rect x="859.4" y="451.0" width="0.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="862.4" y="462.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (2 samples, 0.03%)</title><rect x="860.3" y="499.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="863.3" y="510.0"></text>
</g>
<g>
<title>tcp_options_write (2 samples, 0.03%)</title><rect x="860.7" y="499.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="863.7" y="510.0"></text>
</g>
<g>
<title>tcp_send_mss (13 samples, 0.21%)</title><rect x="861.8" y="547.0" width="2.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="864.8" y="558.0"></text>
</g>
<g>
<title>ipv4_mtu (3 samples, 0.05%)</title><rect x="861.8" y="531.0" width="0.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="864.8" y="542.0"></text>
</g>
<g>
<title>tcp_current_mss (10 samples, 0.16%)</title><rect x="862.4" y="531.0" width="1.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="865.4" y="542.0"></text>
</g>
<g>
<title>tcp_established_options (3 samples, 0.05%)</title><rect x="863.7" y="515.0" width="0.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="866.7" y="526.0"></text>
</g>
<g>
<title>tcp_md5_do_lookup (2 samples, 0.03%)</title><rect x="863.9" y="499.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="866.9" y="510.0"></text>
</g>
<g>
<title>security_socket_sendmsg (4 samples, 0.06%)</title><rect x="864.5" y="595.0" width="0.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="867.5" y="606.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (2 samples, 0.03%)</title><rect x="864.8" y="579.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="867.8" y="590.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (2 samples, 0.03%)</title><rect x="864.8" y="563.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="867.8" y="574.0"></text>
</g>
<g>
<title>aa_sk_perm (2 samples, 0.03%)</title><rect x="864.8" y="547.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="867.8" y="558.0"></text>
</g>
<g>
<title>aa_label_sk_perm (2 samples, 0.03%)</title><rect x="864.8" y="531.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="867.8" y="542.0"></text>
</g>
<g>
<title>tcp_sendmsg (2 samples, 0.03%)</title><rect x="865.2" y="595.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="868.2" y="606.0"></text>
</g>
<g>
<title>fsnotify (3 samples, 0.05%)</title><rect x="865.8" y="659.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="868.8" y="670.0"></text>
</g>
<g>
<title>rw_verify_area (9 samples, 0.14%)</title><rect x="866.3" y="659.0" width="1.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="869.3" y="670.0"></text>
</g>
<g>
<title>security_file_permission (6 samples, 0.10%)</title><rect x="866.9" y="643.0" width="1.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="869.9" y="654.0"></text>
</g>
<g>
<title>apparmor_file_permission (4 samples, 0.06%)</title><rect x="867.3" y="627.0" width="0.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="870.3" y="638.0"></text>
</g>
<g>
<title>common_file_perm (4 samples, 0.06%)</title><rect x="867.3" y="611.0" width="0.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="870.3" y="622.0"></text>
</g>
<g>
<title>aa_file_perm (2 samples, 0.03%)</title><rect x="867.6" y="595.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="870.6" y="606.0"></text>
</g>
<g>
<title>resume_userspace (2 samples, 0.03%)</title><rect x="868.6" y="739.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="871.6" y="750.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="868.6" y="723.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="871.6" y="734.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="868.6" y="707.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="871.6" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginWrite (23 samples, 0.36%)</title><rect x="868.9" y="819.0" width="4.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="871.9" y="830.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (4 samples, 0.06%)</title><rect x="869.7" y="803.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="872.7" y="814.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (3 samples, 0.05%)</title><rect x="869.9" y="787.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="872.9" y="798.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (3 samples, 0.05%)</title><rect x="869.9" y="771.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="872.9" y="782.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (3 samples, 0.05%)</title><rect x="869.9" y="755.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="872.9" y="766.0"></text>
</g>
<g>
<title>resume_userspace (3 samples, 0.05%)</title><rect x="870.4" y="803.0" width="0.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="873.4" y="814.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.05%)</title><rect x="870.4" y="787.0" width="0.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="873.4" y="798.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.05%)</title><rect x="870.4" y="771.0" width="0.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="873.4" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (12 samples, 0.19%)</title><rect x="871.0" y="803.0" width="2.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="874.0" y="814.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_NativeThread_current (4 samples, 0.06%)</title><rect x="871.0" y="787.0" width="0.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="874.0" y="798.0"></text>
</g>
<g>
<title>resume_userspace (2 samples, 0.03%)</title><rect x="871.4" y="771.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="874.4" y="782.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="871.4" y="755.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="874.4" y="766.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="871.4" y="739.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="874.4" y="750.0"></text>
</g>
<g>
<title>pthread_self (7 samples, 0.11%)</title><rect x="871.8" y="787.0" width="1.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="874.8" y="798.0"></text>
</g>
<g>
<title>resume_userspace (5 samples, 0.08%)</title><rect x="872.1" y="771.0" width="1.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="875.1" y="782.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (5 samples, 0.08%)</title><rect x="872.1" y="755.0" width="1.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="875.1" y="766.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (5 samples, 0.08%)</title><rect x="872.1" y="739.0" width="1.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="875.1" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.endWrite (9 samples, 0.14%)</title><rect x="873.3" y="819.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="876.3" y="830.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (9 samples, 0.14%)</title><rect x="873.3" y="803.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="876.3" y="814.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (3 samples, 0.05%)</title><rect x="874.4" y="787.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="877.4" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor.getOutputStream (273 samples, 4.33%)</title><rect x="874.9" y="883.0" width="51.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="877.9" y="894.0">sun/n..</text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (259 samples, 4.11%)</title><rect x="877.0" y="867.0" width="48.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="880.0" y="878.0">java..</text>
</g>
<g>
<title>I2C/C2I adapters (4 samples, 0.06%)</title><rect x="877.2" y="851.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="880.2" y="862.0"></text>
</g>
<g>
<title>JVM_DoPrivileged (8 samples, 0.13%)</title><rect x="877.9" y="851.0" width="1.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="880.9" y="862.0"></text>
</g>
<g>
<title>Java_java_security_AccessController_doPrivileged__Ljava_security_PrivilegedExceptionAction_2 (229 samples, 3.63%)</title><rect x="879.4" y="851.0" width="42.9" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="882.4" y="862.0">Java..</text>
</g>
<g>
<title>GrowableArray&lt;Metadata*&gt;::append(Metadata* const&amp;) (2 samples, 0.03%)</title><rect x="880.4" y="835.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="883.4" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (2 samples, 0.03%)</title><rect x="881.1" y="835.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="884.1" y="846.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (3 samples, 0.05%)</title><rect x="881.5" y="835.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="884.5" y="846.0"></text>
</g>
<g>
<title>JVM_DoPrivileged (189 samples, 3.00%)</title><rect x="882.0" y="835.0" width="35.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="885.0" y="846.0">JVM..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;CardTableBarrierSet::AccessBarrier&lt;5292116ull, CardTableBarrierSet&gt;, (AccessInternal::BarrierType)0, 5292116ull&gt;::oop_access_barrier(void*, oopDesc*) (5 samples, 0.08%)</title><rect x="883.9" y="819.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="886.9" y="830.0"></text>
</g>
<g>
<title>resume_userspace (2 samples, 0.03%)</title><rect x="884.5" y="803.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="887.5" y="814.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="884.5" y="787.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="887.5" y="798.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="884.5" y="771.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="887.5" y="782.0"></text>
</g>
<g>
<title>GrowableArray&lt;Metadata*&gt;::append(Metadata* const&amp;) (5 samples, 0.08%)</title><rect x="884.9" y="819.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="887.9" y="830.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (2 samples, 0.03%)</title><rect x="885.8" y="819.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="888.8" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (12 samples, 0.19%)</title><rect x="886.2" y="819.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="889.2" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) [clone .constprop.224] (9 samples, 0.14%)</title><rect x="886.5" y="803.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="889.5" y="814.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (2 samples, 0.03%)</title><rect x="888.4" y="819.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="891.4" y="830.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (42 samples, 0.67%)</title><rect x="888.8" y="819.0" width="7.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="891.8" y="830.0"></text>
</g>
<g>
<title>.L409 (16 samples, 0.25%)</title><rect x="888.8" y="803.0" width="3.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="891.8" y="814.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (8 samples, 0.13%)</title><rect x="889.5" y="787.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="892.5" y="798.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (5 samples, 0.08%)</title><rect x="889.9" y="771.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="892.9" y="782.0"></text>
</g>
<g>
<title>resume_userspace (2 samples, 0.03%)</title><rect x="890.5" y="755.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="893.5" y="766.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="890.5" y="739.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="893.5" y="750.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="890.5" y="723.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="893.5" y="734.0"></text>
</g>
<g>
<title>JavaThread::can_call_java() const (2 samples, 0.03%)</title><rect x="891.0" y="787.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="894.0" y="798.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (2 samples, 0.03%)</title><rect x="891.4" y="787.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="894.4" y="798.0"></text>
</g>
<g>
<title>JNIHandleBlock::release_block(JNIHandleBlock*, Thread*) (3 samples, 0.05%)</title><rect x="892.0" y="803.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="895.0" y="814.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (14 samples, 0.22%)</title><rect x="892.7" y="803.0" width="2.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="895.7" y="814.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (3 samples, 0.05%)</title><rect x="893.5" y="787.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="896.5" y="798.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (4 samples, 0.06%)</title><rect x="894.2" y="787.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="897.2" y="798.0"></text>
</g>
<g>
<title>resume_userspace (2 samples, 0.03%)</title><rect x="895.0" y="787.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="898.0" y="798.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="895.0" y="771.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="898.0" y="782.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="895.0" y="755.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="898.0" y="766.0"></text>
</g>
<g>
<title>Method::is_empty_method() const (3 samples, 0.05%)</title><rect x="895.3" y="803.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="898.3" y="814.0"></text>
</g>
<g>
<title>os::current_stack_pointer() (3 samples, 0.05%)</title><rect x="895.9" y="803.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="898.9" y="814.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (2 samples, 0.03%)</title><rect x="896.6" y="819.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="899.6" y="830.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (4 samples, 0.06%)</title><rect x="897.0" y="819.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="900.0" y="830.0"></text>
</g>
<g>
<title>resume_userspace (2 samples, 0.03%)</title><rect x="897.4" y="803.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="900.4" y="814.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="897.4" y="787.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="900.4" y="798.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="897.4" y="771.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="900.4" y="782.0"></text>
</g>
<g>
<title>Method::is_ignored_by_security_stack_walk() const (4 samples, 0.06%)</title><rect x="897.8" y="819.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="900.8" y="830.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (7 samples, 0.11%)</title><rect x="898.7" y="819.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="901.7" y="830.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.186] (2 samples, 0.03%)</title><rect x="900.0" y="819.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="903.0" y="830.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.ax (2 samples, 0.03%)</title><rect x="900.4" y="819.0" width="0.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="903.4" y="830.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (2 samples, 0.03%)</title><rect x="900.8" y="819.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="903.8" y="830.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (2 samples, 0.03%)</title><rect x="901.5" y="819.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="904.5" y="830.0"></text>
</g>
<g>
<title>vframeStream::vframeStream(JavaThread*, bool) (36 samples, 0.57%)</title><rect x="902.2" y="819.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="905.2" y="830.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (3 samples, 0.05%)</title><rect x="903.0" y="803.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="906.0" y="814.0"></text>
</g>
<g>
<title>CompiledMethod::is_compiled() const (3 samples, 0.05%)</title><rect x="903.6" y="803.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="906.6" y="814.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (21 samples, 0.33%)</title><rect x="904.1" y="803.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="907.1" y="814.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (12 samples, 0.19%)</title><rect x="904.1" y="787.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="907.1" y="798.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (3 samples, 0.05%)</title><rect x="905.6" y="771.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="908.6" y="782.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (5 samples, 0.08%)</title><rect x="906.4" y="787.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="909.4" y="798.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (3 samples, 0.05%)</title><rect x="907.5" y="787.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="910.5" y="798.0"></text>
</g>
<g>
<title>frame::is_interpreted_frame() const (5 samples, 0.08%)</title><rect x="908.0" y="803.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="911.0" y="814.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_get_caller_frame(int) (45 samples, 0.71%)</title><rect x="909.0" y="819.0" width="8.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="912.0" y="830.0"></text>
</g>
<g>
<title>Klass::is_subclass_of(Klass const*) const (4 samples, 0.06%)</title><rect x="912.0" y="803.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="915.0" y="814.0"></text>
</g>
<g>
<title>Method::is_ignored_by_security_stack_walk() const (8 samples, 0.13%)</title><rect x="912.7" y="803.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="915.7" y="814.0"></text>
</g>
<g>
<title>Klass::is_subclass_of(Klass const*) const (3 samples, 0.05%)</title><rect x="913.5" y="787.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="916.5" y="798.0"></text>
</g>
<g>
<title>PcDescContainer::find_pc_desc_internal(unsigned char*, bool, PcDescSearch const&amp;) (4 samples, 0.06%)</title><rect x="914.2" y="803.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="917.2" y="814.0"></text>
</g>
<g>
<title>frame::frame(int*, int*, int*, unsigned char*) (2 samples, 0.03%)</title><rect x="915.0" y="803.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="918.0" y="814.0"></text>
</g>
<g>
<title>resume_userspace (2 samples, 0.03%)</title><rect x="915.0" y="787.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="918.0" y="798.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="915.0" y="771.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="918.0" y="782.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="915.0" y="755.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="918.0" y="766.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (9 samples, 0.14%)</title><rect x="915.3" y="803.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="918.3" y="814.0"></text>
</g>
<g>
<title>CodeBlob::is_deoptimization_stub() const (3 samples, 0.05%)</title><rect x="915.7" y="787.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="918.7" y="798.0"></text>
</g>
<g>
<title>frame::frame(int*, int*, int*, unsigned char*) (4 samples, 0.06%)</title><rect x="916.3" y="787.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="919.3" y="798.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.03%)</title><rect x="916.7" y="771.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="919.7" y="782.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (2 samples, 0.03%)</title><rect x="916.7" y="755.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="919.7" y="766.0"></text>
</g>
<g>
<title>resume_userspace (2 samples, 0.03%)</title><rect x="917.0" y="803.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="920.0" y="814.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="917.0" y="787.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="920.0" y="798.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="917.0" y="771.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="920.0" y="782.0"></text>
</g>
<g>
<title>PrivilegedElement::initialize(vframeStream*, oopDesc*, PrivilegedElement*, Thread*) (10 samples, 0.16%)</title><rect x="917.6" y="835.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="920.6" y="846.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.186] (3 samples, 0.05%)</title><rect x="919.5" y="835.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="922.5" y="846.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (2 samples, 0.03%)</title><rect x="920.2" y="835.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="923.2" y="846.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;false&gt;(_jobject*) (2 samples, 0.03%)</title><rect x="920.6" y="835.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="923.6" y="846.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_get_caller_frame(int) (6 samples, 0.10%)</title><rect x="921.1" y="835.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="924.1" y="846.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (3 samples, 0.05%)</title><rect x="922.3" y="851.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="925.3" y="862.0"></text>
</g>
<g>
<title>call_stub (5 samples, 0.08%)</title><rect x="922.8" y="851.0" width="1.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="925.8" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor$2.run (8 samples, 0.13%)</title><rect x="924.0" y="851.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="927.0" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor$2.run (3 samples, 0.05%)</title><rect x="924.9" y="835.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="927.9" y="846.0"></text>
</g>
<g>
<title>java/nio/channels/Channels.newOutputStream (3 samples, 0.05%)</title><rect x="924.9" y="819.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="927.9" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.isConnected (3 samples, 0.05%)</title><rect x="925.4" y="867.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="928.4" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.socket (2 samples, 0.03%)</title><rect x="926.0" y="883.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="929.0" y="894.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.borrowObject (2 samples, 0.03%)</title><rect x="926.4" y="899.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="929.4" y="910.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (2 samples, 0.03%)</title><rect x="926.8" y="899.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="929.8" y="910.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (3 samples, 0.05%)</title><rect x="927.5" y="1107.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="930.5" y="1118.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,396 samples, 22.13%)</title><rect x="928.3" y="1107.0" width="261.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="931.3" y="1118.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>__vdso_gettimeofday (7 samples, 0.11%)</title><rect x="929.4" y="1091.0" width="1.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="932.4" y="1102.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (2 samples, 0.03%)</title><rect x="930.7" y="1091.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="933.7" y="1102.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (508 samples, 8.05%)</title><rect x="931.4" y="1091.0" width="95.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="934.4" y="1102.0">one/nio/net..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (4 samples, 0.06%)</title><rect x="931.6" y="1075.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="934.6" y="1086.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (39 samples, 0.62%)</title><rect x="932.4" y="1075.0" width="7.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="935.4" y="1086.0"></text>
</g>
<g>
<title>__clock_gettime (27 samples, 0.43%)</title><rect x="932.9" y="1059.0" width="5.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="935.9" y="1070.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.06%)</title><rect x="933.1" y="1043.0" width="0.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="936.1" y="1054.0"></text>
</g>
<g>
<title>__kernel_vsyscall (4 samples, 0.06%)</title><rect x="933.1" y="1027.0" width="0.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="936.1" y="1038.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (4 samples, 0.06%)</title><rect x="933.1" y="1011.0" width="0.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="936.1" y="1022.0"></text>
</g>
<g>
<title>__get_user_4 (3 samples, 0.05%)</title><rect x="933.1" y="995.0" width="0.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="936.1" y="1006.0"></text>
</g>
<g>
<title>__kernel_vsyscall (20 samples, 0.32%)</title><rect x="933.9" y="1043.0" width="3.7" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="936.9" y="1054.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (18 samples, 0.29%)</title><rect x="934.2" y="1027.0" width="3.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="937.2" y="1038.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (18 samples, 0.29%)</title><rect x="934.2" y="1011.0" width="3.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="937.2" y="1022.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="934.2" y="995.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="937.2" y="1006.0"></text>
</g>
<g>
<title>schedule (2 samples, 0.03%)</title><rect x="934.2" y="979.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="937.2" y="990.0"></text>
</g>
<g>
<title>__sched_text_start (2 samples, 0.03%)</title><rect x="934.2" y="963.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="937.2" y="974.0"></text>
</g>
<g>
<title>finish_task_switch (2 samples, 0.03%)</title><rect x="934.2" y="947.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="937.2" y="958.0"></text>
</g>
<g>
<title>posix_ktime_get_ts (2 samples, 0.03%)</title><rect x="934.6" y="995.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="937.6" y="1006.0"></text>
</g>
<g>
<title>sys_clock_gettime (14 samples, 0.22%)</title><rect x="935.0" y="995.0" width="2.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="938.0" y="1006.0"></text>
</g>
<g>
<title>clockid_to_kclock.part.3 (3 samples, 0.05%)</title><rect x="935.4" y="979.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="938.4" y="990.0"></text>
</g>
<g>
<title>ktime_get_ts64 (5 samples, 0.08%)</title><rect x="935.9" y="979.0" width="1.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="938.9" y="990.0"></text>
</g>
<g>
<title>posix_ktime_get_ts (3 samples, 0.05%)</title><rect x="936.9" y="979.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="939.9" y="990.0"></text>
</g>
<g>
<title>ktime_get_ts64 (2 samples, 0.03%)</title><rect x="937.0" y="963.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="940.0" y="974.0"></text>
</g>
<g>
<title>kvm_clock_get_cycles (2 samples, 0.03%)</title><rect x="937.0" y="947.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="940.0" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (7 samples, 0.11%)</title><rect x="938.0" y="1059.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="941.0" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (7 samples, 0.11%)</title><rect x="938.0" y="1043.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="941.0" y="1054.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (3 samples, 0.05%)</title><rect x="938.7" y="1027.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="941.7" y="1038.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.setRelease (3 samples, 0.05%)</title><rect x="938.7" y="1011.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="941.7" y="1022.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.03%)</title><rect x="939.3" y="1059.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="942.3" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (464 samples, 7.36%)</title><rect x="939.7" y="1075.0" width="86.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="942.7" y="1086.0">sun/nio/ch..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (464 samples, 7.36%)</title><rect x="939.7" y="1059.0" width="86.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="942.7" y="1070.0">sun/nio/ch..</text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (452 samples, 7.17%)</title><rect x="941.7" y="1043.0" width="84.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="944.7" y="1054.0">sun/nio/ch..</text>
</g>
<g>
<title>sun/nio/ch/EPoll.wait (401 samples, 6.36%)</title><rect x="941.9" y="1027.0" width="75.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="944.9" y="1038.0">sun/nio/..</text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (6 samples, 0.10%)</title><rect x="943.2" y="1011.0" width="1.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="946.2" y="1022.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_EPoll_wait (2 samples, 0.03%)</title><rect x="944.5" y="1011.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="947.5" y="1022.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.11%)</title><rect x="944.9" y="1011.0" width="1.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="947.9" y="1022.0"></text>
</g>
<g>
<title>__kernel_vsyscall (7 samples, 0.11%)</title><rect x="944.9" y="995.0" width="1.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="947.9" y="1006.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (7 samples, 0.11%)</title><rect x="944.9" y="979.0" width="1.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="947.9" y="990.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (7 samples, 0.11%)</title><rect x="944.9" y="963.0" width="1.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="947.9" y="974.0"></text>
</g>
<g>
<title>__kernel_vsyscall (369 samples, 5.85%)</title><rect x="946.2" y="1011.0" width="69.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="949.2" y="1022.0">__kerne..</text>
</g>
<g>
<title>entry_SYSENTER_32 (362 samples, 5.74%)</title><rect x="947.5" y="995.0" width="67.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="950.5" y="1006.0">entry_S..</text>
</g>
<g>
<title>do_fast_syscall_32 (355 samples, 5.63%)</title><rect x="947.5" y="979.0" width="66.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="950.5" y="990.0">do_fast..</text>
</g>
<g>
<title>sys_epoll_wait (352 samples, 5.58%)</title><rect x="948.1" y="963.0" width="65.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="951.1" y="974.0">sys_epo..</text>
</g>
<g>
<title>ep_poll (345 samples, 5.47%)</title><rect x="948.8" y="947.0" width="64.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="951.8" y="958.0">ep_poll</text>
</g>
<g>
<title>__lock_text_start (3 samples, 0.05%)</title><rect x="949.4" y="931.0" width="0.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="952.4" y="942.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.16 (23 samples, 0.36%)</title><rect x="950.1" y="931.0" width="4.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="953.1" y="942.0"></text>
</g>
<g>
<title>__lock_text_start (5 samples, 0.08%)</title><rect x="950.1" y="915.0" width="1.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="953.1" y="926.0"></text>
</g>
<g>
<title>ep_send_events_proc (14 samples, 0.22%)</title><rect x="951.3" y="915.0" width="2.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="954.3" y="926.0"></text>
</g>
<g>
<title>ep_item_poll.isra.12 (13 samples, 0.21%)</title><rect x="951.5" y="899.0" width="2.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="954.5" y="910.0"></text>
</g>
<g>
<title>sock_poll (12 samples, 0.19%)</title><rect x="951.6" y="883.0" width="2.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="954.6" y="894.0"></text>
</g>
<g>
<title>tcp_poll (6 samples, 0.10%)</title><rect x="952.6" y="867.0" width="1.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="955.6" y="878.0"></text>
</g>
<g>
<title>mutex_unlock (2 samples, 0.03%)</title><rect x="954.1" y="915.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="957.1" y="926.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (314 samples, 4.98%)</title><rect x="954.6" y="931.0" width="58.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="957.6" y="942.0">schedu..</text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (314 samples, 4.98%)</title><rect x="954.6" y="915.0" width="58.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="957.6" y="926.0">schedu..</text>
</g>
<g>
<title>schedule (313 samples, 4.96%)</title><rect x="954.8" y="899.0" width="58.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="957.8" y="910.0">schedule</text>
</g>
<g>
<title>__sched_text_start (312 samples, 4.95%)</title><rect x="955.0" y="883.0" width="58.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="958.0" y="894.0">__sche..</text>
</g>
<g>
<title>finish_task_switch (304 samples, 4.82%)</title><rect x="956.5" y="867.0" width="56.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="959.5" y="878.0">finish..</text>
</g>
<g>
<title>apic_timer_interrupt (2 samples, 0.03%)</title><rect x="1013.0" y="851.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1016.0" y="862.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (2 samples, 0.03%)</title><rect x="1013.0" y="835.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1016.0" y="846.0"></text>
</g>
<g>
<title>irq_exit (2 samples, 0.03%)</title><rect x="1013.0" y="819.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1016.0" y="830.0"></text>
</g>
<g>
<title>do_softirq_own_stack (2 samples, 0.03%)</title><rect x="1013.0" y="803.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1016.0" y="814.0"></text>
</g>
<g>
<title>call_on_stack (2 samples, 0.03%)</title><rect x="1013.0" y="787.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1016.0" y="798.0"></text>
</g>
<g>
<title>__do_softirq (2 samples, 0.03%)</title><rect x="1013.0" y="771.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1016.0" y="782.0"></text>
</g>
<g>
<title>fput (2 samples, 0.03%)</title><rect x="1013.6" y="947.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1016.6" y="958.0"></text>
</g>
<g>
<title>sys_epoll_wait (7 samples, 0.11%)</title><rect x="1013.9" y="979.0" width="1.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1016.9" y="990.0"></text>
</g>
<g>
<title>epoll_wait (9 samples, 0.14%)</title><rect x="1015.3" y="1011.0" width="1.6" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1018.3" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.processEvents (25 samples, 0.40%)</title><rect x="1016.9" y="1027.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1019.9" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.get (8 samples, 0.13%)</title><rect x="1017.5" y="1011.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1020.5" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.05%)</title><rect x="1017.5" y="995.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1020.5" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (5 samples, 0.08%)</title><rect x="1018.1" y="995.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1021.1" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (14 samples, 0.22%)</title><rect x="1019.0" y="1011.0" width="2.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1022.0" y="1022.0"></text>
</g>
<g>
<title>java/util/HashSet.add (8 samples, 0.13%)</title><rect x="1019.0" y="995.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1022.0" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.put (8 samples, 0.13%)</title><rect x="1019.0" y="979.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1022.0" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.03%)</title><rect x="1019.0" y="963.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1022.0" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (6 samples, 0.10%)</title><rect x="1019.4" y="963.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1022.4" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (3 samples, 0.05%)</title><rect x="1019.9" y="947.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1022.9" y="958.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (3 samples, 0.05%)</title><rect x="1020.5" y="995.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1023.5" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (3 samples, 0.05%)</title><rect x="1020.5" y="979.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1023.5" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.03%)</title><rect x="1020.7" y="963.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1023.7" y="974.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.translateAndSetReadyOps (3 samples, 0.05%)</title><rect x="1021.1" y="995.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1024.1" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.processUpdateQueue (6 samples, 0.10%)</title><rect x="1021.6" y="1027.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1024.6" y="1038.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (2 samples, 0.03%)</title><rect x="1022.4" y="1011.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1025.4" y="1022.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.elementAt (2 samples, 0.03%)</title><rect x="1022.4" y="995.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1025.4" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (9 samples, 0.14%)</title><rect x="1022.7" y="1027.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1025.7" y="1038.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (8 samples, 0.13%)</title><rect x="1022.9" y="1011.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1025.9" y="1022.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (2 samples, 0.03%)</title><rect x="1022.9" y="995.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1025.9" y="1006.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (6 samples, 0.10%)</title><rect x="1023.3" y="995.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1026.3" y="1006.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (4 samples, 0.06%)</title><rect x="1023.7" y="979.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1026.7" y="990.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (4 samples, 0.06%)</title><rect x="1023.7" y="963.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1026.7" y="974.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.end (7 samples, 0.11%)</title><rect x="1024.4" y="1027.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1027.4" y="1038.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (7 samples, 0.11%)</title><rect x="1024.4" y="1011.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1027.4" y="1022.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (7 samples, 0.11%)</title><rect x="1024.4" y="995.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1027.4" y="1006.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (3 samples, 0.05%)</title><rect x="1025.2" y="979.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1028.2" y="990.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (3 samples, 0.05%)</title><rect x="1025.2" y="963.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1028.2" y="974.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (3 samples, 0.05%)</title><rect x="1025.7" y="1027.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1028.7" y="1038.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (3 samples, 0.05%)</title><rect x="1025.7" y="1011.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1028.7" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (3 samples, 0.05%)</title><rect x="1025.7" y="995.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1028.7" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (3 samples, 0.05%)</title><rect x="1025.7" y="979.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1028.7" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (3 samples, 0.05%)</title><rect x="1025.7" y="963.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1028.7" y="974.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (857 samples, 13.59%)</title><rect x="1026.5" y="1091.0" width="160.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1029.5" y="1102.0">one/nio/net/Session...</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (856 samples, 13.57%)</title><rect x="1026.7" y="1075.0" width="160.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1029.7" y="1086.0">one/nio/http/HttpSes..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (667 samples, 10.58%)</title><rect x="1026.9" y="1059.0" width="124.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1029.9" y="1070.0">one/nio/http/Ht..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (608 samples, 9.64%)</title><rect x="1032.3" y="1043.0" width="113.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1035.3" y="1054.0">one/nio/http/H..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (608 samples, 9.64%)</title><rect x="1032.3" y="1027.0" width="113.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1035.3" y="1038.0">one/nio/http/H..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (595 samples, 9.43%)</title><rect x="1032.7" y="1011.0" width="111.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1035.7" y="1022.0">RequestHandle..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (17 samples, 0.27%)</title><rect x="1032.7" y="995.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1035.7" y="1006.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (4 samples, 0.06%)</title><rect x="1035.1" y="979.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1038.1" y="990.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ServiceImpl.entity (578 samples, 9.16%)</title><rect x="1035.8" y="995.0" width="108.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1038.8" y="1006.0">ru/mail/polis..</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.05%)</title><rect x="1036.8" y="979.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1039.8" y="990.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.05%)</title><rect x="1036.8" y="963.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1039.8" y="974.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.05%)</title><rect x="1036.8" y="947.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1039.8" y="958.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ServiceImpl.executeAsync (570 samples, 9.04%)</title><rect x="1037.3" y="979.0" width="106.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1040.3" y="990.0">ru/mail/polis..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (567 samples, 8.99%)</title><rect x="1037.9" y="963.0" width="106.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1040.9" y="974.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (567 samples, 8.99%)</title><rect x="1037.9" y="947.0" width="106.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1040.9" y="958.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (550 samples, 8.72%)</title><rect x="1037.9" y="931.0" width="102.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1040.9" y="942.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (4 samples, 0.06%)</title><rect x="1037.9" y="915.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1040.9" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (4 samples, 0.06%)</title><rect x="1037.9" y="899.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1040.9" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (4 samples, 0.06%)</title><rect x="1037.9" y="883.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1040.9" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (546 samples, 8.66%)</title><rect x="1038.6" y="915.0" width="102.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1041.6" y="926.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (546 samples, 8.66%)</title><rect x="1038.6" y="899.0" width="102.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1041.6" y="910.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (546 samples, 8.66%)</title><rect x="1038.6" y="883.0" width="102.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1041.6" y="894.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (546 samples, 8.66%)</title><rect x="1038.6" y="867.0" width="102.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1041.6" y="878.0">java/util/co..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (544 samples, 8.63%)</title><rect x="1039.0" y="851.0" width="101.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1042.0" y="862.0">jdk/internal..</text>
</g>
<g>
<title>Parker::unpark() (4 samples, 0.06%)</title><rect x="1039.2" y="835.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1042.2" y="846.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (5 samples, 0.08%)</title><rect x="1040.0" y="835.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1043.0" y="846.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.201] (2 samples, 0.03%)</title><rect x="1040.9" y="835.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1043.9" y="846.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (2 samples, 0.03%)</title><rect x="1041.3" y="835.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1044.3" y="846.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (2 samples, 0.03%)</title><rect x="1041.8" y="835.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1044.8" y="846.0"></text>
</g>
<g>
<title>Unsafe_Unpark (58 samples, 0.92%)</title><rect x="1042.2" y="835.0" width="10.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1045.2" y="846.0"></text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (5 samples, 0.08%)</title><rect x="1044.4" y="819.0" width="1.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1047.4" y="830.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;CardTableBarrierSet::AccessBarrier&lt;1097812ull, CardTableBarrierSet&gt;, (AccessInternal::BarrierType)2, 1097812ull&gt;::oop_access_barrier(void*) (3 samples, 0.05%)</title><rect x="1045.4" y="819.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1048.4" y="830.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (5 samples, 0.08%)</title><rect x="1045.9" y="819.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1048.9" y="830.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (11 samples, 0.17%)</title><rect x="1046.9" y="819.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1049.9" y="830.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (5 samples, 0.08%)</title><rect x="1048.0" y="803.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1051.0" y="814.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_lock (8 samples, 0.13%)</title><rect x="1048.9" y="819.0" width="1.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1051.9" y="830.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (3 samples, 0.05%)</title><rect x="1050.8" y="819.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1053.8" y="830.0"></text>
</g>
<g>
<title>pthread_cond_signal (2 samples, 0.03%)</title><rect x="1051.4" y="819.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1054.4" y="830.0"></text>
</g>
<g>
<title>pthread_mutex_lock (4 samples, 0.06%)</title><rect x="1051.7" y="819.0" width="0.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1054.7" y="830.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (3 samples, 0.05%)</title><rect x="1052.5" y="819.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1055.5" y="830.0"></text>
</g>
<g>
<title>[unknown] (466 samples, 7.39%)</title><rect x="1053.0" y="835.0" width="87.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1056.0" y="846.0">[unknown]</text>
</g>
<g>
<title>[unknown] (5 samples, 0.08%)</title><rect x="1053.0" y="819.0" width="1.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1056.0" y="830.0"></text>
</g>
<g>
<title>__kernel_vsyscall (5 samples, 0.08%)</title><rect x="1053.0" y="803.0" width="1.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1056.0" y="814.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (5 samples, 0.08%)</title><rect x="1053.0" y="787.0" width="1.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1056.0" y="798.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (4 samples, 0.06%)</title><rect x="1053.2" y="771.0" width="0.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1056.2" y="782.0"></text>
</g>
<g>
<title>__kernel_vsyscall (451 samples, 7.15%)</title><rect x="1054.0" y="819.0" width="84.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1057.0" y="830.0">__kernel_v..</text>
</g>
<g>
<title>entry_SYSENTER_32 (450 samples, 7.13%)</title><rect x="1054.2" y="803.0" width="84.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1057.2" y="814.0">entry_SYSE..</text>
</g>
<g>
<title>do_fast_syscall_32 (449 samples, 7.12%)</title><rect x="1054.2" y="787.0" width="84.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1057.2" y="798.0">do_fast_sy..</text>
</g>
<g>
<title>exit_to_usermode_loop (5 samples, 0.08%)</title><rect x="1054.4" y="771.0" width="0.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1057.4" y="782.0"></text>
</g>
<g>
<title>schedule (5 samples, 0.08%)</title><rect x="1054.4" y="755.0" width="0.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1057.4" y="766.0"></text>
</g>
<g>
<title>__sched_text_start (5 samples, 0.08%)</title><rect x="1054.4" y="739.0" width="0.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1057.4" y="750.0"></text>
</g>
<g>
<title>finish_task_switch (5 samples, 0.08%)</title><rect x="1054.4" y="723.0" width="0.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1057.4" y="734.0"></text>
</g>
<g>
<title>sys_futex (443 samples, 7.02%)</title><rect x="1055.3" y="771.0" width="82.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1058.3" y="782.0">sys_futex</text>
</g>
<g>
<title>do_futex (441 samples, 6.99%)</title><rect x="1055.3" y="755.0" width="82.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1058.3" y="766.0">do_futex</text>
</g>
<g>
<title>futex_wake (439 samples, 6.96%)</title><rect x="1055.5" y="739.0" width="82.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1058.5" y="750.0">futex_wake</text>
</g>
<g>
<title>hash_futex (2 samples, 0.03%)</title><rect x="1057.7" y="723.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1060.7" y="734.0"></text>
</g>
<g>
<title>mark_wake_futex (6 samples, 0.10%)</title><rect x="1058.1" y="723.0" width="1.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1061.1" y="734.0"></text>
</g>
<g>
<title>plist_del (3 samples, 0.05%)</title><rect x="1058.7" y="707.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1061.7" y="718.0"></text>
</g>
<g>
<title>wake_up_q (419 samples, 6.64%)</title><rect x="1059.2" y="723.0" width="78.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1062.2" y="734.0">wake_up_q</text>
</g>
<g>
<title>try_to_wake_up (417 samples, 6.61%)</title><rect x="1059.6" y="707.0" width="78.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1062.6" y="718.0">try_to_wa..</text>
</g>
<g>
<title>__lock_text_start (417 samples, 6.61%)</title><rect x="1059.6" y="691.0" width="78.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1062.6" y="702.0">__lock_te..</text>
</g>
<g>
<title>apic_timer_interrupt (2 samples, 0.03%)</title><rect x="1137.2" y="675.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1140.2" y="686.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (2 samples, 0.03%)</title><rect x="1137.2" y="659.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1140.2" y="670.0"></text>
</g>
<g>
<title>irq_exit (2 samples, 0.03%)</title><rect x="1137.2" y="643.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1140.2" y="654.0"></text>
</g>
<g>
<title>do_softirq_own_stack (2 samples, 0.03%)</title><rect x="1137.2" y="627.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1140.2" y="638.0"></text>
</g>
<g>
<title>call_on_stack (2 samples, 0.03%)</title><rect x="1137.2" y="611.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1140.2" y="622.0"></text>
</g>
<g>
<title>__do_softirq (2 samples, 0.03%)</title><rect x="1137.2" y="595.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1140.2" y="606.0"></text>
</g>
<g>
<title>run_rebalance_domains (2 samples, 0.03%)</title><rect x="1137.2" y="579.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1140.2" y="590.0"></text>
</g>
<g>
<title>rebalance_domains (2 samples, 0.03%)</title><rect x="1137.2" y="563.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1140.2" y="574.0"></text>
</g>
<g>
<title>update_blocked_averages (2 samples, 0.03%)</title><rect x="1137.2" y="547.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1140.2" y="558.0"></text>
</g>
<g>
<title>__lock_text_start (2 samples, 0.03%)</title><rect x="1137.2" y="531.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1140.2" y="542.0"></text>
</g>
<g>
<title>futex_wake (2 samples, 0.03%)</title><rect x="1137.8" y="755.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1140.8" y="766.0"></text>
</g>
<g>
<title>__pthread_cond_signal (10 samples, 0.16%)</title><rect x="1138.4" y="819.0" width="1.8" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1141.4" y="830.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.ax (3 samples, 0.05%)</title><rect x="1140.2" y="835.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1143.2" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (17 samples, 0.27%)</title><rect x="1140.8" y="931.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1143.8" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (17 samples, 0.27%)</title><rect x="1140.8" y="915.0" width="3.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1143.8" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (17 samples, 0.27%)</title><rect x="1140.8" y="899.0" width="3.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1143.8" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (17 samples, 0.27%)</title><rect x="1140.8" y="883.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1143.8" y="894.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (11 samples, 0.17%)</title><rect x="1144.0" y="1011.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1147.0" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.get (11 samples, 0.17%)</title><rect x="1144.0" y="995.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1147.0" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (11 samples, 0.17%)</title><rect x="1144.0" y="979.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1147.0" y="990.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (5 samples, 0.08%)</title><rect x="1146.2" y="1043.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1149.2" y="1054.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5 samples, 0.08%)</title><rect x="1146.2" y="1027.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1149.2" y="1038.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5 samples, 0.08%)</title><rect x="1146.2" y="1011.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1149.2" y="1022.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (24 samples, 0.38%)</title><rect x="1147.2" y="1043.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1150.2" y="1054.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (24 samples, 0.38%)</title><rect x="1147.2" y="1027.0" width="4.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1150.2" y="1038.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (188 samples, 2.98%)</title><rect x="1151.6" y="1059.0" width="35.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1154.6" y="1070.0">one..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (180 samples, 2.85%)</title><rect x="1153.1" y="1043.0" width="33.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1156.1" y="1054.0">on..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (180 samples, 2.85%)</title><rect x="1153.1" y="1027.0" width="33.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1156.1" y="1038.0">su..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 0.06%)</title><rect x="1153.1" y="1011.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1156.1" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.06%)</title><rect x="1153.1" y="995.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1156.1" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.06%)</title><rect x="1153.1" y="979.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1156.1" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.06%)</title><rect x="1153.1" y="963.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1156.1" y="974.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (162 samples, 2.57%)</title><rect x="1153.9" y="1011.0" width="30.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1156.9" y="1022.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (162 samples, 2.57%)</title><rect x="1153.9" y="995.0" width="30.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1156.9" y="1006.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (161 samples, 2.55%)</title><rect x="1154.1" y="979.0" width="30.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1157.1" y="990.0">su..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (161 samples, 2.55%)</title><rect x="1154.1" y="963.0" width="30.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1157.1" y="974.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (149 samples, 2.36%)</title><rect x="1156.3" y="947.0" width="27.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1159.3" y="958.0">s..</text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (2 samples, 0.03%)</title><rect x="1158.0" y="931.0" width="0.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1161.0" y="942.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (2 samples, 0.03%)</title><rect x="1158.4" y="931.0" width="0.4" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1161.4" y="942.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="1158.8" y="931.0" width="0.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1161.8" y="942.0"></text>
</g>
<g>
<title>__kernel_vsyscall (3 samples, 0.05%)</title><rect x="1158.8" y="915.0" width="0.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1161.8" y="926.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (3 samples, 0.05%)</title><rect x="1158.8" y="899.0" width="0.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1161.8" y="910.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (3 samples, 0.05%)</title><rect x="1158.8" y="883.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1161.8" y="894.0"></text>
</g>
<g>
<title>__kernel_vsyscall (130 samples, 2.06%)</title><rect x="1159.3" y="931.0" width="24.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1162.3" y="942.0">_..</text>
</g>
<g>
<title>entry_SYSENTER_32 (127 samples, 2.01%)</title><rect x="1159.9" y="915.0" width="23.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1162.9" y="926.0">e..</text>
</g>
<g>
<title>do_fast_syscall_32 (126 samples, 2.00%)</title><rect x="1159.9" y="899.0" width="23.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1162.9" y="910.0">d..</text>
</g>
<g>
<title>sys_read (123 samples, 1.95%)</title><rect x="1160.3" y="883.0" width="23.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1163.3" y="894.0">s..</text>
</g>
<g>
<title>__fdget_pos (5 samples, 0.08%)</title><rect x="1161.0" y="867.0" width="0.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1164.0" y="878.0"></text>
</g>
<g>
<title>__fget_light (5 samples, 0.08%)</title><rect x="1161.0" y="851.0" width="0.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1164.0" y="862.0"></text>
</g>
<g>
<title>__fget (2 samples, 0.03%)</title><rect x="1161.6" y="835.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1164.6" y="846.0"></text>
</g>
<g>
<title>vfs_read (112 samples, 1.78%)</title><rect x="1162.3" y="867.0" width="21.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1165.3" y="878.0"></text>
</g>
<g>
<title>__vfs_read (86 samples, 1.36%)</title><rect x="1162.9" y="851.0" width="16.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1165.9" y="862.0"></text>
</g>
<g>
<title>new_sync_read (83 samples, 1.32%)</title><rect x="1163.1" y="835.0" width="15.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1166.1" y="846.0"></text>
</g>
<g>
<title>sock_read_iter (82 samples, 1.30%)</title><rect x="1163.2" y="819.0" width="15.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1166.2" y="830.0"></text>
</g>
<g>
<title>sock_recvmsg (78 samples, 1.24%)</title><rect x="1164.0" y="803.0" width="14.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1167.0" y="814.0"></text>
</g>
<g>
<title>inet_recvmsg (73 samples, 1.16%)</title><rect x="1164.0" y="787.0" width="13.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1167.0" y="798.0"></text>
</g>
<g>
<title>__kfree_skb (2 samples, 0.03%)</title><rect x="1164.0" y="771.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1167.0" y="782.0"></text>
</g>
<g>
<title>release_sock (2 samples, 0.03%)</title><rect x="1164.4" y="771.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1167.4" y="782.0"></text>
</g>
<g>
<title>tcp_recvmsg (68 samples, 1.08%)</title><rect x="1164.9" y="771.0" width="12.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1167.9" y="782.0"></text>
</g>
<g>
<title>__check_object_size (2 samples, 0.03%)</title><rect x="1167.2" y="755.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1170.2" y="766.0"></text>
</g>
<g>
<title>__kfree_skb (11 samples, 0.17%)</title><rect x="1167.5" y="755.0" width="2.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1170.5" y="766.0"></text>
</g>
<g>
<title>kfree_skbmem (2 samples, 0.03%)</title><rect x="1167.5" y="739.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1170.5" y="750.0"></text>
</g>
<g>
<title>skb_release_all (8 samples, 0.13%)</title><rect x="1167.9" y="739.0" width="1.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1170.9" y="750.0"></text>
</g>
<g>
<title>skb_release_data (3 samples, 0.05%)</title><rect x="1167.9" y="723.0" width="0.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1170.9" y="734.0"></text>
</g>
<g>
<title>skb_release_head_state (2 samples, 0.03%)</title><rect x="1168.5" y="723.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1171.5" y="734.0"></text>
</g>
<g>
<title>sock_rfree (3 samples, 0.05%)</title><rect x="1168.9" y="723.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1171.9" y="734.0"></text>
</g>
<g>
<title>__tcp_select_window (2 samples, 0.03%)</title><rect x="1169.6" y="755.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1172.6" y="766.0"></text>
</g>
<g>
<title>_copy_to_iter (3 samples, 0.05%)</title><rect x="1170.0" y="755.0" width="0.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1173.0" y="766.0"></text>
</g>
<g>
<title>lock_sock_nested (8 samples, 0.13%)</title><rect x="1170.5" y="755.0" width="1.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1173.5" y="766.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (6 samples, 0.10%)</title><rect x="1170.9" y="739.0" width="1.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1173.9" y="750.0"></text>
</g>
<g>
<title>__pv_queued_spin_lock_slowpath (6 samples, 0.10%)</title><rect x="1170.9" y="723.0" width="1.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1173.9" y="734.0"></text>
</g>
<g>
<title>release_sock (2 samples, 0.03%)</title><rect x="1172.0" y="755.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1175.0" y="766.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (20 samples, 0.32%)</title><rect x="1172.4" y="755.0" width="3.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1175.4" y="766.0"></text>
</g>
<g>
<title>__check_object_size (4 samples, 0.06%)</title><rect x="1172.6" y="739.0" width="0.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1175.6" y="750.0"></text>
</g>
<g>
<title>_copy_to_iter (15 samples, 0.24%)</title><rect x="1173.3" y="739.0" width="2.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1176.3" y="750.0"></text>
</g>
<g>
<title>__copy_user_ll (2 samples, 0.03%)</title><rect x="1174.3" y="723.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1177.3" y="734.0"></text>
</g>
<g>
<title>copyout (8 samples, 0.13%)</title><rect x="1174.7" y="723.0" width="1.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1177.7" y="734.0"></text>
</g>
<g>
<title>__copy_user_ll (8 samples, 0.13%)</title><rect x="1174.7" y="707.0" width="1.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1177.7" y="718.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (2 samples, 0.03%)</title><rect x="1176.2" y="755.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1179.2" y="766.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (6 samples, 0.10%)</title><rect x="1176.5" y="755.0" width="1.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1179.5" y="766.0"></text>
</g>
<g>
<title>sched_clock_cpu (4 samples, 0.06%)</title><rect x="1176.9" y="739.0" width="0.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1179.9" y="750.0"></text>
</g>
<g>
<title>sched_clock (4 samples, 0.06%)</title><rect x="1176.9" y="723.0" width="0.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1179.9" y="734.0"></text>
</g>
<g>
<title>kvm_sched_clock_read (4 samples, 0.06%)</title><rect x="1176.9" y="707.0" width="0.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1179.9" y="718.0"></text>
</g>
<g>
<title>pvclock_clocksource_read (4 samples, 0.06%)</title><rect x="1176.9" y="691.0" width="0.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1179.9" y="702.0"></text>
</g>
<g>
<title>security_socket_recvmsg (3 samples, 0.05%)</title><rect x="1177.7" y="787.0" width="0.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1180.7" y="798.0"></text>
</g>
<g>
<title>tcp_recvmsg (2 samples, 0.03%)</title><rect x="1178.2" y="787.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1181.2" y="798.0"></text>
</g>
<g>
<title>sock_read_iter (2 samples, 0.03%)</title><rect x="1178.6" y="835.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1181.6" y="846.0"></text>
</g>
<g>
<title>rw_verify_area (23 samples, 0.36%)</title><rect x="1179.0" y="851.0" width="4.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1182.0" y="862.0"></text>
</g>
<g>
<title>apparmor_file_permission (2 samples, 0.03%)</title><rect x="1179.3" y="835.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1182.3" y="846.0"></text>
</g>
<g>
<title>security_file_permission (19 samples, 0.30%)</title><rect x="1179.7" y="835.0" width="3.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1182.7" y="846.0"></text>
</g>
<g>
<title>apparmor_file_permission (10 samples, 0.16%)</title><rect x="1181.0" y="819.0" width="1.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1184.0" y="830.0"></text>
</g>
<g>
<title>common_file_perm (10 samples, 0.16%)</title><rect x="1181.0" y="803.0" width="1.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1184.0" y="814.0"></text>
</g>
<g>
<title>aa_file_perm (5 samples, 0.08%)</title><rect x="1182.0" y="787.0" width="0.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1185.0" y="798.0"></text>
</g>
<g>
<title>fsnotify (2 samples, 0.03%)</title><rect x="1182.9" y="819.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1185.9" y="830.0"></text>
</g>
<g>
<title>read (3 samples, 0.05%)</title><rect x="1183.6" y="931.0" width="0.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1186.6" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginRead (6 samples, 0.10%)</title><rect x="1184.2" y="1011.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1187.2" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.endRead (8 samples, 0.13%)</title><rect x="1185.3" y="1011.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1188.3" y="1022.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (8 samples, 0.13%)</title><rect x="1185.3" y="995.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1188.3" y="1006.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (14 samples, 0.22%)</title><rect x="1186.8" y="1091.0" width="2.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.8" y="1102.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.08%)</title><rect x="1186.8" y="1075.0" width="1.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1189.8" y="1086.0"></text>
</g>
<g>
<title>__kernel_vsyscall (5 samples, 0.08%)</title><rect x="1186.8" y="1059.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1189.8" y="1070.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (5 samples, 0.08%)</title><rect x="1186.8" y="1043.0" width="1.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1189.8" y="1054.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (5 samples, 0.08%)</title><rect x="1186.8" y="1027.0" width="1.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1189.8" y="1038.0"></text>
</g>
<g>
<title>__kernel_vsyscall (8 samples, 0.13%)</title><rect x="1187.8" y="1075.0" width="1.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1190.8" y="1086.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (7 samples, 0.11%)</title><rect x="1187.9" y="1059.0" width="1.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1190.9" y="1070.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (6 samples, 0.10%)</title><rect x="1187.9" y="1043.0" width="1.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1190.9" y="1054.0"></text>
</g>
<g>
<title>do_gettimeofday (2 samples, 0.03%)</title><rect x="1187.9" y="1027.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1190.9" y="1038.0"></text>
</g>
<g>
<title>sys_gettimeofday (4 samples, 0.06%)</title><rect x="1188.3" y="1027.0" width="0.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1191.3" y="1038.0"></text>
</g>
<g>
<title>do_gettimeofday (4 samples, 0.06%)</title><rect x="1188.3" y="1011.0" width="0.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1191.3" y="1022.0"></text>
</g>
<g>
<title>__getnstimeofday64 (2 samples, 0.03%)</title><rect x="1188.3" y="995.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1191.3" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (3 samples, 0.05%)</title><rect x="1189.4" y="1107.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1192.4" y="1118.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (3 samples, 0.05%)</title><rect x="1189.4" y="1091.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1192.4" y="1102.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (3 samples, 0.05%)</title><rect x="1189.4" y="1075.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1192.4" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (3 samples, 0.05%)</title><rect x="1189.4" y="1059.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1192.4" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (3 samples, 0.05%)</title><rect x="1189.4" y="1043.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1192.4" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (3 samples, 0.05%)</title><rect x="1189.4" y="1027.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1192.4" y="1038.0"></text>
</g>
<g>
<title>Thread::current() (2 samples, 0.03%)</title><rect x="1189.4" y="1011.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1192.4" y="1022.0"></text>
</g>
</g>
</svg>
