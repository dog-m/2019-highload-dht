<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="421"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="421"> </text>
<g id="frames">
<g>
<title>all (299,887 samples, 100.00%)</title><rect x="10.0" y="387.0" width="1180.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="13.0" y="398.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (176,002 samples, 58.69%)</title><rect x="10.0" y="371.0" width="692.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="382.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (176,002 samples, 58.69%)</title><rect x="10.0" y="355.0" width="692.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.0" y="366.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (176,002 samples, 58.69%)</title><rect x="10.0" y="339.0" width="692.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="350.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (2,027 samples, 0.68%)</title><rect x="10.0" y="323.0" width="8.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (2,027 samples, 0.68%)</title><rect x="10.0" y="307.0" width="8.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (2,026 samples, 0.68%)</title><rect x="10.0" y="291.0" width="8.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (2,026 samples, 0.68%)</title><rect x="10.0" y="275.0" width="8.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (1,971 samples, 0.66%)</title><rect x="10.0" y="259.0" width="7.8" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ServiceImpl$$Lambda$67/23099948.run (173,975 samples, 58.01%)</title><rect x="18.0" y="323.0" width="684.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="21.0" y="334.0">ru/mail/polis/service/dogm/ServiceImpl$$Lambda$67/23099948.run</text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ServiceImpl.lambda$executeAsync$2 (173,975 samples, 58.01%)</title><rect x="18.0" y="307.0" width="684.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="21.0" y="318.0">ru/mail/polis/service/dogm/ServiceImpl.lambda$executeAsync$2</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (27,748 samples, 9.25%)</title><rect x="18.0" y="291.0" width="109.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.0" y="302.0">one/nio/http/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (27,748 samples, 9.25%)</title><rect x="18.0" y="275.0" width="109.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.0" y="286.0">one/nio/http/..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (12,976 samples, 4.33%)</title><rect x="18.0" y="259.0" width="51.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.0" y="270.0">one/n..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (12,976 samples, 4.33%)</title><rect x="18.0" y="243.0" width="51.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="21.0" y="254.0">one/n..</text>
</g>
<g>
<title>byte[] (7,410 samples, 2.47%)</title><rect x="18.0" y="227.0" width="29.1" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="21.0" y="238.0">by..</text>
</g>
<g>
<title>byte[] (5,566 samples, 1.86%)</title><rect x="47.1" y="227.0" width="21.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="50.1" y="238.0">b..</text>
</g>
<g>
<title>one/nio/net/Session.write (14,772 samples, 4.93%)</title><rect x="69.0" y="259.0" width="58.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="72.0" y="270.0">one/ni..</text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (5,841 samples, 1.95%)</title><rect x="69.0" y="243.0" width="23.0" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="72.0" y="254.0">o..</text>
</g>
<g>
<title>one/nio/net/Session.write (8,879 samples, 2.96%)</title><rect x="92.2" y="243.0" width="35.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="95.2" y="254.0">on..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (8,879 samples, 2.96%)</title><rect x="92.2" y="227.0" width="35.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="95.2" y="238.0">on..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (8,879 samples, 2.96%)</title><rect x="92.2" y="211.0" width="35.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="95.2" y="222.0">on..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (8,879 samples, 2.96%)</title><rect x="92.2" y="195.0" width="35.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="95.2" y="206.0">ja..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (8,811 samples, 2.94%)</title><rect x="92.2" y="179.0" width="34.7" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="95.2" y="190.0">ja..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (68 samples, 0.02%)</title><rect x="126.9" y="179.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="129.9" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ServiceImpl$$Lambda$66/25175452.act (146,227 samples, 48.76%)</title><rect x="127.2" y="291.0" width="575.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="130.2" y="302.0">ru/mail/polis/service/dogm/ServiceImpl$$Lambda$66/25175452.act</text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ServiceImpl.lambda$entity$0 (146,227 samples, 48.76%)</title><rect x="127.2" y="275.0" width="575.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="130.2" y="286.0">ru/mail/polis/service/dogm/ServiceImpl.lambda$entity$0</text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ServiceImpl.processEntityRequest (146,227 samples, 48.76%)</title><rect x="127.2" y="259.0" width="575.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="130.2" y="270.0">ru/mail/polis/service/dogm/ServiceImpl.processEntityRequest</text>
</g>
<g>
<title>ru/mail/polis/service/dogm/processors/ProcessorPut.processEntityDirectly (17,159 samples, 5.72%)</title><rect x="127.2" y="243.0" width="67.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="130.2" y="254.0">ru/mail..</text>
</g>
<g>
<title>java/lang/String.getBytes (4,617 samples, 1.54%)</title><rect x="127.2" y="227.0" width="18.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="130.2" y="238.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (4,617 samples, 1.54%)</title><rect x="127.2" y="211.0" width="18.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="130.2" y="222.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (4,617 samples, 1.54%)</title><rect x="127.2" y="195.0" width="18.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="130.2" y="206.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4,617 samples, 1.54%)</title><rect x="127.2" y="179.0" width="18.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="130.2" y="190.0"></text>
</g>
<g>
<title>byte[] (4,607 samples, 1.54%)</title><rect x="127.2" y="163.0" width="18.1" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="130.2" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1,464 samples, 0.49%)</title><rect x="145.3" y="227.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="148.3" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1,464 samples, 0.49%)</title><rect x="145.3" y="211.0" width="5.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="148.3" y="222.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,458 samples, 0.49%)</title><rect x="145.3" y="195.0" width="5.8" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="148.3" y="206.0"></text>
</g>
<g>
<title>one.nio.http.Response (1,192 samples, 0.40%)</title><rect x="151.1" y="227.0" width="4.7" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="154.1" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (5,705 samples, 1.90%)</title><rect x="155.8" y="227.0" width="22.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="158.8" y="238.0">o..</text>
</g>
<g>
<title>byte[] (4,215 samples, 1.41%)</title><rect x="155.8" y="211.0" width="16.6" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="158.8" y="222.0"></text>
</g>
<g>
<title>java.lang.String[] (1,194 samples, 0.40%)</title><rect x="172.5" y="211.0" width="4.7" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="175.5" y="222.0"></text>
</g>
<g>
<title>java.lang.String (228 samples, 0.08%)</title><rect x="177.3" y="211.0" width="0.9" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="180.3" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/dogm/RocksDAO.upsertWithTimestamp (4,166 samples, 1.39%)</title><rect x="178.3" y="227.0" width="16.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="181.3" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/dogm/ByteBufferUtils.restoreByteArray (1,520 samples, 0.51%)</title><rect x="178.3" y="211.0" width="6.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="181.3" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/dogm/ByteBufferUtils.getByteArray (1,520 samples, 0.51%)</title><rect x="178.3" y="195.0" width="6.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="181.3" y="206.0"></text>
</g>
<g>
<title>byte[] (1,513 samples, 0.50%)</title><rect x="178.3" y="179.0" width="5.9" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="181.3" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/dogm/DataWithTimestamp.toBytes (2,646 samples, 0.88%)</title><rect x="184.3" y="211.0" width="10.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="187.3" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (2,646 samples, 0.88%)</title><rect x="184.3" y="195.0" width="10.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="187.3" y="206.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2,646 samples, 0.88%)</title><rect x="184.3" y="179.0" width="10.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="187.3" y="190.0"></text>
</g>
<g>
<title>byte[] (2,628 samples, 0.88%)</title><rect x="184.3" y="163.0" width="10.3" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="187.3" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dogm/processors/ProcessorPut.processEntityRequest (129,068 samples, 43.04%)</title><rect x="194.7" y="243.0" width="507.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="197.7" y="254.0">ru/mail/polis/service/dogm/processors/ProcessorPut.processEntityRequest</text>
</g>
<g>
<title>ru/mail/polis/service/dogm/processors/SimpleRequestProcessor.processEntityRequestOnClusterEmptyResult (129,068 samples, 43.04%)</title><rect x="194.7" y="227.0" width="507.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="197.7" y="238.0">ru/mail/polis/service/dogm/processors/SimpleRequestProcessor.processEn..</text>
</g>
<g>
<title>one.nio.http.Response (387 samples, 0.13%)</title><rect x="194.7" y="211.0" width="1.5" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="197.7" y="222.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1,256 samples, 0.42%)</title><rect x="196.2" y="211.0" width="5.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="199.2" y="222.0"></text>
</g>
<g>
<title>byte[] (459 samples, 0.15%)</title><rect x="196.2" y="195.0" width="1.8" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="199.2" y="206.0"></text>
</g>
<g>
<title>java.lang.String[] (410 samples, 0.14%)</title><rect x="198.1" y="195.0" width="1.6" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="201.1" y="206.0"></text>
</g>
<g>
<title>java.lang.String (367 samples, 0.12%)</title><rect x="199.7" y="195.0" width="1.5" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="202.7" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dogm/BasicTopology.nodesFor (1,058 samples, 0.35%)</title><rect x="201.2" y="211.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="204.2" y="222.0"></text>
</g>
<g>
<title>java.util.ArrayList (581 samples, 0.19%)</title><rect x="201.2" y="195.0" width="2.3" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="204.2" y="206.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (471 samples, 0.16%)</title><rect x="203.5" y="195.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="206.5" y="206.0"></text>
</g>
<g>
<title>java.lang.Object[] (468 samples, 0.16%)</title><rect x="203.5" y="179.0" width="1.8" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="206.5" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dogm/processors/ProcessorPut.processEntityDirectly (3,775 samples, 1.26%)</title><rect x="205.3" y="211.0" width="14.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="208.3" y="222.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (385 samples, 0.13%)</title><rect x="205.3" y="195.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="208.3" y="206.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (385 samples, 0.13%)</title><rect x="205.3" y="179.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="208.3" y="190.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (385 samples, 0.13%)</title><rect x="205.3" y="163.0" width="1.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="208.3" y="174.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (385 samples, 0.13%)</title><rect x="205.3" y="147.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="208.3" y="158.0"></text>
</g>
<g>
<title>byte[] (378 samples, 0.13%)</title><rect x="205.3" y="131.0" width="1.5" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="208.3" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (748 samples, 0.25%)</title><rect x="206.9" y="195.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="209.9" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (748 samples, 0.25%)</title><rect x="206.9" y="179.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="209.9" y="190.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (740 samples, 0.25%)</title><rect x="206.9" y="163.0" width="2.9" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="209.9" y="174.0"></text>
</g>
<g>
<title>one.nio.http.Response (449 samples, 0.15%)</title><rect x="209.8" y="195.0" width="1.8" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="212.8" y="206.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1,382 samples, 0.46%)</title><rect x="211.6" y="195.0" width="5.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="214.6" y="206.0"></text>
</g>
<g>
<title>byte[] (473 samples, 0.16%)</title><rect x="211.6" y="179.0" width="1.8" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="214.6" y="190.0"></text>
</g>
<g>
<title>java.lang.String[] (471 samples, 0.16%)</title><rect x="213.5" y="179.0" width="1.8" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="216.5" y="190.0"></text>
</g>
<g>
<title>java.lang.String (416 samples, 0.14%)</title><rect x="215.4" y="179.0" width="1.6" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="218.4" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/dogm/RocksDAO.upsertWithTimestamp (804 samples, 0.27%)</title><rect x="217.0" y="195.0" width="3.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="220.0" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/dogm/ByteBufferUtils.restoreByteArray (325 samples, 0.11%)</title><rect x="217.0" y="179.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="220.0" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/dogm/ByteBufferUtils.getByteArray (325 samples, 0.11%)</title><rect x="217.0" y="163.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="220.0" y="174.0"></text>
</g>
<g>
<title>byte[] (318 samples, 0.11%)</title><rect x="217.0" y="147.0" width="1.3" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="220.0" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/dogm/DataWithTimestamp.toBytes (479 samples, 0.16%)</title><rect x="218.3" y="179.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="221.3" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (479 samples, 0.16%)</title><rect x="218.3" y="163.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="221.3" y="174.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (479 samples, 0.16%)</title><rect x="218.3" y="147.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="221.3" y="158.0"></text>
</g>
<g>
<title>byte[] (470 samples, 0.16%)</title><rect x="218.3" y="131.0" width="1.9" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="221.3" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dogm/processors/SimpleRequestProcessor.processEntityRemotely (122,584 samples, 40.88%)</title><rect x="220.2" y="211.0" width="482.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="223.2" y="222.0">ru/mail/polis/service/dogm/processors/SimpleRequestProcessor.proce..</text>
</g>
<g>
<title>ru/mail/polis/service/dogm/Bridges.sendRequestTo (122,584 samples, 40.88%)</title><rect x="220.2" y="195.0" width="482.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="223.2" y="206.0">ru/mail/polis/service/dogm/Bridges.sendRequestTo</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (122,584 samples, 40.88%)</title><rect x="220.2" y="179.0" width="482.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="223.2" y="190.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (122,584 samples, 40.88%)</title><rect x="220.2" y="163.0" width="482.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="223.2" y="174.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one.nio.http.HttpClient$ResponseReader (1,038 samples, 0.35%)</title><rect x="220.2" y="147.0" width="4.1" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="223.2" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (107,953 samples, 36.00%)</title><rect x="224.3" y="147.0" width="424.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="227.3" y="158.0">one/nio/http/HttpClient$ResponseReader.&lt;init&gt;</text>
</g>
<g>
<title>byte[] (12,942 samples, 4.32%)</title><rect x="224.3" y="131.0" width="51.0" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="227.3" y="142.0">byte[]</text>
</g>
<g>
<title>byte[] (95,011 samples, 31.68%)</title><rect x="275.3" y="131.0" width="373.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="278.3" y="142.0">byte[]</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (4,891 samples, 1.63%)</title><rect x="649.1" y="147.0" width="19.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="652.1" y="158.0"></text>
</g>
<g>
<title>byte[] (479 samples, 0.16%)</title><rect x="649.1" y="131.0" width="1.9" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="652.1" y="142.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (3,103 samples, 1.03%)</title><rect x="651.0" y="131.0" width="12.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="654.0" y="142.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3,103 samples, 1.03%)</title><rect x="651.0" y="115.0" width="12.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="654.0" y="126.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3,103 samples, 1.03%)</title><rect x="651.0" y="99.0" width="12.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="654.0" y="110.0"></text>
</g>
<g>
<title>char[] (1,475 samples, 0.49%)</title><rect x="651.0" y="83.0" width="5.9" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="654.0" y="94.0"></text>
</g>
<g>
<title>java.lang.String (715 samples, 0.24%)</title><rect x="656.9" y="83.0" width="2.8" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="659.9" y="94.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (907 samples, 0.30%)</title><rect x="659.7" y="83.0" width="3.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="662.7" y="94.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (907 samples, 0.30%)</title><rect x="659.7" y="67.0" width="3.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="662.7" y="78.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (907 samples, 0.30%)</title><rect x="659.7" y="51.0" width="3.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="662.7" y="62.0"></text>
</g>
<g>
<title>byte[] (903 samples, 0.30%)</title><rect x="659.7" y="35.0" width="3.5" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="662.7" y="46.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (1,297 samples, 0.43%)</title><rect x="663.3" y="131.0" width="5.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="666.3" y="142.0"></text>
</g>
<g>
<title>java/lang/String.substring (1,297 samples, 0.43%)</title><rect x="663.3" y="115.0" width="5.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="666.3" y="126.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1,297 samples, 0.43%)</title><rect x="663.3" y="99.0" width="5.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="666.3" y="110.0"></text>
</g>
<g>
<title>java.lang.String (806 samples, 0.27%)</title><rect x="663.3" y="83.0" width="3.1" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="666.3" y="94.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (488 samples, 0.16%)</title><rect x="666.4" y="83.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="669.4" y="94.0"></text>
</g>
<g>
<title>byte[] (484 samples, 0.16%)</title><rect x="666.4" y="67.0" width="1.9" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="669.4" y="78.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (3,786 samples, 1.26%)</title><rect x="668.4" y="147.0" width="14.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="671.4" y="158.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (3,786 samples, 1.26%)</title><rect x="668.4" y="131.0" width="14.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="671.4" y="142.0"></text>
</g>
<g>
<title>byte[] (3,769 samples, 1.26%)</title><rect x="668.4" y="115.0" width="14.8" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="671.4" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (1,477 samples, 0.49%)</title><rect x="683.3" y="147.0" width="5.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="686.3" y="158.0"></text>
</g>
<g>
<title>java/lang/String.substring (1,477 samples, 0.49%)</title><rect x="683.3" y="131.0" width="5.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="686.3" y="142.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1,477 samples, 0.49%)</title><rect x="683.3" y="115.0" width="5.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="686.3" y="126.0"></text>
</g>
<g>
<title>java.lang.String (696 samples, 0.23%)</title><rect x="683.3" y="99.0" width="2.7" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="686.3" y="110.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (776 samples, 0.26%)</title><rect x="686.0" y="99.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="689.0" y="110.0"></text>
</g>
<g>
<title>byte[] (767 samples, 0.26%)</title><rect x="686.0" y="83.0" width="3.0" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="689.0" y="94.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.writeFully (2,577 samples, 0.86%)</title><rect x="689.1" y="147.0" width="10.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="692.1" y="158.0"></text>
</g>
<g>
<title>java/nio/channels/Channels$1.write (1,367 samples, 0.46%)</title><rect x="689.1" y="131.0" width="5.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="692.1" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1,367 samples, 0.46%)</title><rect x="689.1" y="115.0" width="5.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="692.1" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1,367 samples, 0.46%)</title><rect x="689.1" y="99.0" width="5.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="692.1" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,348 samples, 0.45%)</title><rect x="689.1" y="83.0" width="5.3" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="692.1" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor.getOutputStream (1,210 samples, 0.40%)</title><rect x="694.4" y="131.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="697.4" y="142.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (703 samples, 0.23%)</title><rect x="694.4" y="115.0" width="2.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="697.4" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor$2.run (703 samples, 0.23%)</title><rect x="694.4" y="99.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="697.4" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor$2.run (703 samples, 0.23%)</title><rect x="694.4" y="83.0" width="2.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="697.4" y="94.0"></text>
</g>
<g>
<title>java/nio/channels/Channels.newOutputStream (703 samples, 0.23%)</title><rect x="694.4" y="67.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="697.4" y="78.0"></text>
</g>
<g>
<title>java.nio.channels.Channels$1 (688 samples, 0.23%)</title><rect x="694.4" y="51.0" width="2.8" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="697.4" y="62.0"></text>
</g>
<g>
<title>sun.nio.ch.SocketAdaptor$2 (493 samples, 0.16%)</title><rect x="697.2" y="115.0" width="2.0" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="700.2" y="126.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (845 samples, 0.28%)</title><rect x="699.2" y="147.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="702.2" y="158.0"></text>
</g>
<g>
<title>java/util/LinkedList.addFirst (845 samples, 0.28%)</title><rect x="699.2" y="131.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="702.2" y="142.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkFirst (845 samples, 0.28%)</title><rect x="699.2" y="115.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="702.2" y="126.0"></text>
</g>
<g>
<title>java.util.LinkedList$Node (835 samples, 0.28%)</title><rect x="699.2" y="99.0" width="3.3" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="702.2" y="110.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (123,885 samples, 41.31%)</title><rect x="702.5" y="371.0" width="487.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="705.5" y="382.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (11,440 samples, 3.81%)</title><rect x="702.5" y="355.0" width="45.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="705.5" y="366.0">one/..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (7,058 samples, 2.35%)</title><rect x="702.5" y="339.0" width="27.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="705.5" y="350.0">o..</text>
</g>
<g>
<title>one.nio.net.JavaSelector$1 (860 samples, 0.29%)</title><rect x="702.5" y="323.0" width="3.4" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="705.5" y="334.0"></text>
</g>
<g>
<title>one.nio.net.Session[] (6,152 samples, 2.05%)</title><rect x="706.0" y="323.0" width="24.2" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="709.0" y="334.0">o..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (4,382 samples, 1.46%)</title><rect x="730.3" y="339.0" width="17.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="733.3" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (4,382 samples, 1.46%)</title><rect x="730.3" y="323.0" width="17.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="733.3" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (4,382 samples, 1.46%)</title><rect x="730.3" y="307.0" width="17.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="733.3" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.processEvents (4,382 samples, 1.46%)</title><rect x="730.3" y="291.0" width="17.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="733.3" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (4,382 samples, 1.46%)</title><rect x="730.3" y="275.0" width="17.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="733.3" y="286.0"></text>
</g>
<g>
<title>java/util/HashSet.add (4,382 samples, 1.46%)</title><rect x="730.3" y="259.0" width="17.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="733.3" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap.put (4,382 samples, 1.46%)</title><rect x="730.3" y="243.0" width="17.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="733.3" y="254.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (4,382 samples, 1.46%)</title><rect x="730.3" y="227.0" width="17.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="733.3" y="238.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (4,382 samples, 1.46%)</title><rect x="730.3" y="211.0" width="17.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="733.3" y="222.0"></text>
</g>
<g>
<title>java.util.HashMap$Node (4,369 samples, 1.46%)</title><rect x="730.3" y="195.0" width="17.2" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="733.3" y="206.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (112,445 samples, 37.50%)</title><rect x="747.5" y="355.0" width="442.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="750.5" y="366.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (112,445 samples, 37.50%)</title><rect x="747.5" y="339.0" width="442.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="750.5" y="350.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (112,440 samples, 37.49%)</title><rect x="747.5" y="323.0" width="442.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="750.5" y="334.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (28,983 samples, 9.66%)</title><rect x="747.5" y="307.0" width="114.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="750.5" y="318.0">one/nio/http/H..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (28,983 samples, 9.66%)</title><rect x="747.5" y="291.0" width="114.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="750.5" y="302.0">one/nio/http/H..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (21,865 samples, 7.29%)</title><rect x="747.5" y="275.0" width="86.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="750.5" y="286.0">RequestHan..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2,643 samples, 0.88%)</title><rect x="747.5" y="259.0" width="10.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="750.5" y="270.0"></text>
</g>
<g>
<title>java/lang/String.substring (2,643 samples, 0.88%)</title><rect x="747.5" y="243.0" width="10.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="750.5" y="254.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2,643 samples, 0.88%)</title><rect x="747.5" y="227.0" width="10.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="750.5" y="238.0"></text>
</g>
<g>
<title>java.lang.String (1,106 samples, 0.37%)</title><rect x="747.5" y="211.0" width="4.4" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="750.5" y="222.0"></text>
</g>
<g>
<title>java.lang.String (105 samples, 0.04%)</title><rect x="751.9" y="211.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="754.9" y="222.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1,432 samples, 0.48%)</title><rect x="752.3" y="211.0" width="5.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="755.3" y="222.0"></text>
</g>
<g>
<title>byte[] (1,329 samples, 0.44%)</title><rect x="752.3" y="195.0" width="5.2" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="755.3" y="206.0"></text>
</g>
<g>
<title>byte[] (103 samples, 0.03%)</title><rect x="757.5" y="195.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="760.5" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ServiceImpl.entity (19,222 samples, 6.41%)</title><rect x="757.9" y="259.0" width="75.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="760.9" y="270.0">ru/mail/..</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/33335784.linkToTargetMethod (8,685 samples, 2.90%)</title><rect x="757.9" y="243.0" width="34.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="760.9" y="254.0">ja..</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/9804078.invokeStatic (8,685 samples, 2.90%)</title><rect x="757.9" y="227.0" width="34.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="760.9" y="238.0">ja..</text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ServiceImpl$$Lambda$66/25175452.get$Lambda (8,685 samples, 2.90%)</title><rect x="757.9" y="211.0" width="34.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="760.9" y="222.0">ru..</text>
</g>
<g>
<title>ru.mail.polis.service.dogm.ServiceImpl$$Lambda$66 (8,547 samples, 2.85%)</title><rect x="757.9" y="195.0" width="33.7" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="760.9" y="206.0">ru..</text>
</g>
<g>
<title>ru.mail.polis.service.dogm.ServiceImpl$$Lambda$66 (138 samples, 0.05%)</title><rect x="791.6" y="195.0" width="0.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="794.6" y="206.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (8,139 samples, 2.71%)</title><rect x="792.1" y="243.0" width="32.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="795.1" y="254.0">on..</text>
</g>
<g>
<title>java/lang/String.substring (8,139 samples, 2.71%)</title><rect x="792.1" y="227.0" width="32.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="795.1" y="238.0">ja..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (8,139 samples, 2.71%)</title><rect x="792.1" y="211.0" width="32.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="795.1" y="222.0">ja..</text>
</g>
<g>
<title>java.lang.String (2,687 samples, 0.90%)</title><rect x="792.1" y="195.0" width="10.6" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="795.1" y="206.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (5,391 samples, 1.80%)</title><rect x="802.9" y="195.0" width="21.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="805.9" y="206.0">j..</text>
</g>
<g>
<title>byte[] (5,305 samples, 1.77%)</title><rect x="802.9" y="179.0" width="20.9" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="805.9" y="190.0"></text>
</g>
<g>
<title>byte[] (86 samples, 0.03%)</title><rect x="823.8" y="179.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="826.8" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ReplicasFraction.one (87 samples, 0.03%)</title><rect x="824.1" y="243.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="827.1" y="254.0"></text>
</g>
<g>
<title>ru.mail.polis.service.dogm.ReplicasFraction (74 samples, 0.02%)</title><rect x="824.2" y="227.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="827.2" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ReplicasFraction.parse (146 samples, 0.05%)</title><rect x="824.5" y="243.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="827.5" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ReplicasFraction.quorumSized (146 samples, 0.05%)</title><rect x="824.5" y="227.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="827.5" y="238.0"></text>
</g>
<g>
<title>ru.mail.polis.service.dogm.ReplicasFraction (107 samples, 0.04%)</title><rect x="824.5" y="211.0" width="0.4" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="827.5" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ServiceImpl.executeAsync (2,165 samples, 0.72%)</title><rect x="825.1" y="243.0" width="8.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="828.1" y="254.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1,638 samples, 0.55%)</title><rect x="825.1" y="227.0" width="6.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="828.1" y="238.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1,638 samples, 0.55%)</title><rect x="825.1" y="211.0" width="6.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="828.1" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ServiceImpl$$Lambda$67/23099948.get$Lambda (1,638 samples, 0.55%)</title><rect x="825.1" y="195.0" width="6.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="828.1" y="206.0"></text>
</g>
<g>
<title>ru.mail.polis.service.dogm.ServiceImpl$$Lambda$67 (1,512 samples, 0.50%)</title><rect x="825.1" y="179.0" width="5.9" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="828.1" y="190.0"></text>
</g>
<g>
<title>ru.mail.polis.service.dogm.ServiceImpl$$Lambda$67 (126 samples, 0.04%)</title><rect x="831.0" y="179.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="834.0" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (527 samples, 0.18%)</title><rect x="831.5" y="227.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="834.5" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (527 samples, 0.18%)</title><rect x="831.5" y="211.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="834.5" y="222.0"></text>
</g>
<g>
<title>java.util.concurrent.LinkedBlockingQueue$Node (397 samples, 0.13%)</title><rect x="831.5" y="195.0" width="1.6" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="834.5" y="206.0"></text>
</g>
<g>
<title>java.util.concurrent.LinkedBlockingQueue$Node (123 samples, 0.04%)</title><rect x="833.1" y="195.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="836.1" y="206.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (7,118 samples, 2.37%)</title><rect x="833.6" y="275.0" width="28.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="836.6" y="286.0">on..</text>
</g>
<g>
<title>java/lang/String.substring (7,118 samples, 2.37%)</title><rect x="833.6" y="259.0" width="28.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="836.6" y="270.0">ja..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (7,118 samples, 2.37%)</title><rect x="833.6" y="243.0" width="28.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="836.6" y="254.0">ja..</text>
</g>
<g>
<title>java.lang.String (6,257 samples, 2.09%)</title><rect x="833.6" y="227.0" width="24.6" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="836.6" y="238.0">j..</text>
</g>
<g>
<title>java.lang.String (116 samples, 0.04%)</title><rect x="858.2" y="227.0" width="0.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="861.2" y="238.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (745 samples, 0.25%)</title><rect x="858.7" y="227.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="861.7" y="238.0"></text>
</g>
<g>
<title>byte[] (636 samples, 0.21%)</title><rect x="858.7" y="211.0" width="2.5" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="861.7" y="222.0"></text>
</g>
<g>
<title>byte[] (109 samples, 0.04%)</title><rect x="861.2" y="211.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="864.2" y="222.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (33,949 samples, 11.32%)</title><rect x="861.6" y="307.0" width="133.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="864.6" y="318.0">one/nio/http/Http..</text>
</g>
<g>
<title>one.nio.http.Request (7,664 samples, 2.56%)</title><rect x="861.6" y="291.0" width="30.1" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="864.6" y="302.0">on..</text>
</g>
<g>
<title>one.nio.http.Request (73 samples, 0.02%)</title><rect x="891.7" y="291.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="894.7" y="302.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (12,258 samples, 4.09%)</title><rect x="892.0" y="291.0" width="48.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="895.0" y="302.0">one/..</text>
</g>
<g>
<title>java.lang.String[] (5,164 samples, 1.72%)</title><rect x="892.0" y="275.0" width="20.4" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="895.0" y="286.0"></text>
</g>
<g>
<title>java.lang.String[] (7,094 samples, 2.37%)</title><rect x="912.4" y="275.0" width="27.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="915.4" y="286.0">j..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (13,954 samples, 4.65%)</title><rect x="940.3" y="291.0" width="54.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="943.3" y="302.0">one/n..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (13,954 samples, 4.65%)</title><rect x="940.3" y="275.0" width="54.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="943.3" y="286.0">one/n..</text>
</g>
<g>
<title>char[] (2,206 samples, 0.74%)</title><rect x="940.3" y="259.0" width="8.6" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="943.3" y="270.0"></text>
</g>
<g>
<title>char[] (355 samples, 0.12%)</title><rect x="948.9" y="259.0" width="1.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="951.9" y="270.0"></text>
</g>
<g>
<title>java.lang.String (8,310 samples, 2.77%)</title><rect x="950.3" y="259.0" width="32.7" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="953.3" y="270.0">ja..</text>
</g>
<g>
<title>java.lang.String (68 samples, 0.02%)</title><rect x="983.0" y="259.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="986.0" y="270.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3,015 samples, 1.01%)</title><rect x="983.3" y="259.0" width="11.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="986.3" y="270.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3,015 samples, 1.01%)</title><rect x="983.3" y="243.0" width="11.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="986.3" y="254.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (3,015 samples, 1.01%)</title><rect x="983.3" y="227.0" width="11.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="986.3" y="238.0"></text>
</g>
<g>
<title>byte[] (2,956 samples, 0.99%)</title><rect x="983.3" y="211.0" width="11.6" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="986.3" y="222.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (1,578 samples, 0.53%)</title><rect x="995.2" y="307.0" width="6.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="998.2" y="318.0"></text>
</g>
<g>
<title>byte[] (1,464 samples, 0.49%)</title><rect x="995.2" y="291.0" width="5.7" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="998.2" y="302.0"></text>
</g>
<g>
<title>byte[] (114 samples, 0.04%)</title><rect x="1000.9" y="291.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1003.9" y="302.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2,351 samples, 0.78%)</title><rect x="1001.4" y="307.0" width="9.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1004.4" y="318.0"></text>
</g>
<g>
<title>java/lang/String.substring (2,351 samples, 0.78%)</title><rect x="1001.4" y="291.0" width="9.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1004.4" y="302.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2,351 samples, 0.78%)</title><rect x="1001.4" y="275.0" width="9.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1004.4" y="286.0"></text>
</g>
<g>
<title>java.lang.String (1,639 samples, 0.55%)</title><rect x="1001.4" y="259.0" width="6.4" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="1004.4" y="270.0"></text>
</g>
<g>
<title>java.lang.String (118 samples, 0.04%)</title><rect x="1007.8" y="259.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1010.8" y="270.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (594 samples, 0.20%)</title><rect x="1008.3" y="259.0" width="2.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1011.3" y="270.0"></text>
</g>
<g>
<title>byte[] (477 samples, 0.16%)</title><rect x="1008.3" y="243.0" width="1.9" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="1011.3" y="254.0"></text>
</g>
<g>
<title>byte[] (117 samples, 0.04%)</title><rect x="1010.2" y="243.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1013.2" y="254.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (45,579 samples, 15.20%)</title><rect x="1010.6" y="307.0" width="179.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1013.6" y="318.0">one/nio/util/Utf8.read</text>
</g>
<g>
<title>one/nio/util/Utf8.read (45,579 samples, 15.20%)</title><rect x="1010.6" y="291.0" width="179.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1013.6" y="302.0">one/nio/util/Utf8.read</text>
</g>
<g>
<title>char[] (19,127 samples, 6.38%)</title><rect x="1010.6" y="275.0" width="75.3" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="1013.6" y="286.0">char[]</text>
</g>
<g>
<title>char[] (443 samples, 0.15%)</title><rect x="1085.9" y="275.0" width="1.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1088.9" y="286.0"></text>
</g>
<g>
<title>java.lang.String (15,545 samples, 5.18%)</title><rect x="1087.6" y="275.0" width="61.2" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="1090.6" y="286.0">java.l..</text>
</g>
<g>
<title>java.lang.String (292 samples, 0.10%)</title><rect x="1148.8" y="275.0" width="1.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1151.8" y="286.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (10,172 samples, 3.39%)</title><rect x="1150.0" y="275.0" width="40.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1153.0" y="286.0">jav..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (10,172 samples, 3.39%)</title><rect x="1150.0" y="259.0" width="40.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1153.0" y="270.0">jav..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (10,172 samples, 3.39%)</title><rect x="1150.0" y="243.0" width="40.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1153.0" y="254.0">jav..</text>
</g>
<g>
<title>byte[] (9,879 samples, 3.29%)</title><rect x="1150.0" y="227.0" width="38.8" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="1153.0" y="238.0">byt..</text>
</g>
<g>
<title>byte[] (293 samples, 0.10%)</title><rect x="1188.8" y="227.0" width="1.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1191.8" y="238.0"></text>
</g>
</g>
</svg>
