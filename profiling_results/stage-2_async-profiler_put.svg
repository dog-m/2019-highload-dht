<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1094" onload="init(evt)" viewBox="0 0 1200 1094" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1077"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1077"> </text>
<g id="frames">
<g>
<title>all (3,175 samples, 100.00%)</title><rect x="10.0" y="1043.0" width="1180.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="13.0" y="1054.0">all</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (2 samples, 0.06%)</title><rect x="10.0" y="1027.0" width="0.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (2 samples, 0.06%)</title><rect x="10.0" y="1011.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.06%)</title><rect x="10.0" y="995.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.06%)</title><rect x="10.0" y="979.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.06%)</title><rect x="10.0" y="963.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (2 samples, 0.06%)</title><rect x="10.0" y="947.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned int, rocksdb::PreReleaseCallback*) (2 samples, 0.06%)</title><rect x="10.0" y="931.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (2 samples, 0.06%)</title><rect x="10.0" y="915.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (2 samples, 0.06%)</title><rect x="10.0" y="899.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.06%)</title><rect x="10.0" y="883.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (2 samples, 0.06%)</title><rect x="10.0" y="867.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (2 samples, 0.06%)</title><rect x="10.0" y="851.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni17072222630024017723.so (2 samples, 0.06%)</title><rect x="10.0" y="835.0" width="0.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (2 samples, 0.06%)</title><rect x="10.0" y="819.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni17072222630024017723.so (2 samples, 0.06%)</title><rect x="10.0" y="803.0" width="0.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (2 samples, 0.06%)</title><rect x="10.0" y="787.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (2 samples, 0.06%)</title><rect x="10.0" y="771.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (2 samples, 0.06%)</title><rect x="10.0" y="755.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (2 samples, 0.06%)</title><rect x="10.0" y="739.0" width="0.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.141] (2 samples, 0.06%)</title><rect x="10.0" y="723.0" width="0.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.06%)</title><rect x="10.0" y="707.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>.L409 (2 samples, 0.06%)</title><rect x="10.0" y="691.0" width="0.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="10.7" y="1027.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.7" y="1038.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray_nozero(BasicType, int, Thread*) (1 samples, 0.03%)</title><rect x="10.7" y="1011.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.7" y="1022.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="10.7" y="995.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.7" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="10.7" y="979.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.7" y="990.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="10.7" y="963.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.7" y="974.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned int, unsigned int, Thread*) (1 samples, 0.03%)</title><rect x="10.7" y="947.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.7" y="958.0"></text>
</g>
<g>
<title>[not_walkable_Java] (7 samples, 0.22%)</title><rect x="11.1" y="1027.0" width="2.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="14.1" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.03%)</title><rect x="11.1" y="1011.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="14.1" y="1022.0"></text>
</g>
<g>
<title>Thread::current() (2 samples, 0.06%)</title><rect x="11.5" y="1011.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="14.5" y="1022.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (4 samples, 0.13%)</title><rect x="12.2" y="1011.0" width="1.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="15.2" y="1022.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.06%)</title><rect x="13.7" y="1027.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="16.7" y="1038.0"></text>
</g>
<g>
<title>__kernel_vsyscall (1 samples, 0.03%)</title><rect x="13.7" y="1011.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="16.7" y="1022.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (1 samples, 0.03%)</title><rect x="13.7" y="995.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="16.7" y="1006.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (1 samples, 0.03%)</title><rect x="13.7" y="979.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="16.7" y="990.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="13.7" y="963.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="16.7" y="974.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="13.7" y="947.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="16.7" y="958.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.03%)</title><rect x="13.7" y="931.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="16.7" y="942.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="13.7" y="915.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="16.7" y="926.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="14.1" y="1011.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="17.1" y="1022.0"></text>
</g>
<g>
<title>[unknown_Java] (154 samples, 4.85%)</title><rect x="14.5" y="1027.0" width="57.2" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="17.5" y="1038.0">[unkno..</text>
</g>
<g>
<title>Thread::current() (1 samples, 0.03%)</title><rect x="57.9" y="1011.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="60.9" y="1022.0"></text>
</g>
<g>
<title>[unknown] (32 samples, 1.01%)</title><rect x="58.3" y="1011.0" width="11.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="61.3" y="1022.0"></text>
</g>
<g>
<title>Thread::current() (7 samples, 0.22%)</title><rect x="58.3" y="995.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="61.3" y="1006.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (25 samples, 0.79%)</title><rect x="60.9" y="995.0" width="9.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="63.9" y="1006.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.03%)</title><rect x="70.2" y="1011.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="73.2" y="1022.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="70.2" y="995.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="73.2" y="1006.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.03%)</title><rect x="70.2" y="979.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="73.2" y="990.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.03%)</title><rect x="70.2" y="963.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="73.2" y="974.0"></text>
</g>
<g>
<title>call_on_stack (1 samples, 0.03%)</title><rect x="70.2" y="947.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="73.2" y="958.0"></text>
</g>
<g>
<title>__do_softirq (1 samples, 0.03%)</title><rect x="70.2" y="931.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="73.2" y="942.0"></text>
</g>
<g>
<title>run_rebalance_domains (1 samples, 0.03%)</title><rect x="70.2" y="915.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="73.2" y="926.0"></text>
</g>
<g>
<title>rebalance_domains (1 samples, 0.03%)</title><rect x="70.2" y="899.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="73.2" y="910.0"></text>
</g>
<g>
<title>update_blocked_averages (1 samples, 0.03%)</title><rect x="70.2" y="883.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="73.2" y="894.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="70.2" y="867.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="73.2" y="878.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.06%)</title><rect x="70.6" y="1011.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="73.6" y="1022.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="71.3" y="1011.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="74.3" y="1022.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="71.3" y="995.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="74.3" y="1006.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="71.3" y="979.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="74.3" y="990.0"></text>
</g>
<g>
<title>clone (22 samples, 0.69%)</title><rect x="71.7" y="1027.0" width="8.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="74.7" y="1038.0"></text>
</g>
<g>
<title>start_thread (22 samples, 0.69%)</title><rect x="71.7" y="1011.0" width="8.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="74.7" y="1022.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (22 samples, 0.69%)</title><rect x="71.7" y="995.0" width="8.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="74.7" y="1006.0"></text>
</g>
<g>
<title>Thread::call_run() (22 samples, 0.69%)</title><rect x="71.7" y="979.0" width="8.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="74.7" y="990.0"></text>
</g>
<g>
<title>VMThread::run() (14 samples, 0.44%)</title><rect x="71.7" y="963.0" width="5.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="74.7" y="974.0"></text>
</g>
<g>
<title>VMThread::loop() (14 samples, 0.44%)</title><rect x="71.7" y="947.0" width="5.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="74.7" y="958.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (6 samples, 0.19%)</title><rect x="71.7" y="931.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="74.7" y="942.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long long) (6 samples, 0.19%)</title><rect x="71.7" y="915.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="74.7" y="926.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.03%)</title><rect x="71.7" y="899.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="74.7" y="910.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="71.7" y="883.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="74.7" y="894.0"></text>
</g>
<g>
<title>__kernel_vsyscall (1 samples, 0.03%)</title><rect x="71.7" y="867.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="74.7" y="878.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (1 samples, 0.03%)</title><rect x="71.7" y="851.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="74.7" y="862.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (1 samples, 0.03%)</title><rect x="71.7" y="835.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="74.7" y="846.0"></text>
</g>
<g>
<title>__kernel_vsyscall (4 samples, 0.13%)</title><rect x="72.1" y="899.0" width="1.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="75.1" y="910.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (3 samples, 0.09%)</title><rect x="72.4" y="883.0" width="1.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="75.4" y="894.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (3 samples, 0.09%)</title><rect x="72.4" y="867.0" width="1.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="75.4" y="878.0"></text>
</g>
<g>
<title>sys_futex (3 samples, 0.09%)</title><rect x="72.4" y="851.0" width="1.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="75.4" y="862.0"></text>
</g>
<g>
<title>do_futex (3 samples, 0.09%)</title><rect x="72.4" y="835.0" width="1.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="75.4" y="846.0"></text>
</g>
<g>
<title>futex_wait (2 samples, 0.06%)</title><rect x="72.8" y="819.0" width="0.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="75.8" y="830.0"></text>
</g>
<g>
<title>futex_wait_queue_me (1 samples, 0.03%)</title><rect x="72.8" y="803.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="75.8" y="814.0"></text>
</g>
<g>
<title>hrtimer_start_range_ns (1 samples, 0.03%)</title><rect x="72.8" y="787.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="75.8" y="798.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="72.8" y="771.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="75.8" y="782.0"></text>
</g>
<g>
<title>hrtimer_init (1 samples, 0.03%)</title><rect x="73.2" y="803.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="76.2" y="814.0"></text>
</g>
<g>
<title>__hrtimer_init (1 samples, 0.03%)</title><rect x="73.2" y="787.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="76.2" y="798.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.ax (1 samples, 0.03%)</title><rect x="73.6" y="899.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="76.6" y="910.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (3 samples, 0.09%)</title><rect x="73.9" y="931.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="76.9" y="942.0"></text>
</g>
<g>
<title>RuntimeService::record_safepoint_synchronized() (1 samples, 0.03%)</title><rect x="73.9" y="915.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="76.9" y="926.0"></text>
</g>
<g>
<title>TimeStamp::ticks_since_update() const (1 samples, 0.03%)</title><rect x="73.9" y="899.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="76.9" y="910.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.03%)</title><rect x="73.9" y="883.0" width="0.4" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="76.9" y="894.0"></text>
</g>
<g>
<title>__kernel_vsyscall (1 samples, 0.03%)</title><rect x="73.9" y="867.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="76.9" y="878.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (1 samples, 0.03%)</title><rect x="73.9" y="851.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="76.9" y="862.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (1 samples, 0.03%)</title><rect x="73.9" y="835.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="76.9" y="846.0"></text>
</g>
<g>
<title>sys_clock_gettime (1 samples, 0.03%)</title><rect x="73.9" y="819.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="76.9" y="830.0"></text>
</g>
<g>
<title>posix_ktime_get_ts (1 samples, 0.03%)</title><rect x="73.9" y="803.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="76.9" y="814.0"></text>
</g>
<g>
<title>ktime_get_ts64 (1 samples, 0.03%)</title><rect x="73.9" y="787.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="76.9" y="798.0"></text>
</g>
<g>
<title>__kernel_vsyscall (1 samples, 0.03%)</title><rect x="74.3" y="915.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="77.3" y="926.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (1 samples, 0.03%)</title><rect x="74.3" y="899.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="77.3" y="910.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (1 samples, 0.03%)</title><rect x="74.3" y="883.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="77.3" y="894.0"></text>
</g>
<g>
<title>sys_mprotect (1 samples, 0.03%)</title><rect x="74.3" y="867.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="77.3" y="878.0"></text>
</g>
<g>
<title>mprotect_fixup (1 samples, 0.03%)</title><rect x="74.3" y="851.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="77.3" y="862.0"></text>
</g>
<g>
<title>change_protection (1 samples, 0.03%)</title><rect x="74.3" y="835.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="77.3" y="846.0"></text>
</g>
<g>
<title>change_protection_range (1 samples, 0.03%)</title><rect x="74.3" y="819.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="77.3" y="830.0"></text>
</g>
<g>
<title>flush_tlb_mm_range (1 samples, 0.03%)</title><rect x="74.3" y="803.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="77.3" y="814.0"></text>
</g>
<g>
<title>native_flush_tlb_others (1 samples, 0.03%)</title><rect x="74.3" y="787.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="77.3" y="798.0"></text>
</g>
<g>
<title>smp_call_function_many (1 samples, 0.03%)</title><rect x="74.3" y="771.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="77.3" y="782.0"></text>
</g>
<g>
<title>smp_call_function_single (1 samples, 0.03%)</title><rect x="74.3" y="755.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="77.3" y="766.0"></text>
</g>
<g>
<title>nanosleep (1 samples, 0.03%)</title><rect x="74.7" y="915.0" width="0.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="77.7" y="926.0"></text>
</g>
<g>
<title>SafepointSynchronize::end() (1 samples, 0.03%)</title><rect x="75.0" y="931.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="78.0" y="942.0"></text>
</g>
<g>
<title>__kernel_vsyscall (1 samples, 0.03%)</title><rect x="75.0" y="915.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="78.0" y="926.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (1 samples, 0.03%)</title><rect x="75.0" y="899.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="78.0" y="910.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (1 samples, 0.03%)</title><rect x="75.0" y="883.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="78.0" y="894.0"></text>
</g>
<g>
<title>sys_mprotect (1 samples, 0.03%)</title><rect x="75.0" y="867.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="78.0" y="878.0"></text>
</g>
<g>
<title>mprotect_fixup (1 samples, 0.03%)</title><rect x="75.0" y="851.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="78.0" y="862.0"></text>
</g>
<g>
<title>change_protection (1 samples, 0.03%)</title><rect x="75.0" y="835.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="78.0" y="846.0"></text>
</g>
<g>
<title>change_protection_range (1 samples, 0.03%)</title><rect x="75.0" y="819.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="78.0" y="830.0"></text>
</g>
<g>
<title>flush_tlb_mm_range (1 samples, 0.03%)</title><rect x="75.0" y="803.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="78.0" y="814.0"></text>
</g>
<g>
<title>native_flush_tlb_others (1 samples, 0.03%)</title><rect x="75.0" y="787.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="78.0" y="798.0"></text>
</g>
<g>
<title>smp_call_function_many (1 samples, 0.03%)</title><rect x="75.0" y="771.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="78.0" y="782.0"></text>
</g>
<g>
<title>smp_call_function_single (1 samples, 0.03%)</title><rect x="75.0" y="755.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="78.0" y="766.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.61] (4 samples, 0.13%)</title><rect x="75.4" y="931.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="78.4" y="942.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (4 samples, 0.13%)</title><rect x="75.4" y="915.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="78.4" y="926.0"></text>
</g>
<g>
<title>VM_GenCollectForAllocation::doit() (4 samples, 0.13%)</title><rect x="75.4" y="899.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="78.4" y="910.0"></text>
</g>
<g>
<title>GenCollectedHeap::satisfy_failed_allocation(unsigned int, bool) (4 samples, 0.13%)</title><rect x="75.4" y="883.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="78.4" y="894.0"></text>
</g>
<g>
<title>GenCollectedHeap::do_collection(bool, bool, unsigned int, bool, GenCollectedHeap::GenerationType) (4 samples, 0.13%)</title><rect x="75.4" y="867.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="78.4" y="878.0"></text>
</g>
<g>
<title>GenCollectedHeap::collect_generation(Generation*, bool, unsigned int, bool, bool, bool, bool) (4 samples, 0.13%)</title><rect x="75.4" y="851.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="78.4" y="862.0"></text>
</g>
<g>
<title>DefNewGeneration::collect(bool, bool, unsigned int, bool) (4 samples, 0.13%)</title><rect x="75.4" y="835.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="78.4" y="846.0"></text>
</g>
<g>
<title>GenCollectedHeap::young_process_roots(StrongRootsScope*, OopsInGenClosure*, OopsInGenClosure*, CLDClosure*, OopStorage::ParState&lt;false, false&gt;*) (2 samples, 0.06%)</title><rect x="75.4" y="819.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="78.4" y="830.0"></text>
</g>
<g>
<title>StringTable::oops_do(OopClosure*) (1 samples, 0.03%)</title><rect x="75.4" y="803.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="78.4" y="814.0"></text>
</g>
<g>
<title>Universe::oops_do(OopClosure*, bool) (1 samples, 0.03%)</title><rect x="75.8" y="803.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="78.8" y="814.0"></text>
</g>
<g>
<title>FastScanClosure::do_oop(oopDesc**) (1 samples, 0.03%)</title><rect x="75.8" y="787.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="78.8" y="798.0"></text>
</g>
<g>
<title>ReferenceProcessorPhaseTimes::~ReferenceProcessorPhaseTimes() (2 samples, 0.06%)</title><rect x="76.2" y="819.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="79.2" y="830.0"></text>
</g>
<g>
<title>free (2 samples, 0.06%)</title><rect x="76.2" y="803.0" width="0.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="79.2" y="814.0"></text>
</g>
<g>
<title>WatcherThread::run() (8 samples, 0.25%)</title><rect x="76.9" y="963.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="79.9" y="974.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (8 samples, 0.25%)</title><rect x="76.9" y="947.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="79.9" y="958.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (7 samples, 0.22%)</title><rect x="76.9" y="931.0" width="2.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="79.9" y="942.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long long) (7 samples, 0.22%)</title><rect x="76.9" y="915.0" width="2.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="79.9" y="926.0"></text>
</g>
<g>
<title>__kernel_vsyscall (4 samples, 0.13%)</title><rect x="77.6" y="899.0" width="1.5" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="80.6" y="910.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (4 samples, 0.13%)</title><rect x="77.6" y="883.0" width="1.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="80.6" y="894.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (4 samples, 0.13%)</title><rect x="77.6" y="867.0" width="1.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="80.6" y="878.0"></text>
</g>
<g>
<title>sys_futex (4 samples, 0.13%)</title><rect x="77.6" y="851.0" width="1.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="80.6" y="862.0"></text>
</g>
<g>
<title>do_futex (4 samples, 0.13%)</title><rect x="77.6" y="835.0" width="1.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="80.6" y="846.0"></text>
</g>
<g>
<title>futex_wait (4 samples, 0.13%)</title><rect x="77.6" y="819.0" width="1.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="80.6" y="830.0"></text>
</g>
<g>
<title>futex_wait_queue_me (4 samples, 0.13%)</title><rect x="77.6" y="803.0" width="1.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="80.6" y="814.0"></text>
</g>
<g>
<title>schedule (4 samples, 0.13%)</title><rect x="77.6" y="787.0" width="1.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="80.6" y="798.0"></text>
</g>
<g>
<title>__sched_text_start (4 samples, 0.13%)</title><rect x="77.6" y="771.0" width="1.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="80.6" y="782.0"></text>
</g>
<g>
<title>finish_task_switch (4 samples, 0.13%)</title><rect x="77.6" y="755.0" width="1.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="80.6" y="766.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.03%)</title><rect x="79.1" y="899.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="82.1" y="910.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.03%)</title><rect x="79.5" y="931.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="82.5" y="942.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="79.5" y="915.0" width="0.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="82.5" y="926.0"></text>
</g>
<g>
<title>__kernel_vsyscall (1 samples, 0.03%)</title><rect x="79.5" y="899.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="82.5" y="910.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (1 samples, 0.03%)</title><rect x="79.5" y="883.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="82.5" y="894.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (1 samples, 0.03%)</title><rect x="79.5" y="867.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="82.5" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.03%)</title><rect x="79.9" y="1027.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="82.9" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.03%)</title><rect x="79.9" y="1011.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="82.9" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="79.9" y="995.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="82.9" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.03%)</title><rect x="79.9" y="979.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="82.9" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="79.9" y="963.0" width="0.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="82.9" y="974.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.03%)</title><rect x="79.9" y="947.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="82.9" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 0.13%)</title><rect x="80.2" y="1027.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="83.2" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.13%)</title><rect x="80.2" y="1011.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="83.2" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (4 samples, 0.13%)</title><rect x="80.2" y="995.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="83.2" y="1006.0"></text>
</g>
<g>
<title>Thread::current() (2 samples, 0.06%)</title><rect x="80.2" y="979.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="83.2" y="990.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (2 samples, 0.06%)</title><rect x="81.0" y="979.0" width="0.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="84.0" y="990.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (2,970 samples, 93.54%)</title><rect x="81.7" y="1027.0" width="1103.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="84.7" y="1038.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.hasNext (65 samples, 2.05%)</title><rect x="95.9" y="1011.0" width="24.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="98.9" y="1022.0">o..</text>
</g>
<g>
<title>os::javaTimeMillis() (58 samples, 1.83%)</title><rect x="98.5" y="995.0" width="21.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="101.5" y="1006.0">o..</text>
</g>
<g>
<title>[unknown] (17 samples, 0.54%)</title><rect x="99.2" y="979.0" width="6.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="102.2" y="990.0"></text>
</g>
<g>
<title>__kernel_vsyscall (17 samples, 0.54%)</title><rect x="99.2" y="963.0" width="6.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="102.2" y="974.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (17 samples, 0.54%)</title><rect x="99.2" y="947.0" width="6.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="102.2" y="958.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (17 samples, 0.54%)</title><rect x="99.2" y="931.0" width="6.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="102.2" y="942.0"></text>
</g>
<g>
<title>__kernel_vsyscall (36 samples, 1.13%)</title><rect x="105.5" y="979.0" width="13.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="108.5" y="990.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (27 samples, 0.85%)</title><rect x="108.9" y="963.0" width="10.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="111.9" y="974.0"></text>
</g>
<g>
<title>__indirect_thunk_start (2 samples, 0.06%)</title><rect x="108.9" y="947.0" width="0.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="111.9" y="958.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (25 samples, 0.79%)</title><rect x="109.6" y="947.0" width="9.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="112.6" y="958.0"></text>
</g>
<g>
<title>sys_gettimeofday (22 samples, 0.69%)</title><rect x="110.7" y="931.0" width="8.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="113.7" y="942.0"></text>
</g>
<g>
<title>_copy_to_user (3 samples, 0.09%)</title><rect x="110.7" y="915.0" width="1.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="113.7" y="926.0"></text>
</g>
<g>
<title>__copy_user_ll (3 samples, 0.09%)</title><rect x="110.7" y="899.0" width="1.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="113.7" y="910.0"></text>
</g>
<g>
<title>do_gettimeofday (19 samples, 0.60%)</title><rect x="111.8" y="915.0" width="7.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="114.8" y="926.0"></text>
</g>
<g>
<title>__getnstimeofday64 (17 samples, 0.54%)</title><rect x="112.2" y="899.0" width="6.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="115.2" y="910.0"></text>
</g>
<g>
<title>kvm_clock_get_cycles (15 samples, 0.47%)</title><rect x="112.9" y="883.0" width="5.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="115.9" y="894.0"></text>
</g>
<g>
<title>pvclock_clocksource_read (15 samples, 0.47%)</title><rect x="112.9" y="867.0" width="5.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="115.9" y="878.0"></text>
</g>
<g>
<title>kvm_clock_get_cycles (1 samples, 0.03%)</title><rect x="118.5" y="899.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="121.5" y="910.0"></text>
</g>
<g>
<title>__vdso_gettimeofday (3 samples, 0.09%)</title><rect x="118.9" y="979.0" width="1.1" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="121.9" y="990.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (331 samples, 10.43%)</title><rect x="120.0" y="1011.0" width="123.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="123.0" y="1022.0">one/nio/net/Jav..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (21 samples, 0.66%)</title><rect x="120.0" y="995.0" width="7.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="123.0" y="1006.0"></text>
</g>
<g>
<title>__clock_gettime (17 samples, 0.54%)</title><rect x="121.1" y="979.0" width="6.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="124.1" y="990.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.13%)</title><rect x="121.9" y="963.0" width="1.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="124.9" y="974.0"></text>
</g>
<g>
<title>__kernel_vsyscall (4 samples, 0.13%)</title><rect x="121.9" y="947.0" width="1.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="124.9" y="958.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (4 samples, 0.13%)</title><rect x="121.9" y="931.0" width="1.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="124.9" y="942.0"></text>
</g>
<g>
<title>__get_user_4 (2 samples, 0.06%)</title><rect x="121.9" y="915.0" width="0.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="124.9" y="926.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (2 samples, 0.06%)</title><rect x="122.6" y="915.0" width="0.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="125.6" y="926.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.03%)</title><rect x="123.4" y="963.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="126.4" y="974.0"></text>
</g>
<g>
<title>__kernel_vsyscall (10 samples, 0.31%)</title><rect x="123.7" y="963.0" width="3.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="126.7" y="974.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (9 samples, 0.28%)</title><rect x="124.1" y="947.0" width="3.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="127.1" y="958.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (8 samples, 0.25%)</title><rect x="124.1" y="931.0" width="3.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="127.1" y="942.0"></text>
</g>
<g>
<title>clockid_to_kclock.part.3 (1 samples, 0.03%)</title><rect x="124.1" y="915.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="127.1" y="926.0"></text>
</g>
<g>
<title>posix_ktime_get_ts (1 samples, 0.03%)</title><rect x="124.5" y="915.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="127.5" y="926.0"></text>
</g>
<g>
<title>put_timespec64 (1 samples, 0.03%)</title><rect x="124.8" y="915.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="127.8" y="926.0"></text>
</g>
<g>
<title>sys_clock_gettime (5 samples, 0.16%)</title><rect x="125.2" y="915.0" width="1.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="128.2" y="926.0"></text>
</g>
<g>
<title>posix_ktime_get_ts (3 samples, 0.09%)</title><rect x="125.6" y="899.0" width="1.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="128.6" y="910.0"></text>
</g>
<g>
<title>ktime_get_ts64 (2 samples, 0.06%)</title><rect x="125.6" y="883.0" width="0.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="128.6" y="894.0"></text>
</g>
<g>
<title>kvm_clock_get_cycles (1 samples, 0.03%)</title><rect x="126.0" y="867.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="129.0" y="878.0"></text>
</g>
<g>
<title>pvclock_clocksource_read (1 samples, 0.03%)</title><rect x="126.0" y="851.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="129.0" y="862.0"></text>
</g>
<g>
<title>kvm_clock_get_cycles (1 samples, 0.03%)</title><rect x="126.3" y="883.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="129.3" y="894.0"></text>
</g>
<g>
<title>put_timespec64 (1 samples, 0.03%)</title><rect x="126.7" y="899.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="129.7" y="910.0"></text>
</g>
<g>
<title>_copy_to_user (1 samples, 0.03%)</title><rect x="126.7" y="883.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="129.7" y="894.0"></text>
</g>
<g>
<title>__copy_user_ll (1 samples, 0.03%)</title><rect x="126.7" y="867.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="129.7" y="878.0"></text>
</g>
<g>
<title>sys_clock_gettime (1 samples, 0.03%)</title><rect x="127.1" y="931.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="130.1" y="942.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.03%)</title><rect x="127.4" y="979.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="130.4" y="990.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (3 samples, 0.09%)</title><rect x="127.8" y="995.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="130.8" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (3 samples, 0.09%)</title><rect x="127.8" y="979.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="130.8" y="990.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (307 samples, 9.67%)</title><rect x="128.9" y="995.0" width="114.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="131.9" y="1006.0">sun/nio/ch/Sel..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (301 samples, 9.48%)</title><rect x="131.2" y="979.0" width="111.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="134.2" y="990.0">sun/nio/ch/Se..</text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (286 samples, 9.01%)</title><rect x="136.7" y="963.0" width="106.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="139.7" y="974.0">sun/nio/ch/EP..</text>
</g>
<g>
<title>java/lang/Math.min (1 samples, 0.03%)</title><rect x="137.1" y="947.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="140.1" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/EPoll.wait (238 samples, 7.50%)</title><rect x="137.5" y="947.0" width="88.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="140.5" y="958.0">sun/nio/ch..</text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (2 samples, 0.06%)</title><rect x="140.1" y="931.0" width="0.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="143.1" y="942.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_EPoll_wait (4 samples, 0.13%)</title><rect x="140.8" y="931.0" width="1.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="143.8" y="942.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.16%)</title><rect x="142.3" y="931.0" width="1.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="145.3" y="942.0"></text>
</g>
<g>
<title>__kernel_vsyscall (5 samples, 0.16%)</title><rect x="142.3" y="915.0" width="1.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="145.3" y="926.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (5 samples, 0.16%)</title><rect x="142.3" y="899.0" width="1.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="145.3" y="910.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (5 samples, 0.16%)</title><rect x="142.3" y="883.0" width="1.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="145.3" y="894.0"></text>
</g>
<g>
<title>__kernel_vsyscall (202 samples, 6.36%)</title><rect x="144.2" y="931.0" width="75.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="147.2" y="942.0">__kernel..</text>
</g>
<g>
<title>entry_SYSENTER_32 (197 samples, 6.20%)</title><rect x="146.0" y="915.0" width="73.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="149.0" y="926.0">entry_SY..</text>
</g>
<g>
<title>do_fast_syscall_32 (196 samples, 6.17%)</title><rect x="146.0" y="899.0" width="72.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="149.0" y="910.0">do_fast_..</text>
</g>
<g>
<title>__fdget (1 samples, 0.03%)</title><rect x="146.0" y="883.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="149.0" y="894.0"></text>
</g>
<g>
<title>ep_poll (1 samples, 0.03%)</title><rect x="146.4" y="883.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="149.4" y="894.0"></text>
</g>
<g>
<title>fput (1 samples, 0.03%)</title><rect x="146.8" y="883.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="149.8" y="894.0"></text>
</g>
<g>
<title>sys_epoll_wait (193 samples, 6.08%)</title><rect x="147.1" y="883.0" width="71.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="150.1" y="894.0">sys_epol..</text>
</g>
<g>
<title>__fdget (13 samples, 0.41%)</title><rect x="150.5" y="867.0" width="4.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="153.5" y="878.0"></text>
</g>
<g>
<title>__fget_light (13 samples, 0.41%)</title><rect x="150.5" y="851.0" width="4.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="153.5" y="862.0"></text>
</g>
<g>
<title>__fget (12 samples, 0.38%)</title><rect x="150.9" y="835.0" width="4.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="153.9" y="846.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.03%)</title><rect x="155.3" y="867.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="158.3" y="878.0"></text>
</g>
<g>
<title>ep_poll (168 samples, 5.29%)</title><rect x="155.7" y="867.0" width="62.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="158.7" y="878.0">ep_poll</text>
</g>
<g>
<title>__lock_text_start (14 samples, 0.44%)</title><rect x="157.2" y="851.0" width="5.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="160.2" y="862.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.03%)</title><rect x="162.0" y="835.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="165.0" y="846.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="162.0" y="819.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="165.0" y="830.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.03%)</title><rect x="162.0" y="803.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="165.0" y="814.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.03%)</title><rect x="162.0" y="787.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="165.0" y="798.0"></text>
</g>
<g>
<title>call_on_stack (1 samples, 0.03%)</title><rect x="162.0" y="771.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="165.0" y="782.0"></text>
</g>
<g>
<title>__do_softirq (1 samples, 0.03%)</title><rect x="162.0" y="755.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="165.0" y="766.0"></text>
</g>
<g>
<title>run_rebalance_domains (1 samples, 0.03%)</title><rect x="162.0" y="739.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="165.0" y="750.0"></text>
</g>
<g>
<title>rebalance_domains (1 samples, 0.03%)</title><rect x="162.0" y="723.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="165.0" y="734.0"></text>
</g>
<g>
<title>update_blocked_averages (1 samples, 0.03%)</title><rect x="162.0" y="707.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="165.0" y="718.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="162.0" y="691.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="165.0" y="702.0"></text>
</g>
<g>
<title>_raw_spin_lock_irqsave (1 samples, 0.03%)</title><rect x="162.4" y="851.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="165.4" y="862.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.16 (52 samples, 1.64%)</title><rect x="162.7" y="851.0" width="19.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="165.7" y="862.0"></text>
</g>
<g>
<title>__lock_text_start (13 samples, 0.41%)</title><rect x="163.1" y="835.0" width="4.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="166.1" y="846.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.03%)</title><rect x="168.0" y="835.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="171.0" y="846.0"></text>
</g>
<g>
<title>_raw_spin_lock_irqsave (1 samples, 0.03%)</title><rect x="168.3" y="835.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="171.3" y="846.0"></text>
</g>
<g>
<title>ep_send_events_proc (29 samples, 0.91%)</title><rect x="168.7" y="835.0" width="10.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="171.7" y="846.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_ecx (1 samples, 0.03%)</title><rect x="169.8" y="819.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="172.8" y="830.0"></text>
</g>
<g>
<title>ep_item_poll.isra.12 (19 samples, 0.60%)</title><rect x="170.2" y="819.0" width="7.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="173.2" y="830.0"></text>
</g>
<g>
<title>sock_poll (15 samples, 0.47%)</title><rect x="170.9" y="803.0" width="5.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="173.9" y="814.0"></text>
</g>
<g>
<title>tcp_poll (5 samples, 0.16%)</title><rect x="173.5" y="787.0" width="1.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="176.5" y="798.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (2 samples, 0.06%)</title><rect x="174.6" y="771.0" width="0.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="177.6" y="782.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (3 samples, 0.09%)</title><rect x="175.4" y="787.0" width="1.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="178.4" y="798.0"></text>
</g>
<g>
<title>tcp_poll (2 samples, 0.06%)</title><rect x="176.5" y="803.0" width="0.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="179.5" y="814.0"></text>
</g>
<g>
<title>sock_poll (6 samples, 0.19%)</title><rect x="177.2" y="819.0" width="2.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="180.2" y="830.0"></text>
</g>
<g>
<title>mutex_lock (4 samples, 0.13%)</title><rect x="179.5" y="835.0" width="1.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="182.5" y="846.0"></text>
</g>
<g>
<title>_cond_resched (2 samples, 0.06%)</title><rect x="179.8" y="819.0" width="0.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="182.8" y="830.0"></text>
</g>
<g>
<title>rcu_all_qs (2 samples, 0.06%)</title><rect x="179.8" y="803.0" width="0.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="182.8" y="814.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.03%)</title><rect x="180.6" y="819.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="183.6" y="830.0"></text>
</g>
<g>
<title>mutex_unlock (3 samples, 0.09%)</title><rect x="181.0" y="835.0" width="1.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="184.0" y="846.0"></text>
</g>
<g>
<title>ep_send_events_proc (2 samples, 0.06%)</title><rect x="182.1" y="851.0" width="0.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="185.1" y="862.0"></text>
</g>
<g>
<title>mutex_lock (3 samples, 0.09%)</title><rect x="182.8" y="851.0" width="1.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="185.8" y="862.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (90 samples, 2.83%)</title><rect x="183.9" y="851.0" width="33.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="186.9" y="862.0">sc..</text>
</g>
<g>
<title>schedule (3 samples, 0.09%)</title><rect x="183.9" y="835.0" width="1.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="186.9" y="846.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (87 samples, 2.74%)</title><rect x="185.0" y="835.0" width="32.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="188.0" y="846.0">sc..</text>
</g>
<g>
<title>__sched_text_start (2 samples, 0.06%)</title><rect x="185.0" y="819.0" width="0.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="188.0" y="830.0"></text>
</g>
<g>
<title>schedule (85 samples, 2.68%)</title><rect x="185.8" y="819.0" width="31.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="188.8" y="830.0">sc..</text>
</g>
<g>
<title>__sched_text_start (84 samples, 2.65%)</title><rect x="186.2" y="803.0" width="31.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="189.2" y="814.0">__..</text>
</g>
<g>
<title>finish_task_switch (81 samples, 2.55%)</title><rect x="187.3" y="787.0" width="30.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="190.3" y="798.0">fi..</text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (2 samples, 0.06%)</title><rect x="217.4" y="851.0" width="0.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="220.4" y="862.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.16 (1 samples, 0.03%)</title><rect x="218.1" y="867.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="221.1" y="878.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (1 samples, 0.03%)</title><rect x="218.5" y="867.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="221.5" y="878.0"></text>
</g>
<g>
<title>sys_epoll_wait (1 samples, 0.03%)</title><rect x="218.9" y="899.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="221.9" y="910.0"></text>
</g>
<g>
<title>epoll_wait (18 samples, 0.57%)</title><rect x="219.2" y="931.0" width="6.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="222.2" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.processEvents (7 samples, 0.22%)</title><rect x="225.9" y="947.0" width="2.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="228.9" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.06%)</title><rect x="225.9" y="931.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="228.9" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.06%)</title><rect x="225.9" y="915.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="228.9" y="926.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (5 samples, 0.16%)</title><rect x="226.7" y="931.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="229.7" y="942.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.06%)</title><rect x="226.7" y="915.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="229.7" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.06%)</title><rect x="226.7" y="899.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="229.7" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.06%)</title><rect x="226.7" y="883.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="229.7" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.06%)</title><rect x="226.7" y="867.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="229.7" y="878.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (3 samples, 0.09%)</title><rect x="227.4" y="915.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="230.4" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (3 samples, 0.09%)</title><rect x="227.4" y="899.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="230.4" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.09%)</title><rect x="227.4" y="883.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="230.4" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.processUpdateQueue (17 samples, 0.54%)</title><rect x="228.5" y="947.0" width="6.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="231.5" y="958.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (2 samples, 0.06%)</title><rect x="234.1" y="931.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="237.1" y="942.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.elementAt (2 samples, 0.06%)</title><rect x="234.1" y="915.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="237.1" y="926.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (5 samples, 0.16%)</title><rect x="234.9" y="947.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="237.9" y="958.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (5 samples, 0.16%)</title><rect x="234.9" y="931.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="237.9" y="942.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (4 samples, 0.13%)</title><rect x="234.9" y="915.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="237.9" y="926.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.03%)</title><rect x="236.3" y="915.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="239.3" y="926.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.end (6 samples, 0.19%)</title><rect x="236.7" y="947.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="239.7" y="958.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (6 samples, 0.19%)</title><rect x="236.7" y="931.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="239.7" y="942.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (6 samples, 0.19%)</title><rect x="236.7" y="915.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="239.7" y="926.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (4 samples, 0.13%)</title><rect x="237.5" y="899.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="240.5" y="910.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (4 samples, 0.13%)</title><rect x="237.5" y="883.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="240.5" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (11 samples, 0.35%)</title><rect x="238.9" y="947.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="241.9" y="958.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (2,536 samples, 79.87%)</title><rect x="243.0" y="1011.0" width="942.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="246.0" y="1022.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (2,529 samples, 79.65%)</title><rect x="245.6" y="995.0" width="939.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="248.6" y="1006.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleSocketClosed (1 samples, 0.03%)</title><rect x="246.7" y="979.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="249.7" y="990.0"></text>
</g>
<g>
<title>one/nio/net/Session.listen (1 samples, 0.03%)</title><rect x="246.7" y="963.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="249.7" y="974.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.listen (1 samples, 0.03%)</title><rect x="246.7" y="947.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="249.7" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.wakeup (1 samples, 0.03%)</title><rect x="246.7" y="931.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="249.7" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write1 (1 samples, 0.03%)</title><rect x="246.7" y="915.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="249.7" y="926.0"></text>
</g>
<g>
<title>__kernel_vsyscall (1 samples, 0.03%)</title><rect x="246.7" y="899.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="249.7" y="910.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (1 samples, 0.03%)</title><rect x="246.7" y="883.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="249.7" y="894.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (1 samples, 0.03%)</title><rect x="246.7" y="867.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="249.7" y="878.0"></text>
</g>
<g>
<title>sys_write (1 samples, 0.03%)</title><rect x="246.7" y="851.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="249.7" y="862.0"></text>
</g>
<g>
<title>vfs_write (1 samples, 0.03%)</title><rect x="246.7" y="835.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="249.7" y="846.0"></text>
</g>
<g>
<title>__vfs_write (1 samples, 0.03%)</title><rect x="246.7" y="819.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="249.7" y="830.0"></text>
</g>
<g>
<title>new_sync_write (1 samples, 0.03%)</title><rect x="246.7" y="803.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="249.7" y="814.0"></text>
</g>
<g>
<title>pipe_write (1 samples, 0.03%)</title><rect x="246.7" y="787.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="249.7" y="798.0"></text>
</g>
<g>
<title>copy_page_from_iter (1 samples, 0.03%)</title><rect x="246.7" y="771.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="249.7" y="782.0"></text>
</g>
<g>
<title>kmap_atomic (1 samples, 0.03%)</title><rect x="246.7" y="755.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="249.7" y="766.0"></text>
</g>
<g>
<title>kmap_atomic_prot (1 samples, 0.03%)</title><rect x="246.7" y="739.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="249.7" y="750.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (2,385 samples, 75.12%)</title><rect x="247.1" y="979.0" width="886.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="250.1" y="990.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (2,365 samples, 74.49%)</title><rect x="252.7" y="963.0" width="879.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="255.7" y="974.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (2,365 samples, 74.49%)</title><rect x="252.7" y="947.0" width="879.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="255.7" y="958.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (2,355 samples, 74.17%)</title><rect x="252.7" y="931.0" width="875.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="255.7" y="942.0">RequestHandler0_entity.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (528 samples, 16.63%)</title><rect x="252.7" y="915.0" width="196.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="255.7" y="926.0">one/nio/http/HttpSession.s..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (498 samples, 15.69%)</title><rect x="259.0" y="899.0" width="185.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="262.0" y="910.0">one/nio/http/HttpSession..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (26 samples, 0.82%)</title><rect x="259.4" y="883.0" width="9.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="262.4" y="894.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (7 samples, 0.22%)</title><rect x="266.4" y="867.0" width="2.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="269.4" y="878.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (7 samples, 0.22%)</title><rect x="266.4" y="851.0" width="2.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="269.4" y="862.0"></text>
</g>
<g>
<title>java/lang/String.charAt (7 samples, 0.22%)</title><rect x="266.4" y="835.0" width="2.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="269.4" y="846.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (471 samples, 14.83%)</title><rect x="269.0" y="883.0" width="175.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="272.0" y="894.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (471 samples, 14.83%)</title><rect x="269.0" y="867.0" width="175.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="272.0" y="878.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (469 samples, 14.77%)</title><rect x="269.8" y="851.0" width="174.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="272.8" y="862.0">one/nio/net/Session$Ar..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (469 samples, 14.77%)</title><rect x="269.8" y="835.0" width="174.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="272.8" y="846.0">one/nio/net/JavaSocket..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.13%)</title><rect x="269.8" y="819.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="272.8" y="830.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="270.9" y="803.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="273.9" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="270.9" y="787.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="273.9" y="798.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="270.9" y="771.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="273.9" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="270.9" y="755.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="273.9" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="270.9" y="739.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="273.9" y="750.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.03%)</title><rect x="270.9" y="723.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="273.9" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (465 samples, 14.65%)</title><rect x="271.3" y="819.0" width="172.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="274.3" y="830.0">sun/nio/ch/SocketChann..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (7 samples, 0.22%)</title><rect x="272.8" y="803.0" width="2.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="275.8" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.22%)</title><rect x="272.8" y="787.0" width="2.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="275.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (7 samples, 0.22%)</title><rect x="272.8" y="771.0" width="2.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="275.8" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (453 samples, 14.27%)</title><rect x="275.4" y="803.0" width="168.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="278.4" y="814.0">sun/nio/ch/IOUtil.write</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (452 samples, 14.24%)</title><rect x="275.7" y="787.0" width="168.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="278.7" y="798.0">sun/nio/ch/IOUtil.write</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (452 samples, 14.24%)</title><rect x="275.7" y="771.0" width="168.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="278.7" y="782.0">sun/nio/ch/IOUtil.wri..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (26 samples, 0.82%)</title><rect x="275.7" y="755.0" width="9.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="278.7" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (426 samples, 13.42%)</title><rect x="285.4" y="755.0" width="158.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="288.4" y="766.0">sun/nio/ch/SocketDis..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (422 samples, 13.29%)</title><rect x="286.9" y="739.0" width="156.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="289.9" y="750.0">sun/nio/ch/FileDispa..</text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (3 samples, 0.09%)</title><rect x="292.5" y="723.0" width="1.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="295.5" y="734.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (6 samples, 0.19%)</title><rect x="293.6" y="723.0" width="2.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="296.6" y="734.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (2 samples, 0.06%)</title><rect x="294.3" y="707.0" width="0.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="297.3" y="718.0"></text>
</g>
<g>
<title>fdval (2 samples, 0.06%)</title><rect x="295.1" y="707.0" width="0.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="298.1" y="718.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.06%)</title><rect x="295.8" y="723.0" width="0.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="298.8" y="734.0"></text>
</g>
<g>
<title>__kernel_vsyscall (2 samples, 0.06%)</title><rect x="295.8" y="707.0" width="0.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="298.8" y="718.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (2 samples, 0.06%)</title><rect x="295.8" y="691.0" width="0.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="298.8" y="702.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (2 samples, 0.06%)</title><rect x="295.8" y="675.0" width="0.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="298.8" y="686.0"></text>
</g>
<g>
<title>__kernel_vsyscall (389 samples, 12.25%)</title><rect x="296.5" y="723.0" width="144.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="299.5" y="734.0">__kernel_vsyscall</text>
</g>
<g>
<title>entry_SYSENTER_32 (384 samples, 12.09%)</title><rect x="298.4" y="707.0" width="142.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="301.4" y="718.0">entry_SYSENTER_32</text>
</g>
<g>
<title>do_fast_syscall_32 (384 samples, 12.09%)</title><rect x="298.4" y="691.0" width="142.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="301.4" y="702.0">do_fast_syscall_32</text>
</g>
<g>
<title>exit_to_usermode_loop (9 samples, 0.28%)</title><rect x="298.8" y="675.0" width="3.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="301.8" y="686.0"></text>
</g>
<g>
<title>schedule (9 samples, 0.28%)</title><rect x="298.8" y="659.0" width="3.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="301.8" y="670.0"></text>
</g>
<g>
<title>__sched_text_start (9 samples, 0.28%)</title><rect x="298.8" y="643.0" width="3.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="301.8" y="654.0"></text>
</g>
<g>
<title>finish_task_switch (9 samples, 0.28%)</title><rect x="298.8" y="627.0" width="3.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="301.8" y="638.0"></text>
</g>
<g>
<title>fput (1 samples, 0.03%)</title><rect x="302.1" y="675.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="305.1" y="686.0"></text>
</g>
<g>
<title>sys_write (373 samples, 11.75%)</title><rect x="302.5" y="675.0" width="138.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="305.5" y="686.0">sys_write</text>
</g>
<g>
<title>__fdget_pos (3 samples, 0.09%)</title><rect x="303.2" y="659.0" width="1.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="306.2" y="670.0"></text>
</g>
<g>
<title>__fget_light (3 samples, 0.09%)</title><rect x="303.2" y="643.0" width="1.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="306.2" y="654.0"></text>
</g>
<g>
<title>__fget (2 samples, 0.06%)</title><rect x="303.6" y="627.0" width="0.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="306.6" y="638.0"></text>
</g>
<g>
<title>__fsnotify_parent (2 samples, 0.06%)</title><rect x="304.3" y="659.0" width="0.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="307.3" y="670.0"></text>
</g>
<g>
<title>vfs_write (366 samples, 11.53%)</title><rect x="305.1" y="659.0" width="136.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="308.1" y="670.0">vfs_write</text>
</g>
<g>
<title>__vfs_write (354 samples, 11.15%)</title><rect x="307.7" y="643.0" width="131.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="310.7" y="654.0">__vfs_write</text>
</g>
<g>
<title>new_sync_write (352 samples, 11.09%)</title><rect x="308.4" y="627.0" width="130.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="311.4" y="638.0">new_sync_write</text>
</g>
<g>
<title>sock_write_iter (351 samples, 11.06%)</title><rect x="308.8" y="611.0" width="130.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="311.8" y="622.0">sock_write_iter</text>
</g>
<g>
<title>sock_sendmsg (349 samples, 10.99%)</title><rect x="309.6" y="595.0" width="129.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="312.6" y="606.0">sock_sendmsg</text>
</g>
<g>
<title>inet_sendmsg (346 samples, 10.90%)</title><rect x="310.3" y="579.0" width="128.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="313.3" y="590.0">inet_sendmsg</text>
</g>
<g>
<title>lock_sock_nested (1 samples, 0.03%)</title><rect x="310.7" y="563.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="313.7" y="574.0"></text>
</g>
<g>
<title>release_sock (4 samples, 0.13%)</title><rect x="311.0" y="563.0" width="1.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="314.0" y="574.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.03%)</title><rect x="312.2" y="547.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="315.2" y="558.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="312.2" y="531.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="315.2" y="542.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.03%)</title><rect x="312.2" y="515.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="315.2" y="526.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.03%)</title><rect x="312.2" y="499.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="315.2" y="510.0"></text>
</g>
<g>
<title>call_on_stack (1 samples, 0.03%)</title><rect x="312.2" y="483.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="315.2" y="494.0"></text>
</g>
<g>
<title>__do_softirq (1 samples, 0.03%)</title><rect x="312.2" y="467.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="315.2" y="478.0"></text>
</g>
<g>
<title>rcu_process_callbacks (1 samples, 0.03%)</title><rect x="312.2" y="451.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="315.2" y="462.0"></text>
</g>
<g>
<title>tcp_sendmsg (339 samples, 10.68%)</title><rect x="312.5" y="563.0" width="126.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="315.5" y="574.0">tcp_sendmsg</text>
</g>
<g>
<title>__x86_indirect_thunk_edx (3 samples, 0.09%)</title><rect x="312.9" y="547.0" width="1.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="315.9" y="558.0"></text>
</g>
<g>
<title>_copy_from_iter_full (1 samples, 0.03%)</title><rect x="314.0" y="547.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="317.0" y="558.0"></text>
</g>
<g>
<title>release_sock (3 samples, 0.09%)</title><rect x="314.4" y="547.0" width="1.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="317.4" y="558.0"></text>
</g>
<g>
<title>_raw_spin_unlock_bh (2 samples, 0.06%)</title><rect x="314.4" y="531.0" width="0.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="317.4" y="542.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.03%)</title><rect x="314.4" y="515.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="317.4" y="526.0"></text>
</g>
<g>
<title>do_softirq.part.15 (1 samples, 0.03%)</title><rect x="314.4" y="499.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="317.4" y="510.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.03%)</title><rect x="314.4" y="483.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="317.4" y="494.0"></text>
</g>
<g>
<title>call_on_stack (1 samples, 0.03%)</title><rect x="314.4" y="467.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="317.4" y="478.0"></text>
</g>
<g>
<title>__do_softirq (1 samples, 0.03%)</title><rect x="314.4" y="451.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="317.4" y="462.0"></text>
</g>
<g>
<title>run_rebalance_domains (1 samples, 0.03%)</title><rect x="314.4" y="435.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="317.4" y="446.0"></text>
</g>
<g>
<title>rebalance_domains (1 samples, 0.03%)</title><rect x="314.4" y="419.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="317.4" y="430.0"></text>
</g>
<g>
<title>update_blocked_averages (1 samples, 0.03%)</title><rect x="314.4" y="403.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="317.4" y="414.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="314.4" y="387.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="317.4" y="398.0"></text>
</g>
<g>
<title>__pv_queued_spin_unlock (1 samples, 0.03%)</title><rect x="314.8" y="515.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="317.8" y="526.0"></text>
</g>
<g>
<title>tcp_release_cb (1 samples, 0.03%)</title><rect x="315.1" y="531.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="318.1" y="542.0"></text>
</g>
<g>
<title>sock_zerocopy_put (4 samples, 0.13%)</title><rect x="315.5" y="547.0" width="1.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="318.5" y="558.0"></text>
</g>
<g>
<title>tcp_push (2 samples, 0.06%)</title><rect x="317.0" y="547.0" width="0.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="320.0" y="558.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (1 samples, 0.03%)</title><rect x="317.7" y="547.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="320.7" y="558.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (324 samples, 10.20%)</title><rect x="318.1" y="547.0" width="120.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="321.1" y="558.0">tcp_sendmsg_loc..</text>
</g>
<g>
<title>__check_object_size (2 samples, 0.06%)</title><rect x="319.2" y="531.0" width="0.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="322.2" y="542.0"></text>
</g>
<g>
<title>__check_heap_object (1 samples, 0.03%)</title><rect x="319.6" y="515.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="322.6" y="526.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (7 samples, 0.22%)</title><rect x="320.0" y="531.0" width="2.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="323.0" y="542.0"></text>
</g>
<g>
<title>__alloc_skb (5 samples, 0.16%)</title><rect x="320.7" y="515.0" width="1.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="323.7" y="526.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.45 (2 samples, 0.06%)</title><rect x="321.1" y="499.0" width="0.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="324.1" y="510.0"></text>
</g>
<g>
<title>__kmalloc_track_caller (1 samples, 0.03%)</title><rect x="321.1" y="483.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="324.1" y="494.0"></text>
</g>
<g>
<title>kmalloc_slab (1 samples, 0.03%)</title><rect x="321.4" y="483.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="324.4" y="494.0"></text>
</g>
<g>
<title>kmem_cache_alloc (1 samples, 0.03%)</title><rect x="321.8" y="499.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="324.8" y="510.0"></text>
</g>
<g>
<title>ksize (1 samples, 0.03%)</title><rect x="322.2" y="499.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="325.2" y="510.0"></text>
</g>
<g>
<title>skb_entail (1 samples, 0.03%)</title><rect x="322.6" y="531.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="325.6" y="542.0"></text>
</g>
<g>
<title>tcp_push (306 samples, 9.64%)</title><rect x="322.9" y="531.0" width="113.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="325.9" y="542.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (305 samples, 9.61%)</title><rect x="323.3" y="515.0" width="113.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="326.3" y="526.0">__tcp_push_pen..</text>
</g>
<g>
<title>tcp_event_new_data_sent (1 samples, 0.03%)</title><rect x="323.7" y="499.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="326.7" y="510.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (2 samples, 0.06%)</title><rect x="324.0" y="499.0" width="0.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="327.0" y="510.0"></text>
</g>
<g>
<title>tcp_small_queue_check.isra.28 (1 samples, 0.03%)</title><rect x="324.8" y="499.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="327.8" y="510.0"></text>
</g>
<g>
<title>tcp_write_xmit (300 samples, 9.45%)</title><rect x="325.2" y="499.0" width="111.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="328.2" y="510.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_transmit_skb (274 samples, 8.63%)</title><rect x="327.0" y="483.0" width="101.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="330.0" y="494.0">__tcp_transm..</text>
</g>
<g>
<title>__sk_dst_check (1 samples, 0.03%)</title><rect x="328.9" y="467.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="331.9" y="478.0"></text>
</g>
<g>
<title>__tcp_select_window (1 samples, 0.03%)</title><rect x="329.3" y="467.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="332.3" y="478.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (1 samples, 0.03%)</title><rect x="329.6" y="467.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="332.6" y="478.0"></text>
</g>
<g>
<title>ip_local_out (1 samples, 0.03%)</title><rect x="330.0" y="467.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="333.0" y="478.0"></text>
</g>
<g>
<title>ip_queue_xmit (262 samples, 8.25%)</title><rect x="330.4" y="467.0" width="97.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="333.4" y="478.0">ip_queue_xmit</text>
</g>
<g>
<title>ip_local_out (259 samples, 8.16%)</title><rect x="331.1" y="451.0" width="96.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="334.1" y="462.0">ip_local_out</text>
</g>
<g>
<title>ip_finish_output (1 samples, 0.03%)</title><rect x="331.1" y="435.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="334.1" y="446.0"></text>
</g>
<g>
<title>ip_output (258 samples, 8.13%)</title><rect x="331.5" y="435.0" width="95.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="334.5" y="446.0">ip_output</text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.03%)</title><rect x="332.2" y="419.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="335.2" y="430.0"></text>
</g>
<g>
<title>ip_finish_output (254 samples, 8.00%)</title><rect x="332.6" y="419.0" width="94.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="335.6" y="430.0">ip_finish_o..</text>
</g>
<g>
<title>dev_queue_xmit (1 samples, 0.03%)</title><rect x="333.3" y="403.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="336.3" y="414.0"></text>
</g>
<g>
<title>ip_finish_output2 (251 samples, 7.91%)</title><rect x="333.7" y="403.0" width="93.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="336.7" y="414.0">ip_finish_o..</text>
</g>
<g>
<title>__dev_queue_xmit (1 samples, 0.03%)</title><rect x="335.2" y="387.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="338.2" y="398.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (225 samples, 7.09%)</title><rect x="335.6" y="387.0" width="83.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="338.6" y="398.0">__local_b..</text>
</g>
<g>
<title>do_softirq.part.15 (225 samples, 7.09%)</title><rect x="335.6" y="371.0" width="83.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="338.6" y="382.0">do_softir..</text>
</g>
<g>
<title>do_softirq_own_stack (225 samples, 7.09%)</title><rect x="335.6" y="355.0" width="83.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="338.6" y="366.0">do_softir..</text>
</g>
<g>
<title>call_on_stack (225 samples, 7.09%)</title><rect x="335.6" y="339.0" width="83.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="338.6" y="350.0">call_on_s..</text>
</g>
<g>
<title>__do_softirq (225 samples, 7.09%)</title><rect x="335.6" y="323.0" width="83.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="338.6" y="334.0">__do_soft..</text>
</g>
<g>
<title>__kfree_skb_flush (2 samples, 0.06%)</title><rect x="338.2" y="307.0" width="0.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="341.2" y="318.0"></text>
</g>
<g>
<title>net_rx_action (214 samples, 6.74%)</title><rect x="338.9" y="307.0" width="79.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="341.9" y="318.0">net_rx_ac..</text>
</g>
<g>
<title>__netif_receive_skb (1 samples, 0.03%)</title><rect x="339.3" y="291.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="342.3" y="302.0"></text>
</g>
<g>
<title>process_backlog (212 samples, 6.68%)</title><rect x="339.7" y="291.0" width="78.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="342.7" y="302.0">process_b..</text>
</g>
<g>
<title>__netif_receive_skb (211 samples, 6.65%)</title><rect x="339.7" y="275.0" width="78.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="342.7" y="286.0">__netif_r..</text>
</g>
<g>
<title>__netif_receive_skb_core (211 samples, 6.65%)</title><rect x="339.7" y="259.0" width="78.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="342.7" y="270.0">__netif_r..</text>
</g>
<g>
<title>ip_rcv (207 samples, 6.52%)</title><rect x="340.8" y="243.0" width="76.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="343.8" y="254.0">ip_rcv</text>
</g>
<g>
<title>ip_local_deliver (1 samples, 0.03%)</title><rect x="341.5" y="227.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="344.5" y="238.0"></text>
</g>
<g>
<title>ip_rcv_finish (204 samples, 6.43%)</title><rect x="341.9" y="227.0" width="75.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="344.9" y="238.0">ip_rcv_f..</text>
</g>
<g>
<title>ip_local_deliver (204 samples, 6.43%)</title><rect x="341.9" y="211.0" width="75.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="344.9" y="222.0">ip_local..</text>
</g>
<g>
<title>ip_local_deliver_finish (204 samples, 6.43%)</title><rect x="341.9" y="195.0" width="75.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="344.9" y="206.0">ip_local..</text>
</g>
<g>
<title>__xfrm_policy_check2.constprop.34 (1 samples, 0.03%)</title><rect x="342.3" y="179.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="345.3" y="190.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (1 samples, 0.03%)</title><rect x="342.6" y="179.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="345.6" y="190.0"></text>
</g>
<g>
<title>tcp_v4_rcv (201 samples, 6.33%)</title><rect x="343.0" y="179.0" width="74.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="346.0" y="190.0">tcp_v4_rcv</text>
</g>
<g>
<title>__inet_lookup_established (3 samples, 0.09%)</title><rect x="344.1" y="163.0" width="1.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="347.1" y="174.0"></text>
</g>
<g>
<title>inet_ehashfn (1 samples, 0.03%)</title><rect x="344.9" y="147.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="347.9" y="158.0"></text>
</g>
<g>
<title>__raw_callee_save___pv_queued_spin_unlock (1 samples, 0.03%)</title><rect x="345.2" y="163.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="348.2" y="174.0"></text>
</g>
<g>
<title>__pv_queued_spin_unlock (1 samples, 0.03%)</title><rect x="345.2" y="147.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="348.2" y="158.0"></text>
</g>
<g>
<title>__xfrm_policy_check2.constprop.34 (2 samples, 0.06%)</title><rect x="345.6" y="163.0" width="0.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="348.6" y="174.0"></text>
</g>
<g>
<title>security_sock_rcv_skb (1 samples, 0.03%)</title><rect x="346.3" y="163.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="349.3" y="174.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (1 samples, 0.03%)</title><rect x="346.7" y="163.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="349.7" y="174.0"></text>
</g>
<g>
<title>security_sock_rcv_skb (1 samples, 0.03%)</title><rect x="346.7" y="147.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="349.7" y="158.0"></text>
</g>
<g>
<title>tcp_rcv_established (1 samples, 0.03%)</title><rect x="347.1" y="163.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="350.1" y="174.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (188 samples, 5.92%)</title><rect x="347.5" y="163.0" width="69.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="350.5" y="174.0">tcp_v4_..</text>
</g>
<g>
<title>tcp_ack (1 samples, 0.03%)</title><rect x="347.5" y="147.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="350.5" y="158.0"></text>
</g>
<g>
<title>tcp_rcv_established (186 samples, 5.86%)</title><rect x="347.8" y="147.0" width="69.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="350.8" y="158.0">tcp_rcv..</text>
</g>
<g>
<title>__tcp_ack_snd_check (11 samples, 0.35%)</title><rect x="348.6" y="131.0" width="4.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="351.6" y="142.0"></text>
</g>
<g>
<title>sk_reset_timer (2 samples, 0.06%)</title><rect x="348.6" y="115.0" width="0.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="351.6" y="126.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (9 samples, 0.28%)</title><rect x="349.3" y="115.0" width="3.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="352.3" y="126.0"></text>
</g>
<g>
<title>mod_timer (1 samples, 0.03%)</title><rect x="349.3" y="99.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="352.3" y="110.0"></text>
</g>
<g>
<title>sk_reset_timer (8 samples, 0.25%)</title><rect x="349.7" y="99.0" width="3.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="352.7" y="110.0"></text>
</g>
<g>
<title>lock_timer_base (2 samples, 0.06%)</title><rect x="349.7" y="83.0" width="0.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="352.7" y="94.0"></text>
</g>
<g>
<title>mod_timer (6 samples, 0.19%)</title><rect x="350.4" y="83.0" width="2.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="353.4" y="94.0"></text>
</g>
<g>
<title>__lock_text_start (5 samples, 0.16%)</title><rect x="350.4" y="67.0" width="1.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="353.4" y="78.0"></text>
</g>
<g>
<title>lock_timer_base (1 samples, 0.03%)</title><rect x="352.3" y="67.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="355.3" y="78.0"></text>
</g>
<g>
<title>_raw_spin_lock_irqsave (1 samples, 0.03%)</title><rect x="352.3" y="51.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="355.3" y="62.0"></text>
</g>
<g>
<title>bictcp_cong_avoid (1 samples, 0.03%)</title><rect x="352.7" y="131.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="355.7" y="142.0"></text>
</g>
<g>
<title>dst_release (1 samples, 0.03%)</title><rect x="353.0" y="131.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="356.0" y="142.0"></text>
</g>
<g>
<title>sched_clock_cpu (2 samples, 0.06%)</title><rect x="353.4" y="131.0" width="0.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="356.4" y="142.0"></text>
</g>
<g>
<title>sched_clock (2 samples, 0.06%)</title><rect x="353.4" y="115.0" width="0.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="356.4" y="126.0"></text>
</g>
<g>
<title>kvm_sched_clock_read (2 samples, 0.06%)</title><rect x="353.4" y="99.0" width="0.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="356.4" y="110.0"></text>
</g>
<g>
<title>pvclock_clocksource_read (2 samples, 0.06%)</title><rect x="353.4" y="83.0" width="0.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="356.4" y="94.0"></text>
</g>
<g>
<title>tcp_ack (20 samples, 0.63%)</title><rect x="354.2" y="131.0" width="7.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="357.2" y="142.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (17 samples, 0.54%)</title><rect x="354.9" y="115.0" width="6.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="357.9" y="126.0"></text>
</g>
<g>
<title>__kfree_skb (5 samples, 0.16%)</title><rect x="357.5" y="99.0" width="1.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="360.5" y="110.0"></text>
</g>
<g>
<title>kfree_skbmem (1 samples, 0.03%)</title><rect x="357.5" y="83.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="360.5" y="94.0"></text>
</g>
<g>
<title>kmem_cache_free (1 samples, 0.03%)</title><rect x="357.5" y="67.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="360.5" y="78.0"></text>
</g>
<g>
<title>skb_release_all (2 samples, 0.06%)</title><rect x="357.9" y="83.0" width="0.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="360.9" y="94.0"></text>
</g>
<g>
<title>skb_release_data (2 samples, 0.06%)</title><rect x="357.9" y="67.0" width="0.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="360.9" y="78.0"></text>
</g>
<g>
<title>skb_free_head (2 samples, 0.06%)</title><rect x="357.9" y="51.0" width="0.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="360.9" y="62.0"></text>
</g>
<g>
<title>kfree (2 samples, 0.06%)</title><rect x="357.9" y="35.0" width="0.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="360.9" y="46.0"></text>
</g>
<g>
<title>skb_release_head_state (2 samples, 0.06%)</title><rect x="358.6" y="83.0" width="0.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="361.6" y="94.0"></text>
</g>
<g>
<title>minmax_running_min (1 samples, 0.03%)</title><rect x="359.4" y="99.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="362.4" y="110.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.41 (1 samples, 0.03%)</title><rect x="359.7" y="99.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="362.7" y="110.0"></text>
</g>
<g>
<title>tcp_rack_advance (2 samples, 0.06%)</title><rect x="360.1" y="99.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="363.1" y="110.0"></text>
</g>
<g>
<title>tcp_rate_skb_delivered (1 samples, 0.03%)</title><rect x="360.8" y="99.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="363.8" y="110.0"></text>
</g>
<g>
<title>tcp_rack_advance (1 samples, 0.03%)</title><rect x="361.2" y="115.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="364.2" y="126.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (2 samples, 0.06%)</title><rect x="361.6" y="131.0" width="0.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="364.6" y="142.0"></text>
</g>
<g>
<title>tcp_data_queue (147 samples, 4.63%)</title><rect x="362.3" y="131.0" width="54.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="365.3" y="142.0">tcp_d..</text>
</g>
<g>
<title>sock_def_readable (139 samples, 4.38%)</title><rect x="363.4" y="115.0" width="51.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="366.4" y="126.0">sock_..</text>
</g>
<g>
<title>__wake_up_sync_key (138 samples, 4.35%)</title><rect x="363.8" y="99.0" width="51.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="366.8" y="110.0">__wak..</text>
</g>
<g>
<title>__wake_up_common_lock (138 samples, 4.35%)</title><rect x="363.8" y="83.0" width="51.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="366.8" y="94.0">__wak..</text>
</g>
<g>
<title>__lock_text_start (138 samples, 4.35%)</title><rect x="363.8" y="67.0" width="51.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="366.8" y="78.0">__loc..</text>
</g>
<g>
<title>tcp_event_data_recv (3 samples, 0.09%)</title><rect x="415.1" y="115.0" width="1.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="418.1" y="126.0"></text>
</g>
<g>
<title>tcp_queue_rcv (2 samples, 0.06%)</title><rect x="416.2" y="115.0" width="0.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="419.2" y="126.0"></text>
</g>
<g>
<title>tcp_urg (1 samples, 0.03%)</title><rect x="417.0" y="147.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="420.0" y="158.0"></text>
</g>
<g>
<title>tcp_v4_fill_cb (1 samples, 0.03%)</title><rect x="417.3" y="163.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="420.3" y="174.0"></text>
</g>
<g>
<title>memmove (1 samples, 0.03%)</title><rect x="417.3" y="147.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="420.3" y="158.0"></text>
</g>
<g>
<title>ip_rcv_finish (1 samples, 0.03%)</title><rect x="417.7" y="243.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="420.7" y="254.0"></text>
</g>
<g>
<title>__netif_receive_skb_core (1 samples, 0.03%)</title><rect x="418.1" y="275.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="421.1" y="286.0"></text>
</g>
<g>
<title>process_backlog (1 samples, 0.03%)</title><rect x="418.4" y="307.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="421.4" y="318.0"></text>
</g>
<g>
<title>run_rebalance_domains (1 samples, 0.03%)</title><rect x="418.8" y="307.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="421.8" y="318.0"></text>
</g>
<g>
<title>rebalance_domains (1 samples, 0.03%)</title><rect x="418.8" y="291.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="421.8" y="302.0"></text>
</g>
<g>
<title>update_blocked_averages (1 samples, 0.03%)</title><rect x="418.8" y="275.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="421.8" y="286.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="418.8" y="259.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="421.8" y="270.0"></text>
</g>
<g>
<title>dev_queue_xmit (21 samples, 0.66%)</title><rect x="419.2" y="387.0" width="7.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="422.2" y="398.0"></text>
</g>
<g>
<title>__dev_queue_xmit (20 samples, 0.63%)</title><rect x="419.2" y="371.0" width="7.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="422.2" y="382.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (10 samples, 0.31%)</title><rect x="420.3" y="355.0" width="3.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="423.3" y="366.0"></text>
</g>
<g>
<title>loopback_xmit (9 samples, 0.28%)</title><rect x="420.3" y="339.0" width="3.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="423.3" y="350.0"></text>
</g>
<g>
<title>eth_type_trans (1 samples, 0.03%)</title><rect x="421.0" y="323.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="424.0" y="334.0"></text>
</g>
<g>
<title>netif_rx (4 samples, 0.13%)</title><rect x="421.4" y="323.0" width="1.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="424.4" y="334.0"></text>
</g>
<g>
<title>netif_rx_internal (4 samples, 0.13%)</title><rect x="421.4" y="307.0" width="1.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="424.4" y="318.0"></text>
</g>
<g>
<title>enqueue_to_backlog (2 samples, 0.06%)</title><rect x="422.2" y="291.0" width="0.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="425.2" y="302.0"></text>
</g>
<g>
<title>netif_rx_internal (1 samples, 0.03%)</title><rect x="422.9" y="323.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="425.9" y="334.0"></text>
</g>
<g>
<title>tcp_wfree (1 samples, 0.03%)</title><rect x="423.3" y="323.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="426.3" y="334.0"></text>
</g>
<g>
<title>skb_clone_tx_timestamp (1 samples, 0.03%)</title><rect x="423.7" y="339.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="426.7" y="350.0"></text>
</g>
<g>
<title>loopback_xmit (1 samples, 0.03%)</title><rect x="424.0" y="355.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="427.0" y="366.0"></text>
</g>
<g>
<title>skb_csum_hwoffload_help (1 samples, 0.03%)</title><rect x="424.4" y="355.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="427.4" y="366.0"></text>
</g>
<g>
<title>validate_xmit_skb (3 samples, 0.09%)</title><rect x="424.8" y="355.0" width="1.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="427.8" y="366.0"></text>
</g>
<g>
<title>skb_network_protocol (1 samples, 0.03%)</title><rect x="425.5" y="339.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="428.5" y="350.0"></text>
</g>
<g>
<title>validate_xmit_xfrm (2 samples, 0.06%)</title><rect x="425.9" y="355.0" width="0.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="428.9" y="366.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (1 samples, 0.03%)</title><rect x="426.6" y="371.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="429.6" y="382.0"></text>
</g>
<g>
<title>ipv4_mtu (1 samples, 0.03%)</title><rect x="427.0" y="419.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="430.0" y="430.0"></text>
</g>
<g>
<title>ipv4_dst_check (1 samples, 0.03%)</title><rect x="427.4" y="451.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="430.4" y="462.0"></text>
</g>
<g>
<title>skb_clone (3 samples, 0.09%)</title><rect x="427.7" y="467.0" width="1.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="430.7" y="478.0"></text>
</g>
<g>
<title>__skb_clone (2 samples, 0.06%)</title><rect x="428.1" y="451.0" width="0.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="431.1" y="462.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (2 samples, 0.06%)</title><rect x="428.9" y="483.0" width="0.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="431.9" y="494.0"></text>
</g>
<g>
<title>sched_clock_cpu (2 samples, 0.06%)</title><rect x="429.6" y="483.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="432.6" y="494.0"></text>
</g>
<g>
<title>sched_clock (2 samples, 0.06%)</title><rect x="429.6" y="467.0" width="0.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="432.6" y="478.0"></text>
</g>
<g>
<title>kvm_sched_clock_read (1 samples, 0.03%)</title><rect x="429.6" y="451.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="432.6" y="462.0"></text>
</g>
<g>
<title>pvclock_clocksource_read (1 samples, 0.03%)</title><rect x="429.6" y="435.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="432.6" y="446.0"></text>
</g>
<g>
<title>pvclock_clocksource_read (1 samples, 0.03%)</title><rect x="430.0" y="451.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="433.0" y="462.0"></text>
</g>
<g>
<title>tcp_established_options (1 samples, 0.03%)</title><rect x="430.3" y="483.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="433.3" y="494.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (10 samples, 0.31%)</title><rect x="430.7" y="483.0" width="3.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="433.7" y="494.0"></text>
</g>
<g>
<title>tcp_rearm_rto.part.60 (1 samples, 0.03%)</title><rect x="432.6" y="467.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="435.6" y="478.0"></text>
</g>
<g>
<title>tcp_rearm_rto (4 samples, 0.13%)</title><rect x="432.9" y="467.0" width="1.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="435.9" y="478.0"></text>
</g>
<g>
<title>tcp_rearm_rto.part.60 (4 samples, 0.13%)</title><rect x="432.9" y="451.0" width="1.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="435.9" y="462.0"></text>
</g>
<g>
<title>sk_reset_timer (4 samples, 0.13%)</title><rect x="432.9" y="435.0" width="1.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="435.9" y="446.0"></text>
</g>
<g>
<title>mod_timer (4 samples, 0.13%)</title><rect x="432.9" y="419.0" width="1.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="435.9" y="430.0"></text>
</g>
<g>
<title>__lock_text_start (4 samples, 0.13%)</title><rect x="432.9" y="403.0" width="1.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="435.9" y="414.0"></text>
</g>
<g>
<title>tcp_options_write (1 samples, 0.03%)</title><rect x="434.4" y="483.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="437.4" y="494.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (4 samples, 0.13%)</title><rect x="434.8" y="483.0" width="1.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="437.8" y="494.0"></text>
</g>
<g>
<title>sk_reset_timer (1 samples, 0.03%)</title><rect x="435.9" y="467.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="438.9" y="478.0"></text>
</g>
<g>
<title>mod_timer (1 samples, 0.03%)</title><rect x="435.9" y="451.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="438.9" y="462.0"></text>
</g>
<g>
<title>tcp_v4_send_check (1 samples, 0.03%)</title><rect x="436.3" y="483.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="439.3" y="494.0"></text>
</g>
<g>
<title>tcp_send_mss (5 samples, 0.16%)</title><rect x="436.7" y="531.0" width="1.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="439.7" y="542.0"></text>
</g>
<g>
<title>tcp_current_mss (3 samples, 0.09%)</title><rect x="437.0" y="515.0" width="1.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="440.0" y="526.0"></text>
</g>
<g>
<title>tcp_established_options (1 samples, 0.03%)</title><rect x="437.4" y="499.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="440.4" y="510.0"></text>
</g>
<g>
<title>tcp_v4_md5_lookup (1 samples, 0.03%)</title><rect x="437.8" y="499.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="440.8" y="510.0"></text>
</g>
<g>
<title>tcp_established_options (1 samples, 0.03%)</title><rect x="438.1" y="515.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="441.1" y="526.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (1 samples, 0.03%)</title><rect x="438.5" y="563.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="441.5" y="574.0"></text>
</g>
<g>
<title>security_socket_sendmsg (1 samples, 0.03%)</title><rect x="438.9" y="579.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="441.9" y="590.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (1 samples, 0.03%)</title><rect x="438.9" y="563.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="441.9" y="574.0"></text>
</g>
<g>
<title>fsnotify (3 samples, 0.09%)</title><rect x="439.3" y="643.0" width="1.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="442.3" y="654.0"></text>
</g>
<g>
<title>rw_verify_area (2 samples, 0.06%)</title><rect x="440.4" y="643.0" width="0.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="443.4" y="654.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_ecx (1 samples, 0.03%)</title><rect x="440.7" y="627.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="443.7" y="638.0"></text>
</g>
<g>
<title>__write (4 samples, 0.13%)</title><rect x="441.1" y="723.0" width="1.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="444.1" y="734.0"></text>
</g>
<g>
<title>convertReturnVal (3 samples, 0.09%)</title><rect x="442.6" y="723.0" width="1.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="445.6" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginWrite (1 samples, 0.03%)</title><rect x="443.7" y="803.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="446.7" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (13 samples, 0.41%)</title><rect x="444.1" y="899.0" width="4.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="447.1" y="910.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (13 samples, 0.41%)</title><rect x="444.1" y="883.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="447.1" y="894.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (13 samples, 0.41%)</title><rect x="444.1" y="867.0" width="4.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="447.1" y="878.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (6 samples, 0.19%)</title><rect x="448.9" y="915.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="451.9" y="926.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.03%)</title><rect x="450.4" y="899.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="453.4" y="910.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.03%)</title><rect x="450.4" y="883.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="453.4" y="894.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.03%)</title><rect x="450.8" y="899.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="453.8" y="910.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ServiceImpl.entity (1,821 samples, 57.35%)</title><rect x="451.2" y="915.0" width="676.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="454.2" y="926.0">ru/mail/polis/service/dogm/ServiceImpl.entity</text>
</g>
<g>
<title>__vdso_gettimeofday (55 samples, 1.73%)</title><rect x="461.6" y="899.0" width="20.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="464.6" y="910.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (2 samples, 0.06%)</title><rect x="482.0" y="899.0" width="0.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="485.0" y="910.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.06%)</title><rect x="482.7" y="899.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="485.7" y="910.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.06%)</title><rect x="482.7" y="883.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="485.7" y="894.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="482.7" y="867.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="485.7" y="878.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="482.7" y="851.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="485.7" y="862.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="482.7" y="835.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="485.7" y="846.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.06%)</title><rect x="482.7" y="819.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="485.7" y="830.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (141 samples, 4.44%)</title><rect x="483.5" y="899.0" width="52.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="486.5" y="910.0">os::j..</text>
</g>
<g>
<title>[unknown] (14 samples, 0.44%)</title><rect x="489.4" y="883.0" width="5.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="492.4" y="894.0"></text>
</g>
<g>
<title>__kernel_vsyscall (14 samples, 0.44%)</title><rect x="489.4" y="867.0" width="5.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="492.4" y="878.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (14 samples, 0.44%)</title><rect x="489.4" y="851.0" width="5.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="492.4" y="862.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (14 samples, 0.44%)</title><rect x="489.4" y="835.0" width="5.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="492.4" y="846.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.09%)</title><rect x="494.6" y="883.0" width="1.2" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="497.6" y="894.0"></text>
</g>
<g>
<title>__kernel_vsyscall (90 samples, 2.83%)</title><rect x="495.8" y="883.0" width="33.4" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="498.8" y="894.0">__..</text>
</g>
<g>
<title>entry_SYSENTER_32 (83 samples, 2.61%)</title><rect x="498.4" y="867.0" width="30.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="501.4" y="878.0">en..</text>
</g>
<g>
<title>do_fast_syscall_32 (73 samples, 2.30%)</title><rect x="498.4" y="851.0" width="27.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="501.4" y="862.0">d..</text>
</g>
<g>
<title>_copy_to_user (8 samples, 0.25%)</title><rect x="498.7" y="835.0" width="3.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="501.7" y="846.0"></text>
</g>
<g>
<title>do_gettimeofday (10 samples, 0.31%)</title><rect x="501.7" y="835.0" width="3.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="504.7" y="846.0"></text>
</g>
<g>
<title>sys_gettimeofday (54 samples, 1.70%)</title><rect x="505.4" y="835.0" width="20.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="508.4" y="846.0"></text>
</g>
<g>
<title>__copy_user_ll (2 samples, 0.06%)</title><rect x="506.5" y="819.0" width="0.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="509.5" y="830.0"></text>
</g>
<g>
<title>__getnstimeofday64 (3 samples, 0.09%)</title><rect x="507.3" y="819.0" width="1.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="510.3" y="830.0"></text>
</g>
<g>
<title>_copy_to_user (9 samples, 0.28%)</title><rect x="508.4" y="819.0" width="3.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="511.4" y="830.0"></text>
</g>
<g>
<title>__copy_user_ll (6 samples, 0.19%)</title><rect x="509.5" y="803.0" width="2.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="512.5" y="814.0"></text>
</g>
<g>
<title>do_gettimeofday (37 samples, 1.17%)</title><rect x="511.7" y="819.0" width="13.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="514.7" y="830.0"></text>
</g>
<g>
<title>__getnstimeofday64 (25 samples, 0.79%)</title><rect x="511.7" y="803.0" width="9.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="514.7" y="814.0"></text>
</g>
<g>
<title>kvm_clock_get_cycles (16 samples, 0.50%)</title><rect x="514.3" y="787.0" width="6.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="517.3" y="798.0"></text>
</g>
<g>
<title>pvclock_clocksource_read (15 samples, 0.47%)</title><rect x="514.7" y="771.0" width="5.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="517.7" y="782.0"></text>
</g>
<g>
<title>pvclock_clocksource_read (2 samples, 0.06%)</title><rect x="520.3" y="787.0" width="0.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="523.3" y="798.0"></text>
</g>
<g>
<title>kvm_clock_get_cycles (12 samples, 0.38%)</title><rect x="521.0" y="803.0" width="4.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="524.0" y="814.0"></text>
</g>
<g>
<title>sys_gettimeofday (10 samples, 0.31%)</title><rect x="525.5" y="851.0" width="3.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="528.5" y="862.0"></text>
</g>
<g>
<title>__vdso_gettimeofday (18 samples, 0.57%)</title><rect x="529.2" y="883.0" width="6.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="532.2" y="894.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ServiceImpl.put (1,593 samples, 50.17%)</title><rect x="535.9" y="899.0" width="592.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="538.9" y="910.0">ru/mail/polis/service/dogm/ServiceImpl.put</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.03%)</title><rect x="535.9" y="883.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="538.9" y="894.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.03%)</title><rect x="535.9" y="867.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="538.9" y="878.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="535.9" y="851.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="538.9" y="862.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="535.9" y="835.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="538.9" y="846.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="535.9" y="819.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="538.9" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.upsert (1,592 samples, 50.14%)</title><rect x="536.3" y="883.0" width="591.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="539.3" y="894.0">ru/mail/polis/dao/RocksDAO.upsert</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (1,582 samples, 49.83%)</title><rect x="536.3" y="867.0" width="587.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="539.3" y="878.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (1,579 samples, 49.73%)</title><rect x="537.4" y="851.0" width="586.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="540.4" y="862.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (12 samples, 0.38%)</title><rect x="538.5" y="835.0" width="4.5" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="541.5" y="846.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni17072222630024017723.so (8 samples, 0.25%)</title><rect x="543.0" y="835.0" width="2.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="546.0" y="846.0"></text>
</g>
<g>
<title>I2C/C2I adapters (10 samples, 0.31%)</title><rect x="545.9" y="835.0" width="3.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="548.9" y="846.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (1,123 samples, 35.37%)</title><rect x="549.6" y="835.0" width="417.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="552.6" y="846.0">Java_org_rocksdb_RocksDB_put__J_3BII_3BII</text>
</g>
<g>
<title>_init (2 samples, 0.06%)</title><rect x="551.1" y="819.0" width="0.8" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="554.1" y="830.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (4 samples, 0.13%)</title><rect x="551.9" y="819.0" width="1.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="554.9" y="830.0"></text>
</g>
<g>
<title>malloc (5 samples, 0.16%)</title><rect x="553.4" y="819.0" width="1.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="556.4" y="830.0"></text>
</g>
<g>
<title>operator delete(void*) (1 samples, 0.03%)</title><rect x="555.2" y="819.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="558.2" y="830.0"></text>
</g>
<g>
<title>operator delete[](void*) (1 samples, 0.03%)</title><rect x="555.6" y="819.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="558.6" y="830.0"></text>
</g>
<g>
<title>operator new(unsigned int) (3 samples, 0.09%)</title><rect x="556.0" y="819.0" width="1.1" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="559.0" y="830.0"></text>
</g>
<g>
<title>operator new[](unsigned int) (2 samples, 0.06%)</title><rect x="557.1" y="819.0" width="0.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="560.1" y="830.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.06%)</title><rect x="557.8" y="819.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="560.8" y="830.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (1,099 samples, 34.61%)</title><rect x="558.6" y="819.0" width="408.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="561.6" y="830.0">rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::Writ..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;CardTableBarrierSet::AccessBarrier&lt;1097812ull, CardTableBarrierSet&gt;, (AccessInternal::BarrierType)2, 1097812ull&gt;::oop_access_barrier(void*) (3 samples, 0.09%)</title><rect x="559.7" y="803.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="562.7" y="814.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.03%)</title><rect x="560.8" y="803.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="563.8" y="814.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.158] (2 samples, 0.06%)</title><rect x="561.2" y="803.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="564.2" y="814.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="561.9" y="803.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="564.9" y="814.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (5 samples, 0.16%)</title><rect x="562.3" y="803.0" width="1.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="565.3" y="814.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (3 samples, 0.09%)</title><rect x="562.6" y="787.0" width="1.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="565.6" y="798.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.03%)</title><rect x="563.4" y="771.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="566.4" y="782.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned int) (1 samples, 0.03%)</title><rect x="563.8" y="787.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="566.8" y="798.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,078 samples, 33.95%)</title><rect x="564.1" y="803.0" width="400.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="567.1" y="814.0">rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb:..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.06%)</title><rect x="564.1" y="787.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="567.1" y="798.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,076 samples, 33.89%)</title><rect x="564.9" y="787.0" width="399.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="567.9" y="798.0">rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rock..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,068 samples, 33.64%)</title><rect x="564.9" y="771.0" width="396.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="567.9" y="782.0">rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb..</text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (1 samples, 0.03%)</title><rect x="565.3" y="755.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="568.3" y="766.0"></text>
</g>
<g>
<title>/usr/lib/i386-linux-gnu/libstdc++.so.6.0.25 (1 samples, 0.03%)</title><rect x="565.6" y="755.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="568.6" y="766.0"></text>
</g>
<g>
<title>_init (1 samples, 0.03%)</title><rect x="566.0" y="755.0" width="0.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="569.0" y="766.0"></text>
</g>
<g>
<title>free (1 samples, 0.03%)</title><rect x="566.4" y="755.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="569.4" y="766.0"></text>
</g>
<g>
<title>operator delete(void*) (4 samples, 0.13%)</title><rect x="566.7" y="755.0" width="1.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="569.7" y="766.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (1,026 samples, 32.31%)</title><rect x="568.2" y="755.0" width="381.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="571.2" y="766.0">rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;,..</text>
</g>
<g>
<title>/lib/i386-linux-gnu/ld-2.27.so (1 samples, 0.03%)</title><rect x="568.2" y="739.0" width="0.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="571.2" y="750.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (2 samples, 0.06%)</title><rect x="568.6" y="739.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="571.6" y="750.0"></text>
</g>
<g>
<title>_init (1 samples, 0.03%)</title><rect x="569.3" y="739.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="572.3" y="750.0"></text>
</g>
<g>
<title>pthread_cond_destroy (1 samples, 0.03%)</title><rect x="569.7" y="739.0" width="0.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="572.7" y="750.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned int, rocksdb::PreReleaseCallback*) (1,006 samples, 31.69%)</title><rect x="570.1" y="739.0" width="373.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="573.1" y="750.0">rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions co..</text>
</g>
<g>
<title>/lib/i386-linux-gnu/ld-2.27.so (1 samples, 0.03%)</title><rect x="576.8" y="723.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="579.8" y="734.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (1 samples, 0.03%)</title><rect x="577.1" y="723.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="580.1" y="734.0"></text>
</g>
<g>
<title>___tls_get_addr (3 samples, 0.09%)</title><rect x="577.5" y="723.0" width="1.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="580.5" y="734.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.03%)</title><rect x="578.6" y="723.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="581.6" y="734.0"></text>
</g>
<g>
<title>_init (2 samples, 0.06%)</title><rect x="579.0" y="723.0" width="0.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="582.0" y="734.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.03%)</title><rect x="579.7" y="723.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="582.7" y="734.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="579.7" y="707.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="582.7" y="718.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.03%)</title><rect x="579.7" y="691.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="582.7" y="702.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.03%)</title><rect x="579.7" y="675.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="582.7" y="686.0"></text>
</g>
<g>
<title>call_on_stack (1 samples, 0.03%)</title><rect x="579.7" y="659.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="582.7" y="670.0"></text>
</g>
<g>
<title>__do_softirq (1 samples, 0.03%)</title><rect x="579.7" y="643.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="582.7" y="654.0"></text>
</g>
<g>
<title>run_rebalance_domains (1 samples, 0.03%)</title><rect x="579.7" y="627.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="582.7" y="638.0"></text>
</g>
<g>
<title>rebalance_domains (1 samples, 0.03%)</title><rect x="579.7" y="611.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="582.7" y="622.0"></text>
</g>
<g>
<title>update_blocked_averages (1 samples, 0.03%)</title><rect x="579.7" y="595.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="582.7" y="606.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="579.7" y="579.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="582.7" y="590.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.03%)</title><rect x="580.1" y="723.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="583.1" y="734.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="580.1" y="707.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="583.1" y="718.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="580.1" y="691.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="583.1" y="702.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="580.1" y="675.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="583.1" y="686.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="580.5" y="723.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="583.5" y="734.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="580.5" y="707.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="583.5" y="718.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="580.5" y="691.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="583.5" y="702.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::MergeBatch(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::WriteBatch*, unsigned int*, rocksdb::WriteBatch**) (1 samples, 0.03%)</title><rect x="580.9" y="723.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="583.9" y="734.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (11 samples, 0.35%)</title><rect x="581.2" y="723.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="584.2" y="734.0"></text>
</g>
<g>
<title>___tls_get_addr (1 samples, 0.03%)</title><rect x="584.9" y="707.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="587.9" y="718.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteContext::~WriteContext() (2 samples, 0.06%)</title><rect x="585.3" y="723.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="588.3" y="734.0"></text>
</g>
<g>
<title>rocksdb::SuperVersionContext::Clean() (1 samples, 0.03%)</title><rect x="585.3" y="707.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="588.3" y="718.0"></text>
</g>
<g>
<title>rocksdb::SuperVersionContext::~SuperVersionContext() (1 samples, 0.03%)</title><rect x="585.7" y="707.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="588.7" y="718.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (1 samples, 0.03%)</title><rect x="586.1" y="723.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="589.1" y="734.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (263 samples, 8.28%)</title><rect x="586.4" y="723.0" width="97.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="589.4" y="734.0">rocksdb::DB..</text>
</g>
<g>
<title>rocksdb::DBImpl::MergeBatch(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::WriteBatch*, unsigned int*, rocksdb::WriteBatch**) (1 samples, 0.03%)</title><rect x="586.8" y="707.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="589.8" y="718.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (253 samples, 7.97%)</title><rect x="587.2" y="707.0" width="94.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="590.2" y="718.0">rocksdb::DB..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (251 samples, 7.91%)</title><rect x="587.9" y="691.0" width="93.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="590.9" y="702.0">rocksdb::lo..</text>
</g>
<g>
<title>_init (1 samples, 0.03%)</title><rect x="589.4" y="675.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="592.4" y="686.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (1 samples, 0.03%)</title><rect x="589.8" y="675.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="592.8" y="686.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (2 samples, 0.06%)</title><rect x="590.2" y="675.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="593.2" y="686.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned int) (243 samples, 7.65%)</title><rect x="590.9" y="675.0" width="90.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="593.9" y="686.0">rocksdb::l..</text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (2 samples, 0.06%)</title><rect x="591.3" y="659.0" width="0.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="594.3" y="670.0"></text>
</g>
<g>
<title>___tls_get_addr (1 samples, 0.03%)</title><rect x="592.0" y="659.0" width="0.4" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="595.0" y="670.0"></text>
</g>
<g>
<title>_init (1 samples, 0.03%)</title><rect x="592.4" y="659.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="595.4" y="670.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Flush() (1 samples, 0.03%)</title><rect x="592.8" y="659.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="595.8" y="670.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::use_direct_io() const (1 samples, 0.03%)</title><rect x="593.1" y="659.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="596.1" y="670.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (3 samples, 0.09%)</title><rect x="593.5" y="659.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="596.5" y="670.0"></text>
</g>
<g>
<title>_init (1 samples, 0.03%)</title><rect x="593.9" y="643.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="596.9" y="654.0"></text>
</g>
<g>
<title>rocksdb::WritableFile::PrepareWrite(unsigned int, unsigned int) (1 samples, 0.03%)</title><rect x="594.2" y="643.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="597.2" y="654.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (232 samples, 7.31%)</title><rect x="594.6" y="659.0" width="86.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="597.6" y="670.0">rocksdb::W..</text>
</g>
<g>
<title>/lib/i386-linux-gnu/ld-2.27.so (1 samples, 0.03%)</title><rect x="594.6" y="643.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="597.6" y="654.0"></text>
</g>
<g>
<title>_init (3 samples, 0.09%)</title><rect x="595.0" y="643.0" width="1.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="598.0" y="654.0"></text>
</g>
<g>
<title>rocksdb::GetPerfLevel() (3 samples, 0.09%)</title><rect x="596.1" y="643.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="599.1" y="654.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="596.8" y="627.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="599.8" y="638.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="596.8" y="611.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="599.8" y="622.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="596.8" y="595.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="599.8" y="606.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::GetFileSize() (3 samples, 0.09%)</title><rect x="597.2" y="643.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="600.2" y="654.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="598.0" y="627.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="601.0" y="638.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="598.0" y="611.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="601.0" y="622.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="598.0" y="595.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="601.0" y="606.0"></text>
</g>
<g>
<title>rocksdb::SetPerfLevel(rocksdb::PerfLevel) (2 samples, 0.06%)</title><rect x="598.3" y="643.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="601.3" y="654.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned int) (220 samples, 6.93%)</title><rect x="599.1" y="643.0" width="81.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="602.1" y="654.0">rocksdb::..</text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (3 samples, 0.09%)</title><rect x="601.3" y="627.0" width="1.1" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="604.3" y="638.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="602.4" y="627.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="605.4" y="638.0"></text>
</g>
<g>
<title>__kernel_vsyscall (1 samples, 0.03%)</title><rect x="602.4" y="611.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="605.4" y="622.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (1 samples, 0.03%)</title><rect x="602.4" y="595.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="605.4" y="606.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (1 samples, 0.03%)</title><rect x="602.4" y="579.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="605.4" y="590.0"></text>
</g>
<g>
<title>__kernel_vsyscall (208 samples, 6.55%)</title><rect x="602.8" y="627.0" width="77.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="605.8" y="638.0">__kernel_..</text>
</g>
<g>
<title>entry_SYSENTER_32 (204 samples, 6.43%)</title><rect x="604.3" y="611.0" width="75.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="607.3" y="622.0">entry_SY..</text>
</g>
<g>
<title>do_fast_syscall_32 (204 samples, 6.43%)</title><rect x="604.3" y="595.0" width="75.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="607.3" y="606.0">do_fast_..</text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.09%)</title><rect x="604.3" y="579.0" width="1.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="607.3" y="590.0"></text>
</g>
<g>
<title>schedule (3 samples, 0.09%)</title><rect x="604.3" y="563.0" width="1.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="607.3" y="574.0"></text>
</g>
<g>
<title>__sched_text_start (3 samples, 0.09%)</title><rect x="604.3" y="547.0" width="1.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="607.3" y="558.0"></text>
</g>
<g>
<title>finish_task_switch (3 samples, 0.09%)</title><rect x="604.3" y="531.0" width="1.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="607.3" y="542.0"></text>
</g>
<g>
<title>sys_write (201 samples, 6.33%)</title><rect x="605.4" y="579.0" width="74.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="608.4" y="590.0">sys_write</text>
</g>
<g>
<title>__f_unlock_pos (2 samples, 0.06%)</title><rect x="605.8" y="563.0" width="0.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="608.8" y="574.0"></text>
</g>
<g>
<title>mutex_unlock (2 samples, 0.06%)</title><rect x="605.8" y="547.0" width="0.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="608.8" y="558.0"></text>
</g>
<g>
<title>__fdget_pos (2 samples, 0.06%)</title><rect x="606.5" y="563.0" width="0.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="609.5" y="574.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.03%)</title><rect x="606.5" y="547.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="609.5" y="558.0"></text>
</g>
<g>
<title>__fget (1 samples, 0.03%)</title><rect x="606.5" y="531.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="609.5" y="542.0"></text>
</g>
<g>
<title>mutex_lock (1 samples, 0.03%)</title><rect x="606.9" y="547.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="609.9" y="558.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.03%)</title><rect x="606.9" y="531.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="609.9" y="542.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.03%)</title><rect x="606.9" y="515.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="609.9" y="526.0"></text>
</g>
<g>
<title>__sb_end_write (2 samples, 0.06%)</title><rect x="607.2" y="563.0" width="0.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="610.2" y="574.0"></text>
</g>
<g>
<title>__sb_start_write (2 samples, 0.06%)</title><rect x="608.0" y="563.0" width="0.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="611.0" y="574.0"></text>
</g>
<g>
<title>vfs_write (192 samples, 6.05%)</title><rect x="608.7" y="563.0" width="71.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="611.7" y="574.0">vfs_write</text>
</g>
<g>
<title>__sb_start_write (2 samples, 0.06%)</title><rect x="609.1" y="547.0" width="0.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="612.1" y="558.0"></text>
</g>
<g>
<title>__vfs_write (184 samples, 5.80%)</title><rect x="609.8" y="547.0" width="68.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="612.8" y="558.0">__vfs_w..</text>
</g>
<g>
<title>new_sync_write (183 samples, 5.76%)</title><rect x="610.2" y="531.0" width="68.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="613.2" y="542.0">new_syn..</text>
</g>
<g>
<title>ext4_file_write_iter (182 samples, 5.73%)</title><rect x="610.2" y="515.0" width="67.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="613.2" y="526.0">ext4_fi..</text>
</g>
<g>
<title>__generic_file_write_iter (174 samples, 5.48%)</title><rect x="610.2" y="499.0" width="64.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="613.2" y="510.0">__gener..</text>
</g>
<g>
<title>balance_dirty_pages_ratelimited (1 samples, 0.03%)</title><rect x="611.0" y="483.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="614.0" y="494.0"></text>
</g>
<g>
<title>ext4_da_write_begin (1 samples, 0.03%)</title><rect x="611.3" y="483.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="614.3" y="494.0"></text>
</g>
<g>
<title>ext4_da_write_end (3 samples, 0.09%)</title><rect x="611.7" y="483.0" width="1.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="614.7" y="494.0"></text>
</g>
<g>
<title>file_remove_privs (1 samples, 0.03%)</title><rect x="612.8" y="483.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="615.8" y="494.0"></text>
</g>
<g>
<title>file_update_time (30 samples, 0.94%)</title><rect x="613.2" y="483.0" width="11.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="616.2" y="494.0"></text>
</g>
<g>
<title>__mark_inode_dirty (1 samples, 0.03%)</title><rect x="613.9" y="467.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="616.9" y="478.0"></text>
</g>
<g>
<title>__mnt_drop_write_file (1 samples, 0.03%)</title><rect x="614.3" y="467.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="617.3" y="478.0"></text>
</g>
<g>
<title>current_kernel_time64 (3 samples, 0.09%)</title><rect x="614.7" y="467.0" width="1.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="617.7" y="478.0"></text>
</g>
<g>
<title>current_time (1 samples, 0.03%)</title><rect x="615.8" y="467.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="618.8" y="478.0"></text>
</g>
<g>
<title>generic_update_time (21 samples, 0.66%)</title><rect x="616.2" y="467.0" width="7.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="619.2" y="478.0"></text>
</g>
<g>
<title>__mark_inode_dirty (20 samples, 0.63%)</title><rect x="616.5" y="451.0" width="7.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="619.5" y="462.0"></text>
</g>
<g>
<title>__ext4_journal_start_sb (1 samples, 0.03%)</title><rect x="616.5" y="435.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="619.5" y="446.0"></text>
</g>
<g>
<title>ext4_dirty_inode (18 samples, 0.57%)</title><rect x="616.9" y="435.0" width="6.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="619.9" y="446.0"></text>
</g>
<g>
<title>__ext4_journal_start_sb (3 samples, 0.09%)</title><rect x="616.9" y="419.0" width="1.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="619.9" y="430.0"></text>
</g>
<g>
<title>ext4_journal_check_start (1 samples, 0.03%)</title><rect x="616.9" y="403.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="619.9" y="414.0"></text>
</g>
<g>
<title>jbd2__journal_start (2 samples, 0.06%)</title><rect x="617.3" y="403.0" width="0.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="620.3" y="414.0"></text>
</g>
<g>
<title>start_this_handle (1 samples, 0.03%)</title><rect x="617.7" y="387.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="620.7" y="398.0"></text>
</g>
<g>
<title>ext4_mark_inode_dirty (12 samples, 0.38%)</title><rect x="618.0" y="419.0" width="4.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="621.0" y="430.0"></text>
</g>
<g>
<title>ext4_mark_iloc_dirty (7 samples, 0.22%)</title><rect x="618.0" y="403.0" width="2.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="621.0" y="414.0"></text>
</g>
<g>
<title>__brelse (1 samples, 0.03%)</title><rect x="618.0" y="387.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="621.0" y="398.0"></text>
</g>
<g>
<title>ext4_do_update_inode (6 samples, 0.19%)</title><rect x="618.4" y="387.0" width="2.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="621.4" y="398.0"></text>
</g>
<g>
<title>ext4_inode_csum_set (5 samples, 0.16%)</title><rect x="618.8" y="371.0" width="1.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="621.8" y="382.0"></text>
</g>
<g>
<title>ext4_inode_csum.isra.52 (5 samples, 0.16%)</title><rect x="618.8" y="355.0" width="1.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="621.8" y="366.0"></text>
</g>
<g>
<title>crypto_shash_update (4 samples, 0.13%)</title><rect x="619.1" y="339.0" width="1.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="622.1" y="350.0"></text>
</g>
<g>
<title>chksum_update (4 samples, 0.13%)</title><rect x="619.1" y="323.0" width="1.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="622.1" y="334.0"></text>
</g>
<g>
<title>__crc32c_le (3 samples, 0.09%)</title><rect x="619.5" y="307.0" width="1.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="622.5" y="318.0"></text>
</g>
<g>
<title>ext4_reserve_inode_write (5 samples, 0.16%)</title><rect x="620.6" y="403.0" width="1.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="623.6" y="414.0"></text>
</g>
<g>
<title>__ext4_get_inode_loc (2 samples, 0.06%)</title><rect x="620.6" y="387.0" width="0.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="623.6" y="398.0"></text>
</g>
<g>
<title>ext4_get_group_desc (1 samples, 0.03%)</title><rect x="621.0" y="371.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="624.0" y="382.0"></text>
</g>
<g>
<title>__ext4_journal_get_write_access (1 samples, 0.03%)</title><rect x="621.4" y="387.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="624.4" y="398.0"></text>
</g>
<g>
<title>jbd2_journal_get_write_access (1 samples, 0.03%)</title><rect x="621.4" y="371.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="624.4" y="382.0"></text>
</g>
<g>
<title>jbd2_write_access_granted.part.8 (1 samples, 0.03%)</title><rect x="621.4" y="355.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="624.4" y="366.0"></text>
</g>
<g>
<title>ext4_inode_table (2 samples, 0.06%)</title><rect x="621.7" y="387.0" width="0.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="624.7" y="398.0"></text>
</g>
<g>
<title>ext4_reserve_inode_write (1 samples, 0.03%)</title><rect x="622.5" y="419.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="625.5" y="430.0"></text>
</g>
<g>
<title>jbd2__journal_start (2 samples, 0.06%)</title><rect x="622.9" y="419.0" width="0.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="625.9" y="430.0"></text>
</g>
<g>
<title>ext4_mark_inode_dirty (1 samples, 0.03%)</title><rect x="623.6" y="435.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="626.6" y="446.0"></text>
</g>
<g>
<title>timespec_trunc (1 samples, 0.03%)</title><rect x="624.0" y="467.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="627.0" y="478.0"></text>
</g>
<g>
<title>generic_perform_write (134 samples, 4.22%)</title><rect x="624.3" y="483.0" width="49.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="627.3" y="494.0">gener..</text>
</g>
<g>
<title>__kunmap_atomic (1 samples, 0.03%)</title><rect x="624.7" y="467.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="627.7" y="478.0"></text>
</g>
<g>
<title>balance_dirty_pages_ratelimited (2 samples, 0.06%)</title><rect x="625.1" y="467.0" width="0.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="628.1" y="478.0"></text>
</g>
<g>
<title>ext4_da_write_begin (39 samples, 1.23%)</title><rect x="625.8" y="467.0" width="14.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="628.8" y="478.0"></text>
</g>
<g>
<title>__ext4_journal_start_sb (15 samples, 0.47%)</title><rect x="626.6" y="451.0" width="5.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="629.6" y="462.0"></text>
</g>
<g>
<title>ext4_journal_check_start (1 samples, 0.03%)</title><rect x="626.6" y="435.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="629.6" y="446.0"></text>
</g>
<g>
<title>jbd2__journal_start (13 samples, 0.41%)</title><rect x="626.9" y="435.0" width="4.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="629.9" y="446.0"></text>
</g>
<g>
<title>kmem_cache_alloc (7 samples, 0.22%)</title><rect x="627.3" y="419.0" width="2.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="630.3" y="430.0"></text>
</g>
<g>
<title>memset (1 samples, 0.03%)</title><rect x="629.5" y="403.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="632.5" y="414.0"></text>
</g>
<g>
<title>start_this_handle (5 samples, 0.16%)</title><rect x="629.9" y="419.0" width="1.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="632.9" y="430.0"></text>
</g>
<g>
<title>start_this_handle (1 samples, 0.03%)</title><rect x="631.8" y="435.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="634.8" y="446.0"></text>
</g>
<g>
<title>ext4_block_write_begin (7 samples, 0.22%)</title><rect x="632.1" y="451.0" width="2.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="635.1" y="462.0"></text>
</g>
<g>
<title>clean_bdev_aliases (1 samples, 0.03%)</title><rect x="634.4" y="435.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="637.4" y="446.0"></text>
</g>
<g>
<title>pagevec_lookup_range (1 samples, 0.03%)</title><rect x="634.4" y="419.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="637.4" y="430.0"></text>
</g>
<g>
<title>find_get_pages_range (1 samples, 0.03%)</title><rect x="634.4" y="403.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="637.4" y="414.0"></text>
</g>
<g>
<title>ext4_journal_check_start (1 samples, 0.03%)</title><rect x="634.7" y="451.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="637.7" y="462.0"></text>
</g>
<g>
<title>ext4_nonda_switch (1 samples, 0.03%)</title><rect x="635.1" y="451.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="638.1" y="462.0"></text>
</g>
<g>
<title>grab_cache_page_write_begin (11 samples, 0.35%)</title><rect x="635.5" y="451.0" width="4.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="638.5" y="462.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.03%)</title><rect x="635.5" y="435.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="638.5" y="446.0"></text>
</g>
<g>
<title>pagecache_get_page (10 samples, 0.31%)</title><rect x="635.9" y="435.0" width="3.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="638.9" y="446.0"></text>
</g>
<g>
<title>__alloc_pages_nodemask (1 samples, 0.03%)</title><rect x="636.2" y="419.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="639.2" y="430.0"></text>
</g>
<g>
<title>get_page_from_freelist (1 samples, 0.03%)</title><rect x="636.2" y="403.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="639.2" y="414.0"></text>
</g>
<g>
<title>find_get_entry (5 samples, 0.16%)</title><rect x="636.6" y="419.0" width="1.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="639.6" y="430.0"></text>
</g>
<g>
<title>radix_tree_lookup_slot (4 samples, 0.13%)</title><rect x="637.0" y="403.0" width="1.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="640.0" y="414.0"></text>
</g>
<g>
<title>__radix_tree_lookup (2 samples, 0.06%)</title><rect x="637.7" y="387.0" width="0.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="640.7" y="398.0"></text>
</g>
<g>
<title>radix_tree_lookup_slot (3 samples, 0.09%)</title><rect x="638.5" y="419.0" width="1.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="641.5" y="430.0"></text>
</g>
<g>
<title>jbd2__journal_start (1 samples, 0.03%)</title><rect x="639.6" y="451.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="642.6" y="462.0"></text>
</g>
<g>
<title>wait_for_stable_page (1 samples, 0.03%)</title><rect x="640.0" y="451.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="643.0" y="462.0"></text>
</g>
<g>
<title>ext4_da_write_end (83 samples, 2.61%)</title><rect x="640.3" y="467.0" width="30.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="643.3" y="478.0">ex..</text>
</g>
<g>
<title>__ext4_journal_stop (8 samples, 0.25%)</title><rect x="641.1" y="451.0" width="2.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="644.1" y="462.0"></text>
</g>
<g>
<title>jbd2_journal_stop (7 samples, 0.22%)</title><rect x="641.1" y="435.0" width="2.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="644.1" y="446.0"></text>
</g>
<g>
<title>__wake_up (4 samples, 0.13%)</title><rect x="641.4" y="419.0" width="1.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="644.4" y="430.0"></text>
</g>
<g>
<title>__wake_up_common_lock (4 samples, 0.13%)</title><rect x="641.4" y="403.0" width="1.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="644.4" y="414.0"></text>
</g>
<g>
<title>__lock_text_start (2 samples, 0.06%)</title><rect x="642.2" y="387.0" width="0.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="645.2" y="398.0"></text>
</g>
<g>
<title>__wake_up_common_lock (1 samples, 0.03%)</title><rect x="642.9" y="419.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="645.9" y="430.0"></text>
</g>
<g>
<title>kmem_cache_free (1 samples, 0.03%)</title><rect x="643.3" y="419.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="646.3" y="430.0"></text>
</g>
<g>
<title>kmem_cache_free (1 samples, 0.03%)</title><rect x="643.7" y="435.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="646.7" y="446.0"></text>
</g>
<g>
<title>__mark_inode_dirty (1 samples, 0.03%)</title><rect x="644.0" y="451.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="647.0" y="462.0"></text>
</g>
<g>
<title>generic_write_end (72 samples, 2.27%)</title><rect x="644.4" y="451.0" width="26.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="647.4" y="462.0">g..</text>
</g>
<g>
<title>__block_commit_write.isra.27 (1 samples, 0.03%)</title><rect x="645.2" y="435.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="648.2" y="446.0"></text>
</g>
<g>
<title>__mark_inode_dirty (66 samples, 2.08%)</title><rect x="645.5" y="435.0" width="24.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="648.5" y="446.0">_..</text>
</g>
<g>
<title>ext4_dirty_inode (66 samples, 2.08%)</title><rect x="645.5" y="419.0" width="24.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="648.5" y="430.0">e..</text>
</g>
<g>
<title>__ext4_journal_start_sb (2 samples, 0.06%)</title><rect x="645.9" y="403.0" width="0.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="648.9" y="414.0"></text>
</g>
<g>
<title>ext4_journal_check_start (2 samples, 0.06%)</title><rect x="645.9" y="387.0" width="0.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="648.9" y="398.0"></text>
</g>
<g>
<title>_cond_resched (2 samples, 0.06%)</title><rect x="645.9" y="371.0" width="0.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="648.9" y="382.0"></text>
</g>
<g>
<title>__sched_text_start (2 samples, 0.06%)</title><rect x="645.9" y="355.0" width="0.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="648.9" y="366.0"></text>
</g>
<g>
<title>finish_task_switch (2 samples, 0.06%)</title><rect x="645.9" y="339.0" width="0.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="648.9" y="350.0"></text>
</g>
<g>
<title>__ext4_journal_stop (1 samples, 0.03%)</title><rect x="646.6" y="403.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="649.6" y="414.0"></text>
</g>
<g>
<title>ext4_mark_iloc_dirty (2 samples, 0.06%)</title><rect x="647.0" y="403.0" width="0.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="650.0" y="414.0"></text>
</g>
<g>
<title>ext4_mark_inode_dirty (60 samples, 1.89%)</title><rect x="647.8" y="403.0" width="22.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="650.8" y="414.0">e..</text>
</g>
<g>
<title>ext4_do_update_inode (2 samples, 0.06%)</title><rect x="647.8" y="387.0" width="0.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="650.8" y="398.0"></text>
</g>
<g>
<title>ext4_mark_iloc_dirty (47 samples, 1.48%)</title><rect x="648.5" y="387.0" width="17.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="651.5" y="398.0"></text>
</g>
<g>
<title>__brelse (1 samples, 0.03%)</title><rect x="648.9" y="371.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="651.9" y="382.0"></text>
</g>
<g>
<title>ext4_do_update_inode (44 samples, 1.39%)</title><rect x="649.2" y="371.0" width="16.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="652.2" y="382.0"></text>
</g>
<g>
<title>__ext4_handle_dirty_metadata (2 samples, 0.06%)</title><rect x="651.5" y="355.0" width="0.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="654.5" y="366.0"></text>
</g>
<g>
<title>jbd2_journal_dirty_metadata (1 samples, 0.03%)</title><rect x="651.8" y="339.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="654.8" y="350.0"></text>
</g>
<g>
<title>_raw_spin_lock (1 samples, 0.03%)</title><rect x="652.2" y="355.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="655.2" y="366.0"></text>
</g>
<g>
<title>ext4_inode_csum.isra.52 (2 samples, 0.06%)</title><rect x="652.6" y="355.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="655.6" y="366.0"></text>
</g>
<g>
<title>ext4_inode_csum_set (27 samples, 0.85%)</title><rect x="653.3" y="355.0" width="10.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="656.3" y="366.0"></text>
</g>
<g>
<title>crypto_shash_update (1 samples, 0.03%)</title><rect x="653.7" y="339.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="656.7" y="350.0"></text>
</g>
<g>
<title>ext4_inode_csum.isra.52 (25 samples, 0.79%)</title><rect x="654.1" y="339.0" width="9.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="657.1" y="350.0"></text>
</g>
<g>
<title>chksum_update (1 samples, 0.03%)</title><rect x="655.2" y="323.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="658.2" y="334.0"></text>
</g>
<g>
<title>crypto_shash_update (21 samples, 0.66%)</title><rect x="655.6" y="323.0" width="7.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="658.6" y="334.0"></text>
</g>
<g>
<title>__crc32c_le (3 samples, 0.09%)</title><rect x="655.9" y="307.0" width="1.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="658.9" y="318.0"></text>
</g>
<g>
<title>chksum_update (16 samples, 0.50%)</title><rect x="657.0" y="307.0" width="6.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="660.0" y="318.0"></text>
</g>
<g>
<title>__crc32c_le (16 samples, 0.50%)</title><rect x="657.0" y="291.0" width="6.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="660.0" y="302.0"></text>
</g>
<g>
<title>memset (1 samples, 0.03%)</title><rect x="663.0" y="307.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="666.0" y="318.0"></text>
</g>
<g>
<title>from_kgid (1 samples, 0.03%)</title><rect x="663.4" y="355.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="666.4" y="366.0"></text>
</g>
<g>
<title>map_id_up (1 samples, 0.03%)</title><rect x="663.4" y="339.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="666.4" y="350.0"></text>
</g>
<g>
<title>from_kprojid (1 samples, 0.03%)</title><rect x="663.7" y="355.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="666.7" y="366.0"></text>
</g>
<g>
<title>map_id_up (1 samples, 0.03%)</title><rect x="663.7" y="339.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="666.7" y="350.0"></text>
</g>
<g>
<title>from_kuid (2 samples, 0.06%)</title><rect x="664.1" y="355.0" width="0.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="667.1" y="366.0"></text>
</g>
<g>
<title>map_id_up (2 samples, 0.06%)</title><rect x="664.1" y="339.0" width="0.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="667.1" y="350.0"></text>
</g>
<g>
<title>jbd2_journal_dirty_metadata (2 samples, 0.06%)</title><rect x="664.9" y="355.0" width="0.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="667.9" y="366.0"></text>
</g>
<g>
<title>from_kuid (1 samples, 0.03%)</title><rect x="665.6" y="371.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="668.6" y="382.0"></text>
</g>
<g>
<title>ext4_reserve_inode_write (11 samples, 0.35%)</title><rect x="666.0" y="387.0" width="4.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="669.0" y="398.0"></text>
</g>
<g>
<title>__ext4_get_inode_loc (9 samples, 0.28%)</title><rect x="666.0" y="371.0" width="3.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="669.0" y="382.0"></text>
</g>
<g>
<title>__getblk_gfp (6 samples, 0.19%)</title><rect x="666.3" y="355.0" width="2.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="669.3" y="366.0"></text>
</g>
<g>
<title>__find_get_block (5 samples, 0.16%)</title><rect x="666.3" y="339.0" width="1.9" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="669.3" y="350.0"></text>
</g>
<g>
<title>lookup_page_ext (2 samples, 0.06%)</title><rect x="666.7" y="323.0" width="0.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="669.7" y="334.0"></text>
</g>
<g>
<title>mark_page_accessed (2 samples, 0.06%)</title><rect x="667.5" y="323.0" width="0.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="670.5" y="334.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.03%)</title><rect x="668.2" y="339.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="671.2" y="350.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.03%)</title><rect x="668.2" y="323.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="671.2" y="334.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="668.2" y="307.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="671.2" y="318.0"></text>
</g>
<g>
<title>ext4_get_group_desc (1 samples, 0.03%)</title><rect x="668.6" y="355.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="671.6" y="366.0"></text>
</g>
<g>
<title>ext4_inode_table (1 samples, 0.03%)</title><rect x="668.9" y="355.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="671.9" y="366.0"></text>
</g>
<g>
<title>__ext4_journal_get_write_access (1 samples, 0.03%)</title><rect x="669.3" y="371.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="672.3" y="382.0"></text>
</g>
<g>
<title>jbd2_journal_get_write_access (1 samples, 0.03%)</title><rect x="669.3" y="355.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="672.3" y="366.0"></text>
</g>
<g>
<title>__getblk_gfp (1 samples, 0.03%)</title><rect x="669.7" y="371.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="672.7" y="382.0"></text>
</g>
<g>
<title>block_write_end (1 samples, 0.03%)</title><rect x="670.1" y="435.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="673.1" y="446.0"></text>
</g>
<g>
<title>__block_commit_write.isra.27 (1 samples, 0.03%)</title><rect x="670.1" y="419.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="673.1" y="430.0"></text>
</g>
<g>
<title>ext4_dirty_inode (2 samples, 0.06%)</title><rect x="670.4" y="435.0" width="0.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="673.4" y="446.0"></text>
</g>
<g>
<title>ext4_nonda_switch (3 samples, 0.09%)</title><rect x="671.2" y="467.0" width="1.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="674.2" y="478.0"></text>
</g>
<g>
<title>iov_iter_copy_from_user_atomic (1 samples, 0.03%)</title><rect x="672.3" y="467.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="675.3" y="478.0"></text>
</g>
<g>
<title>kmap_atomic (1 samples, 0.03%)</title><rect x="672.3" y="451.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="675.3" y="462.0"></text>
</g>
<g>
<title>kmap_atomic_prot (1 samples, 0.03%)</title><rect x="672.3" y="435.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="675.3" y="446.0"></text>
</g>
<g>
<title>page_address (1 samples, 0.03%)</title><rect x="672.3" y="419.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="675.3" y="430.0"></text>
</g>
<g>
<title>iov_iter_fault_in_readable (2 samples, 0.06%)</title><rect x="672.7" y="467.0" width="0.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="675.7" y="478.0"></text>
</g>
<g>
<title>kmap_atomic (2 samples, 0.06%)</title><rect x="673.4" y="467.0" width="0.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="676.4" y="478.0"></text>
</g>
<g>
<title>iov_iter_advance (1 samples, 0.03%)</title><rect x="674.1" y="483.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="677.1" y="494.0"></text>
</g>
<g>
<title>iov_iter_copy_from_user_atomic (1 samples, 0.03%)</title><rect x="674.5" y="483.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="677.5" y="494.0"></text>
</g>
<g>
<title>down_write_trylock (1 samples, 0.03%)</title><rect x="674.9" y="499.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="677.9" y="510.0"></text>
</g>
<g>
<title>ext4_write_checks (3 samples, 0.09%)</title><rect x="675.3" y="499.0" width="1.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="678.3" y="510.0"></text>
</g>
<g>
<title>generic_write_checks (2 samples, 0.06%)</title><rect x="675.6" y="483.0" width="0.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="678.6" y="494.0"></text>
</g>
<g>
<title>file_update_time (1 samples, 0.03%)</title><rect x="676.4" y="499.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="679.4" y="510.0"></text>
</g>
<g>
<title>generic_write_checks (2 samples, 0.06%)</title><rect x="676.7" y="499.0" width="0.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="679.7" y="510.0"></text>
</g>
<g>
<title>up_write (1 samples, 0.03%)</title><rect x="677.5" y="499.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="680.5" y="510.0"></text>
</g>
<g>
<title>ext4_write_checks (1 samples, 0.03%)</title><rect x="677.9" y="515.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="680.9" y="526.0"></text>
</g>
<g>
<title>fsnotify (2 samples, 0.06%)</title><rect x="678.2" y="547.0" width="0.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="681.2" y="558.0"></text>
</g>
<g>
<title>rw_verify_area (2 samples, 0.06%)</title><rect x="679.0" y="547.0" width="0.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="682.0" y="558.0"></text>
</g>
<g>
<title>security_file_permission (2 samples, 0.06%)</title><rect x="679.0" y="531.0" width="0.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="682.0" y="542.0"></text>
</g>
<g>
<title>apparmor_file_permission (1 samples, 0.03%)</title><rect x="679.0" y="515.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="682.0" y="526.0"></text>
</g>
<g>
<title>common_file_perm (1 samples, 0.03%)</title><rect x="679.0" y="499.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="682.0" y="510.0"></text>
</g>
<g>
<title>aa_file_perm (1 samples, 0.03%)</title><rect x="679.0" y="483.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="682.0" y="494.0"></text>
</g>
<g>
<title>common_file_perm (1 samples, 0.03%)</title><rect x="679.3" y="515.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="682.3" y="526.0"></text>
</g>
<g>
<title>security_file_permission (1 samples, 0.03%)</title><rect x="679.7" y="547.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="682.7" y="558.0"></text>
</g>
<g>
<title>__write (1 samples, 0.03%)</title><rect x="680.1" y="627.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="683.1" y="638.0"></text>
</g>
<g>
<title>_init (1 samples, 0.03%)</title><rect x="680.5" y="627.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="683.5" y="638.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned int) (1 samples, 0.03%)</title><rect x="680.8" y="659.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="683.8" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Append(rocksdb::WriteBatch*, rocksdb::WriteBatch const*, bool) (1 samples, 0.03%)</title><rect x="681.2" y="707.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="684.2" y="718.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::IsLatestPersistentState(rocksdb::WriteBatch const*) (5 samples, 0.16%)</title><rect x="681.6" y="707.0" width="1.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="684.6" y="718.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="683.1" y="691.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="686.1" y="702.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="683.1" y="675.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="686.1" y="686.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="683.1" y="659.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="686.1" y="670.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (1 samples, 0.03%)</title><rect x="683.4" y="707.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="686.4" y="718.0"></text>
</g>
<g>
<title>std::string::_M_leak_hard() (1 samples, 0.03%)</title><rect x="683.8" y="707.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="686.8" y="718.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (14 samples, 0.44%)</title><rect x="684.2" y="723.0" width="5.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="687.2" y="734.0"></text>
</g>
<g>
<title>___tls_get_addr (1 samples, 0.03%)</title><rect x="684.9" y="707.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="687.9" y="718.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::LockInternal() (9 samples, 0.28%)</title><rect x="685.3" y="707.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="688.3" y="718.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_lock (6 samples, 0.19%)</title><rect x="685.3" y="691.0" width="2.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="688.3" y="702.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="687.5" y="691.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="690.5" y="702.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.06%)</title><rect x="687.9" y="691.0" width="0.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="690.9" y="702.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (2 samples, 0.06%)</title><rect x="688.6" y="707.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="691.6" y="718.0"></text>
</g>
<g>
<title>rocksdb::SuperVersionContext::Clean() (1 samples, 0.03%)</title><rect x="689.4" y="723.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="692.4" y="734.0"></text>
</g>
<g>
<title>rocksdb::SuperVersionContext::~SuperVersionContext() (1 samples, 0.03%)</title><rect x="689.8" y="723.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="692.8" y="734.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (1 samples, 0.03%)</title><rect x="690.1" y="723.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="693.1" y="734.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (554 samples, 17.45%)</title><rect x="690.5" y="723.0" width="205.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="693.5" y="734.0">rocksdb::WriteBatchInternal..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.03%)</title><rect x="691.2" y="707.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="694.2" y="718.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Handler::Continue() (3 samples, 0.09%)</title><rect x="691.6" y="707.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="694.6" y="718.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (546 samples, 17.20%)</title><rect x="692.7" y="707.0" width="203.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="695.7" y="718.0">rocksdb::WriteBatch::Itera..</text>
</g>
<g>
<title>rocksdb::GetLengthPrefixedSlice(rocksdb::Slice*, rocksdb::Slice*) (1 samples, 0.03%)</title><rect x="694.2" y="691.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="697.2" y="702.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (537 samples, 16.91%)</title><rect x="694.6" y="691.0" width="199.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="697.6" y="702.0">rocksdb::MemTableInserter:..</text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::GetMemTable() const (1 samples, 0.03%)</title><rect x="695.0" y="675.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="698.0" y="686.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::Seek(unsigned int) (3 samples, 0.09%)</title><rect x="695.3" y="675.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="698.3" y="686.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (3 samples, 0.09%)</title><rect x="696.4" y="675.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="699.4" y="686.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (529 samples, 16.66%)</title><rect x="697.6" y="675.0" width="196.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="700.6" y="686.0">rocksdb::MemTableInserter:..</text>
</g>
<g>
<title>/tmp/librocksdbjni17072222630024017723.so (3 samples, 0.09%)</title><rect x="698.7" y="659.0" width="1.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="701.7" y="670.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilySet::GetDefault() const (2 samples, 0.06%)</title><rect x="699.8" y="659.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="702.8" y="670.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (2 samples, 0.06%)</title><rect x="700.5" y="659.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="703.5" y="670.0"></text>
</g>
<g>
<title>common_exception (2 samples, 0.06%)</title><rect x="700.5" y="643.0" width="0.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="703.5" y="654.0"></text>
</g>
<g>
<title>do_page_fault (2 samples, 0.06%)</title><rect x="700.5" y="627.0" width="0.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="703.5" y="638.0"></text>
</g>
<g>
<title>__do_page_fault (2 samples, 0.06%)</title><rect x="700.5" y="611.0" width="0.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="703.5" y="622.0"></text>
</g>
<g>
<title>handle_mm_fault (2 samples, 0.06%)</title><rect x="700.5" y="595.0" width="0.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="703.5" y="606.0"></text>
</g>
<g>
<title>__alloc_pages_nodemask (2 samples, 0.06%)</title><rect x="700.5" y="579.0" width="0.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="703.5" y="590.0"></text>
</g>
<g>
<title>get_page_from_freelist (2 samples, 0.06%)</title><rect x="700.5" y="563.0" width="0.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="703.5" y="574.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (517 samples, 16.28%)</title><rect x="701.3" y="659.0" width="192.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="704.3" y="670.0">rocksdb::MemTable::Add(un..</text>
</g>
<g>
<title>/tmp/librocksdbjni17072222630024017723.so (503 samples, 15.84%)</title><rect x="703.5" y="643.0" width="186.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="706.5" y="654.0">/tmp/librocksdbjni170722..</text>
</g>
<g>
<title>/lib/i386-linux-gnu/ld-2.27.so (1 samples, 0.03%)</title><rect x="703.9" y="627.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="706.9" y="638.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni17072222630024017723.so (6 samples, 0.19%)</title><rect x="704.2" y="627.0" width="2.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="707.2" y="638.0"></text>
</g>
<g>
<title>common_exception (1 samples, 0.03%)</title><rect x="705.0" y="611.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="708.0" y="622.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.03%)</title><rect x="705.0" y="595.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="708.0" y="606.0"></text>
</g>
<g>
<title>__do_page_fault (1 samples, 0.03%)</title><rect x="705.0" y="579.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="708.0" y="590.0"></text>
</g>
<g>
<title>handle_mm_fault (1 samples, 0.03%)</title><rect x="705.0" y="563.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="708.0" y="574.0"></text>
</g>
<g>
<title>__pte_alloc (1 samples, 0.03%)</title><rect x="705.0" y="547.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="708.0" y="558.0"></text>
</g>
<g>
<title>native_set_pmd (1 samples, 0.03%)</title><rect x="705.0" y="531.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="708.0" y="542.0"></text>
</g>
<g>
<title>rocksdb::ConcurrentArena::AllocateAligned(unsigned int, unsigned int, rocksdb::Logger*) (3 samples, 0.09%)</title><rect x="705.4" y="611.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="708.4" y="622.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (491 samples, 15.46%)</title><rect x="706.5" y="627.0" width="182.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="709.5" y="638.0">bool rocksdb::InlineSkip..</text>
</g>
<g>
<title>/lib/i386-linux-gnu/ld-2.27.so (2 samples, 0.06%)</title><rect x="707.6" y="611.0" width="0.7" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="710.6" y="622.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni17072222630024017723.so (384 samples, 12.09%)</title><rect x="708.3" y="611.0" width="142.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="711.3" y="622.0">/tmp/librocksdbjni..</text>
</g>
<g>
<title>/lib/i386-linux-gnu/ld-2.27.so (6 samples, 0.19%)</title><rect x="717.3" y="595.0" width="2.2" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="720.3" y="606.0"></text>
</g>
<g>
<title>___tls_get_addr (5 samples, 0.16%)</title><rect x="719.5" y="595.0" width="1.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="722.5" y="606.0"></text>
</g>
<g>
<title>non-virtual thunk to rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (2 samples, 0.06%)</title><rect x="721.3" y="595.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="724.3" y="606.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (347 samples, 10.93%)</title><rect x="722.1" y="595.0" width="129.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="725.1" y="606.0">rocksdb::MemTabl..</text>
</g>
<g>
<title>/lib/i386-linux-gnu/ld-2.27.so (5 samples, 0.16%)</title><rect x="722.8" y="579.0" width="1.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="725.8" y="590.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.03%)</title><rect x="724.7" y="579.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="727.7" y="590.0"></text>
</g>
<g>
<title>_init (1 samples, 0.03%)</title><rect x="725.1" y="579.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="728.1" y="590.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.06%)</title><rect x="725.4" y="579.0" width="0.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="728.4" y="590.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (336 samples, 10.58%)</title><rect x="726.2" y="579.0" width="124.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="729.2" y="590.0">rocksdb::BaseCo..</text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (3 samples, 0.09%)</title><rect x="728.8" y="563.0" width="1.1" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="731.8" y="574.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (97 samples, 3.06%)</title><rect x="729.9" y="563.0" width="36.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="732.9" y="574.0">JNI..</text>
</g>
<g>
<title>SignatureIterator::SignatureIterator(Symbol*) (1 samples, 0.03%)</title><rect x="730.3" y="547.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="733.3" y="558.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.158] (1 samples, 0.03%)</title><rect x="730.6" y="547.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="733.6" y="558.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (93 samples, 2.93%)</title><rect x="731.0" y="547.0" width="34.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="734.0" y="558.0">jn..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;CardTableBarrierSet::AccessBarrier&lt;1097812ull, CardTableBarrierSet&gt;, (AccessInternal::BarrierType)2, 1097812ull&gt;::oop_access_barrier(void*) (1 samples, 0.03%)</title><rect x="732.5" y="531.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="735.5" y="542.0"></text>
</g>
<g>
<title>Fingerprinter::fingerprint() (1 samples, 0.03%)</title><rect x="732.9" y="531.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="735.9" y="542.0"></text>
</g>
<g>
<title>Klass::method_at_vtable(int) (1 samples, 0.03%)</title><rect x="733.2" y="531.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="736.2" y="542.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.03%)</title><rect x="733.6" y="531.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="736.6" y="542.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 0.09%)</title><rect x="734.0" y="531.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="737.0" y="542.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.158] (5 samples, 0.16%)</title><rect x="735.1" y="531.0" width="1.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="738.1" y="542.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="737.0" y="531.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="740.0" y="542.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.141] (75 samples, 2.36%)</title><rect x="737.3" y="531.0" width="27.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="740.3" y="542.0">j..</text>
</g>
<g>
<title>.L347 (4 samples, 0.13%)</title><rect x="742.2" y="515.0" width="1.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="745.2" y="526.0"></text>
</g>
<g>
<title>.L357 (2 samples, 0.06%)</title><rect x="743.6" y="515.0" width="0.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="746.6" y="526.0"></text>
</g>
<g>
<title>Fingerprinter::fingerprint() (1 samples, 0.03%)</title><rect x="744.4" y="515.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="747.4" y="526.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long long) (2 samples, 0.06%)</title><rect x="744.8" y="515.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="747.8" y="526.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (40 samples, 1.26%)</title><rect x="745.5" y="515.0" width="14.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="748.5" y="526.0"></text>
</g>
<g>
<title>.L409 (19 samples, 0.60%)</title><rect x="745.5" y="499.0" width="7.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="748.5" y="510.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (2 samples, 0.06%)</title><rect x="746.6" y="483.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="749.6" y="494.0"></text>
</g>
<g>
<title>HandleMark::~HandleMark() (1 samples, 0.03%)</title><rect x="747.4" y="483.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="750.4" y="494.0"></text>
</g>
<g>
<title>JNIHandleBlock::release_block(JNIHandleBlock*, Thread*) (1 samples, 0.03%)</title><rect x="747.7" y="483.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="750.7" y="494.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (4 samples, 0.13%)</title><rect x="748.1" y="483.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="751.1" y="494.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (6 samples, 0.19%)</title><rect x="749.6" y="483.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="752.6" y="494.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.03%)</title><rect x="751.1" y="467.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="754.1" y="478.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (1 samples, 0.03%)</title><rect x="751.4" y="467.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="754.4" y="478.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (2 samples, 0.06%)</title><rect x="751.8" y="483.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="754.8" y="494.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.03%)</title><rect x="752.6" y="499.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="755.6" y="510.0"></text>
</g>
<g>
<title>JNIHandleBlock::release_block(JNIHandleBlock*, Thread*) (1 samples, 0.03%)</title><rect x="752.9" y="499.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="755.9" y="510.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (11 samples, 0.35%)</title><rect x="753.3" y="499.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="756.3" y="510.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.03%)</title><rect x="755.5" y="483.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="758.5" y="494.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (4 samples, 0.13%)</title><rect x="755.9" y="483.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="758.9" y="494.0"></text>
</g>
<g>
<title>Method::is_empty_method() const (1 samples, 0.03%)</title><rect x="757.4" y="499.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="760.4" y="510.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="757.8" y="499.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="760.8" y="510.0"></text>
</g>
<g>
<title>os::current_stack_pointer() (5 samples, 0.16%)</title><rect x="758.1" y="499.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="761.1" y="510.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="760.0" y="499.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="763.0" y="510.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="760.0" y="483.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="763.0" y="494.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="760.0" y="467.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="763.0" y="478.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.03%)</title><rect x="760.4" y="515.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="763.4" y="526.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.di (1 samples, 0.03%)</title><rect x="760.7" y="515.0" width="0.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="763.7" y="526.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (3 samples, 0.09%)</title><rect x="761.1" y="515.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="764.1" y="526.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.03%)</title><rect x="761.9" y="499.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="764.9" y="510.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="761.9" y="483.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="764.9" y="494.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.03%)</title><rect x="761.9" y="467.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="764.9" y="478.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.03%)</title><rect x="761.9" y="451.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="764.9" y="462.0"></text>
</g>
<g>
<title>call_on_stack (1 samples, 0.03%)</title><rect x="761.9" y="435.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="764.9" y="446.0"></text>
</g>
<g>
<title>__do_softirq (1 samples, 0.03%)</title><rect x="761.9" y="419.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="764.9" y="430.0"></text>
</g>
<g>
<title>run_rebalance_domains (1 samples, 0.03%)</title><rect x="761.9" y="403.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="764.9" y="414.0"></text>
</g>
<g>
<title>rebalance_domains (1 samples, 0.03%)</title><rect x="761.9" y="387.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="764.9" y="398.0"></text>
</g>
<g>
<title>update_blocked_averages (1 samples, 0.03%)</title><rect x="761.9" y="371.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="764.9" y="382.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="761.9" y="355.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="764.9" y="366.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (7 samples, 0.22%)</title><rect x="762.2" y="515.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="765.2" y="526.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;false&gt;(_jobject*) (1 samples, 0.03%)</title><rect x="764.8" y="515.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="767.8" y="526.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="765.2" y="531.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="768.2" y="542.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.141] (1 samples, 0.03%)</title><rect x="765.6" y="547.0" width="0.3" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="768.6" y="558.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (175 samples, 5.51%)</title><rect x="765.9" y="563.0" width="65.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="768.9" y="574.0">JNIEnv_..</text>
</g>
<g>
<title>SignatureIterator::SignatureIterator(Symbol*) (1 samples, 0.03%)</title><rect x="766.7" y="547.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="769.7" y="558.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.06%)</title><rect x="767.1" y="547.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="770.1" y="558.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (170 samples, 5.35%)</title><rect x="767.8" y="547.0" width="63.2" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="770.8" y="558.0">jni_Cal..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;CardTableBarrierSet::AccessBarrier&lt;1097812ull, CardTableBarrierSet&gt;, (AccessInternal::BarrierType)2, 1097812ull&gt;::oop_access_barrier(void*) (1 samples, 0.03%)</title><rect x="770.4" y="531.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="773.4" y="542.0"></text>
</g>
<g>
<title>Fingerprinter::fingerprint() (1 samples, 0.03%)</title><rect x="770.8" y="531.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="773.8" y="542.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (3 samples, 0.09%)</title><rect x="771.1" y="531.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="774.1" y="542.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.03%)</title><rect x="772.3" y="531.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="775.3" y="542.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long long) (1 samples, 0.03%)</title><rect x="772.6" y="531.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="775.6" y="542.0"></text>
</g>
<g>
<title>Klass::method_at_vtable(int) (1 samples, 0.03%)</title><rect x="773.0" y="531.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="776.0" y="542.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.03%)</title><rect x="773.4" y="531.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="776.4" y="542.0"></text>
</g>
<g>
<title>SignatureIterator::SignatureIterator(Symbol*) (1 samples, 0.03%)</title><rect x="773.7" y="531.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="776.7" y="542.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (4 samples, 0.13%)</title><rect x="774.1" y="531.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="777.1" y="542.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.158] (10 samples, 0.31%)</title><rect x="775.6" y="531.0" width="3.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="778.6" y="542.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="779.0" y="515.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="782.0" y="526.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="779.0" y="499.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="782.0" y="510.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="779.0" y="483.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="782.0" y="494.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.ax (7 samples, 0.22%)</title><rect x="779.3" y="531.0" width="2.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="782.3" y="542.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.141] (131 samples, 4.13%)</title><rect x="781.9" y="531.0" width="48.7" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="784.9" y="542.0">jni_..</text>
</g>
<g>
<title>.L344 (1 samples, 0.03%)</title><rect x="790.8" y="515.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="793.8" y="526.0"></text>
</g>
<g>
<title>.L347 (2 samples, 0.06%)</title><rect x="791.2" y="515.0" width="0.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="794.2" y="526.0"></text>
</g>
<g>
<title>.L348 (2 samples, 0.06%)</title><rect x="792.0" y="515.0" width="0.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="795.0" y="526.0"></text>
</g>
<g>
<title>.L352 (2 samples, 0.06%)</title><rect x="792.7" y="515.0" width="0.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="795.7" y="526.0"></text>
</g>
<g>
<title>.L354 (5 samples, 0.16%)</title><rect x="793.4" y="515.0" width="1.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="796.4" y="526.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (4 samples, 0.13%)</title><rect x="795.3" y="515.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="798.3" y="526.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long long) (2 samples, 0.06%)</title><rect x="796.8" y="515.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="799.8" y="526.0"></text>
</g>
<g>
<title>JavaCallArguments::JavaCallArguments(int) (1 samples, 0.03%)</title><rect x="797.5" y="515.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="800.5" y="526.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (69 samples, 2.17%)</title><rect x="797.9" y="515.0" width="25.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="800.9" y="526.0">J..</text>
</g>
<g>
<title>.L409 (33 samples, 1.04%)</title><rect x="798.3" y="499.0" width="12.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="801.3" y="510.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (2 samples, 0.06%)</title><rect x="800.5" y="483.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="803.5" y="494.0"></text>
</g>
<g>
<title>HandleMark::~HandleMark() (5 samples, 0.16%)</title><rect x="801.3" y="483.0" width="1.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="804.3" y="494.0"></text>
</g>
<g>
<title>JNIHandleBlock::release_block(JNIHandleBlock*, Thread*) (1 samples, 0.03%)</title><rect x="803.1" y="483.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="806.1" y="494.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (4 samples, 0.13%)</title><rect x="803.5" y="483.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="806.5" y="494.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (14 samples, 0.44%)</title><rect x="805.0" y="483.0" width="5.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="808.0" y="494.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (2 samples, 0.06%)</title><rect x="808.3" y="467.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="811.3" y="478.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (3 samples, 0.09%)</title><rect x="809.1" y="467.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="812.1" y="478.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="810.2" y="483.0" width="0.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="813.2" y="494.0"></text>
</g>
<g>
<title>JNIHandleBlock::release_block(JNIHandleBlock*, Thread*) (2 samples, 0.06%)</title><rect x="810.5" y="499.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="813.5" y="510.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (1 samples, 0.03%)</title><rect x="811.3" y="499.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="814.3" y="510.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (23 samples, 0.72%)</title><rect x="811.7" y="499.0" width="8.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="814.7" y="510.0"></text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (4 samples, 0.13%)</title><rect x="813.9" y="483.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="816.9" y="494.0"></text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (2 samples, 0.06%)</title><rect x="815.4" y="483.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="818.4" y="494.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (2 samples, 0.06%)</title><rect x="816.1" y="483.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="819.1" y="494.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (9 samples, 0.28%)</title><rect x="816.9" y="483.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="819.9" y="494.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.ax (1 samples, 0.03%)</title><rect x="820.2" y="499.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="823.2" y="510.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="820.6" y="499.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="823.6" y="510.0"></text>
</g>
<g>
<title>os::current_stack_pointer() (4 samples, 0.13%)</title><rect x="820.9" y="499.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="823.9" y="510.0"></text>
</g>
<g>
<title>os::os_exception_wrapper(void (*)(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*), JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.06%)</title><rect x="822.4" y="499.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="825.4" y="510.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.03%)</title><rect x="823.2" y="499.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="826.2" y="510.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (5 samples, 0.16%)</title><rect x="823.5" y="515.0" width="1.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="826.5" y="526.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="825.4" y="515.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="828.4" y="526.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (5 samples, 0.16%)</title><rect x="825.8" y="515.0" width="1.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="828.8" y="526.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (7 samples, 0.22%)</title><rect x="827.6" y="515.0" width="2.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="830.6" y="526.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;false&gt;(_jobject*) (1 samples, 0.03%)</title><rect x="830.2" y="515.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="833.2" y="526.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="830.6" y="531.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="833.6" y="542.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.03%)</title><rect x="831.0" y="563.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="834.0" y="574.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_lock (4 samples, 0.13%)</title><rect x="831.4" y="563.0" width="1.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="834.4" y="574.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (2 samples, 0.06%)</title><rect x="832.8" y="563.0" width="0.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="835.8" y="574.0"></text>
</g>
<g>
<title>_init (1 samples, 0.03%)</title><rect x="833.6" y="563.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="836.6" y="574.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (1 samples, 0.03%)</title><rect x="834.0" y="563.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="837.0" y="574.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (1 samples, 0.03%)</title><rect x="834.3" y="563.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="837.3" y="574.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (27 samples, 0.85%)</title><rect x="834.7" y="563.0" width="10.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="837.7" y="574.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (3 samples, 0.09%)</title><rect x="835.8" y="547.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="838.8" y="558.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (9 samples, 0.28%)</title><rect x="836.9" y="547.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="839.9" y="558.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="839.9" y="531.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="842.9" y="542.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="839.9" y="515.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="842.9" y="526.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="839.9" y="499.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="842.9" y="510.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.158] (10 samples, 0.31%)</title><rect x="840.3" y="547.0" width="3.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="843.3" y="558.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="843.6" y="531.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="846.6" y="542.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="843.6" y="515.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="846.6" y="526.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="843.6" y="499.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="846.6" y="510.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="843.6" y="483.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="846.6" y="494.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.03%)</title><rect x="843.6" y="467.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="846.6" y="478.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (2 samples, 0.06%)</title><rect x="844.0" y="547.0" width="0.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="847.0" y="558.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.06%)</title><rect x="844.7" y="563.0" width="0.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="847.7" y="574.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (5 samples, 0.16%)</title><rect x="845.5" y="563.0" width="1.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="848.5" y="574.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (6 samples, 0.19%)</title><rect x="847.3" y="563.0" width="2.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="850.3" y="574.0"></text>
</g>
<g>
<title>Threads::is_supported_jni_version_including_1_1(int) (2 samples, 0.06%)</title><rect x="848.5" y="547.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="851.5" y="558.0"></text>
</g>
<g>
<title>jni_GetEnv (1 samples, 0.03%)</title><rect x="849.2" y="547.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="852.2" y="558.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::releaseJniEnv(unsigned char&amp;) const (2 samples, 0.06%)</title><rect x="849.6" y="563.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="852.6" y="574.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (1 samples, 0.03%)</title><rect x="850.3" y="563.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="853.3" y="574.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() (1 samples, 0.03%)</title><rect x="850.7" y="563.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="853.7" y="574.0"></text>
</g>
<g>
<title>non-virtual thunk to rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.03%)</title><rect x="851.1" y="611.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="854.1" y="622.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.03%)</title><rect x="851.4" y="611.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="854.4" y="622.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (14 samples, 0.44%)</title><rect x="851.8" y="611.0" width="5.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="854.8" y="622.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (11 samples, 0.35%)</title><rect x="852.9" y="595.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="855.9" y="606.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (7 samples, 0.22%)</title><rect x="852.9" y="579.0" width="2.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="855.9" y="590.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (7 samples, 0.22%)</title><rect x="852.9" y="563.0" width="2.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="855.9" y="574.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.03%)</title><rect x="852.9" y="547.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="855.9" y="558.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.141] (6 samples, 0.19%)</title><rect x="853.3" y="547.0" width="2.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="856.3" y="558.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (3 samples, 0.09%)</title><rect x="853.7" y="531.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="856.7" y="542.0"></text>
</g>
<g>
<title>.L409 (2 samples, 0.06%)</title><rect x="853.7" y="515.0" width="0.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="856.7" y="526.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.03%)</title><rect x="853.7" y="499.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="856.7" y="510.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.03%)</title><rect x="854.0" y="499.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="857.0" y="510.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.03%)</title><rect x="854.4" y="515.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="857.4" y="526.0"></text>
</g>
<g>
<title>SignatureIterator::SignatureIterator(Symbol*) (1 samples, 0.03%)</title><rect x="854.8" y="531.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="857.8" y="542.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.03%)</title><rect x="855.1" y="531.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="858.1" y="542.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (3 samples, 0.09%)</title><rect x="855.5" y="579.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="858.5" y="590.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (3 samples, 0.09%)</title><rect x="855.5" y="563.0" width="1.1" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="858.5" y="574.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.141] (3 samples, 0.09%)</title><rect x="855.5" y="547.0" width="1.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="858.5" y="558.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (3 samples, 0.09%)</title><rect x="855.5" y="531.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="858.5" y="542.0"></text>
</g>
<g>
<title>.L409 (2 samples, 0.06%)</title><rect x="855.5" y="515.0" width="0.8" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="858.5" y="526.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (2 samples, 0.06%)</title><rect x="855.5" y="499.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="858.5" y="510.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="855.9" y="483.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="858.9" y="494.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (1 samples, 0.03%)</title><rect x="856.3" y="515.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="859.3" y="526.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.03%)</title><rect x="856.6" y="579.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="859.6" y="590.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (86 samples, 2.71%)</title><rect x="857.0" y="611.0" width="32.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="860.0" y="622.0">ro..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.03%)</title><rect x="857.7" y="595.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="860.7" y="606.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.03%)</title><rect x="858.1" y="595.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="861.1" y="606.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.03%)</title><rect x="858.5" y="595.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="861.5" y="606.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (80 samples, 2.52%)</title><rect x="858.9" y="595.0" width="29.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="861.9" y="606.0">ro..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (7 samples, 0.22%)</title><rect x="858.9" y="579.0" width="2.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="861.9" y="590.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (7 samples, 0.22%)</title><rect x="858.9" y="563.0" width="2.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="861.9" y="574.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.141] (7 samples, 0.22%)</title><rect x="858.9" y="547.0" width="2.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="861.9" y="558.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (4 samples, 0.13%)</title><rect x="860.0" y="531.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="863.0" y="542.0"></text>
</g>
<g>
<title>.L409 (3 samples, 0.09%)</title><rect x="860.0" y="515.0" width="1.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="863.0" y="526.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;CardTableBarrierSet::AccessBarrier&lt;1097812ull, CardTableBarrierSet&gt;, (AccessInternal::BarrierType)2, 1097812ull&gt;::oop_access_barrier(void*) (1 samples, 0.03%)</title><rect x="860.0" y="499.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="863.0" y="510.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (1 samples, 0.03%)</title><rect x="860.3" y="499.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="863.3" y="510.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.03%)</title><rect x="860.7" y="499.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="863.7" y="510.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.03%)</title><rect x="860.7" y="483.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="863.7" y="494.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.03%)</title><rect x="861.1" y="515.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="864.1" y="526.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (65 samples, 2.05%)</title><rect x="861.5" y="579.0" width="24.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="864.5" y="590.0">J..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.03%)</title><rect x="861.5" y="563.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="864.5" y="574.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.158] (1 samples, 0.03%)</title><rect x="861.8" y="563.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="864.8" y="574.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (61 samples, 1.92%)</title><rect x="862.2" y="563.0" width="22.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="865.2" y="574.0">j..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;CardTableBarrierSet::AccessBarrier&lt;1097812ull, CardTableBarrierSet&gt;, (AccessInternal::BarrierType)2, 1097812ull&gt;::oop_access_barrier(void*) (4 samples, 0.13%)</title><rect x="864.4" y="547.0" width="1.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="867.4" y="558.0"></text>
</g>
<g>
<title>Fingerprinter::fingerprint() (1 samples, 0.03%)</title><rect x="865.9" y="547.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="868.9" y="558.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (1 samples, 0.03%)</title><rect x="866.3" y="547.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="869.3" y="558.0"></text>
</g>
<g>
<title>JavaCallArguments::JavaCallArguments(int) (1 samples, 0.03%)</title><rect x="866.7" y="547.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="869.7" y="558.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.03%)</title><rect x="867.0" y="547.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="870.0" y="558.0"></text>
</g>
<g>
<title>Klass::method_at_vtable(int) (2 samples, 0.06%)</title><rect x="867.4" y="547.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="870.4" y="558.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.03%)</title><rect x="868.1" y="547.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="871.1" y="558.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.158] (1 samples, 0.03%)</title><rect x="868.5" y="547.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="871.5" y="558.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.141] (41 samples, 1.29%)</title><rect x="868.9" y="547.0" width="15.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="871.9" y="558.0"></text>
</g>
<g>
<title>.L348 (1 samples, 0.03%)</title><rect x="870.7" y="531.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="873.7" y="542.0"></text>
</g>
<g>
<title>.L352 (1 samples, 0.03%)</title><rect x="871.1" y="531.0" width="0.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="874.1" y="542.0"></text>
</g>
<g>
<title>.L354 (1 samples, 0.03%)</title><rect x="871.5" y="531.0" width="0.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="874.5" y="542.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (25 samples, 0.79%)</title><rect x="871.9" y="531.0" width="9.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="874.9" y="542.0"></text>
</g>
<g>
<title>.L409 (10 samples, 0.31%)</title><rect x="871.9" y="515.0" width="3.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="874.9" y="526.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.03%)</title><rect x="871.9" y="499.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="874.9" y="510.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (4 samples, 0.13%)</title><rect x="872.2" y="499.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="875.2" y="510.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (2 samples, 0.06%)</title><rect x="873.7" y="499.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="876.7" y="510.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.03%)</title><rect x="874.1" y="483.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="877.1" y="494.0"></text>
</g>
<g>
<title>JavaThread::can_call_java() const (1 samples, 0.03%)</title><rect x="874.5" y="499.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="877.5" y="510.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (2 samples, 0.06%)</title><rect x="874.8" y="499.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="877.8" y="510.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (2 samples, 0.06%)</title><rect x="875.6" y="515.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="878.6" y="526.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (8 samples, 0.25%)</title><rect x="876.3" y="515.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="879.3" y="526.0"></text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (1 samples, 0.03%)</title><rect x="877.8" y="499.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="880.8" y="510.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="878.2" y="499.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="881.2" y="510.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (2 samples, 0.06%)</title><rect x="878.6" y="499.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="881.6" y="510.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (2 samples, 0.06%)</title><rect x="879.3" y="515.0" width="0.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="882.3" y="526.0"></text>
</g>
<g>
<title>os::current_stack_pointer() (1 samples, 0.03%)</title><rect x="880.0" y="515.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="883.0" y="526.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (2 samples, 0.06%)</title><rect x="880.4" y="515.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="883.4" y="526.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.03%)</title><rect x="881.2" y="531.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="884.2" y="542.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="881.5" y="531.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="884.5" y="542.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="881.9" y="531.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="884.9" y="542.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (3 samples, 0.09%)</title><rect x="882.3" y="531.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="885.3" y="542.0"></text>
</g>
<g>
<title>os::os_exception_wrapper(void (*)(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*), JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.06%)</title><rect x="883.4" y="531.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="886.4" y="542.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="884.1" y="547.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="887.1" y="558.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;false&gt;(_jobject*) (1 samples, 0.03%)</title><rect x="884.5" y="547.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="887.5" y="558.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.141] (2 samples, 0.06%)</title><rect x="884.9" y="563.0" width="0.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="887.9" y="574.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_lock (1 samples, 0.03%)</title><rect x="885.6" y="579.0" width="0.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="888.6" y="590.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (1 samples, 0.03%)</title><rect x="886.0" y="579.0" width="0.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="889.0" y="590.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (1 samples, 0.03%)</title><rect x="886.4" y="579.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="889.4" y="590.0"></text>
</g>
<g>
<title>jni_GetEnv (2 samples, 0.06%)</title><rect x="886.7" y="579.0" width="0.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="889.7" y="590.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (2 samples, 0.06%)</title><rect x="887.5" y="579.0" width="0.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="890.5" y="590.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (1 samples, 0.03%)</title><rect x="888.2" y="579.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="891.2" y="590.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.03%)</title><rect x="888.2" y="563.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="891.2" y="574.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (1 samples, 0.03%)</title><rect x="888.6" y="595.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="891.6" y="606.0"></text>
</g>
<g>
<title>rocksdb::ConcurrentArena::AllocateAligned(unsigned int, unsigned int, rocksdb::Logger*) (1 samples, 0.03%)</title><rect x="889.0" y="627.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="892.0" y="638.0"></text>
</g>
<g>
<title>rocksdb::MemTableRep::KeyComparator::decode_key(char const*) const (2 samples, 0.06%)</title><rect x="889.3" y="627.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="892.3" y="638.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() (1 samples, 0.03%)</title><rect x="890.1" y="627.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="893.1" y="638.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (1 samples, 0.03%)</title><rect x="890.4" y="643.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="893.4" y="654.0"></text>
</g>
<g>
<title>common_exception (2 samples, 0.06%)</title><rect x="890.8" y="643.0" width="0.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="893.8" y="654.0"></text>
</g>
<g>
<title>do_page_fault (2 samples, 0.06%)</title><rect x="890.8" y="627.0" width="0.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="893.8" y="638.0"></text>
</g>
<g>
<title>__do_page_fault (2 samples, 0.06%)</title><rect x="890.8" y="611.0" width="0.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="893.8" y="622.0"></text>
</g>
<g>
<title>handle_mm_fault (2 samples, 0.06%)</title><rect x="890.8" y="595.0" width="0.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="893.8" y="606.0"></text>
</g>
<g>
<title>__alloc_pages_nodemask (1 samples, 0.03%)</title><rect x="890.8" y="579.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="893.8" y="590.0"></text>
</g>
<g>
<title>get_page_from_freelist (1 samples, 0.03%)</title><rect x="890.8" y="563.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="893.8" y="574.0"></text>
</g>
<g>
<title>mem_cgroup_commit_charge (1 samples, 0.03%)</title><rect x="891.2" y="579.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="894.2" y="590.0"></text>
</g>
<g>
<title>rocksdb::MemTable::UpdateFlushState() (3 samples, 0.09%)</title><rect x="891.6" y="643.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="894.6" y="654.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni17072222630024017723.so (1 samples, 0.03%)</title><rect x="891.6" y="627.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="894.6" y="638.0"></text>
</g>
<g>
<title>_init (1 samples, 0.03%)</title><rect x="891.9" y="627.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="894.9" y="638.0"></text>
</g>
<g>
<title>rocksdb::MemTable::ShouldFlushNow() const (1 samples, 0.03%)</title><rect x="892.3" y="627.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="895.3" y="638.0"></text>
</g>
<g>
<title>rocksdb::MemTable::UpdateOldestKeyTime() (1 samples, 0.03%)</title><rect x="892.7" y="643.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="895.7" y="654.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() (1 samples, 0.03%)</title><rect x="893.0" y="643.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="896.0" y="654.0"></text>
</g>
<g>
<title>rocksdb::MemTable::UpdateOldestKeyTime() (1 samples, 0.03%)</title><rect x="893.4" y="659.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="896.4" y="670.0"></text>
</g>
<g>
<title>rocksdb::PackSequenceAndType(unsigned long long, rocksdb::ValueType) (1 samples, 0.03%)</title><rect x="893.8" y="659.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="896.8" y="670.0"></text>
</g>
<g>
<title>rocksdb::ReadRecordFromWriteBatch(rocksdb::Slice*, char*, unsigned int*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*) (4 samples, 0.13%)</title><rect x="894.2" y="691.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="897.2" y="702.0"></text>
</g>
<g>
<title>_init (1 samples, 0.03%)</title><rect x="894.9" y="675.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="897.9" y="686.0"></text>
</g>
<g>
<title>rocksdb::GetLengthPrefixedSlice(rocksdb::Slice*, rocksdb::Slice*) (1 samples, 0.03%)</title><rect x="895.3" y="675.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="898.3" y="686.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (1 samples, 0.03%)</title><rect x="895.7" y="707.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="898.7" y="718.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::SetSequence(rocksdb::WriteBatch*, unsigned long long) (1 samples, 0.03%)</title><rect x="896.0" y="707.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="899.0" y="718.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned int, bool) (103 samples, 3.24%)</title><rect x="896.4" y="723.0" width="38.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="899.4" y="734.0">roc..</text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (1 samples, 0.03%)</title><rect x="896.4" y="707.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="899.4" y="718.0"></text>
</g>
<g>
<title>free (2 samples, 0.06%)</title><rect x="896.8" y="707.0" width="0.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="899.8" y="718.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (100 samples, 3.15%)</title><rect x="897.5" y="707.0" width="37.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="900.5" y="718.0">roc..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (99 samples, 3.12%)</title><rect x="897.9" y="691.0" width="36.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="900.9" y="702.0">roc..</text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::current() (1 samples, 0.03%)</title><rect x="897.9" y="675.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="900.9" y="686.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (98 samples, 3.09%)</title><rect x="898.3" y="675.0" width="36.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="901.3" y="686.0">roc..</text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (1 samples, 0.03%)</title><rect x="899.0" y="659.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="902.0" y="670.0"></text>
</g>
<g>
<title>common_exception (1 samples, 0.03%)</title><rect x="899.0" y="643.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="902.0" y="654.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.03%)</title><rect x="899.0" y="627.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="902.0" y="638.0"></text>
</g>
<g>
<title>__do_page_fault (1 samples, 0.03%)</title><rect x="899.0" y="611.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="902.0" y="622.0"></text>
</g>
<g>
<title>handle_mm_fault (1 samples, 0.03%)</title><rect x="899.0" y="595.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="902.0" y="606.0"></text>
</g>
<g>
<title>__alloc_pages_nodemask (1 samples, 0.03%)</title><rect x="899.0" y="579.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="902.0" y="590.0"></text>
</g>
<g>
<title>get_page_from_freelist (1 samples, 0.03%)</title><rect x="899.0" y="563.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="902.0" y="574.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni17072222630024017723.so (1 samples, 0.03%)</title><rect x="899.4" y="659.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="902.4" y="670.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="899.7" y="659.0" width="0.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="902.7" y="670.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (1 samples, 0.03%)</title><rect x="900.1" y="659.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="903.1" y="670.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*) (89 samples, 2.80%)</title><rect x="900.5" y="659.0" width="33.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="903.5" y="670.0">ro..</text>
</g>
<g>
<title>/tmp/librocksdbjni17072222630024017723.so (87 samples, 2.74%)</title><rect x="900.9" y="643.0" width="32.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="903.9" y="654.0">/t..</text>
</g>
<g>
<title>/tmp/librocksdbjni17072222630024017723.so (1 samples, 0.03%)</title><rect x="901.2" y="627.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="904.2" y="638.0"></text>
</g>
<g>
<title>rocksdb::ConcurrentArena::AllocateAligned(unsigned int, unsigned int, rocksdb::Logger*) (1 samples, 0.03%)</title><rect x="901.2" y="611.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="904.2" y="622.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;true&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (1 samples, 0.03%)</title><rect x="901.6" y="627.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="904.6" y="638.0"></text>
</g>
<g>
<title>rocksdb::ConcurrentArena::AllocateAligned(unsigned int, unsigned int, rocksdb::Logger*) (1 samples, 0.03%)</title><rect x="902.0" y="627.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="905.0" y="638.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::InsertConcurrently(char const*) (83 samples, 2.61%)</title><rect x="902.3" y="627.0" width="30.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="905.3" y="638.0">ro..</text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;true&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (82 samples, 2.58%)</title><rect x="902.3" y="611.0" width="30.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="905.3" y="622.0">bo..</text>
</g>
<g>
<title>/tmp/librocksdbjni17072222630024017723.so (79 samples, 2.49%)</title><rect x="902.3" y="595.0" width="29.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="905.3" y="606.0">/t..</text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (77 samples, 2.43%)</title><rect x="903.1" y="579.0" width="28.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="906.1" y="590.0">ro..</text>
</g>
<g>
<title>/lib/i386-linux-gnu/ld-2.27.so (1 samples, 0.03%)</title><rect x="903.5" y="563.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="906.5" y="574.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (1 samples, 0.03%)</title><rect x="903.8" y="563.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="906.8" y="574.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (74 samples, 2.33%)</title><rect x="904.2" y="563.0" width="27.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="907.2" y="574.0">r..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (10 samples, 0.31%)</title><rect x="904.6" y="547.0" width="3.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="907.6" y="558.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (9 samples, 0.28%)</title><rect x="904.6" y="531.0" width="3.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="907.6" y="542.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="905.3" y="515.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="908.3" y="526.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.141] (6 samples, 0.19%)</title><rect x="905.7" y="515.0" width="2.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="908.7" y="526.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (5 samples, 0.16%)</title><rect x="906.1" y="499.0" width="1.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="909.1" y="510.0"></text>
</g>
<g>
<title>.L409 (1 samples, 0.03%)</title><rect x="906.1" y="483.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="909.1" y="494.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.03%)</title><rect x="906.1" y="467.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="909.1" y="478.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (3 samples, 0.09%)</title><rect x="906.4" y="483.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="909.4" y="494.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.03%)</title><rect x="907.2" y="467.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="910.2" y="478.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.ax (1 samples, 0.03%)</title><rect x="907.5" y="483.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="910.5" y="494.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.141] (1 samples, 0.03%)</title><rect x="907.9" y="531.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="910.9" y="542.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (25 samples, 0.79%)</title><rect x="908.3" y="547.0" width="9.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="911.3" y="558.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (24 samples, 0.76%)</title><rect x="908.3" y="531.0" width="8.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="911.3" y="542.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;CardTableBarrierSet::AccessBarrier&lt;1097812ull, CardTableBarrierSet&gt;, (AccessInternal::BarrierType)2, 1097812ull&gt;::oop_access_barrier(void*) (1 samples, 0.03%)</title><rect x="908.3" y="515.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="911.3" y="526.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.06%)</title><rect x="908.7" y="515.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="911.7" y="526.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.141] (18 samples, 0.57%)</title><rect x="909.4" y="515.0" width="6.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="912.4" y="526.0"></text>
</g>
<g>
<title>.L347 (1 samples, 0.03%)</title><rect x="910.1" y="499.0" width="0.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="913.1" y="510.0"></text>
</g>
<g>
<title>Fingerprinter::fingerprint() (1 samples, 0.03%)</title><rect x="910.5" y="499.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="913.5" y="510.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (8 samples, 0.25%)</title><rect x="910.9" y="499.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="913.9" y="510.0"></text>
</g>
<g>
<title>.L409 (2 samples, 0.06%)</title><rect x="910.9" y="483.0" width="0.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="913.9" y="494.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (2 samples, 0.06%)</title><rect x="910.9" y="467.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="913.9" y="478.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.03%)</title><rect x="911.3" y="451.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="914.3" y="462.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (5 samples, 0.16%)</title><rect x="911.6" y="483.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="914.6" y="494.0"></text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="912.0" y="467.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="915.0" y="478.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (2 samples, 0.06%)</title><rect x="912.4" y="467.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="915.4" y="478.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="913.1" y="467.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="916.1" y="478.0"></text>
</g>
<g>
<title>os::current_stack_pointer() (1 samples, 0.03%)</title><rect x="913.5" y="483.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="916.5" y="494.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.03%)</title><rect x="913.9" y="499.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="916.9" y="510.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.03%)</title><rect x="914.2" y="499.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="917.2" y="510.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.di (1 samples, 0.03%)</title><rect x="914.6" y="499.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="917.6" y="510.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (3 samples, 0.09%)</title><rect x="915.0" y="499.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="918.0" y="510.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="916.1" y="515.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="919.1" y="526.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.03%)</title><rect x="916.5" y="515.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="919.5" y="526.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;false&gt;(_jobject*) (1 samples, 0.03%)</title><rect x="916.8" y="515.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="919.8" y="526.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.141] (1 samples, 0.03%)</title><rect x="917.2" y="531.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="920.2" y="542.0"></text>
</g>
<g>
<title>__kernel_vsyscall (32 samples, 1.01%)</title><rect x="917.6" y="547.0" width="11.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="920.6" y="558.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (32 samples, 1.01%)</title><rect x="917.6" y="531.0" width="11.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="920.6" y="542.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (32 samples, 1.01%)</title><rect x="917.6" y="515.0" width="11.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="920.6" y="526.0"></text>
</g>
<g>
<title>sys_futex (32 samples, 1.01%)</title><rect x="917.6" y="499.0" width="11.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="920.6" y="510.0"></text>
</g>
<g>
<title>do_futex (32 samples, 1.01%)</title><rect x="917.6" y="483.0" width="11.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="920.6" y="494.0"></text>
</g>
<g>
<title>futex_wait (2 samples, 0.06%)</title><rect x="917.6" y="467.0" width="0.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="920.6" y="478.0"></text>
</g>
<g>
<title>futex_wait_queue_me (1 samples, 0.03%)</title><rect x="917.6" y="451.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="920.6" y="462.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="917.6" y="435.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="920.6" y="446.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.03%)</title><rect x="917.6" y="419.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="920.6" y="430.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="917.6" y="403.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="920.6" y="414.0"></text>
</g>
<g>
<title>plist_add (1 samples, 0.03%)</title><rect x="917.9" y="451.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="920.9" y="462.0"></text>
</g>
<g>
<title>futex_wake (30 samples, 0.94%)</title><rect x="918.3" y="467.0" width="11.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="921.3" y="478.0"></text>
</g>
<g>
<title>wake_up_q (30 samples, 0.94%)</title><rect x="918.3" y="451.0" width="11.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="921.3" y="462.0"></text>
</g>
<g>
<title>try_to_wake_up (30 samples, 0.94%)</title><rect x="918.3" y="435.0" width="11.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="921.3" y="446.0"></text>
</g>
<g>
<title>__lock_text_start (30 samples, 0.94%)</title><rect x="918.3" y="419.0" width="11.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="921.3" y="430.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.06%)</title><rect x="929.5" y="547.0" width="0.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="932.5" y="558.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.03%)</title><rect x="929.5" y="531.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="932.5" y="542.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.158] (1 samples, 0.03%)</title><rect x="929.8" y="531.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="932.8" y="542.0"></text>
</g>
<g>
<title>jni_GetEnv (1 samples, 0.03%)</title><rect x="930.2" y="547.0" width="0.4" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="933.2" y="558.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.03%)</title><rect x="930.6" y="547.0" width="0.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="933.6" y="558.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (2 samples, 0.06%)</title><rect x="931.0" y="547.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="934.0" y="558.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.03%)</title><rect x="931.3" y="531.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="934.3" y="542.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (3 samples, 0.09%)</title><rect x="931.7" y="595.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="934.7" y="606.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (3 samples, 0.09%)</title><rect x="931.7" y="579.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="934.7" y="590.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (2 samples, 0.06%)</title><rect x="931.7" y="563.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="934.7" y="574.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (2 samples, 0.06%)</title><rect x="931.7" y="547.0" width="0.7" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="934.7" y="558.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.141] (2 samples, 0.06%)</title><rect x="931.7" y="531.0" width="0.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="934.7" y="542.0"></text>
</g>
<g>
<title>Fingerprinter::fingerprint() (1 samples, 0.03%)</title><rect x="931.7" y="515.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="934.7" y="526.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="932.1" y="515.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="935.1" y="526.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.03%)</title><rect x="932.4" y="563.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="935.4" y="574.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.158] (1 samples, 0.03%)</title><rect x="932.4" y="547.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="935.4" y="558.0"></text>
</g>
<g>
<title>rocksdb::MemTableRep::KeyComparator::decode_key(char const*) const (1 samples, 0.03%)</title><rect x="932.8" y="611.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="935.8" y="622.0"></text>
</g>
<g>
<title>common_exception (1 samples, 0.03%)</title><rect x="933.2" y="643.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="936.2" y="654.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.03%)</title><rect x="933.2" y="627.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="936.2" y="638.0"></text>
</g>
<g>
<title>__do_page_fault (1 samples, 0.03%)</title><rect x="933.2" y="611.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="936.2" y="622.0"></text>
</g>
<g>
<title>handle_mm_fault (1 samples, 0.03%)</title><rect x="933.2" y="595.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="936.2" y="606.0"></text>
</g>
<g>
<title>__alloc_pages_nodemask (1 samples, 0.03%)</title><rect x="933.2" y="579.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="936.2" y="590.0"></text>
</g>
<g>
<title>get_page_from_freelist (1 samples, 0.03%)</title><rect x="933.2" y="563.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="936.2" y="574.0"></text>
</g>
<g>
<title>std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&amp;) (2 samples, 0.06%)</title><rect x="933.6" y="659.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="936.6" y="670.0"></text>
</g>
<g>
<title>std::_Rb_tree_iterator&lt;std::pair&lt;rocksdb::MemTable* const, rocksdb::MemTablePostProcessInfo&gt; &gt; std::_Rb_tree&lt;rocksdb::MemTable*, std::pair&lt;rocksdb::MemTable* const, rocksdb::MemTablePostProcessInfo&gt;, std::_Select1st&lt;std::pair&lt;rocksdb::MemTable* const, rocksdb::MemTablePostProcessInfo&gt; &gt;, std::less&lt;rocksdb::MemTable*&gt;, std::allocator&lt;std::pair&lt;rocksdb::MemTable* const, rocksdb::MemTablePostProcessInfo&gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;rocksdb::MemTable* const&amp;&gt;, std::tuple&lt;&gt; &gt;(std::_Rb_tree_const_iterator&lt;std::pair&lt;rocksdb::MemTable* const, rocksdb::MemTablePostProcessInfo&gt; &gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;rocksdb::MemTable* const&amp;&gt;&amp;&amp;, std::tuple&lt;&gt;&amp;&amp;) (1 samples, 0.03%)</title><rect x="934.3" y="659.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="937.3" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteController::IsStopped() const (4 samples, 0.13%)</title><rect x="934.7" y="723.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="937.7" y="734.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (5 samples, 0.16%)</title><rect x="936.2" y="723.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="939.2" y="734.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.16%)</title><rect x="936.2" y="707.0" width="1.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="939.2" y="718.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="936.2" y="691.0" width="0.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="939.2" y="702.0"></text>
</g>
<g>
<title>__kernel_vsyscall (1 samples, 0.03%)</title><rect x="936.2" y="675.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="939.2" y="686.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (1 samples, 0.03%)</title><rect x="936.2" y="659.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="939.2" y="670.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (1 samples, 0.03%)</title><rect x="936.2" y="643.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="939.2" y="654.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.03%)</title><rect x="936.5" y="691.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="939.5" y="702.0"></text>
</g>
<g>
<title>__kernel_vsyscall (3 samples, 0.09%)</title><rect x="936.9" y="691.0" width="1.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="939.9" y="702.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (3 samples, 0.09%)</title><rect x="936.9" y="675.0" width="1.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="939.9" y="686.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (3 samples, 0.09%)</title><rect x="936.9" y="659.0" width="1.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="939.9" y="670.0"></text>
</g>
<g>
<title>sys_clock_gettime (3 samples, 0.09%)</title><rect x="936.9" y="643.0" width="1.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="939.9" y="654.0"></text>
</g>
<g>
<title>posix_ktime_get_ts (2 samples, 0.06%)</title><rect x="937.3" y="627.0" width="0.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="940.3" y="638.0"></text>
</g>
<g>
<title>ktime_get_ts64 (2 samples, 0.06%)</title><rect x="937.3" y="611.0" width="0.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="940.3" y="622.0"></text>
</g>
<g>
<title>kvm_clock_get_cycles (2 samples, 0.06%)</title><rect x="937.3" y="595.0" width="0.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="940.3" y="606.0"></text>
</g>
<g>
<title>pvclock_clocksource_read (1 samples, 0.03%)</title><rect x="937.6" y="579.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="940.6" y="590.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CreateMissingNewerLinks(rocksdb::WriteThread::Writer*) (1 samples, 0.03%)</title><rect x="938.0" y="723.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="941.0" y="734.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (3 samples, 0.09%)</title><rect x="938.4" y="723.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="941.4" y="734.0"></text>
</g>
<g>
<title>/usr/lib/i386-linux-gnu/libstdc++.so.6.0.25 (1 samples, 0.03%)</title><rect x="938.8" y="707.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="941.8" y="718.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.03%)</title><rect x="939.1" y="707.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="942.1" y="718.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (9 samples, 0.28%)</title><rect x="939.5" y="723.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="942.5" y="734.0"></text>
</g>
<g>
<title>_init (1 samples, 0.03%)</title><rect x="939.5" y="707.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="942.5" y="718.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (8 samples, 0.25%)</title><rect x="939.9" y="707.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="942.9" y="718.0"></text>
</g>
<g>
<title>__kernel_vsyscall (2 samples, 0.06%)</title><rect x="940.2" y="691.0" width="0.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="943.2" y="702.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (2 samples, 0.06%)</title><rect x="940.2" y="675.0" width="0.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="943.2" y="686.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (2 samples, 0.06%)</title><rect x="940.2" y="659.0" width="0.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="943.2" y="670.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="940.2" y="643.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="943.2" y="654.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="940.2" y="627.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="943.2" y="638.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.03%)</title><rect x="940.2" y="611.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="943.2" y="622.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="940.2" y="595.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="943.2" y="606.0"></text>
</g>
<g>
<title>sys_futex (1 samples, 0.03%)</title><rect x="940.6" y="643.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="943.6" y="654.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.03%)</title><rect x="940.6" y="627.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="943.6" y="638.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.03%)</title><rect x="940.6" y="611.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="943.6" y="622.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.03%)</title><rect x="941.0" y="691.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="944.0" y="702.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.03%)</title><rect x="941.4" y="691.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="944.4" y="702.0"></text>
</g>
<g>
<title>std::condition_variable::condition_variable() (3 samples, 0.09%)</title><rect x="941.7" y="691.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="944.7" y="702.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::SetState(rocksdb::WriteThread::Writer*, unsigned char) (2 samples, 0.06%)</title><rect x="942.9" y="723.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="945.9" y="734.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::AssertHeld() (1 samples, 0.03%)</title><rect x="943.6" y="723.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="946.6" y="734.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteStatusCheck(rocksdb::Status const&amp;) (1 samples, 0.03%)</title><rect x="944.0" y="739.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="947.0" y="750.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (1 samples, 0.03%)</title><rect x="944.3" y="739.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="947.3" y="750.0"></text>
</g>
<g>
<title>rocksdb::PerfStepTimer::Start() (4 samples, 0.13%)</title><rect x="944.7" y="739.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="947.7" y="750.0"></text>
</g>
<g>
<title>rocksdb::Status::operator=(rocksdb::Status&amp;&amp;) (1 samples, 0.03%)</title><rect x="946.2" y="739.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="949.2" y="750.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned int, unsigned int) (3 samples, 0.09%)</title><rect x="946.6" y="739.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="949.6" y="750.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (3 samples, 0.09%)</title><rect x="947.7" y="739.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="950.7" y="750.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="948.4" y="723.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="951.4" y="734.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="948.4" y="707.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="951.4" y="718.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="948.4" y="691.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="951.4" y="702.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::EnterAsBatchGroupLeader(rocksdb::WriteThread::Writer*, rocksdb::WriteThread::WriteGroup*) (1 samples, 0.03%)</title><rect x="948.8" y="739.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="951.8" y="750.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() (1 samples, 0.03%)</title><rect x="949.2" y="739.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="952.2" y="750.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyID(rocksdb::ColumnFamilyHandle*) (3 samples, 0.09%)</title><rect x="949.5" y="755.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="952.5" y="766.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (17 samples, 0.54%)</title><rect x="950.7" y="755.0" width="6.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="953.7" y="766.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (5 samples, 0.16%)</title><rect x="950.7" y="739.0" width="1.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="953.7" y="750.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyID(rocksdb::ColumnFamilyHandle*) (5 samples, 0.16%)</title><rect x="952.5" y="739.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="955.5" y="750.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetID() const (1 samples, 0.03%)</title><rect x="953.3" y="723.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="956.3" y="734.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::cfd() const (2 samples, 0.06%)</title><rect x="953.6" y="723.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="956.6" y="734.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (6 samples, 0.19%)</title><rect x="954.4" y="739.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="957.4" y="750.0"></text>
</g>
<g>
<title>/usr/lib/i386-linux-gnu/libstdc++.so.6.0.25 (1 samples, 0.03%)</title><rect x="954.7" y="723.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="957.7" y="734.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (2 samples, 0.06%)</title><rect x="955.1" y="723.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="958.1" y="734.0"></text>
</g>
<g>
<title>std::string::_M_leak_hard() (2 samples, 0.06%)</title><rect x="955.9" y="723.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="958.9" y="734.0"></text>
</g>
<g>
<title>std::string::append(char const*, unsigned int) (1 samples, 0.03%)</title><rect x="956.6" y="739.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="959.6" y="750.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned int, unsigned int) (2 samples, 0.06%)</title><rect x="957.0" y="755.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="960.0" y="766.0"></text>
</g>
<g>
<title>std::string::_Rep::_M_clone(std::allocator&lt;char&gt; const&amp;, unsigned int) (1 samples, 0.03%)</title><rect x="957.7" y="755.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="960.7" y="766.0"></text>
</g>
<g>
<title>std::string::append(unsigned int, char) (4 samples, 0.13%)</title><rect x="958.1" y="755.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="961.1" y="766.0"></text>
</g>
<g>
<title>std::string::reserve(unsigned int) (3 samples, 0.09%)</title><rect x="959.6" y="755.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="962.6" y="766.0"></text>
</g>
<g>
<title>std::string::resize(unsigned int, char) (3 samples, 0.09%)</title><rect x="960.7" y="755.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="963.7" y="766.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (2 samples, 0.06%)</title><rect x="961.8" y="771.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="964.8" y="782.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (3 samples, 0.09%)</title><rect x="962.5" y="771.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="965.5" y="782.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned int, unsigned int) (3 samples, 0.09%)</title><rect x="963.7" y="771.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="966.7" y="782.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (3 samples, 0.09%)</title><rect x="964.8" y="803.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="967.8" y="814.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.03%)</title><rect x="965.9" y="803.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="968.9" y="814.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned int) (2 samples, 0.06%)</title><rect x="966.3" y="803.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="969.3" y="814.0"></text>
</g>
<g>
<title>[unknown] (152 samples, 4.79%)</title><rect x="967.0" y="835.0" width="56.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="970.0" y="846.0">[unkno..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="967.0" y="819.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="970.0" y="830.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="967.0" y="803.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="970.0" y="814.0"></text>
</g>
<g>
<title>__kernel_vsyscall (141 samples, 4.44%)</title><rect x="967.4" y="819.0" width="52.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="970.4" y="830.0">__ker..</text>
</g>
<g>
<title>entry_SYSENTER_32 (140 samples, 4.41%)</title><rect x="967.8" y="803.0" width="52.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="970.8" y="814.0">entry..</text>
</g>
<g>
<title>do_fast_syscall_32 (140 samples, 4.41%)</title><rect x="967.8" y="787.0" width="52.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="970.8" y="798.0">do_fa..</text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="967.8" y="771.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="970.8" y="782.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="967.8" y="755.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="970.8" y="766.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.03%)</title><rect x="967.8" y="739.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="970.8" y="750.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="967.8" y="723.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="970.8" y="734.0"></text>
</g>
<g>
<title>sys_futex (139 samples, 4.38%)</title><rect x="968.1" y="771.0" width="51.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="971.1" y="782.0">sys_f..</text>
</g>
<g>
<title>do_futex (139 samples, 4.38%)</title><rect x="968.1" y="755.0" width="51.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="971.1" y="766.0">do_fu..</text>
</g>
<g>
<title>futex_wait (40 samples, 1.26%)</title><rect x="968.1" y="739.0" width="14.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="971.1" y="750.0"></text>
</g>
<g>
<title>futex_wait_queue_me (39 samples, 1.23%)</title><rect x="968.1" y="723.0" width="14.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="971.1" y="734.0"></text>
</g>
<g>
<title>schedule (39 samples, 1.23%)</title><rect x="968.1" y="707.0" width="14.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="971.1" y="718.0"></text>
</g>
<g>
<title>__sched_text_start (39 samples, 1.23%)</title><rect x="968.1" y="691.0" width="14.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="971.1" y="702.0"></text>
</g>
<g>
<title>finish_task_switch (39 samples, 1.23%)</title><rect x="968.1" y="675.0" width="14.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="971.1" y="686.0"></text>
</g>
<g>
<title>futex_wait_setup (1 samples, 0.03%)</title><rect x="982.6" y="723.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="985.6" y="734.0"></text>
</g>
<g>
<title>get_futex_value_locked (1 samples, 0.03%)</title><rect x="982.6" y="707.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="985.6" y="718.0"></text>
</g>
<g>
<title>futex_wait_setup (1 samples, 0.03%)</title><rect x="983.0" y="739.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="986.0" y="750.0"></text>
</g>
<g>
<title>futex_wake (98 samples, 3.09%)</title><rect x="983.4" y="739.0" width="36.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="986.4" y="750.0">fut..</text>
</g>
<g>
<title>mark_wake_futex (2 samples, 0.06%)</title><rect x="983.4" y="723.0" width="0.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="986.4" y="734.0"></text>
</g>
<g>
<title>__unqueue_futex (2 samples, 0.06%)</title><rect x="983.4" y="707.0" width="0.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="986.4" y="718.0"></text>
</g>
<g>
<title>wake_q_add (1 samples, 0.03%)</title><rect x="984.1" y="723.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="987.1" y="734.0"></text>
</g>
<g>
<title>wake_up_q (95 samples, 2.99%)</title><rect x="984.5" y="723.0" width="35.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="987.5" y="734.0">wak..</text>
</g>
<g>
<title>try_to_wake_up (95 samples, 2.99%)</title><rect x="984.5" y="707.0" width="35.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="987.5" y="718.0">try..</text>
</g>
<g>
<title>__lock_text_start (95 samples, 2.99%)</title><rect x="984.5" y="691.0" width="35.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="987.5" y="702.0">__l..</text>
</g>
<g>
<title>__pthread_cleanup_push (1 samples, 0.03%)</title><rect x="1019.8" y="819.0" width="0.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1022.8" y="830.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.03%)</title><rect x="1020.2" y="819.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1023.2" y="830.0"></text>
</g>
<g>
<title>malloc (7 samples, 0.22%)</title><rect x="1020.5" y="819.0" width="2.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1023.5" y="830.0"></text>
</g>
<g>
<title>std::string::_Rep::_M_clone(std::allocator&lt;char&gt; const&amp;, unsigned int) (1 samples, 0.03%)</title><rect x="1023.1" y="819.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1026.1" y="830.0"></text>
</g>
<g>
<title>call_stub (11 samples, 0.35%)</title><rect x="1023.5" y="835.0" width="4.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1026.5" y="846.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="1027.6" y="835.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1030.6" y="846.0"></text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.setNativeHandle (18 samples, 0.57%)</title><rect x="1028.0" y="835.0" width="6.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1031.0" y="846.0"></text>
</g>
<g>
<title>org/rocksdb/util/BytewiseComparator.compare (235 samples, 7.40%)</title><rect x="1034.6" y="835.0" width="87.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1037.6" y="846.0">org/rocksd..</text>
</g>
<g>
<title>org/rocksdb/util/BytewiseComparator.compare (233 samples, 7.34%)</title><rect x="1035.4" y="819.0" width="86.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1038.4" y="830.0">org/rocksd..</text>
</g>
<g>
<title>org/rocksdb/AbstractSlice.data (219 samples, 6.90%)</title><rect x="1035.4" y="803.0" width="81.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1038.4" y="814.0">org/rocks..</text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.getNativeHandle (13 samples, 0.41%)</title><rect x="1035.4" y="787.0" width="4.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1038.4" y="798.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (206 samples, 6.49%)</title><rect x="1040.2" y="787.0" width="76.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1043.2" y="798.0">org/rock..</text>
</g>
<g>
<title>Thread::current() (1 samples, 0.03%)</title><rect x="1041.7" y="771.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1044.7" y="782.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (201 samples, 6.33%)</title><rect x="1042.1" y="771.0" width="74.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1045.1" y="782.0">org/rock..</text>
</g>
<g>
<title>Java_org_rocksdb_Slice_data0 (184 samples, 5.80%)</title><rect x="1046.2" y="755.0" width="68.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1049.2" y="766.0">Java_or..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;CardTableBarrierSet::AccessBarrier&lt;1097812ull, CardTableBarrierSet&gt;, (AccessInternal::BarrierType)2, 1097812ull&gt;::oop_access_barrier(void*) (2 samples, 0.06%)</title><rect x="1048.0" y="739.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1051.0" y="750.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (3 samples, 0.09%)</title><rect x="1048.8" y="739.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1051.8" y="750.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.03%)</title><rect x="1049.9" y="739.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1052.9" y="750.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (2 samples, 0.06%)</title><rect x="1050.3" y="739.0" width="0.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1053.3" y="750.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.06%)</title><rect x="1051.0" y="739.0" width="0.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1054.0" y="750.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (21 samples, 0.66%)</title><rect x="1051.7" y="739.0" width="7.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1054.7" y="750.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.03%)</title><rect x="1053.2" y="723.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1056.2" y="734.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (11 samples, 0.35%)</title><rect x="1053.6" y="723.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1056.6" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.158] (5 samples, 0.16%)</title><rect x="1057.7" y="723.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1060.7" y="734.0"></text>
</g>
<g>
<title>jni_NewByteArray (101 samples, 3.18%)</title><rect x="1059.5" y="739.0" width="37.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1062.5" y="750.0">jni..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;CardTableBarrierSet::AccessBarrier&lt;5292116ull, CardTableBarrierSet&gt;, (AccessInternal::BarrierType)0, 5292116ull&gt;::oop_access_barrier(void*, oopDesc*) (3 samples, 0.09%)</title><rect x="1065.5" y="723.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1068.5" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (5 samples, 0.16%)</title><rect x="1066.6" y="723.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1069.6" y="734.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (5 samples, 0.16%)</title><rect x="1068.5" y="723.0" width="1.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1071.5" y="734.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (12 samples, 0.38%)</title><rect x="1070.3" y="723.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1073.3" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.158] (9 samples, 0.28%)</title><rect x="1074.8" y="723.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1077.8" y="734.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (49 samples, 1.54%)</title><rect x="1078.1" y="723.0" width="18.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1081.1" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (37 samples, 1.17%)</title><rect x="1082.2" y="707.0" width="13.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1085.2" y="718.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (35 samples, 1.10%)</title><rect x="1082.6" y="691.0" width="13.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1085.6" y="702.0"></text>
</g>
<g>
<title>DefNewGeneration::unsafe_max_tlab_alloc() const (1 samples, 0.03%)</title><rect x="1087.1" y="675.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1090.1" y="686.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (5 samples, 0.16%)</title><rect x="1087.4" y="675.0" width="1.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1090.4" y="686.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (3 samples, 0.09%)</title><rect x="1088.2" y="659.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1091.2" y="670.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (13 samples, 0.41%)</title><rect x="1089.3" y="675.0" width="4.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1092.3" y="686.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (2 samples, 0.06%)</title><rect x="1094.1" y="675.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1097.1" y="686.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.ax (2 samples, 0.06%)</title><rect x="1094.9" y="675.0" width="0.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1097.9" y="686.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.03%)</title><rect x="1095.6" y="691.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1098.6" y="702.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="1096.0" y="707.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1099.0" y="718.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (2 samples, 0.06%)</title><rect x="1096.3" y="723.0" width="0.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1099.3" y="734.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (47 samples, 1.48%)</title><rect x="1097.1" y="739.0" width="17.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1100.1" y="750.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.06%)</title><rect x="1098.9" y="723.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1101.9" y="734.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.06%)</title><rect x="1099.7" y="723.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1102.7" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.158] (12 samples, 0.38%)</title><rect x="1100.4" y="723.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1103.4" y="734.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (2 samples, 0.06%)</title><rect x="1104.9" y="723.0" width="0.7" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1107.9" y="734.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (12 samples, 0.38%)</title><rect x="1105.6" y="723.0" width="4.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1108.6" y="734.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (4 samples, 0.13%)</title><rect x="1108.6" y="707.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1111.6" y="718.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned int) (12 samples, 0.38%)</title><rect x="1110.1" y="723.0" width="4.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1113.1" y="734.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1114.6" y="755.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1117.6" y="766.0"></text>
</g>
<g>
<title>__kernel_vsyscall (1 samples, 0.03%)</title><rect x="1114.6" y="739.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1117.6" y="750.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (1 samples, 0.03%)</title><rect x="1114.6" y="723.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1117.6" y="734.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (1 samples, 0.03%)</title><rect x="1114.6" y="707.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1117.6" y="718.0"></text>
</g>
<g>
<title>sys_futex (1 samples, 0.03%)</title><rect x="1114.6" y="691.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1117.6" y="702.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.03%)</title><rect x="1114.6" y="675.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1117.6" y="686.0"></text>
</g>
<g>
<title>futex_wait (1 samples, 0.03%)</title><rect x="1114.6" y="659.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1117.6" y="670.0"></text>
</g>
<g>
<title>futex_wait_queue_me (1 samples, 0.03%)</title><rect x="1114.6" y="643.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1117.6" y="654.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="1114.6" y="627.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1117.6" y="638.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.03%)</title><rect x="1114.6" y="611.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1117.6" y="622.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="1114.6" y="595.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1117.6" y="606.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.03%)</title><rect x="1114.9" y="755.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1117.9" y="766.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (4 samples, 0.13%)</title><rect x="1115.3" y="755.0" width="1.5" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1118.3" y="766.0"></text>
</g>
<g>
<title>org/rocksdb/util/BytewiseComparator.compare (14 samples, 0.44%)</title><rect x="1116.8" y="803.0" width="5.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1119.8" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (14 samples, 0.44%)</title><rect x="1116.8" y="787.0" width="5.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1119.8" y="798.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (6 samples, 0.19%)</title><rect x="1116.8" y="771.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1119.8" y="782.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (6 samples, 0.19%)</title><rect x="1116.8" y="755.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1119.8" y="766.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (6 samples, 0.19%)</title><rect x="1116.8" y="739.0" width="2.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1119.8" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (8 samples, 0.25%)</title><rect x="1119.0" y="771.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1122.0" y="782.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (5 samples, 0.16%)</title><rect x="1120.1" y="755.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1123.1" y="766.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (1 samples, 0.03%)</title><rect x="1122.0" y="835.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1125.0" y="846.0"></text>
</g>
<g>
<title>std::string::append(char const*, unsigned int) (5 samples, 0.16%)</title><rect x="1122.4" y="835.0" width="1.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1125.4" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.getArrayCopySync (10 samples, 0.31%)</title><rect x="1124.2" y="867.0" width="3.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1127.2" y="878.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (2 samples, 0.06%)</title><rect x="1125.3" y="851.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1128.3" y="862.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.06%)</title><rect x="1125.3" y="835.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1128.3" y="846.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.06%)</title><rect x="1125.3" y="819.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1128.3" y="830.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (5 samples, 0.16%)</title><rect x="1126.1" y="851.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1129.1" y="862.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (5 samples, 0.16%)</title><rect x="1126.1" y="835.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1129.1" y="846.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.16%)</title><rect x="1126.1" y="819.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1129.1" y="830.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (10 samples, 0.31%)</title><rect x="1127.9" y="931.0" width="3.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1130.9" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.get (10 samples, 0.31%)</title><rect x="1127.9" y="915.0" width="3.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1130.9" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (10 samples, 0.31%)</title><rect x="1127.9" y="899.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1130.9" y="910.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (2 samples, 0.06%)</title><rect x="1131.7" y="963.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1134.7" y="974.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (2 samples, 0.06%)</title><rect x="1131.7" y="947.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1134.7" y="958.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (2 samples, 0.06%)</title><rect x="1131.7" y="931.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1134.7" y="942.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.06%)</title><rect x="1131.7" y="915.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1134.7" y="926.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.09%)</title><rect x="1132.4" y="963.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1135.4" y="974.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.09%)</title><rect x="1132.4" y="947.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1135.4" y="958.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.09%)</title><rect x="1132.4" y="931.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1135.4" y="942.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (140 samples, 4.41%)</title><rect x="1133.5" y="979.0" width="52.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1136.5" y="990.0">one/n..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (140 samples, 4.41%)</title><rect x="1133.5" y="963.0" width="52.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1136.5" y="974.0">one/n..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (140 samples, 4.41%)</title><rect x="1133.5" y="947.0" width="52.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1136.5" y="958.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (126 samples, 3.97%)</title><rect x="1138.7" y="931.0" width="46.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1141.7" y="942.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (116 samples, 3.65%)</title><rect x="1142.4" y="915.0" width="43.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1145.4" y="926.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (112 samples, 3.53%)</title><rect x="1142.4" y="899.0" width="41.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1145.4" y="910.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (112 samples, 3.53%)</title><rect x="1142.4" y="883.0" width="41.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1145.4" y="894.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (103 samples, 3.24%)</title><rect x="1145.8" y="867.0" width="38.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1148.8" y="878.0">sun..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (5 samples, 0.16%)</title><rect x="1148.4" y="851.0" width="1.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1151.4" y="862.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.03%)</title><rect x="1149.9" y="835.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1152.9" y="846.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.06%)</title><rect x="1150.2" y="851.0" width="0.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1153.2" y="862.0"></text>
</g>
<g>
<title>__kernel_vsyscall (2 samples, 0.06%)</title><rect x="1150.2" y="835.0" width="0.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1153.2" y="846.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (2 samples, 0.06%)</title><rect x="1150.2" y="819.0" width="0.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1153.2" y="830.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (2 samples, 0.06%)</title><rect x="1150.2" y="803.0" width="0.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1153.2" y="814.0"></text>
</g>
<g>
<title>__kernel_vsyscall (75 samples, 2.36%)</title><rect x="1151.0" y="851.0" width="27.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1154.0" y="862.0">_..</text>
</g>
<g>
<title>entry_SYSENTER_32 (74 samples, 2.33%)</title><rect x="1151.3" y="835.0" width="27.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1154.3" y="846.0">e..</text>
</g>
<g>
<title>do_fast_syscall_32 (73 samples, 2.30%)</title><rect x="1151.3" y="819.0" width="27.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1154.3" y="830.0">d..</text>
</g>
<g>
<title>__fdget_pos (1 samples, 0.03%)</title><rect x="1151.3" y="803.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1154.3" y="814.0"></text>
</g>
<g>
<title>sys_read (71 samples, 2.24%)</title><rect x="1151.7" y="803.0" width="26.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1154.7" y="814.0">s..</text>
</g>
<g>
<title>__fdget_pos (6 samples, 0.19%)</title><rect x="1152.1" y="787.0" width="2.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1155.1" y="798.0"></text>
</g>
<g>
<title>__fget_light (6 samples, 0.19%)</title><rect x="1152.1" y="771.0" width="2.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1155.1" y="782.0"></text>
</g>
<g>
<title>__fget (4 samples, 0.13%)</title><rect x="1152.8" y="755.0" width="1.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1155.8" y="766.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.03%)</title><rect x="1154.3" y="787.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1157.3" y="798.0"></text>
</g>
<g>
<title>rw_verify_area (1 samples, 0.03%)</title><rect x="1154.7" y="787.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1157.7" y="798.0"></text>
</g>
<g>
<title>vfs_read (62 samples, 1.95%)</title><rect x="1155.1" y="787.0" width="23.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1158.1" y="798.0">v..</text>
</g>
<g>
<title>__vfs_read (46 samples, 1.45%)</title><rect x="1155.4" y="771.0" width="17.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1158.4" y="782.0"></text>
</g>
<g>
<title>new_sync_read (45 samples, 1.42%)</title><rect x="1155.8" y="755.0" width="16.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1158.8" y="766.0"></text>
</g>
<g>
<title>sock_read_iter (43 samples, 1.35%)</title><rect x="1156.6" y="739.0" width="15.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1159.6" y="750.0"></text>
</g>
<g>
<title>sock_recvmsg (42 samples, 1.32%)</title><rect x="1156.9" y="723.0" width="15.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1159.9" y="734.0"></text>
</g>
<g>
<title>inet_recvmsg (36 samples, 1.13%)</title><rect x="1156.9" y="707.0" width="13.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1159.9" y="718.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (3 samples, 0.09%)</title><rect x="1156.9" y="691.0" width="1.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1159.9" y="702.0"></text>
</g>
<g>
<title>tcp_recvmsg (33 samples, 1.04%)</title><rect x="1158.0" y="691.0" width="12.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1161.0" y="702.0"></text>
</g>
<g>
<title>__kfree_skb (4 samples, 0.13%)</title><rect x="1160.3" y="675.0" width="1.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1163.3" y="686.0"></text>
</g>
<g>
<title>skb_release_all (3 samples, 0.09%)</title><rect x="1160.3" y="659.0" width="1.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1163.3" y="670.0"></text>
</g>
<g>
<title>skb_release_data (2 samples, 0.06%)</title><rect x="1160.3" y="643.0" width="0.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1163.3" y="654.0"></text>
</g>
<g>
<title>skb_release_head_state (1 samples, 0.03%)</title><rect x="1161.0" y="643.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1164.0" y="654.0"></text>
</g>
<g>
<title>skb_release_data (1 samples, 0.03%)</title><rect x="1161.4" y="659.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1164.4" y="670.0"></text>
</g>
<g>
<title>_copy_to_iter (2 samples, 0.06%)</title><rect x="1161.8" y="675.0" width="0.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1164.8" y="686.0"></text>
</g>
<g>
<title>lock_sock_nested (2 samples, 0.06%)</title><rect x="1162.5" y="675.0" width="0.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1165.5" y="686.0"></text>
</g>
<g>
<title>__raw_callee_save___pv_queued_spin_unlock (1 samples, 0.03%)</title><rect x="1162.5" y="659.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1165.5" y="670.0"></text>
</g>
<g>
<title>__pv_queued_spin_unlock (1 samples, 0.03%)</title><rect x="1162.5" y="643.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1165.5" y="654.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (1 samples, 0.03%)</title><rect x="1162.9" y="659.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1165.9" y="670.0"></text>
</g>
<g>
<title>release_sock (2 samples, 0.06%)</title><rect x="1163.2" y="675.0" width="0.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1166.2" y="686.0"></text>
</g>
<g>
<title>__raw_callee_save___pv_queued_spin_unlock (1 samples, 0.03%)</title><rect x="1163.2" y="659.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1166.2" y="670.0"></text>
</g>
<g>
<title>tcp_release_cb (1 samples, 0.03%)</title><rect x="1163.6" y="659.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1166.6" y="670.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (13 samples, 0.41%)</title><rect x="1164.0" y="675.0" width="4.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1167.0" y="686.0"></text>
</g>
<g>
<title>__check_object_size (6 samples, 0.19%)</title><rect x="1164.7" y="659.0" width="2.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1167.7" y="670.0"></text>
</g>
<g>
<title>__check_heap_object (2 samples, 0.06%)</title><rect x="1165.1" y="643.0" width="0.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1168.1" y="654.0"></text>
</g>
<g>
<title>__virt_addr_valid (2 samples, 0.06%)</title><rect x="1165.8" y="643.0" width="0.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1168.8" y="654.0"></text>
</g>
<g>
<title>page_address (1 samples, 0.03%)</title><rect x="1166.6" y="643.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1169.6" y="654.0"></text>
</g>
<g>
<title>__virt_addr_valid (1 samples, 0.03%)</title><rect x="1167.0" y="659.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1170.0" y="670.0"></text>
</g>
<g>
<title>_copy_to_iter (4 samples, 0.13%)</title><rect x="1167.3" y="659.0" width="1.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1170.3" y="670.0"></text>
</g>
<g>
<title>copyout (3 samples, 0.09%)</title><rect x="1167.7" y="643.0" width="1.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1170.7" y="654.0"></text>
</g>
<g>
<title>__copy_user_ll (3 samples, 0.09%)</title><rect x="1167.7" y="627.0" width="1.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1170.7" y="638.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (2 samples, 0.06%)</title><rect x="1168.8" y="675.0" width="0.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1171.8" y="686.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (2 samples, 0.06%)</title><rect x="1169.6" y="675.0" width="0.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1172.6" y="686.0"></text>
</g>
<g>
<title>sched_clock_cpu (1 samples, 0.03%)</title><rect x="1169.9" y="659.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1172.9" y="670.0"></text>
</g>
<g>
<title>sched_clock (1 samples, 0.03%)</title><rect x="1169.9" y="643.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1172.9" y="654.0"></text>
</g>
<g>
<title>kvm_sched_clock_read (1 samples, 0.03%)</title><rect x="1169.9" y="627.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1172.9" y="638.0"></text>
</g>
<g>
<title>pvclock_clocksource_read (1 samples, 0.03%)</title><rect x="1169.9" y="611.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1172.9" y="622.0"></text>
</g>
<g>
<title>security_socket_recvmsg (6 samples, 0.19%)</title><rect x="1170.3" y="707.0" width="2.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1173.3" y="718.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (2 samples, 0.06%)</title><rect x="1170.3" y="691.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1173.3" y="702.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (4 samples, 0.13%)</title><rect x="1171.0" y="691.0" width="1.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1174.0" y="702.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (4 samples, 0.13%)</title><rect x="1171.0" y="675.0" width="1.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1174.0" y="686.0"></text>
</g>
<g>
<title>aa_sk_perm (1 samples, 0.03%)</title><rect x="1172.2" y="659.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1175.2" y="670.0"></text>
</g>
<g>
<title>aa_label_sk_perm (1 samples, 0.03%)</title><rect x="1172.2" y="643.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1175.2" y="654.0"></text>
</g>
<g>
<title>rw_verify_area (15 samples, 0.47%)</title><rect x="1172.5" y="771.0" width="5.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1175.5" y="782.0"></text>
</g>
<g>
<title>security_file_permission (13 samples, 0.41%)</title><rect x="1173.3" y="755.0" width="4.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1176.3" y="766.0"></text>
</g>
<g>
<title>apparmor_file_permission (2 samples, 0.06%)</title><rect x="1176.2" y="739.0" width="0.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1179.2" y="750.0"></text>
</g>
<g>
<title>common_file_perm (2 samples, 0.06%)</title><rect x="1176.2" y="723.0" width="0.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1179.2" y="734.0"></text>
</g>
<g>
<title>aa_file_perm (1 samples, 0.03%)</title><rect x="1176.6" y="707.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1179.6" y="718.0"></text>
</g>
<g>
<title>fsnotify (3 samples, 0.09%)</title><rect x="1177.0" y="739.0" width="1.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1180.0" y="750.0"></text>
</g>
<g>
<title>vfs_read (1 samples, 0.03%)</title><rect x="1178.1" y="803.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1181.1" y="814.0"></text>
</g>
<g>
<title>sys_read (1 samples, 0.03%)</title><rect x="1178.5" y="819.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1181.5" y="830.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (2 samples, 0.06%)</title><rect x="1178.9" y="851.0" width="0.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1181.9" y="862.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.cx (1 samples, 0.03%)</title><rect x="1179.6" y="851.0" width="0.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1182.6" y="862.0"></text>
</g>
<g>
<title>convertReturnVal (2 samples, 0.06%)</title><rect x="1180.0" y="851.0" width="0.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1183.0" y="862.0"></text>
</g>
<g>
<title>fdval (2 samples, 0.06%)</title><rect x="1180.7" y="851.0" width="0.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1183.7" y="862.0"></text>
</g>
<g>
<title>read (7 samples, 0.22%)</title><rect x="1181.5" y="851.0" width="2.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1184.5" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (4 samples, 0.13%)</title><rect x="1184.1" y="899.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1187.1" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.13%)</title><rect x="1184.1" y="883.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1187.1" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.13%)</title><rect x="1184.1" y="867.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1187.1" y="878.0"></text>
</g>
<g>
<title>org/rocksdb/util/BytewiseComparator.compare (5 samples, 0.16%)</title><rect x="1185.5" y="1027.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1188.5" y="1038.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (3 samples, 0.09%)</title><rect x="1185.5" y="1011.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1188.5" y="1022.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.03%)</title><rect x="1185.5" y="995.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.5" y="1006.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (2 samples, 0.06%)</title><rect x="1185.9" y="995.0" width="0.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1188.9" y="1006.0"></text>
</g>
<g>
<title>org/rocksdb/util/BytewiseComparator.compare (2 samples, 0.06%)</title><rect x="1186.7" y="1011.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1189.7" y="1022.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractSlice.data (2 samples, 0.06%)</title><rect x="1186.7" y="995.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1189.7" y="1006.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (2 samples, 0.06%)</title><rect x="1186.7" y="979.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1189.7" y="990.0"></text>
</g>
<g>
<title>Thread::current() (2 samples, 0.06%)</title><rect x="1186.7" y="963.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.7" y="974.0"></text>
</g>
<g>
<title>sun/nio/ch/EPoll.wait (1 samples, 0.03%)</title><rect x="1187.4" y="1027.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1190.4" y="1038.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.03%)</title><rect x="1187.4" y="1011.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.4" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.03%)</title><rect x="1187.8" y="1027.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1190.8" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (1 samples, 0.03%)</title><rect x="1187.8" y="1011.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1190.8" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (1 samples, 0.03%)</title><rect x="1187.8" y="995.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1190.8" y="1006.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.03%)</title><rect x="1187.8" y="979.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.8" y="990.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (5 samples, 0.16%)</title><rect x="1188.1" y="1027.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1191.1" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (2 samples, 0.06%)</title><rect x="1188.1" y="1011.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1191.1" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (2 samples, 0.06%)</title><rect x="1188.1" y="995.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1191.1" y="1006.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (2 samples, 0.06%)</title><rect x="1188.1" y="979.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1191.1" y="990.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (2 samples, 0.06%)</title><rect x="1188.1" y="963.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1191.1" y="974.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (2 samples, 0.06%)</title><rect x="1188.1" y="947.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1191.1" y="958.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (2 samples, 0.06%)</title><rect x="1188.1" y="931.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1191.1" y="942.0"></text>
</g>
<g>
<title>Thread::current() (2 samples, 0.06%)</title><rect x="1188.1" y="915.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.1" y="926.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (3 samples, 0.09%)</title><rect x="1188.9" y="1011.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1191.9" y="1022.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (2 samples, 0.06%)</title><rect x="1189.3" y="995.0" width="0.7" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1192.3" y="1006.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="1189.6" y="979.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1192.6" y="990.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="1189.6" y="963.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1192.6" y="974.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="1189.6" y="947.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1192.6" y="958.0"></text>
</g>
</g>
</svg>
