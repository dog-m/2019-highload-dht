<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1062" onload="init(evt)" viewBox="0 0 1200 1062" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1045"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1045"> </text>
<g id="frames">
<g>
<title>all (3,103 samples, 100.00%)</title><rect x="10.0" y="1011.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1022.0">all</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (3 samples, 0.10%)</title><rect x="10.0" y="995.0" width="1.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (3 samples, 0.10%)</title><rect x="10.0" y="979.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, std::string*) (3 samples, 0.10%)</title><rect x="10.0" y="963.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, std::string*) (3 samples, 0.10%)</title><rect x="10.0" y="947.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (3 samples, 0.10%)</title><rect x="10.0" y="931.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (3 samples, 0.10%)</title><rect x="10.0" y="915.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (3 samples, 0.10%)</title><rect x="10.0" y="899.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni1945528177827338328.so (3 samples, 0.10%)</title><rect x="10.0" y="883.0" width="1.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::FindGreaterOrEqual(char const*) const (3 samples, 0.10%)</title><rect x="10.0" y="867.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (3 samples, 0.10%)</title><rect x="10.0" y="851.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (3 samples, 0.10%)</title><rect x="10.0" y="835.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (3 samples, 0.10%)</title><rect x="10.0" y="819.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (3 samples, 0.10%)</title><rect x="10.0" y="803.0" width="1.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.141] (3 samples, 0.10%)</title><rect x="10.0" y="787.0" width="1.1" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (3 samples, 0.10%)</title><rect x="10.0" y="771.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>.L409 (3 samples, 0.10%)</title><rect x="10.0" y="755.0" width="1.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (13 samples, 0.42%)</title><rect x="11.1" y="995.0" width="5.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="14.1" y="1006.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="11.9" y="979.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="14.9" y="990.0"></text>
</g>
<g>
<title>oopFactory::new_objArray(Klass*, int, Thread*) (2 samples, 0.06%)</title><rect x="12.3" y="979.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="15.3" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (2 samples, 0.06%)</title><rect x="12.3" y="963.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="15.3" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="12.3" y="947.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="15.3" y="958.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="12.3" y="931.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="15.3" y="942.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="12.3" y="915.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="15.3" y="926.0"></text>
</g>
<g>
<title>DefNewGeneration::supports_tlab_allocation() const (1 samples, 0.03%)</title><rect x="12.3" y="899.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="15.3" y="910.0"></text>
</g>
<g>
<title>ObjArrayKlass::array_klass_impl(bool, int, Thread*) (1 samples, 0.03%)</title><rect x="12.7" y="947.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="15.7" y="958.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray(BasicType, int, Thread*) (8 samples, 0.26%)</title><rect x="13.0" y="979.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="16.0" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="13.0" y="963.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="16.0" y="974.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (7 samples, 0.23%)</title><rect x="13.4" y="963.0" width="2.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="16.4" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (6 samples, 0.19%)</title><rect x="13.4" y="947.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="16.4" y="958.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (6 samples, 0.19%)</title><rect x="13.4" y="931.0" width="2.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="16.4" y="942.0"></text>
</g>
<g>
<title>DefNewGeneration::unsafe_max_tlab_alloc() const (1 samples, 0.03%)</title><rect x="13.8" y="915.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="16.8" y="926.0"></text>
</g>
<g>
<title>GenCollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.03%)</title><rect x="14.2" y="915.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="17.2" y="926.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (3 samples, 0.10%)</title><rect x="14.6" y="915.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="17.6" y="926.0"></text>
</g>
<g>
<title>GenCollectedHeap::allocate_new_tlab(unsigned int, unsigned int, unsigned int*) (2 samples, 0.06%)</title><rect x="14.6" y="899.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="17.6" y="910.0"></text>
</g>
<g>
<title>GenCollectedHeap::mem_allocate_work(unsigned int, bool, bool*) (2 samples, 0.06%)</title><rect x="14.6" y="883.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="17.6" y="894.0"></text>
</g>
<g>
<title>ContiguousSpace::par_allocate(unsigned int) (1 samples, 0.03%)</title><rect x="14.9" y="867.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="17.9" y="878.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.03%)</title><rect x="15.3" y="899.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="18.3" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (1 samples, 0.03%)</title><rect x="15.3" y="883.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="18.3" y="894.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.03%)</title><rect x="15.3" y="867.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="18.3" y="878.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="15.7" y="947.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="18.7" y="958.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (5 samples, 0.16%)</title><rect x="16.1" y="995.0" width="1.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="19.1" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (5 samples, 0.16%)</title><rect x="16.1" y="979.0" width="1.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="19.1" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (5 samples, 0.16%)</title><rect x="16.1" y="963.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="19.1" y="974.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (5 samples, 0.16%)</title><rect x="16.1" y="947.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="19.1" y="958.0"></text>
</g>
<g>
<title>JfrAllocationTracer::JfrAllocationTracer(HeapWord*, unsigned int, Thread*) (1 samples, 0.03%)</title><rect x="16.1" y="931.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="19.1" y="942.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (3 samples, 0.10%)</title><rect x="16.5" y="931.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="19.5" y="942.0"></text>
</g>
<g>
<title>GenCollectedHeap::allocate_new_tlab(unsigned int, unsigned int, unsigned int*) (2 samples, 0.06%)</title><rect x="16.8" y="915.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="19.8" y="926.0"></text>
</g>
<g>
<title>DefNewGeneration::par_allocate(unsigned int, bool) (1 samples, 0.03%)</title><rect x="16.8" y="899.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="19.8" y="910.0"></text>
</g>
<g>
<title>GenCollectedHeap::mem_allocate_work(unsigned int, bool, bool*) (1 samples, 0.03%)</title><rect x="17.2" y="899.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="20.2" y="910.0"></text>
</g>
<g>
<title>ContiguousSpace::par_allocate(unsigned int) (1 samples, 0.03%)</title><rect x="17.2" y="883.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="20.2" y="894.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="17.2" y="867.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="20.2" y="878.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="17.2" y="851.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="20.2" y="862.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="17.2" y="835.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="20.2" y="846.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.03%)</title><rect x="17.6" y="931.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="20.6" y="942.0"></text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (1 samples, 0.03%)</title><rect x="18.0" y="995.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="21.0" y="1006.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.03%)</title><rect x="18.0" y="979.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="21.0" y="990.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (1 samples, 0.03%)</title><rect x="18.4" y="995.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="21.4" y="1006.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.03%)</title><rect x="18.4" y="979.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="21.4" y="990.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.di (1 samples, 0.03%)</title><rect x="18.4" y="963.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="21.4" y="974.0"></text>
</g>
<g>
<title>[not_walkable_Java] (5 samples, 0.16%)</title><rect x="18.7" y="995.0" width="1.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="21.7" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="18.7" y="979.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="21.7" y="990.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (1 samples, 0.03%)</title><rect x="18.7" y="963.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="21.7" y="974.0"></text>
</g>
<g>
<title>CardTableRS::is_in_young(oopDesc*) const (1 samples, 0.03%)</title><rect x="18.7" y="947.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="21.7" y="958.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="19.1" y="979.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="22.1" y="990.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (1 samples, 0.03%)</title><rect x="19.1" y="963.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="22.1" y="974.0"></text>
</g>
<g>
<title>GenCollectedHeap::is_in_young(oopDesc*) (1 samples, 0.03%)</title><rect x="19.1" y="947.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="22.1" y="958.0"></text>
</g>
<g>
<title>Runtime1::exception_handler_for_pc(JavaThread*) (1 samples, 0.03%)</title><rect x="19.5" y="979.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="22.5" y="990.0"></text>
</g>
<g>
<title>caller_is_deopted() (1 samples, 0.03%)</title><rect x="19.5" y="963.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="22.5" y="974.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.03%)</title><rect x="19.5" y="947.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="22.5" y="958.0"></text>
</g>
<g>
<title>SharedRuntime::exception_handler_for_return_address(JavaThread*, unsigned char*) (1 samples, 0.03%)</title><rect x="19.9" y="979.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="22.9" y="990.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="19.9" y="963.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="22.9" y="974.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="19.9" y="947.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="22.9" y="958.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="19.9" y="931.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="22.9" y="942.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="20.3" y="979.0" width="0.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="23.3" y="990.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.16%)</title><rect x="20.6" y="995.0" width="1.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="23.6" y="1006.0"></text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (1 samples, 0.03%)</title><rect x="20.6" y="979.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="23.6" y="990.0"></text>
</g>
<g>
<title>__kernel_vsyscall (4 samples, 0.13%)</title><rect x="21.0" y="979.0" width="1.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="24.0" y="990.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (4 samples, 0.13%)</title><rect x="21.0" y="963.0" width="1.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="24.0" y="974.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (4 samples, 0.13%)</title><rect x="21.0" y="947.0" width="1.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="24.0" y="958.0"></text>
</g>
<g>
<title>sys_futex (3 samples, 0.10%)</title><rect x="21.4" y="931.0" width="1.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="24.4" y="942.0"></text>
</g>
<g>
<title>do_futex (3 samples, 0.10%)</title><rect x="21.4" y="915.0" width="1.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="24.4" y="926.0"></text>
</g>
<g>
<title>futex_wait (1 samples, 0.03%)</title><rect x="21.4" y="899.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="24.4" y="910.0"></text>
</g>
<g>
<title>futex_wait_queue_me (1 samples, 0.03%)</title><rect x="21.4" y="883.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="24.4" y="894.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="21.4" y="867.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="24.4" y="878.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.03%)</title><rect x="21.4" y="851.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="24.4" y="862.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="21.4" y="835.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="24.4" y="846.0"></text>
</g>
<g>
<title>futex_wake (2 samples, 0.06%)</title><rect x="21.8" y="899.0" width="0.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="24.8" y="910.0"></text>
</g>
<g>
<title>wake_up_q (2 samples, 0.06%)</title><rect x="21.8" y="883.0" width="0.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="24.8" y="894.0"></text>
</g>
<g>
<title>try_to_wake_up (2 samples, 0.06%)</title><rect x="21.8" y="867.0" width="0.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="24.8" y="878.0"></text>
</g>
<g>
<title>__lock_text_start (2 samples, 0.06%)</title><rect x="21.8" y="851.0" width="0.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="24.8" y="862.0"></text>
</g>
<g>
<title>[unknown_Java] (70 samples, 2.26%)</title><rect x="22.5" y="995.0" width="26.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="25.5" y="1006.0">[..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="46.1" y="979.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="49.1" y="990.0"></text>
</g>
<g>
<title>Thread::current() (2 samples, 0.06%)</title><rect x="46.5" y="979.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="49.5" y="990.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.06%)</title><rect x="47.3" y="979.0" width="0.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="50.3" y="990.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.06%)</title><rect x="47.3" y="963.0" width="0.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="50.3" y="974.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.06%)</title><rect x="47.3" y="947.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="50.3" y="958.0"></text>
</g>
<g>
<title>resume_userspace (3 samples, 0.10%)</title><rect x="48.0" y="979.0" width="1.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="51.0" y="990.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.10%)</title><rect x="48.0" y="963.0" width="1.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="51.0" y="974.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.10%)</title><rect x="48.0" y="947.0" width="1.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="51.0" y="958.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="48.8" y="931.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="51.8" y="942.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.03%)</title><rect x="48.8" y="915.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="51.8" y="926.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="48.8" y="899.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="51.8" y="910.0"></text>
</g>
<g>
<title>_IO_default_xsputn (1 samples, 0.03%)</title><rect x="49.2" y="995.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="52.2" y="1006.0"></text>
</g>
<g>
<title>__kernel_vsyscall (1 samples, 0.03%)</title><rect x="49.5" y="995.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="52.5" y="1006.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (1 samples, 0.03%)</title><rect x="49.5" y="979.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="52.5" y="990.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (1 samples, 0.03%)</title><rect x="49.5" y="963.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="52.5" y="974.0"></text>
</g>
<g>
<title>sys_munmap (1 samples, 0.03%)</title><rect x="49.5" y="947.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="52.5" y="958.0"></text>
</g>
<g>
<title>vm_munmap (1 samples, 0.03%)</title><rect x="49.5" y="931.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="52.5" y="942.0"></text>
</g>
<g>
<title>do_munmap (1 samples, 0.03%)</title><rect x="49.5" y="915.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="52.5" y="926.0"></text>
</g>
<g>
<title>unmap_region (1 samples, 0.03%)</title><rect x="49.5" y="899.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="52.5" y="910.0"></text>
</g>
<g>
<title>unmap_vmas (1 samples, 0.03%)</title><rect x="49.5" y="883.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="52.5" y="894.0"></text>
</g>
<g>
<title>unmap_single_vma (1 samples, 0.03%)</title><rect x="49.5" y="867.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="52.5" y="878.0"></text>
</g>
<g>
<title>atomic64_xchg_cx8 (1 samples, 0.03%)</title><rect x="49.5" y="851.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="52.5" y="862.0"></text>
</g>
<g>
<title>clone (115 samples, 3.71%)</title><rect x="49.9" y="995.0" width="43.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="52.9" y="1006.0">clone</text>
</g>
<g>
<title>start_thread (115 samples, 3.71%)</title><rect x="49.9" y="979.0" width="43.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="52.9" y="990.0">star..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (115 samples, 3.71%)</title><rect x="49.9" y="963.0" width="43.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="52.9" y="974.0">thre..</text>
</g>
<g>
<title>Thread::call_run() (115 samples, 3.71%)</title><rect x="49.9" y="947.0" width="43.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="52.9" y="958.0">Thre..</text>
</g>
<g>
<title>JavaThread::run() (93 samples, 3.00%)</title><rect x="49.9" y="931.0" width="35.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="52.9" y="942.0">Jav..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (93 samples, 3.00%)</title><rect x="49.9" y="915.0" width="35.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="52.9" y="926.0">Jav..</text>
</g>
<g>
<title>compiler_thread_entry(JavaThread*, Thread*) (92 samples, 2.96%)</title><rect x="49.9" y="899.0" width="35.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="52.9" y="910.0">co..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (92 samples, 2.96%)</title><rect x="49.9" y="883.0" width="35.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="52.9" y="894.0">Co..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (91 samples, 2.93%)</title><rect x="49.9" y="867.0" width="34.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="52.9" y="878.0">Co..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (87 samples, 2.80%)</title><rect x="49.9" y="851.0" width="33.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="52.9" y="862.0">C2..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (87 samples, 2.80%)</title><rect x="49.9" y="835.0" width="33.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="52.9" y="846.0">Co..</text>
</g>
<g>
<title>Compile::Code_Gen() (39 samples, 1.26%)</title><rect x="49.9" y="819.0" width="14.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="52.9" y="830.0"></text>
</g>
<g>
<title>Compile::Output() (5 samples, 0.16%)</title><rect x="49.9" y="803.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="52.9" y="814.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.03%)</title><rect x="49.9" y="787.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="52.9" y="798.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 0.10%)</title><rect x="50.3" y="787.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="53.3" y="798.0"></text>
</g>
<g>
<title>Block::code_alignment() const (1 samples, 0.03%)</title><rect x="50.3" y="771.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="53.3" y="782.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.03%)</title><rect x="50.7" y="771.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="53.7" y="782.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.03%)</title><rect x="50.7" y="755.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="53.7" y="766.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.03%)</title><rect x="50.7" y="739.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="53.7" y="750.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (1 samples, 0.03%)</title><rect x="51.1" y="771.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="54.1" y="782.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.03%)</title><rect x="51.1" y="755.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="54.1" y="766.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.03%)</title><rect x="51.5" y="787.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="54.5" y="798.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.03%)</title><rect x="51.5" y="771.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="54.5" y="782.0"></text>
</g>
<g>
<title>MachBreakpointNode::size(PhaseRegAlloc*) const (1 samples, 0.03%)</title><rect x="51.5" y="755.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="54.5" y="766.0"></text>
</g>
<g>
<title>MachNode::emit_size(PhaseRegAlloc*) const (1 samples, 0.03%)</title><rect x="51.5" y="739.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="54.5" y="750.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.03%)</title><rect x="51.5" y="723.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="54.5" y="734.0"></text>
</g>
<g>
<title>AbstractAssembler::AbstractAssembler(CodeBuffer*) (1 samples, 0.03%)</title><rect x="51.5" y="707.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="54.5" y="718.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 0.06%)</title><rect x="51.8" y="803.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="54.8" y="814.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.06%)</title><rect x="51.8" y="787.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="54.8" y="798.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.03%)</title><rect x="51.8" y="771.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="54.8" y="782.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.03%)</title><rect x="52.2" y="771.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="55.2" y="782.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.03%)</title><rect x="52.2" y="755.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="55.2" y="766.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.03%)</title><rect x="52.2" y="739.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="55.2" y="750.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.03%)</title><rect x="52.2" y="723.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="55.2" y="734.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.03%)</title><rect x="52.2" y="707.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="55.2" y="718.0"></text>
</g>
<g>
<title>State::MachOperGenerator(int) (1 samples, 0.03%)</title><rect x="52.2" y="691.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="55.2" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (5 samples, 0.16%)</title><rect x="52.6" y="803.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="55.6" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (5 samples, 0.16%)</title><rect x="52.6" y="787.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="55.6" y="798.0"></text>
</g>
<g>
<title>BoxLockNode::out_RegMask() const (1 samples, 0.03%)</title><rect x="52.6" y="771.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="55.6" y="782.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.03%)</title><rect x="53.0" y="771.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="56.0" y="782.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, int*) (1 samples, 0.03%)</title><rect x="53.4" y="771.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="56.4" y="782.0"></text>
</g>
<g>
<title>Node::is_iteratively_computed() (1 samples, 0.03%)</title><rect x="53.4" y="755.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="56.4" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.03%)</title><rect x="53.7" y="771.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="56.7" y="782.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.03%)</title><rect x="54.1" y="771.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="57.1" y="782.0"></text>
</g>
<g>
<title>common_exception (1 samples, 0.03%)</title><rect x="54.1" y="755.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="57.1" y="766.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.03%)</title><rect x="54.1" y="739.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="57.1" y="750.0"></text>
</g>
<g>
<title>__do_page_fault (1 samples, 0.03%)</title><rect x="54.1" y="723.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="57.1" y="734.0"></text>
</g>
<g>
<title>handle_mm_fault (1 samples, 0.03%)</title><rect x="54.1" y="707.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="57.1" y="718.0"></text>
</g>
<g>
<title>native_set_pte_at (1 samples, 0.03%)</title><rect x="54.1" y="691.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="57.1" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (27 samples, 0.87%)</title><rect x="54.5" y="803.0" width="10.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="57.5" y="814.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.03%)</title><rect x="54.5" y="787.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="57.5" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.03%)</title><rect x="54.9" y="787.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="57.9" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 0.10%)</title><rect x="55.3" y="787.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="58.3" y="798.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.03%)</title><rect x="56.0" y="771.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="59.0" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 0.16%)</title><rect x="56.4" y="787.0" width="1.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="59.4" y="798.0"></text>
</g>
<g>
<title>Node::rematerialize() const (2 samples, 0.06%)</title><rect x="57.5" y="771.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="60.5" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (6 samples, 0.19%)</title><rect x="58.3" y="787.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="61.3" y="798.0"></text>
</g>
<g>
<title>MachNode::Opcode() const (1 samples, 0.03%)</title><rect x="58.3" y="771.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="61.3" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (2 samples, 0.06%)</title><rect x="58.7" y="771.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="61.7" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.10%)</title><rect x="59.4" y="771.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="62.4" y="782.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.03%)</title><rect x="60.2" y="755.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="63.2" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.03%)</title><rect x="60.6" y="787.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="63.6" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::fixup_spills() (1 samples, 0.03%)</title><rect x="61.0" y="787.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="64.0" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 0.10%)</title><rect x="61.3" y="787.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="64.3" y="798.0"></text>
</g>
<g>
<title>RegMask::is_bound_pair() const (1 samples, 0.03%)</title><rect x="62.1" y="771.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="65.1" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.81] (1 samples, 0.03%)</title><rect x="62.5" y="787.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="65.5" y="798.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.03%)</title><rect x="62.5" y="771.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="65.5" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.03%)</title><rect x="62.9" y="787.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="65.9" y="798.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.03%)</title><rect x="63.2" y="787.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="66.2" y="798.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.03%)</title><rect x="63.2" y="771.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="66.2" y="782.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.03%)</title><rect x="63.2" y="755.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="66.2" y="766.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.03%)</title><rect x="63.6" y="787.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="66.6" y="798.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.06%)</title><rect x="64.0" y="787.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="67.0" y="798.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.03%)</title><rect x="64.0" y="771.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="67.0" y="782.0"></text>
</g>
<g>
<title>free (1 samples, 0.03%)</title><rect x="64.0" y="755.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="67.0" y="766.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.03%)</title><rect x="64.4" y="771.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="67.4" y="782.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="64.4" y="755.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="67.4" y="766.0"></text>
</g>
<g>
<title>Compile::Optimize() (39 samples, 1.26%)</title><rect x="64.8" y="819.0" width="14.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="67.8" y="830.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.03%)</title><rect x="64.8" y="803.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="67.8" y="814.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.03%)</title><rect x="64.8" y="787.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="67.8" y="798.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.03%)</title><rect x="65.1" y="803.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="68.1" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN&amp;, bool, bool, bool) (29 samples, 0.93%)</title><rect x="65.5" y="803.0" width="11.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="68.5" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool, bool) (28 samples, 0.90%)</title><rect x="65.5" y="787.0" width="10.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="68.5" y="798.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.03%)</title><rect x="65.5" y="771.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="68.5" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 0.10%)</title><rect x="65.9" y="771.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="68.9" y="782.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.03%)</title><rect x="66.7" y="755.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="69.7" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 0.13%)</title><rect x="67.0" y="771.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="70.0" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (2 samples, 0.06%)</title><rect x="67.4" y="755.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="70.4" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.03%)</title><rect x="67.4" y="739.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="70.4" y="750.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="67.8" y="739.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="70.8" y="750.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="68.2" y="755.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="71.2" y="766.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="68.2" y="739.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="71.2" y="750.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="68.2" y="723.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="71.2" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (18 samples, 0.58%)</title><rect x="68.6" y="771.0" width="6.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="71.6" y="782.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.03%)</title><rect x="68.9" y="755.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="71.9" y="766.0"></text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (1 samples, 0.03%)</title><rect x="68.9" y="739.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="71.9" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (16 samples, 0.52%)</title><rect x="69.3" y="755.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="72.3" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.03%)</title><rect x="69.3" y="739.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="72.3" y="750.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="69.3" y="723.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="72.3" y="734.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="69.3" y="707.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="72.3" y="718.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="69.3" y="691.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="72.3" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (15 samples, 0.48%)</title><rect x="69.7" y="739.0" width="5.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="72.7" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (15 samples, 0.48%)</title><rect x="69.7" y="723.0" width="5.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="72.7" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.03%)</title><rect x="75.4" y="771.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="78.4" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.03%)</title><rect x="75.4" y="755.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="78.4" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.03%)</title><rect x="75.4" y="739.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="78.4" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.03%)</title><rect x="75.4" y="723.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="78.4" y="734.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.03%)</title><rect x="75.4" y="707.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="78.4" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.03%)</title><rect x="75.8" y="771.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="78.8" y="782.0"></text>
</g>
<g>
<title>PhaseTransform::PhaseTransform(Phase::PhaseNumber) (1 samples, 0.03%)</title><rect x="76.2" y="787.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="79.2" y="798.0"></text>
</g>
<g>
<title>Type_Array::grow(unsigned int) (1 samples, 0.03%)</title><rect x="76.2" y="771.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="79.2" y="782.0"></text>
</g>
<g>
<title>common_exception (1 samples, 0.03%)</title><rect x="76.2" y="755.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="79.2" y="766.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.03%)</title><rect x="76.2" y="739.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="79.2" y="750.0"></text>
</g>
<g>
<title>__do_page_fault (1 samples, 0.03%)</title><rect x="76.2" y="723.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="79.2" y="734.0"></text>
</g>
<g>
<title>handle_mm_fault (1 samples, 0.03%)</title><rect x="76.2" y="707.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="79.2" y="718.0"></text>
</g>
<g>
<title>native_set_pte_at (1 samples, 0.03%)</title><rect x="76.2" y="691.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="79.2" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 0.13%)</title><rect x="76.5" y="803.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="79.5" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 0.13%)</title><rect x="76.5" y="787.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="79.5" y="798.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.03%)</title><rect x="76.5" y="771.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="79.5" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.03%)</title><rect x="76.5" y="755.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="79.5" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.03%)</title><rect x="76.9" y="771.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="79.9" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.03%)</title><rect x="76.9" y="755.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="79.9" y="766.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.03%)</title><rect x="76.9" y="739.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="79.9" y="750.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.06%)</title><rect x="77.3" y="771.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="80.3" y="782.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (2 samples, 0.06%)</title><rect x="77.3" y="755.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="80.3" y="766.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.03%)</title><rect x="78.1" y="803.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="81.1" y="814.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.03%)</title><rect x="78.1" y="787.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="81.1" y="798.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, Node*, BasicType, Type const*, TypeOopPtr const*, AllocateNode*) (1 samples, 0.03%)</title><rect x="78.1" y="771.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="81.1" y="782.0"></text>
</g>
<g>
<title>VectorSet::operator&lt;&lt;=(unsigned int) (1 samples, 0.03%)</title><rect x="78.1" y="755.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="81.1" y="766.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 0.06%)</title><rect x="78.4" y="803.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="81.4" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.06%)</title><rect x="78.4" y="787.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="81.4" y="798.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.03%)</title><rect x="78.8" y="771.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="81.8" y="782.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.ax (1 samples, 0.03%)</title><rect x="78.8" y="755.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="81.8" y="766.0"></text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.03%)</title><rect x="79.2" y="803.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="82.2" y="814.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.03%)</title><rect x="79.2" y="787.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="82.2" y="798.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.03%)</title><rect x="79.2" y="771.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="82.2" y="782.0"></text>
</g>
<g>
<title>Compile::inline_string_calls(bool) (5 samples, 0.16%)</title><rect x="79.6" y="819.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="82.6" y="830.0"></text>
</g>
<g>
<title>LateInlineCallGenerator::do_late_inline() (5 samples, 0.16%)</title><rect x="79.6" y="803.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="82.6" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.16%)</title><rect x="79.6" y="787.0" width="1.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="82.6" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.16%)</title><rect x="79.6" y="771.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="82.6" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.16%)</title><rect x="79.6" y="755.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="82.6" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.16%)</title><rect x="79.6" y="739.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="82.6" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.16%)</title><rect x="79.6" y="723.0" width="1.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="82.6" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.16%)</title><rect x="79.6" y="707.0" width="1.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="82.6" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.16%)</title><rect x="79.6" y="691.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="82.6" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.16%)</title><rect x="79.6" y="675.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="82.6" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.16%)</title><rect x="79.6" y="659.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="82.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.16%)</title><rect x="79.6" y="643.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="82.6" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.16%)</title><rect x="79.6" y="627.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="82.6" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.13%)</title><rect x="79.6" y="611.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="82.6" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.13%)</title><rect x="79.6" y="595.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="82.6" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.13%)</title><rect x="79.6" y="579.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="82.6" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.13%)</title><rect x="79.6" y="563.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="82.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.13%)</title><rect x="79.6" y="547.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="82.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.13%)</title><rect x="79.6" y="531.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="82.6" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.06%)</title><rect x="79.6" y="515.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="82.6" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="79.6" y="499.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="82.6" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="79.6" y="483.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="82.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="79.6" y="467.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="82.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="79.6" y="451.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="82.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="79.6" y="435.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="82.6" y="446.0"></text>
</g>
<g>
<title>Parse::do_newarray(BasicType) (1 samples, 0.03%)</title><rect x="79.6" y="419.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="82.6" y="430.0"></text>
</g>
<g>
<title>GraphKit::new_array(Node*, Node*, int, Node**, bool) (1 samples, 0.03%)</title><rect x="79.6" y="403.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="82.6" y="414.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 0.03%)</title><rect x="79.6" y="387.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="82.6" y="398.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.03%)</title><rect x="79.6" y="371.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="82.6" y="382.0"></text>
</g>
<g>
<title>Node::add_req_batch(Node*, unsigned int) (1 samples, 0.03%)</title><rect x="79.6" y="355.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="82.6" y="366.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.03%)</title><rect x="79.6" y="339.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="82.6" y="350.0"></text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (1 samples, 0.03%)</title><rect x="79.6" y="323.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="82.6" y="334.0"></text>
</g>
<g>
<title>common_exception (1 samples, 0.03%)</title><rect x="79.6" y="307.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="82.6" y="318.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.03%)</title><rect x="79.6" y="291.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="82.6" y="302.0"></text>
</g>
<g>
<title>__do_page_fault (1 samples, 0.03%)</title><rect x="79.6" y="275.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="82.6" y="286.0"></text>
</g>
<g>
<title>handle_mm_fault (1 samples, 0.03%)</title><rect x="79.6" y="259.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="82.6" y="270.0"></text>
</g>
<g>
<title>__alloc_pages_nodemask (1 samples, 0.03%)</title><rect x="79.6" y="243.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="82.6" y="254.0"></text>
</g>
<g>
<title>get_page_from_freelist (1 samples, 0.03%)</title><rect x="79.6" y="227.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="82.6" y="238.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.03%)</title><rect x="80.0" y="499.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="83.0" y="510.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.03%)</title><rect x="80.0" y="483.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="83.0" y="494.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.03%)</title><rect x="80.0" y="467.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="83.0" y="478.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.03%)</title><rect x="80.0" y="451.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="83.0" y="462.0"></text>
</g>
<g>
<title>ciInstanceKlass::loader() (1 samples, 0.03%)</title><rect x="80.0" y="435.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="83.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.03%)</title><rect x="80.4" y="515.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="83.4" y="526.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.03%)</title><rect x="80.4" y="499.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="83.4" y="510.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long long) (1 samples, 0.03%)</title><rect x="80.4" y="483.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="83.4" y="494.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.03%)</title><rect x="80.4" y="467.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="83.4" y="478.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.03%)</title><rect x="80.4" y="451.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="83.4" y="462.0"></text>
</g>
<g>
<title>IdealKit::transform(Node*) (1 samples, 0.03%)</title><rect x="80.4" y="435.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="83.4" y="446.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.03%)</title><rect x="80.7" y="515.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="83.7" y="526.0"></text>
</g>
<g>
<title>AddINode::Identity(PhaseGVN*) (1 samples, 0.03%)</title><rect x="80.7" y="499.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="83.7" y="510.0"></text>
</g>
<g>
<title>TypeInt::eq(Type const*) const (1 samples, 0.03%)</title><rect x="80.7" y="483.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="83.7" y="494.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.03%)</title><rect x="81.1" y="611.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="84.1" y="622.0"></text>
</g>
<g>
<title>ReplacedNodes::merge_with(ReplacedNodes const&amp;) (1 samples, 0.03%)</title><rect x="81.1" y="595.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="84.1" y="606.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="81.1" y="579.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="84.1" y="590.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="81.1" y="563.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="84.1" y="574.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="81.1" y="547.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="84.1" y="558.0"></text>
</g>
<g>
<title>CompileWrapper::CompileWrapper(Compile*) (1 samples, 0.03%)</title><rect x="81.5" y="819.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="84.5" y="830.0"></text>
</g>
<g>
<title>Type::Initialize(Compile*) (1 samples, 0.03%)</title><rect x="81.5" y="803.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="84.5" y="814.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.03%)</title><rect x="81.5" y="787.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="84.5" y="798.0"></text>
</g>
<g>
<title>TypeKlassPtr::hash() const (1 samples, 0.03%)</title><rect x="81.5" y="771.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="84.5" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.10%)</title><rect x="81.9" y="819.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="84.9" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.10%)</title><rect x="81.9" y="803.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="84.9" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.10%)</title><rect x="81.9" y="787.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="84.9" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.10%)</title><rect x="81.9" y="771.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="84.9" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.10%)</title><rect x="81.9" y="755.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="84.9" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.10%)</title><rect x="81.9" y="739.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="84.9" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.06%)</title><rect x="81.9" y="723.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="84.9" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.06%)</title><rect x="81.9" y="707.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="84.9" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.06%)</title><rect x="81.9" y="691.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="84.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.06%)</title><rect x="81.9" y="675.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="84.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.06%)</title><rect x="81.9" y="659.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="84.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.06%)</title><rect x="81.9" y="643.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="84.9" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.06%)</title><rect x="81.9" y="627.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="84.9" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.06%)</title><rect x="81.9" y="611.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="84.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.06%)</title><rect x="81.9" y="595.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="84.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.06%)</title><rect x="81.9" y="579.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="84.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.06%)</title><rect x="81.9" y="563.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="84.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.06%)</title><rect x="81.9" y="547.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="84.9" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="81.9" y="531.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="84.9" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="81.9" y="515.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="84.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="81.9" y="499.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="84.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="81.9" y="483.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="84.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="81.9" y="467.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="84.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="81.9" y="451.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="84.9" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="81.9" y="435.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="84.9" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="81.9" y="419.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="84.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="81.9" y="403.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="84.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="81.9" y="387.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="84.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="81.9" y="371.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="84.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="81.9" y="355.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="84.9" y="366.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.03%)</title><rect x="81.9" y="339.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="84.9" y="350.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.03%)</title><rect x="81.9" y="323.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="84.9" y="334.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.03%)</title><rect x="81.9" y="307.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="84.9" y="318.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.03%)</title><rect x="81.9" y="291.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="84.9" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.03%)</title><rect x="81.9" y="275.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="84.9" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.03%)</title><rect x="81.9" y="259.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="84.9" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.03%)</title><rect x="81.9" y="243.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="84.9" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.03%)</title><rect x="81.9" y="227.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="84.9" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.03%)</title><rect x="81.9" y="211.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="84.9" y="222.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.03%)</title><rect x="81.9" y="195.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="84.9" y="206.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.03%)</title><rect x="81.9" y="179.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="84.9" y="190.0"></text>
</g>
<g>
<title>ciConstantPoolCache::insert(int, void*) (1 samples, 0.03%)</title><rect x="81.9" y="163.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="84.9" y="174.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="82.3" y="531.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="85.3" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="82.3" y="515.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="85.3" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="82.3" y="499.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="85.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="82.3" y="483.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="85.3" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="82.3" y="467.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="85.3" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="82.3" y="451.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="85.3" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="82.3" y="435.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="85.3" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="82.3" y="419.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="85.3" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="82.3" y="403.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="85.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="82.3" y="387.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="85.3" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="82.3" y="371.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="85.3" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="82.3" y="355.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="85.3" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="82.3" y="339.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="85.3" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="82.3" y="323.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="85.3" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="82.3" y="307.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="85.3" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="82.3" y="291.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="85.3" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="82.3" y="275.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="85.3" y="286.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.03%)</title><rect x="82.3" y="259.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="85.3" y="270.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.03%)</title><rect x="82.3" y="243.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="85.3" y="254.0"></text>
</g>
<g>
<title>Parse::merge_exception(int) (1 samples, 0.03%)</title><rect x="82.3" y="227.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="85.3" y="238.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.03%)</title><rect x="82.3" y="211.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="85.3" y="222.0"></text>
</g>
<g>
<title>Parse::ensure_phi(int, bool) (1 samples, 0.03%)</title><rect x="82.3" y="195.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="85.3" y="206.0"></text>
</g>
<g>
<title>.L1946 (1 samples, 0.03%)</title><rect x="82.3" y="179.0" width="0.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="85.3" y="190.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.03%)</title><rect x="82.3" y="163.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="85.3" y="174.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) [clone .constprop.124] (1 samples, 0.03%)</title><rect x="82.3" y="147.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="85.3" y="158.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.03%)</title><rect x="82.3" y="131.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="85.3" y="142.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="82.6" y="723.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="85.6" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="82.6" y="707.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="85.6" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="82.6" y="691.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="85.6" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="82.6" y="675.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="85.6" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="82.6" y="659.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="85.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="82.6" y="643.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="85.6" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="82.6" y="627.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="85.6" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="82.6" y="611.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="85.6" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="82.6" y="595.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="85.6" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="82.6" y="579.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="85.6" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="82.6" y="563.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="85.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="82.6" y="547.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="85.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="82.6" y="531.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="85.6" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="82.6" y="515.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="85.6" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="82.6" y="499.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="85.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.03%)</title><rect x="82.6" y="483.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="85.6" y="494.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.03%)</title><rect x="82.6" y="467.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="85.6" y="478.0"></text>
</g>
<g>
<title>AndINode::mul_ring(Type const*, Type const*) const (1 samples, 0.03%)</title><rect x="82.6" y="451.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="85.6" y="462.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (4 samples, 0.13%)</title><rect x="83.0" y="851.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="86.0" y="862.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (4 samples, 0.13%)</title><rect x="83.0" y="835.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="86.0" y="846.0"></text>
</g>
<g>
<title>Compilation::compile_method() (4 samples, 0.13%)</title><rect x="83.0" y="819.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="86.0" y="830.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (4 samples, 0.13%)</title><rect x="83.0" y="803.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="86.0" y="814.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.03%)</title><rect x="83.0" y="787.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="86.0" y="798.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.03%)</title><rect x="83.0" y="771.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="86.0" y="782.0"></text>
</g>
<g>
<title>LIR_Op1::emit_code(LIR_Assembler*) (1 samples, 0.03%)</title><rect x="83.0" y="755.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="86.0" y="766.0"></text>
</g>
<g>
<title>.L632 (1 samples, 0.03%)</title><rect x="83.0" y="739.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="86.0" y="750.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="83.0" y="723.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="86.0" y="734.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="83.0" y="707.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="86.0" y="718.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="83.0" y="691.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="86.0" y="702.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 0.06%)</title><rect x="83.4" y="787.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="86.4" y="798.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (2 samples, 0.06%)</title><rect x="83.4" y="771.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="86.4" y="782.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (2 samples, 0.06%)</title><rect x="83.4" y="755.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="86.4" y="766.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(GrowableArray&lt;LIR_Op*&gt;*, IntervalWalker*) (2 samples, 0.06%)</title><rect x="83.4" y="739.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="86.4" y="750.0"></text>
</g>
<g>
<title>LinearScan::compute_oop_map(IntervalWalker*, LIR_OpVisitState const&amp;, LIR_Op*) (1 samples, 0.03%)</title><rect x="83.4" y="723.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="86.4" y="734.0"></text>
</g>
<g>
<title>LinearScan::compute_oop_map(IntervalWalker*, LIR_Op*, CodeEmitInfo*, bool) (1 samples, 0.03%)</title><rect x="83.4" y="707.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="86.4" y="718.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.03%)</title><rect x="83.4" y="691.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="86.4" y="702.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="83.8" y="723.0" width="0.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="86.8" y="734.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (1 samples, 0.03%)</title><rect x="84.2" y="787.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="87.2" y="798.0"></text>
</g>
<g>
<title>Method::build_interpreter_method_data(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="84.2" y="771.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="87.2" y="782.0"></text>
</g>
<g>
<title>CompileBroker::post_compile(CompilerThread*, CompileTask*, bool, ciEnv*, int, char const*) (1 samples, 0.03%)</title><rect x="84.5" y="867.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="87.5" y="878.0"></text>
</g>
<g>
<title>sweeper_thread_entry(JavaThread*, Thread*) (1 samples, 0.03%)</title><rect x="84.9" y="899.0" width="0.4" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="87.9" y="910.0"></text>
</g>
<g>
<title>NMethodSweeper::sweeper_loop() (1 samples, 0.03%)</title><rect x="84.9" y="883.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="87.9" y="894.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.03%)</title><rect x="84.9" y="867.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="87.9" y="878.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.03%)</title><rect x="84.9" y="851.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="87.9" y="862.0"></text>
</g>
<g>
<title>NMethodSweeper::process_compiled_method(CompiledMethod*) (1 samples, 0.03%)</title><rect x="84.9" y="835.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="87.9" y="846.0"></text>
</g>
<g>
<title>CompiledMethod::cleanup_inline_caches_impl(bool, bool, bool) (1 samples, 0.03%)</title><rect x="84.9" y="819.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="87.9" y="830.0"></text>
</g>
<g>
<title>nmethod::call_wrapper_at(unsigned char*) const (1 samples, 0.03%)</title><rect x="84.9" y="803.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="87.9" y="814.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="84.9" y="787.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="87.9" y="798.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="84.9" y="771.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="87.9" y="782.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="84.9" y="755.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="87.9" y="766.0"></text>
</g>
<g>
<title>VMThread::run() (15 samples, 0.48%)</title><rect x="85.3" y="931.0" width="5.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="88.3" y="942.0"></text>
</g>
<g>
<title>VMThread::loop() (15 samples, 0.48%)</title><rect x="85.3" y="915.0" width="5.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="88.3" y="926.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.03%)</title><rect x="85.3" y="899.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="88.3" y="910.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long long) (1 samples, 0.03%)</title><rect x="85.3" y="883.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="88.3" y="894.0"></text>
</g>
<g>
<title>__kernel_vsyscall (1 samples, 0.03%)</title><rect x="85.3" y="867.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="88.3" y="878.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (1 samples, 0.03%)</title><rect x="85.3" y="851.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="88.3" y="862.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (1 samples, 0.03%)</title><rect x="85.3" y="835.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="88.3" y="846.0"></text>
</g>
<g>
<title>sys_futex (1 samples, 0.03%)</title><rect x="85.3" y="819.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="88.3" y="830.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.03%)</title><rect x="85.3" y="803.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="88.3" y="814.0"></text>
</g>
<g>
<title>futex_wait_setup (1 samples, 0.03%)</title><rect x="85.3" y="787.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="88.3" y="798.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (6 samples, 0.19%)</title><rect x="85.7" y="899.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="88.7" y="910.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (2 samples, 0.06%)</title><rect x="85.7" y="883.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="88.7" y="894.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (2 samples, 0.06%)</title><rect x="85.7" y="867.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="88.7" y="878.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (2 samples, 0.06%)</title><rect x="85.7" y="851.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="88.7" y="862.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) [clone .part.62] (1 samples, 0.03%)</title><rect x="86.1" y="835.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="89.1" y="846.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.03%)</title><rect x="86.1" y="819.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="89.1" y="830.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.03%)</title><rect x="86.1" y="803.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="89.1" y="814.0"></text>
</g>
<g>
<title>CodeBlob::oop_map_for_return_address(unsigned char*) (1 samples, 0.03%)</title><rect x="86.1" y="787.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="89.1" y="798.0"></text>
</g>
<g>
<title>ImmutableOopMapSet::find_map_at_offset(int) const (1 samples, 0.03%)</title><rect x="86.1" y="771.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="89.1" y="782.0"></text>
</g>
<g>
<title>SubTasksDone::SubTasksDone(unsigned int) (1 samples, 0.03%)</title><rect x="86.4" y="883.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="89.4" y="894.0"></text>
</g>
<g>
<title>__kernel_vsyscall (3 samples, 0.10%)</title><rect x="86.8" y="883.0" width="1.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="89.8" y="894.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (3 samples, 0.10%)</title><rect x="86.8" y="867.0" width="1.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="89.8" y="878.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (3 samples, 0.10%)</title><rect x="86.8" y="851.0" width="1.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="89.8" y="862.0"></text>
</g>
<g>
<title>sys_mprotect (3 samples, 0.10%)</title><rect x="86.8" y="835.0" width="1.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="89.8" y="846.0"></text>
</g>
<g>
<title>mprotect_fixup (3 samples, 0.10%)</title><rect x="86.8" y="819.0" width="1.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="89.8" y="830.0"></text>
</g>
<g>
<title>change_protection (3 samples, 0.10%)</title><rect x="86.8" y="803.0" width="1.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="89.8" y="814.0"></text>
</g>
<g>
<title>change_protection_range (3 samples, 0.10%)</title><rect x="86.8" y="787.0" width="1.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="89.8" y="798.0"></text>
</g>
<g>
<title>__ptep_modify_prot_commit (1 samples, 0.03%)</title><rect x="86.8" y="771.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="89.8" y="782.0"></text>
</g>
<g>
<title>native_set_pte_at (1 samples, 0.03%)</title><rect x="86.8" y="755.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="89.8" y="766.0"></text>
</g>
<g>
<title>flush_tlb_mm_range (2 samples, 0.06%)</title><rect x="87.2" y="771.0" width="0.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="90.2" y="782.0"></text>
</g>
<g>
<title>native_flush_tlb_others (2 samples, 0.06%)</title><rect x="87.2" y="755.0" width="0.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="90.2" y="766.0"></text>
</g>
<g>
<title>smp_call_function_many (2 samples, 0.06%)</title><rect x="87.2" y="739.0" width="0.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="90.2" y="750.0"></text>
</g>
<g>
<title>smp_call_function_single (2 samples, 0.06%)</title><rect x="87.2" y="723.0" width="0.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="90.2" y="734.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.61] (8 samples, 0.26%)</title><rect x="88.0" y="899.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="91.0" y="910.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (8 samples, 0.26%)</title><rect x="88.0" y="883.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="91.0" y="894.0"></text>
</g>
<g>
<title>VM_GenCollectForAllocation::doit() (8 samples, 0.26%)</title><rect x="88.0" y="867.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="91.0" y="878.0"></text>
</g>
<g>
<title>GenCollectedHeap::satisfy_failed_allocation(unsigned int, bool) (8 samples, 0.26%)</title><rect x="88.0" y="851.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="91.0" y="862.0"></text>
</g>
<g>
<title>GenCollectedHeap::do_collection(bool, bool, unsigned int, bool, GenCollectedHeap::GenerationType) (8 samples, 0.26%)</title><rect x="88.0" y="835.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="91.0" y="846.0"></text>
</g>
<g>
<title>GenCollectedHeap::collect_generation(Generation*, bool, unsigned int, bool, bool, bool, bool) (7 samples, 0.23%)</title><rect x="88.0" y="819.0" width="2.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="91.0" y="830.0"></text>
</g>
<g>
<title>DefNewGeneration::collect(bool, bool, unsigned int, bool) (7 samples, 0.23%)</title><rect x="88.0" y="803.0" width="2.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="91.0" y="814.0"></text>
</g>
<g>
<title>GenCollectedHeap::young_process_roots(StrongRootsScope*, OopsInGenClosure*, OopsInGenClosure*, CLDClosure*, OopStorage::ParState&lt;false, false&gt;*) (6 samples, 0.19%)</title><rect x="88.0" y="787.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="91.0" y="798.0"></text>
</g>
<g>
<title>CardGeneration::younger_refs_iterate(OopsInGenClosure*, unsigned int) (4 samples, 0.13%)</title><rect x="88.0" y="771.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="91.0" y="782.0"></text>
</g>
<g>
<title>CardTableRS::younger_refs_in_space_iterate(Space*, OopsInGenClosure*, unsigned int) (4 samples, 0.13%)</title><rect x="88.0" y="755.0" width="1.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="91.0" y="766.0"></text>
</g>
<g>
<title>ClearNoncleanCardWrapper::do_MemRegion(MemRegion) (4 samples, 0.13%)</title><rect x="88.0" y="739.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="91.0" y="750.0"></text>
</g>
<g>
<title>DirtyCardToOopClosure::do_MemRegion(MemRegion) (3 samples, 0.10%)</title><rect x="88.3" y="723.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="91.3" y="734.0"></text>
</g>
<g>
<title>BlockOffsetArrayContigSpace::block_start_unsafe(void const*) const (3 samples, 0.10%)</title><rect x="88.3" y="707.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="91.3" y="718.0"></text>
</g>
<g>
<title>ContiguousSpace::block_size(HeapWord const*) const (2 samples, 0.06%)</title><rect x="88.7" y="691.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="91.7" y="702.0"></text>
</g>
<g>
<title>StringTable::oops_do(OopClosure*) (1 samples, 0.03%)</title><rect x="89.5" y="771.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="92.5" y="782.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (1 samples, 0.03%)</title><rect x="89.9" y="771.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="92.9" y="782.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (1 samples, 0.03%)</title><rect x="89.9" y="755.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="92.9" y="766.0"></text>
</g>
<g>
<title>frame::oops_interpreted_do(OopClosure*, RegisterMap const*, bool) (1 samples, 0.03%)</title><rect x="89.9" y="739.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="92.9" y="750.0"></text>
</g>
<g>
<title>Method::mask_for(int, InterpreterOopMap*) (1 samples, 0.03%)</title><rect x="89.9" y="723.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="92.9" y="734.0"></text>
</g>
<g>
<title>OopMapCache::lookup(methodHandle const&amp;, int, InterpreterOopMap*) (1 samples, 0.03%)</title><rect x="89.9" y="707.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="92.9" y="718.0"></text>
</g>
<g>
<title>WeakProcessor::weak_oops_do(BoolObjectClosure*, OopClosure*) (1 samples, 0.03%)</title><rect x="90.2" y="787.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="93.2" y="798.0"></text>
</g>
<g>
<title>TraceCollectorStats::~TraceCollectorStats() (1 samples, 0.03%)</title><rect x="90.6" y="819.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="93.6" y="830.0"></text>
</g>
<g>
<title>WatcherThread::run() (7 samples, 0.23%)</title><rect x="91.0" y="931.0" width="2.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="94.0" y="942.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (1 samples, 0.03%)</title><rect x="91.0" y="915.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="94.0" y="926.0"></text>
</g>
<g>
<title>ChunkPoolCleaner::task() (1 samples, 0.03%)</title><rect x="91.0" y="899.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="94.0" y="910.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (6 samples, 0.19%)</title><rect x="91.4" y="915.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="94.4" y="926.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long long) (1 samples, 0.03%)</title><rect x="91.4" y="899.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="94.4" y="910.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (5 samples, 0.16%)</title><rect x="91.8" y="899.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="94.8" y="910.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long long) (5 samples, 0.16%)</title><rect x="91.8" y="883.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="94.8" y="894.0"></text>
</g>
<g>
<title>__kernel_vsyscall (4 samples, 0.13%)</title><rect x="91.8" y="867.0" width="1.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="94.8" y="878.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (3 samples, 0.10%)</title><rect x="92.1" y="851.0" width="1.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="95.1" y="862.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (3 samples, 0.10%)</title><rect x="92.1" y="835.0" width="1.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="95.1" y="846.0"></text>
</g>
<g>
<title>sys_futex (3 samples, 0.10%)</title><rect x="92.1" y="819.0" width="1.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="95.1" y="830.0"></text>
</g>
<g>
<title>do_futex (3 samples, 0.10%)</title><rect x="92.1" y="803.0" width="1.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="95.1" y="814.0"></text>
</g>
<g>
<title>futex_wait (3 samples, 0.10%)</title><rect x="92.1" y="787.0" width="1.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="95.1" y="798.0"></text>
</g>
<g>
<title>futex_wait_queue_me (1 samples, 0.03%)</title><rect x="92.5" y="771.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="95.5" y="782.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="92.5" y="755.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="95.5" y="766.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.03%)</title><rect x="92.5" y="739.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="95.5" y="750.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="92.5" y="723.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="95.5" y="734.0"></text>
</g>
<g>
<title>plist_add (1 samples, 0.03%)</title><rect x="92.9" y="771.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="95.9" y="782.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.03%)</title><rect x="93.3" y="867.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="96.3" y="878.0"></text>
</g>
<g>
<title>java/lang/Thread.run (2,426 samples, 78.18%)</title><rect x="93.7" y="995.0" width="922.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="96.7" y="1006.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (2,426 samples, 78.18%)</title><rect x="93.7" y="979.0" width="922.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="96.7" y="990.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (2,426 samples, 78.18%)</title><rect x="93.7" y="963.0" width="922.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="96.7" y="974.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (3 samples, 0.10%)</title><rect x="95.2" y="947.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="98.2" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.10%)</title><rect x="95.2" y="931.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="98.2" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.10%)</title><rect x="95.2" y="915.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="98.2" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (287 samples, 9.25%)</title><rect x="96.3" y="947.0" width="109.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="99.3" y="958.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (282 samples, 9.09%)</title><rect x="98.2" y="931.0" width="107.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="101.2" y="942.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (205 samples, 6.61%)</title><rect x="98.6" y="915.0" width="78.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="101.6" y="926.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (10 samples, 0.32%)</title><rect x="99.7" y="899.0" width="3.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="102.7" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (10 samples, 0.32%)</title><rect x="99.7" y="883.0" width="3.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="102.7" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (1 samples, 0.03%)</title><rect x="103.5" y="899.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="106.5" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (1 samples, 0.03%)</title><rect x="103.5" y="883.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="106.5" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (191 samples, 6.16%)</title><rect x="103.9" y="899.0" width="72.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="106.9" y="910.0">java/uti..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (190 samples, 6.12%)</title><rect x="104.3" y="883.0" width="72.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="107.3" y="894.0">jdk/inte..</text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (2 samples, 0.06%)</title><rect x="104.7" y="867.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="107.7" y="878.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::JfrEvent(EventStartTime) (4 samples, 0.13%)</title><rect x="105.4" y="867.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="108.4" y="878.0"></text>
</g>
<g>
<title>Parker::park(bool, long long) (1 samples, 0.03%)</title><rect x="107.0" y="867.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="110.0" y="878.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.03%)</title><rect x="107.4" y="867.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="110.4" y="878.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.201] (2 samples, 0.06%)</title><rect x="107.7" y="867.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="110.7" y="878.0"></text>
</g>
<g>
<title>Unsafe_Park (65 samples, 2.09%)</title><rect x="108.5" y="867.0" width="24.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="111.5" y="878.0">U..</text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (2 samples, 0.06%)</title><rect x="110.8" y="851.0" width="0.7" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="113.8" y="862.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (2 samples, 0.06%)</title><rect x="111.5" y="851.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="114.5" y="862.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (8 samples, 0.26%)</title><rect x="112.3" y="851.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="115.3" y="862.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (2 samples, 0.06%)</title><rect x="114.6" y="835.0" width="0.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="117.6" y="846.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::JfrEvent(EventStartTime) (1 samples, 0.03%)</title><rect x="115.3" y="851.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="118.3" y="862.0"></text>
</g>
<g>
<title>Parker::park(bool, long long) (13 samples, 0.42%)</title><rect x="115.7" y="851.0" width="5.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="118.7" y="862.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (5 samples, 0.16%)</title><rect x="118.8" y="835.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="121.8" y="846.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (2 samples, 0.06%)</title><rect x="120.7" y="851.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="123.7" y="862.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.201] (1 samples, 0.03%)</title><rect x="121.4" y="851.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="124.4" y="862.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_trylock (13 samples, 0.42%)</title><rect x="121.8" y="851.0" width="4.9" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="124.8" y="862.0"></text>
</g>
<g>
<title>__kernel_vsyscall (4 samples, 0.13%)</title><rect x="126.7" y="851.0" width="1.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="129.7" y="862.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (4 samples, 0.13%)</title><rect x="126.7" y="835.0" width="1.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="129.7" y="846.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (4 samples, 0.13%)</title><rect x="126.7" y="819.0" width="1.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="129.7" y="830.0"></text>
</g>
<g>
<title>sys_futex (4 samples, 0.13%)</title><rect x="126.7" y="803.0" width="1.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="129.7" y="814.0"></text>
</g>
<g>
<title>do_futex (4 samples, 0.13%)</title><rect x="126.7" y="787.0" width="1.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="129.7" y="798.0"></text>
</g>
<g>
<title>futex_wake (2 samples, 0.06%)</title><rect x="126.7" y="771.0" width="0.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="129.7" y="782.0"></text>
</g>
<g>
<title>wake_up_q (2 samples, 0.06%)</title><rect x="127.5" y="771.0" width="0.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="130.5" y="782.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.ax (4 samples, 0.13%)</title><rect x="128.3" y="851.0" width="1.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="131.3" y="862.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="129.8" y="851.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="132.8" y="862.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.03%)</title><rect x="130.2" y="851.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="133.2" y="862.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="130.2" y="835.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="133.2" y="846.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.03%)</title><rect x="130.2" y="819.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="133.2" y="830.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.03%)</title><rect x="130.2" y="803.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="133.2" y="814.0"></text>
</g>
<g>
<title>call_on_stack (1 samples, 0.03%)</title><rect x="130.2" y="787.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="133.2" y="798.0"></text>
</g>
<g>
<title>__do_softirq (1 samples, 0.03%)</title><rect x="130.2" y="771.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="133.2" y="782.0"></text>
</g>
<g>
<title>run_rebalance_domains (1 samples, 0.03%)</title><rect x="130.2" y="755.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="133.2" y="766.0"></text>
</g>
<g>
<title>rebalance_domains (1 samples, 0.03%)</title><rect x="130.2" y="739.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="133.2" y="750.0"></text>
</g>
<g>
<title>update_blocked_averages (1 samples, 0.03%)</title><rect x="130.2" y="723.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="133.2" y="734.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="130.2" y="707.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="133.2" y="718.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (2 samples, 0.06%)</title><rect x="130.5" y="851.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="133.5" y="862.0"></text>
</g>
<g>
<title>pthread_cond_wait (2 samples, 0.06%)</title><rect x="131.3" y="851.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="134.3" y="862.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (3 samples, 0.10%)</title><rect x="132.1" y="851.0" width="1.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="135.1" y="862.0"></text>
</g>
<g>
<title>[unknown] (113 samples, 3.64%)</title><rect x="133.2" y="867.0" width="43.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="136.2" y="878.0">[unk..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="133.2" y="851.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="136.2" y="862.0"></text>
</g>
<g>
<title>__kernel_vsyscall (1 samples, 0.03%)</title><rect x="133.2" y="835.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="136.2" y="846.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (1 samples, 0.03%)</title><rect x="133.2" y="819.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="136.2" y="830.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (1 samples, 0.03%)</title><rect x="133.2" y="803.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="136.2" y="814.0"></text>
</g>
<g>
<title>__condvar_dec_grefs (1 samples, 0.03%)</title><rect x="133.6" y="851.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="136.6" y="862.0"></text>
</g>
<g>
<title>__kernel_vsyscall (103 samples, 3.32%)</title><rect x="134.0" y="851.0" width="39.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="137.0" y="862.0">__k..</text>
</g>
<g>
<title>entry_SYSENTER_32 (102 samples, 3.29%)</title><rect x="134.4" y="835.0" width="38.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="137.4" y="846.0">ent..</text>
</g>
<g>
<title>do_fast_syscall_32 (102 samples, 3.29%)</title><rect x="134.4" y="819.0" width="38.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="137.4" y="830.0">do_..</text>
</g>
<g>
<title>sys_futex (102 samples, 3.29%)</title><rect x="134.4" y="803.0" width="38.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="137.4" y="814.0">sys..</text>
</g>
<g>
<title>do_futex (101 samples, 3.25%)</title><rect x="134.7" y="787.0" width="38.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="137.7" y="798.0">do_..</text>
</g>
<g>
<title>futex_wait (100 samples, 3.22%)</title><rect x="135.1" y="771.0" width="38.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="138.1" y="782.0">fut..</text>
</g>
<g>
<title>futex_wait_queue_me (98 samples, 3.16%)</title><rect x="135.1" y="755.0" width="37.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="138.1" y="766.0">fut..</text>
</g>
<g>
<title>plist_add (1 samples, 0.03%)</title><rect x="136.3" y="739.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="139.3" y="750.0"></text>
</g>
<g>
<title>schedule (94 samples, 3.03%)</title><rect x="136.6" y="739.0" width="35.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="139.6" y="750.0">sch..</text>
</g>
<g>
<title>__sched_text_start (94 samples, 3.03%)</title><rect x="136.6" y="723.0" width="35.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="139.6" y="734.0">__s..</text>
</g>
<g>
<title>finish_task_switch (94 samples, 3.03%)</title><rect x="136.6" y="707.0" width="35.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="139.6" y="718.0">fin..</text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.03%)</title><rect x="172.0" y="691.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="175.0" y="702.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="172.0" y="675.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="175.0" y="686.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.03%)</title><rect x="172.0" y="659.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="175.0" y="670.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.03%)</title><rect x="172.0" y="643.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="175.0" y="654.0"></text>
</g>
<g>
<title>call_on_stack (1 samples, 0.03%)</title><rect x="172.0" y="627.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="175.0" y="638.0"></text>
</g>
<g>
<title>__do_softirq (1 samples, 0.03%)</title><rect x="172.0" y="611.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="175.0" y="622.0"></text>
</g>
<g>
<title>run_rebalance_domains (1 samples, 0.03%)</title><rect x="172.0" y="595.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="175.0" y="606.0"></text>
</g>
<g>
<title>rebalance_domains (1 samples, 0.03%)</title><rect x="172.0" y="579.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="175.0" y="590.0"></text>
</g>
<g>
<title>update_blocked_averages (1 samples, 0.03%)</title><rect x="172.0" y="563.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="175.0" y="574.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="172.0" y="547.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="175.0" y="558.0"></text>
</g>
<g>
<title>futex_wait_setup (1 samples, 0.03%)</title><rect x="172.4" y="755.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="175.4" y="766.0"></text>
</g>
<g>
<title>plist_add (1 samples, 0.03%)</title><rect x="172.8" y="755.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="175.8" y="766.0"></text>
</g>
<g>
<title>__pthread_cleanup_push (1 samples, 0.03%)</title><rect x="173.1" y="851.0" width="0.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="176.1" y="862.0"></text>
</g>
<g>
<title>__pthread_cond_wait (5 samples, 0.16%)</title><rect x="173.5" y="851.0" width="1.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="176.5" y="862.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (2 samples, 0.06%)</title><rect x="175.4" y="851.0" width="0.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="178.4" y="862.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.ax (1 samples, 0.03%)</title><rect x="176.2" y="867.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="179.2" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (5 samples, 0.16%)</title><rect x="176.6" y="915.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="179.6" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (5 samples, 0.16%)</title><rect x="176.6" y="899.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="179.6" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (5 samples, 0.16%)</title><rect x="176.6" y="883.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="179.6" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (2 samples, 0.06%)</title><rect x="178.5" y="915.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="181.5" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (2 samples, 0.06%)</title><rect x="178.5" y="899.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="181.5" y="910.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.03%)</title><rect x="178.8" y="883.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="181.8" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (69 samples, 2.22%)</title><rect x="179.2" y="915.0" width="26.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="182.2" y="926.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (69 samples, 2.22%)</title><rect x="179.2" y="899.0" width="26.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="182.2" y="910.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (69 samples, 2.22%)</title><rect x="179.2" y="883.0" width="26.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="182.2" y="894.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (68 samples, 2.19%)</title><rect x="179.6" y="867.0" width="25.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="182.6" y="878.0">j..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (68 samples, 2.19%)</title><rect x="179.6" y="851.0" width="25.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="182.6" y="862.0">j..</text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.03%)</title><rect x="179.6" y="835.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="182.6" y="846.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.03%)</title><rect x="180.0" y="835.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="183.0" y="846.0"></text>
</g>
<g>
<title>Unsafe_Unpark (6 samples, 0.19%)</title><rect x="180.4" y="835.0" width="2.2" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="183.4" y="846.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (2 samples, 0.06%)</title><rect x="180.7" y="819.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="183.7" y="830.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.06%)</title><rect x="181.5" y="819.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="184.5" y="830.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.03%)</title><rect x="181.9" y="803.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="184.9" y="814.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="182.3" y="819.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="185.3" y="830.0"></text>
</g>
<g>
<title>[unknown] (60 samples, 1.93%)</title><rect x="182.6" y="835.0" width="22.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="185.6" y="846.0">[..</text>
</g>
<g>
<title>__kernel_vsyscall (60 samples, 1.93%)</title><rect x="182.6" y="819.0" width="22.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="185.6" y="830.0">_..</text>
</g>
<g>
<title>entry_SYSENTER_32 (60 samples, 1.93%)</title><rect x="182.6" y="803.0" width="22.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="185.6" y="814.0">e..</text>
</g>
<g>
<title>do_fast_syscall_32 (60 samples, 1.93%)</title><rect x="182.6" y="787.0" width="22.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="185.6" y="798.0">d..</text>
</g>
<g>
<title>sys_futex (60 samples, 1.93%)</title><rect x="182.6" y="771.0" width="22.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="185.6" y="782.0">s..</text>
</g>
<g>
<title>do_futex (60 samples, 1.93%)</title><rect x="182.6" y="755.0" width="22.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="185.6" y="766.0">d..</text>
</g>
<g>
<title>futex_wake (60 samples, 1.93%)</title><rect x="182.6" y="739.0" width="22.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="185.6" y="750.0">f..</text>
</g>
<g>
<title>__unqueue_futex (1 samples, 0.03%)</title><rect x="183.0" y="723.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="186.0" y="734.0"></text>
</g>
<g>
<title>mark_wake_futex (1 samples, 0.03%)</title><rect x="183.4" y="723.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="186.4" y="734.0"></text>
</g>
<g>
<title>wake_up_q (57 samples, 1.84%)</title><rect x="183.8" y="723.0" width="21.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="186.8" y="734.0">w..</text>
</g>
<g>
<title>try_to_wake_up (57 samples, 1.84%)</title><rect x="183.8" y="707.0" width="21.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="186.8" y="718.0">t..</text>
</g>
<g>
<title>__lock_text_start (57 samples, 1.84%)</title><rect x="183.8" y="691.0" width="21.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="186.8" y="702.0">_..</text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ServiceImpl$$Lambda$68/26703876.run (2,132 samples, 68.71%)</title><rect x="205.5" y="947.0" width="810.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="208.5" y="958.0">ru/mail/polis/service/dogm/ServiceImpl$$Lambda$68/26703876.run</text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ServiceImpl.lambda$executeAsync$4 (2,132 samples, 68.71%)</title><rect x="205.5" y="931.0" width="810.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="208.5" y="942.0">ru/mail/polis/service/dogm/ServiceImpl.lambda$executeAsync$4</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (514 samples, 16.56%)</title><rect x="208.1" y="915.0" width="195.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="211.1" y="926.0">one/nio/http/HttpSession...</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (506 samples, 16.31%)</title><rect x="209.6" y="899.0" width="192.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="212.6" y="910.0">one/nio/http/HttpSession...</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (11 samples, 0.35%)</title><rect x="209.6" y="883.0" width="4.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="212.6" y="894.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (3 samples, 0.10%)</title><rect x="212.7" y="867.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="215.7" y="878.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (3 samples, 0.10%)</title><rect x="212.7" y="851.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="215.7" y="862.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.10%)</title><rect x="212.7" y="835.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="215.7" y="846.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="213.4" y="819.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="216.4" y="830.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="213.4" y="803.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="216.4" y="814.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="213.4" y="787.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="216.4" y="798.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (495 samples, 15.95%)</title><rect x="213.8" y="883.0" width="188.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="216.8" y="894.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (495 samples, 15.95%)</title><rect x="213.8" y="867.0" width="188.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="216.8" y="878.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (492 samples, 15.86%)</title><rect x="215.0" y="851.0" width="187.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="218.0" y="862.0">one/nio/net/Session$Arra..</text>
</g>
<g>
<title>ObjectSynchronizer::slow_exit(oopDesc*, BasicLock*, Thread*) (3 samples, 0.10%)</title><rect x="215.7" y="835.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="218.7" y="846.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (9 samples, 0.29%)</title><rect x="216.9" y="835.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="219.9" y="846.0"></text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (2 samples, 0.06%)</title><rect x="216.9" y="819.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="219.9" y="830.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventJavaMonitorInflate&gt;::JfrEvent(EventStartTime) (2 samples, 0.06%)</title><rect x="217.6" y="819.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="220.6" y="830.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (2 samples, 0.06%)</title><rect x="218.4" y="819.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="221.4" y="830.0"></text>
</g>
<g>
<title>ObjectSynchronizer::slow_exit(oopDesc*, BasicLock*, Thread*) (3 samples, 0.10%)</title><rect x="219.2" y="819.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="222.2" y="830.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="219.9" y="803.0" width="0.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="222.9" y="814.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (478 samples, 15.40%)</title><rect x="220.3" y="835.0" width="181.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="223.3" y="846.0">one/nio/net/JavaSocket...</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (478 samples, 15.40%)</title><rect x="220.3" y="819.0" width="181.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="223.3" y="830.0">sun/nio/ch/SocketChanne..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (19 samples, 0.61%)</title><rect x="220.3" y="803.0" width="7.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="223.3" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (19 samples, 0.61%)</title><rect x="220.3" y="787.0" width="7.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="223.3" y="798.0"></text>
</g>
<g>
<title>__vdso_gettimeofday (2 samples, 0.06%)</title><rect x="220.7" y="771.0" width="0.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="223.7" y="782.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="221.4" y="771.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="224.4" y="782.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (15 samples, 0.48%)</title><rect x="221.8" y="771.0" width="5.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="224.8" y="782.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="223.3" y="755.0" width="0.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="226.3" y="766.0"></text>
</g>
<g>
<title>__kernel_vsyscall (1 samples, 0.03%)</title><rect x="223.3" y="739.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="226.3" y="750.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (1 samples, 0.03%)</title><rect x="223.3" y="723.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="226.3" y="734.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (1 samples, 0.03%)</title><rect x="223.3" y="707.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="226.3" y="718.0"></text>
</g>
<g>
<title>__kernel_vsyscall (9 samples, 0.29%)</title><rect x="223.7" y="755.0" width="3.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="226.7" y="766.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (6 samples, 0.19%)</title><rect x="224.9" y="739.0" width="2.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="227.9" y="750.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (6 samples, 0.19%)</title><rect x="224.9" y="723.0" width="2.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="227.9" y="734.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="224.9" y="707.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="227.9" y="718.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="224.9" y="691.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="227.9" y="702.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.03%)</title><rect x="224.9" y="675.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="227.9" y="686.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="224.9" y="659.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="227.9" y="670.0"></text>
</g>
<g>
<title>sys_gettimeofday (5 samples, 0.16%)</title><rect x="225.2" y="707.0" width="1.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="228.2" y="718.0"></text>
</g>
<g>
<title>__copy_user_ll (2 samples, 0.06%)</title><rect x="225.2" y="691.0" width="0.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="228.2" y="702.0"></text>
</g>
<g>
<title>do_gettimeofday (3 samples, 0.10%)</title><rect x="226.0" y="691.0" width="1.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="229.0" y="702.0"></text>
</g>
<g>
<title>__getnstimeofday64 (2 samples, 0.06%)</title><rect x="226.0" y="675.0" width="0.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="229.0" y="686.0"></text>
</g>
<g>
<title>kvm_clock_get_cycles (1 samples, 0.03%)</title><rect x="226.4" y="659.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="229.4" y="670.0"></text>
</g>
<g>
<title>pvclock_clocksource_read (1 samples, 0.03%)</title><rect x="226.4" y="643.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="229.4" y="654.0"></text>
</g>
<g>
<title>kvm_clock_get_cycles (1 samples, 0.03%)</title><rect x="226.8" y="675.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="229.8" y="686.0"></text>
</g>
<g>
<title>__vdso_gettimeofday (1 samples, 0.03%)</title><rect x="227.1" y="755.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="230.1" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (459 samples, 14.79%)</title><rect x="227.5" y="803.0" width="174.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="230.5" y="814.0">sun/nio/ch/IOUtil.write</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (454 samples, 14.63%)</title><rect x="229.4" y="787.0" width="172.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="232.4" y="798.0">sun/nio/ch/IOUtil.write</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (454 samples, 14.63%)</title><rect x="229.4" y="771.0" width="172.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="232.4" y="782.0">sun/nio/ch/IOUtil.writ..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (4 samples, 0.13%)</title><rect x="229.4" y="755.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="232.4" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (450 samples, 14.50%)</title><rect x="230.9" y="755.0" width="171.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="233.9" y="766.0">sun/nio/ch/SocketDispa..</text>
</g>
<g>
<title>resume_userspace (4 samples, 0.13%)</title><rect x="233.6" y="739.0" width="1.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="236.6" y="750.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (4 samples, 0.13%)</title><rect x="233.6" y="723.0" width="1.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="236.6" y="734.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (4 samples, 0.13%)</title><rect x="233.6" y="707.0" width="1.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="236.6" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (439 samples, 14.15%)</title><rect x="235.1" y="739.0" width="167.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="238.1" y="750.0">sun/nio/ch/FileDispat..</text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (2 samples, 0.06%)</title><rect x="237.0" y="723.0" width="0.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="240.0" y="734.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.03%)</title><rect x="237.4" y="707.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="240.4" y="718.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="237.4" y="691.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="240.4" y="702.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.03%)</title><rect x="237.4" y="675.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="240.4" y="686.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.03%)</title><rect x="237.4" y="659.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="240.4" y="670.0"></text>
</g>
<g>
<title>call_on_stack (1 samples, 0.03%)</title><rect x="237.4" y="643.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="240.4" y="654.0"></text>
</g>
<g>
<title>__do_softirq (1 samples, 0.03%)</title><rect x="237.4" y="627.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="240.4" y="638.0"></text>
</g>
<g>
<title>rcu_process_callbacks (1 samples, 0.03%)</title><rect x="237.4" y="611.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="240.4" y="622.0"></text>
</g>
<g>
<title>file_free_rcu (1 samples, 0.03%)</title><rect x="237.4" y="595.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="240.4" y="606.0"></text>
</g>
<g>
<title>kmem_cache_free (1 samples, 0.03%)</title><rect x="237.4" y="579.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="240.4" y="590.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (3 samples, 0.10%)</title><rect x="237.8" y="723.0" width="1.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="240.8" y="734.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.03%)</title><rect x="238.5" y="707.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="241.5" y="718.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="238.9" y="723.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="241.9" y="734.0"></text>
</g>
<g>
<title>__kernel_vsyscall (1 samples, 0.03%)</title><rect x="238.9" y="707.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="241.9" y="718.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (1 samples, 0.03%)</title><rect x="238.9" y="691.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="241.9" y="702.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (1 samples, 0.03%)</title><rect x="238.9" y="675.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="241.9" y="686.0"></text>
</g>
<g>
<title>__kernel_vsyscall (418 samples, 13.47%)</title><rect x="239.3" y="723.0" width="159.0" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="242.3" y="734.0">__kernel_vsyscall</text>
</g>
<g>
<title>entry_SYSENTER_32 (416 samples, 13.41%)</title><rect x="240.1" y="707.0" width="158.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="243.1" y="718.0">entry_SYSENTER_32</text>
</g>
<g>
<title>do_fast_syscall_32 (416 samples, 13.41%)</title><rect x="240.1" y="691.0" width="158.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="243.1" y="702.0">do_fast_syscall_32</text>
</g>
<g>
<title>__fdget_pos (1 samples, 0.03%)</title><rect x="240.1" y="675.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="243.1" y="686.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (22 samples, 0.71%)</title><rect x="240.4" y="675.0" width="8.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="243.4" y="686.0"></text>
</g>
<g>
<title>schedule (22 samples, 0.71%)</title><rect x="240.4" y="659.0" width="8.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="243.4" y="670.0"></text>
</g>
<g>
<title>__sched_text_start (22 samples, 0.71%)</title><rect x="240.4" y="643.0" width="8.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="243.4" y="654.0"></text>
</g>
<g>
<title>finish_task_switch (22 samples, 0.71%)</title><rect x="240.4" y="627.0" width="8.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="243.4" y="638.0"></text>
</g>
<g>
<title>sys_write (392 samples, 12.63%)</title><rect x="248.8" y="675.0" width="149.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="251.8" y="686.0">sys_write</text>
</g>
<g>
<title>__fdget_pos (2 samples, 0.06%)</title><rect x="248.8" y="659.0" width="0.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="251.8" y="670.0"></text>
</g>
<g>
<title>__fget_light (2 samples, 0.06%)</title><rect x="248.8" y="643.0" width="0.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="251.8" y="654.0"></text>
</g>
<g>
<title>__fget (2 samples, 0.06%)</title><rect x="248.8" y="627.0" width="0.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="251.8" y="638.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.03%)</title><rect x="249.6" y="659.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="252.6" y="670.0"></text>
</g>
<g>
<title>__fsnotify_parent (4 samples, 0.13%)</title><rect x="250.0" y="659.0" width="1.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="253.0" y="670.0"></text>
</g>
<g>
<title>fput (1 samples, 0.03%)</title><rect x="251.5" y="659.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="254.5" y="670.0"></text>
</g>
<g>
<title>vfs_write (384 samples, 12.38%)</title><rect x="251.9" y="659.0" width="146.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="254.9" y="670.0">vfs_write</text>
</g>
<g>
<title>__vfs_write (366 samples, 11.80%)</title><rect x="252.6" y="643.0" width="139.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="255.6" y="654.0">__vfs_write</text>
</g>
<g>
<title>iov_iter_init (2 samples, 0.06%)</title><rect x="252.6" y="627.0" width="0.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="255.6" y="638.0"></text>
</g>
<g>
<title>new_sync_write (363 samples, 11.70%)</title><rect x="253.4" y="627.0" width="138.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="256.4" y="638.0">new_sync_write</text>
</g>
<g>
<title>sock_write_iter (362 samples, 11.67%)</title><rect x="253.8" y="611.0" width="137.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="256.8" y="622.0">sock_write_iter</text>
</g>
<g>
<title>sock_sendmsg (362 samples, 11.67%)</title><rect x="253.8" y="595.0" width="137.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="256.8" y="606.0">sock_sendmsg</text>
</g>
<g>
<title>inet_sendmsg (356 samples, 11.47%)</title><rect x="253.8" y="579.0" width="135.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="256.8" y="590.0">inet_sendmsg</text>
</g>
<g>
<title>release_sock (1 samples, 0.03%)</title><rect x="254.9" y="563.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="257.9" y="574.0"></text>
</g>
<g>
<title>tcp_sendmsg (351 samples, 11.31%)</title><rect x="255.3" y="563.0" width="133.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="258.3" y="574.0">tcp_sendmsg</text>
</g>
<g>
<title>__check_object_size (2 samples, 0.06%)</title><rect x="255.7" y="547.0" width="0.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="258.7" y="558.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.03%)</title><rect x="256.4" y="547.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="259.4" y="558.0"></text>
</g>
<g>
<title>_copy_from_iter_full (2 samples, 0.06%)</title><rect x="256.8" y="547.0" width="0.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="259.8" y="558.0"></text>
</g>
<g>
<title>lock_sock_nested (2 samples, 0.06%)</title><rect x="257.6" y="547.0" width="0.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="260.6" y="558.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.03%)</title><rect x="257.6" y="531.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="260.6" y="542.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.03%)</title><rect x="257.6" y="515.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="260.6" y="526.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="257.6" y="499.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="260.6" y="510.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (1 samples, 0.03%)</title><rect x="257.9" y="531.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="260.9" y="542.0"></text>
</g>
<g>
<title>skb_put (1 samples, 0.03%)</title><rect x="258.3" y="547.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="261.3" y="558.0"></text>
</g>
<g>
<title>sock_zerocopy_put (1 samples, 0.03%)</title><rect x="258.7" y="547.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="261.7" y="558.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (1 samples, 0.03%)</title><rect x="259.1" y="547.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="262.1" y="558.0"></text>
</g>
<g>
<title>tcp_send_mss (1 samples, 0.03%)</title><rect x="259.5" y="547.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="262.5" y="558.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (338 samples, 10.89%)</title><rect x="259.8" y="547.0" width="128.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="262.8" y="558.0">tcp_sendmsg_locked</text>
</g>
<g>
<title>__check_heap_object (1 samples, 0.03%)</title><rect x="260.6" y="531.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="263.6" y="542.0"></text>
</g>
<g>
<title>__check_object_size (1 samples, 0.03%)</title><rect x="261.0" y="531.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="264.0" y="542.0"></text>
</g>
<g>
<title>check_stack_object (1 samples, 0.03%)</title><rect x="261.0" y="515.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="264.0" y="526.0"></text>
</g>
<g>
<title>__virt_addr_valid (1 samples, 0.03%)</title><rect x="261.4" y="531.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="264.4" y="542.0"></text>
</g>
<g>
<title>_copy_from_iter_full (2 samples, 0.06%)</title><rect x="261.7" y="531.0" width="0.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="264.7" y="542.0"></text>
</g>
<g>
<title>copyin (2 samples, 0.06%)</title><rect x="261.7" y="515.0" width="0.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="264.7" y="526.0"></text>
</g>
<g>
<title>__copy_user_ll (2 samples, 0.06%)</title><rect x="261.7" y="499.0" width="0.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="264.7" y="510.0"></text>
</g>
<g>
<title>iov_iter_advance (1 samples, 0.03%)</title><rect x="262.5" y="531.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="265.5" y="542.0"></text>
</g>
<g>
<title>sk_forced_mem_schedule (2 samples, 0.06%)</title><rect x="262.9" y="531.0" width="0.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="265.9" y="542.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (12 samples, 0.39%)</title><rect x="263.6" y="531.0" width="4.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="266.6" y="542.0"></text>
</g>
<g>
<title>__alloc_skb (8 samples, 0.26%)</title><rect x="264.8" y="515.0" width="3.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="267.8" y="526.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.45 (3 samples, 0.10%)</title><rect x="265.5" y="499.0" width="1.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="268.5" y="510.0"></text>
</g>
<g>
<title>__kmalloc_track_caller (2 samples, 0.06%)</title><rect x="265.5" y="483.0" width="0.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="268.5" y="494.0"></text>
</g>
<g>
<title>kmalloc_slab (1 samples, 0.03%)</title><rect x="265.9" y="467.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="268.9" y="478.0"></text>
</g>
<g>
<title>kmalloc_slab (1 samples, 0.03%)</title><rect x="266.3" y="483.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="269.3" y="494.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.03%)</title><rect x="266.7" y="499.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="269.7" y="510.0"></text>
</g>
<g>
<title>kmem_cache_alloc (1 samples, 0.03%)</title><rect x="267.1" y="499.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="270.1" y="510.0"></text>
</g>
<g>
<title>ksize (1 samples, 0.03%)</title><rect x="267.4" y="499.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="270.4" y="510.0"></text>
</g>
<g>
<title>ksize (1 samples, 0.03%)</title><rect x="267.8" y="515.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="270.8" y="526.0"></text>
</g>
<g>
<title>skb_entail (1 samples, 0.03%)</title><rect x="268.2" y="531.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="271.2" y="542.0"></text>
</g>
<g>
<title>skb_put (1 samples, 0.03%)</title><rect x="268.6" y="531.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="271.6" y="542.0"></text>
</g>
<g>
<title>tcp_current_mss (1 samples, 0.03%)</title><rect x="269.0" y="531.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="272.0" y="542.0"></text>
</g>
<g>
<title>tcp_push (305 samples, 9.83%)</title><rect x="269.3" y="531.0" width="116.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="272.3" y="542.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (305 samples, 9.83%)</title><rect x="269.3" y="515.0" width="116.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="272.3" y="526.0">__tcp_push_pen..</text>
</g>
<g>
<title>tcp_event_new_data_sent (1 samples, 0.03%)</title><rect x="269.7" y="499.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="272.7" y="510.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (1 samples, 0.03%)</title><rect x="270.1" y="499.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="273.1" y="510.0"></text>
</g>
<g>
<title>tcp_write_xmit (302 samples, 9.73%)</title><rect x="270.5" y="499.0" width="114.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="273.5" y="510.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_transmit_skb (285 samples, 9.18%)</title><rect x="271.3" y="483.0" width="108.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="274.3" y="494.0">__tcp_transmi..</text>
</g>
<g>
<title>__skb_clone (1 samples, 0.03%)</title><rect x="273.9" y="467.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="276.9" y="478.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (1 samples, 0.03%)</title><rect x="274.3" y="467.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="277.3" y="478.0"></text>
</g>
<g>
<title>ip_queue_xmit (270 samples, 8.70%)</title><rect x="274.7" y="467.0" width="102.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="277.7" y="478.0">ip_queue_xmit</text>
</g>
<g>
<title>ip_local_out (266 samples, 8.57%)</title><rect x="275.1" y="451.0" width="101.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="278.1" y="462.0">ip_local_out</text>
</g>
<g>
<title>__ip_local_out (1 samples, 0.03%)</title><rect x="275.1" y="435.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="278.1" y="446.0"></text>
</g>
<g>
<title>ip_finish_output (1 samples, 0.03%)</title><rect x="275.4" y="435.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="278.4" y="446.0"></text>
</g>
<g>
<title>ip_output (264 samples, 8.51%)</title><rect x="275.8" y="435.0" width="100.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="278.8" y="446.0">ip_output</text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (1 samples, 0.03%)</title><rect x="276.2" y="419.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="279.2" y="430.0"></text>
</g>
<g>
<title>ip_finish_output2 (1 samples, 0.03%)</title><rect x="276.6" y="419.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="279.6" y="430.0"></text>
</g>
<g>
<title>ip_finish_output (261 samples, 8.41%)</title><rect x="277.0" y="419.0" width="99.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="280.0" y="430.0">ip_finish_ou..</text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (1 samples, 0.03%)</title><rect x="277.3" y="403.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="280.3" y="414.0"></text>
</g>
<g>
<title>ip_finish_output2 (259 samples, 8.35%)</title><rect x="277.7" y="403.0" width="98.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="280.7" y="414.0">ip_finish_ou..</text>
</g>
<g>
<title>__local_bh_enable_ip (232 samples, 7.48%)</title><rect x="279.2" y="387.0" width="88.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="282.2" y="398.0">__local_bh..</text>
</g>
<g>
<title>do_softirq.part.15 (232 samples, 7.48%)</title><rect x="279.2" y="371.0" width="88.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="282.2" y="382.0">do_softirq..</text>
</g>
<g>
<title>do_softirq_own_stack (232 samples, 7.48%)</title><rect x="279.2" y="355.0" width="88.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="282.2" y="366.0">do_softirq..</text>
</g>
<g>
<title>call_on_stack (232 samples, 7.48%)</title><rect x="279.2" y="339.0" width="88.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="282.2" y="350.0">call_on_st..</text>
</g>
<g>
<title>__do_softirq (232 samples, 7.48%)</title><rect x="279.2" y="323.0" width="88.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="282.2" y="334.0">__do_softirq</text>
</g>
<g>
<title>__kfree_skb_flush (1 samples, 0.03%)</title><rect x="280.4" y="307.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="283.4" y="318.0"></text>
</g>
<g>
<title>net_rx_action (228 samples, 7.35%)</title><rect x="280.8" y="307.0" width="86.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="283.8" y="318.0">net_rx_act..</text>
</g>
<g>
<title>process_backlog (224 samples, 7.22%)</title><rect x="282.3" y="291.0" width="85.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="285.3" y="302.0">process_ba..</text>
</g>
<g>
<title>__netif_receive_skb (223 samples, 7.19%)</title><rect x="282.7" y="275.0" width="84.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="285.7" y="286.0">__netif_re..</text>
</g>
<g>
<title>__netif_receive_skb_core (222 samples, 7.15%)</title><rect x="282.7" y="259.0" width="84.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="285.7" y="270.0">__netif_re..</text>
</g>
<g>
<title>ip_rcv (218 samples, 7.03%)</title><rect x="284.2" y="243.0" width="82.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="287.2" y="254.0">ip_rcv</text>
</g>
<g>
<title>ip_rcv_finish (218 samples, 7.03%)</title><rect x="284.2" y="227.0" width="82.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="287.2" y="238.0">ip_rcv_fi..</text>
</g>
<g>
<title>ip_local_deliver (217 samples, 6.99%)</title><rect x="284.6" y="211.0" width="82.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="287.6" y="222.0">ip_local_..</text>
</g>
<g>
<title>ip_local_deliver_finish (215 samples, 6.93%)</title><rect x="284.6" y="195.0" width="81.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="287.6" y="206.0">ip_local_..</text>
</g>
<g>
<title>__xfrm_policy_check2.constprop.34 (1 samples, 0.03%)</title><rect x="284.9" y="179.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="287.9" y="190.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (2 samples, 0.06%)</title><rect x="285.3" y="179.0" width="0.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="288.3" y="190.0"></text>
</g>
<g>
<title>tcp_v4_rcv (211 samples, 6.80%)</title><rect x="286.1" y="179.0" width="80.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="289.1" y="190.0">tcp_v4_rcv</text>
</g>
<g>
<title>__inet_lookup_established (1 samples, 0.03%)</title><rect x="287.6" y="163.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="290.6" y="174.0"></text>
</g>
<g>
<title>inet_ehashfn (1 samples, 0.03%)</title><rect x="288.0" y="163.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="291.0" y="174.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (4 samples, 0.13%)</title><rect x="288.4" y="163.0" width="1.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="291.4" y="174.0"></text>
</g>
<g>
<title>apparmor_socket_sock_rcv_skb (1 samples, 0.03%)</title><rect x="289.1" y="147.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="292.1" y="158.0"></text>
</g>
<g>
<title>security_sock_rcv_skb (1 samples, 0.03%)</title><rect x="289.5" y="147.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="292.5" y="158.0"></text>
</g>
<g>
<title>tcp_parse_md5sig_option (1 samples, 0.03%)</title><rect x="289.9" y="163.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="292.9" y="174.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (198 samples, 6.38%)</title><rect x="290.3" y="163.0" width="75.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="293.3" y="174.0">tcp_v4_d..</text>
</g>
<g>
<title>tcp_check_space (3 samples, 0.10%)</title><rect x="290.6" y="147.0" width="1.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="293.6" y="158.0"></text>
</g>
<g>
<title>tcp_data_queue (1 samples, 0.03%)</title><rect x="291.8" y="147.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="294.8" y="158.0"></text>
</g>
<g>
<title>tcp_rcv_established (193 samples, 6.22%)</title><rect x="292.2" y="147.0" width="73.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="295.2" y="158.0">tcp_rcv_..</text>
</g>
<g>
<title>get_seconds (1 samples, 0.03%)</title><rect x="292.5" y="131.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="295.5" y="142.0"></text>
</g>
<g>
<title>sched_clock_cpu (1 samples, 0.03%)</title><rect x="292.9" y="131.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="295.9" y="142.0"></text>
</g>
<g>
<title>tcp_ack (32 samples, 1.03%)</title><rect x="293.3" y="131.0" width="12.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="296.3" y="142.0"></text>
</g>
<g>
<title>bictcp_cong_avoid (1 samples, 0.03%)</title><rect x="295.6" y="115.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="298.6" y="126.0"></text>
</g>
<g>
<title>get_seconds (1 samples, 0.03%)</title><rect x="296.0" y="115.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="299.0" y="126.0"></text>
</g>
<g>
<title>rb_next (1 samples, 0.03%)</title><rect x="296.3" y="115.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="299.3" y="126.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.41 (2 samples, 0.06%)</title><rect x="296.7" y="115.0" width="0.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="299.7" y="126.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (18 samples, 0.58%)</title><rect x="297.5" y="115.0" width="6.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="300.5" y="126.0"></text>
</g>
<g>
<title>__kfree_skb (6 samples, 0.19%)</title><rect x="299.4" y="99.0" width="2.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="302.4" y="110.0"></text>
</g>
<g>
<title>kfree_skbmem (3 samples, 0.10%)</title><rect x="299.4" y="83.0" width="1.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="302.4" y="94.0"></text>
</g>
<g>
<title>kmem_cache_free (3 samples, 0.10%)</title><rect x="299.4" y="67.0" width="1.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="302.4" y="78.0"></text>
</g>
<g>
<title>skb_release_all (2 samples, 0.06%)</title><rect x="300.5" y="83.0" width="0.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="303.5" y="94.0"></text>
</g>
<g>
<title>skb_release_data (2 samples, 0.06%)</title><rect x="300.5" y="67.0" width="0.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="303.5" y="78.0"></text>
</g>
<g>
<title>skb_free_head (1 samples, 0.03%)</title><rect x="300.9" y="51.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="303.9" y="62.0"></text>
</g>
<g>
<title>kfree (1 samples, 0.03%)</title><rect x="300.9" y="35.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="303.9" y="46.0"></text>
</g>
<g>
<title>skb_release_head_state (1 samples, 0.03%)</title><rect x="301.3" y="83.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="304.3" y="94.0"></text>
</g>
<g>
<title>bictcp_acked (1 samples, 0.03%)</title><rect x="301.7" y="99.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="304.7" y="110.0"></text>
</g>
<g>
<title>minmax_running_min (1 samples, 0.03%)</title><rect x="302.1" y="99.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="305.1" y="110.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.41 (3 samples, 0.10%)</title><rect x="302.4" y="99.0" width="1.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="305.4" y="110.0"></text>
</g>
<g>
<title>tcp_rate_skb_delivered (2 samples, 0.06%)</title><rect x="303.6" y="99.0" width="0.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="306.6" y="110.0"></text>
</g>
<g>
<title>tcp_rate_skb_delivered (2 samples, 0.06%)</title><rect x="304.3" y="115.0" width="0.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="307.3" y="126.0"></text>
</g>
<g>
<title>tcp_update_pacing_rate (1 samples, 0.03%)</title><rect x="305.1" y="115.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="308.1" y="126.0"></text>
</g>
<g>
<title>tcp_data_queue (156 samples, 5.03%)</title><rect x="305.5" y="131.0" width="59.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="308.5" y="142.0">tcp_da..</text>
</g>
<g>
<title>sock_def_readable (154 samples, 4.96%)</title><rect x="305.5" y="115.0" width="58.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="308.5" y="126.0">sock_d..</text>
</g>
<g>
<title>__wake_up_sync_key (153 samples, 4.93%)</title><rect x="305.9" y="99.0" width="58.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="308.9" y="110.0">__wake..</text>
</g>
<g>
<title>__wake_up_common_lock (153 samples, 4.93%)</title><rect x="305.9" y="83.0" width="58.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="308.9" y="94.0">__wake..</text>
</g>
<g>
<title>__lock_text_start (153 samples, 4.93%)</title><rect x="305.9" y="67.0" width="58.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="308.9" y="78.0">__lock..</text>
</g>
<g>
<title>tcp_event_data_recv (2 samples, 0.06%)</title><rect x="364.0" y="115.0" width="0.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="367.0" y="126.0"></text>
</g>
<g>
<title>tcp_event_data_recv (2 samples, 0.06%)</title><rect x="364.8" y="131.0" width="0.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="367.8" y="142.0"></text>
</g>
<g>
<title>tcp_v4_fill_cb (2 samples, 0.06%)</title><rect x="365.6" y="163.0" width="0.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="368.6" y="174.0"></text>
</g>
<g>
<title>raw_local_deliver (1 samples, 0.03%)</title><rect x="366.3" y="195.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="369.3" y="206.0"></text>
</g>
<g>
<title>tcp_v4_rcv (1 samples, 0.03%)</title><rect x="366.7" y="195.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="369.7" y="206.0"></text>
</g>
<g>
<title>ip_rcv (1 samples, 0.03%)</title><rect x="367.1" y="259.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="370.1" y="270.0"></text>
</g>
<g>
<title>dev_queue_xmit (23 samples, 0.74%)</title><rect x="367.5" y="387.0" width="8.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="370.5" y="398.0"></text>
</g>
<g>
<title>__dev_queue_xmit (22 samples, 0.71%)</title><rect x="367.5" y="371.0" width="8.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="370.5" y="382.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (10 samples, 0.32%)</title><rect x="369.4" y="355.0" width="3.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="372.4" y="366.0"></text>
</g>
<g>
<title>loopback_xmit (8 samples, 0.26%)</title><rect x="369.7" y="339.0" width="3.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="372.7" y="350.0"></text>
</g>
<g>
<title>eth_type_trans (3 samples, 0.10%)</title><rect x="370.5" y="323.0" width="1.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="373.5" y="334.0"></text>
</g>
<g>
<title>netif_rx (2 samples, 0.06%)</title><rect x="371.6" y="323.0" width="0.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="374.6" y="334.0"></text>
</g>
<g>
<title>netif_rx_internal (2 samples, 0.06%)</title><rect x="371.6" y="307.0" width="0.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="374.6" y="318.0"></text>
</g>
<g>
<title>enqueue_to_backlog (2 samples, 0.06%)</title><rect x="371.6" y="291.0" width="0.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="374.6" y="302.0"></text>
</g>
<g>
<title>netif_rx_internal (1 samples, 0.03%)</title><rect x="372.4" y="323.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="375.4" y="334.0"></text>
</g>
<g>
<title>netif_rx (1 samples, 0.03%)</title><rect x="372.8" y="339.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="375.8" y="350.0"></text>
</g>
<g>
<title>netdev_pick_tx (1 samples, 0.03%)</title><rect x="373.2" y="355.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="376.2" y="366.0"></text>
</g>
<g>
<title>skb_csum_hwoffload_help (1 samples, 0.03%)</title><rect x="373.5" y="355.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="376.5" y="366.0"></text>
</g>
<g>
<title>validate_xmit_skb (5 samples, 0.16%)</title><rect x="373.9" y="355.0" width="1.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="376.9" y="366.0"></text>
</g>
<g>
<title>netif_skb_features (3 samples, 0.10%)</title><rect x="373.9" y="339.0" width="1.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="376.9" y="350.0"></text>
</g>
<g>
<title>validate_xmit_xfrm (2 samples, 0.06%)</title><rect x="375.1" y="339.0" width="0.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="378.1" y="350.0"></text>
</g>
<g>
<title>netdev_pick_tx (1 samples, 0.03%)</title><rect x="375.8" y="371.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="378.8" y="382.0"></text>
</g>
<g>
<title>ipv4_dst_check (3 samples, 0.10%)</title><rect x="376.2" y="451.0" width="1.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="379.2" y="462.0"></text>
</g>
<g>
<title>skb_clone (4 samples, 0.13%)</title><rect x="377.3" y="467.0" width="1.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="380.3" y="478.0"></text>
</g>
<g>
<title>__copy_skb_header (1 samples, 0.03%)</title><rect x="377.7" y="451.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="380.7" y="462.0"></text>
</g>
<g>
<title>__skb_clone (2 samples, 0.06%)</title><rect x="378.1" y="451.0" width="0.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="381.1" y="462.0"></text>
</g>
<g>
<title>tcp_established_options (2 samples, 0.06%)</title><rect x="378.9" y="467.0" width="0.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="381.9" y="478.0"></text>
</g>
<g>
<title>tcp_v4_md5_lookup (1 samples, 0.03%)</title><rect x="379.2" y="451.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="382.2" y="462.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_ecx (1 samples, 0.03%)</title><rect x="379.6" y="483.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="382.6" y="494.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (2 samples, 0.06%)</title><rect x="380.0" y="483.0" width="0.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="383.0" y="494.0"></text>
</g>
<g>
<title>ip_queue_xmit (1 samples, 0.03%)</title><rect x="380.8" y="483.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="383.8" y="494.0"></text>
</g>
<g>
<title>rb_first (1 samples, 0.03%)</title><rect x="381.2" y="483.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="384.2" y="494.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (5 samples, 0.16%)</title><rect x="381.5" y="483.0" width="1.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="384.5" y="494.0"></text>
</g>
<g>
<title>tcp_rearm_rto (4 samples, 0.13%)</title><rect x="381.9" y="467.0" width="1.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="384.9" y="478.0"></text>
</g>
<g>
<title>tcp_rearm_rto.part.60 (4 samples, 0.13%)</title><rect x="381.9" y="451.0" width="1.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="384.9" y="462.0"></text>
</g>
<g>
<title>sk_reset_timer (4 samples, 0.13%)</title><rect x="381.9" y="435.0" width="1.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="384.9" y="446.0"></text>
</g>
<g>
<title>mod_timer (4 samples, 0.13%)</title><rect x="381.9" y="419.0" width="1.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="384.9" y="430.0"></text>
</g>
<g>
<title>__lock_text_start (4 samples, 0.13%)</title><rect x="381.9" y="403.0" width="1.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="384.9" y="414.0"></text>
</g>
<g>
<title>tcp_init_tso_segs (1 samples, 0.03%)</title><rect x="383.4" y="483.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="386.4" y="494.0"></text>
</g>
<g>
<title>tcp_options_write (1 samples, 0.03%)</title><rect x="383.8" y="483.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="386.8" y="494.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (1 samples, 0.03%)</title><rect x="384.2" y="483.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="387.2" y="494.0"></text>
</g>
<g>
<title>tcp_small_queue_check.isra.28 (1 samples, 0.03%)</title><rect x="384.6" y="483.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="387.6" y="494.0"></text>
</g>
<g>
<title>tcp_tso_segs (1 samples, 0.03%)</title><rect x="385.0" y="483.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="388.0" y="494.0"></text>
</g>
<g>
<title>tcp_send_mss (8 samples, 0.26%)</title><rect x="385.3" y="531.0" width="3.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="388.3" y="542.0"></text>
</g>
<g>
<title>tcp_current_mss (5 samples, 0.16%)</title><rect x="386.5" y="515.0" width="1.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="389.5" y="526.0"></text>
</g>
<g>
<title>ipv4_mtu (2 samples, 0.06%)</title><rect x="386.9" y="499.0" width="0.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="389.9" y="510.0"></text>
</g>
<g>
<title>tcp_established_options (1 samples, 0.03%)</title><rect x="387.6" y="499.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="390.6" y="510.0"></text>
</g>
<g>
<title>tcp_v4_md5_lookup (1 samples, 0.03%)</title><rect x="388.0" y="499.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="391.0" y="510.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (1 samples, 0.03%)</title><rect x="388.4" y="547.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="391.4" y="558.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (1 samples, 0.03%)</title><rect x="388.8" y="563.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="391.8" y="574.0"></text>
</g>
<g>
<title>security_socket_sendmsg (5 samples, 0.16%)</title><rect x="389.1" y="579.0" width="1.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="392.1" y="590.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (1 samples, 0.03%)</title><rect x="389.5" y="563.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="392.5" y="574.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (3 samples, 0.10%)</title><rect x="389.9" y="563.0" width="1.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="392.9" y="574.0"></text>
</g>
<g>
<title>aa_sk_perm (1 samples, 0.03%)</title><rect x="389.9" y="547.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="392.9" y="558.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (2 samples, 0.06%)</title><rect x="390.3" y="547.0" width="0.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="393.3" y="558.0"></text>
</g>
<g>
<title>aa_sk_perm (1 samples, 0.03%)</title><rect x="390.7" y="531.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="393.7" y="542.0"></text>
</g>
<g>
<title>aa_label_sk_perm (1 samples, 0.03%)</title><rect x="390.7" y="515.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="393.7" y="526.0"></text>
</g>
<g>
<title>tcp_sendmsg (1 samples, 0.03%)</title><rect x="391.0" y="579.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="394.0" y="590.0"></text>
</g>
<g>
<title>sock_write_iter (1 samples, 0.03%)</title><rect x="391.4" y="627.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="394.4" y="638.0"></text>
</g>
<g>
<title>fsnotify (10 samples, 0.32%)</title><rect x="391.8" y="643.0" width="3.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="394.8" y="654.0"></text>
</g>
<g>
<title>rw_verify_area (6 samples, 0.19%)</title><rect x="395.6" y="643.0" width="2.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="398.6" y="654.0"></text>
</g>
<g>
<title>security_file_permission (5 samples, 0.16%)</title><rect x="396.0" y="627.0" width="1.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="399.0" y="638.0"></text>
</g>
<g>
<title>apparmor_file_permission (5 samples, 0.16%)</title><rect x="396.0" y="611.0" width="1.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="399.0" y="622.0"></text>
</g>
<g>
<title>common_file_perm (5 samples, 0.16%)</title><rect x="396.0" y="595.0" width="1.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="399.0" y="606.0"></text>
</g>
<g>
<title>aa_file_perm (2 samples, 0.06%)</title><rect x="397.1" y="579.0" width="0.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="400.1" y="590.0"></text>
</g>
<g>
<title>vfs_write (1 samples, 0.03%)</title><rect x="397.9" y="675.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="400.9" y="686.0"></text>
</g>
<g>
<title>__write (7 samples, 0.23%)</title><rect x="398.3" y="723.0" width="2.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="401.3" y="734.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="400.5" y="707.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="403.5" y="718.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="400.5" y="691.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="403.5" y="702.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="400.5" y="675.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="403.5" y="686.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (2 samples, 0.06%)</title><rect x="400.9" y="723.0" width="0.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="403.9" y="734.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.03%)</title><rect x="401.7" y="723.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="404.7" y="734.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="401.7" y="707.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="404.7" y="718.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="401.7" y="691.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="404.7" y="702.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="401.7" y="675.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="404.7" y="686.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.10%)</title><rect x="402.1" y="899.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="405.1" y="910.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.10%)</title><rect x="402.1" y="883.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="405.1" y="894.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.10%)</title><rect x="402.1" y="867.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="405.1" y="878.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="402.8" y="851.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="405.8" y="862.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="402.8" y="835.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="405.8" y="846.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="402.8" y="819.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="405.8" y="830.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="403.2" y="899.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="406.2" y="910.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="403.2" y="883.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="406.2" y="894.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="403.2" y="867.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="406.2" y="878.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ServiceImpl$$Lambda$66/32589374.act (1 samples, 0.03%)</title><rect x="403.6" y="915.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="406.6" y="926.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ServiceImpl$$Lambda$69/19021872.act (1,610 samples, 51.89%)</title><rect x="404.0" y="915.0" width="612.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="407.0" y="926.0">ru/mail/polis/service/dogm/ServiceImpl$$Lambda$69/19021872.act</text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ServiceImpl.lambda$entity$0 (1,610 samples, 51.89%)</title><rect x="404.0" y="899.0" width="612.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="407.0" y="910.0">ru/mail/polis/service/dogm/ServiceImpl.lambda$entity$0</text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ServiceImpl.get (1,610 samples, 51.89%)</title><rect x="404.0" y="883.0" width="612.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="407.0" y="894.0">ru/mail/polis/service/dogm/ServiceImpl.get</text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.03%)</title><rect x="404.0" y="867.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="407.0" y="878.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.03%)</title><rect x="404.0" y="851.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="407.0" y="862.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (1 samples, 0.03%)</title><rect x="404.0" y="835.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="407.0" y="846.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.03%)</title><rect x="404.0" y="819.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="407.0" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (1 samples, 0.03%)</title><rect x="404.3" y="867.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="407.3" y="878.0"></text>
</g>
<g>
<title>Runtime1::exception_handler_for_pc(JavaThread*) (1 samples, 0.03%)</title><rect x="404.3" y="851.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="407.3" y="862.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.06%)</title><rect x="404.7" y="867.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="407.7" y="878.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.06%)</title><rect x="404.7" y="851.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="407.7" y="862.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="404.7" y="835.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="407.7" y="846.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="404.7" y="819.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="407.7" y="830.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="404.7" y="803.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="407.7" y="814.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="405.1" y="787.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="408.1" y="798.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="405.1" y="771.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="408.1" y="782.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="405.1" y="755.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="408.1" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.get (1,606 samples, 51.76%)</title><rect x="405.5" y="867.0" width="610.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="408.5" y="878.0">ru/mail/polis/dao/RocksDAO.get</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (6 samples, 0.19%)</title><rect x="405.9" y="851.0" width="2.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="408.9" y="862.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/12320717.invoke (5 samples, 0.16%)</title><rect x="406.2" y="835.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="409.2" y="846.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (4 samples, 0.13%)</title><rect x="406.2" y="819.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="409.2" y="830.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.mixCoder (1 samples, 0.03%)</title><rect x="407.0" y="803.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="410.0" y="814.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.03%)</title><rect x="407.0" y="787.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="410.0" y="798.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.prepend (1 samples, 0.03%)</title><rect x="407.4" y="803.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="410.4" y="814.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.03%)</title><rect x="407.4" y="787.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="410.4" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/4195650.invoke (1 samples, 0.03%)</title><rect x="407.8" y="819.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="410.8" y="830.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.03%)</title><rect x="407.8" y="803.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="410.8" y="814.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.prepend (1 samples, 0.03%)</title><rect x="407.8" y="787.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="410.8" y="798.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.03%)</title><rect x="407.8" y="771.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="410.8" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.toString (4 samples, 0.13%)</title><rect x="408.2" y="851.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="411.2" y="862.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.03%)</title><rect x="408.2" y="835.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="411.2" y="846.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="408.2" y="819.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="411.2" y="830.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="408.2" y="803.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="411.2" y="814.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="408.2" y="787.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="411.2" y="798.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.append (3 samples, 0.10%)</title><rect x="408.5" y="835.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="411.5" y="846.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 0.10%)</title><rect x="408.5" y="819.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="411.5" y="830.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.06%)</title><rect x="408.5" y="803.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="411.5" y="814.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.newCapacity (1 samples, 0.03%)</title><rect x="408.9" y="787.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="411.9" y="798.0"></text>
</g>
<g>
<title>java/lang/Integer.stringSize (1 samples, 0.03%)</title><rect x="409.3" y="803.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="412.3" y="814.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (1,589 samples, 51.21%)</title><rect x="409.7" y="851.0" width="604.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="412.7" y="862.0">org/rocksdb/RocksDB.get</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (1,588 samples, 51.18%)</title><rect x="410.1" y="835.0" width="603.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="413.1" y="846.0">org/rocksdb/RocksDB.get</text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (1 samples, 0.03%)</title><rect x="410.8" y="819.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="413.8" y="830.0"></text>
</g>
<g>
<title>I2C/C2I adapters (4 samples, 0.13%)</title><rect x="411.2" y="819.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="414.2" y="830.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (1,281 samples, 41.28%)</title><rect x="412.7" y="819.0" width="487.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="415.7" y="830.0">Java_org_rocksdb_RocksDB_get__J_3BII</text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (1 samples, 0.03%)</title><rect x="414.2" y="803.0" width="0.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="417.2" y="814.0"></text>
</g>
<g>
<title>/usr/lib/i386-linux-gnu/libstdc++.so.6.0.25 (1 samples, 0.03%)</title><rect x="414.6" y="803.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="417.6" y="814.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="414.6" y="787.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="417.6" y="798.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="414.6" y="771.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="417.6" y="782.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="414.6" y="755.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="417.6" y="766.0"></text>
</g>
<g>
<title>free (4 samples, 0.13%)</title><rect x="415.0" y="803.0" width="1.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="418.0" y="814.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.03%)</title><rect x="416.5" y="803.0" width="0.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="419.5" y="814.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (4 samples, 0.13%)</title><rect x="416.9" y="803.0" width="1.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="419.9" y="814.0"></text>
</g>
<g>
<title>malloc (8 samples, 0.26%)</title><rect x="418.4" y="803.0" width="3.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="421.4" y="814.0"></text>
</g>
<g>
<title>operator delete(void*) (1 samples, 0.03%)</title><rect x="421.5" y="803.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="424.5" y="814.0"></text>
</g>
<g>
<title>operator delete[](void*) (1 samples, 0.03%)</title><rect x="421.8" y="803.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="424.8" y="814.0"></text>
</g>
<g>
<title>operator new(unsigned int) (6 samples, 0.19%)</title><rect x="422.2" y="803.0" width="2.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="425.2" y="814.0"></text>
</g>
<g>
<title>operator new[](unsigned int) (3 samples, 0.10%)</title><rect x="424.5" y="803.0" width="1.1" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="427.5" y="814.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, std::string*) (5 samples, 0.16%)</title><rect x="425.6" y="803.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="428.6" y="814.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="427.2" y="787.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="430.2" y="798.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="427.2" y="771.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="430.2" y="782.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="427.2" y="755.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="430.2" y="766.0"></text>
</g>
<g>
<title>rocksdb::JniUtil::createJavaByteArrayWithSizeCheck(JNIEnv_*, char const*, unsigned int) (2 samples, 0.06%)</title><rect x="427.5" y="803.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="430.5" y="814.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="427.9" y="787.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="430.9" y="798.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="427.9" y="771.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="430.9" y="782.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="427.9" y="755.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="430.9" y="766.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (1,233 samples, 39.74%)</title><rect x="428.3" y="803.0" width="468.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="431.3" y="814.0">rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions ..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (3 samples, 0.10%)</title><rect x="429.8" y="787.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="432.8" y="798.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.03%)</title><rect x="431.0" y="787.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="434.0" y="798.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.158] (6 samples, 0.19%)</title><rect x="431.3" y="787.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="434.3" y="798.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="433.6" y="787.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="436.6" y="798.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.03%)</title><rect x="434.0" y="787.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="437.0" y="798.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="434.0" y="771.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="437.0" y="782.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (10 samples, 0.32%)</title><rect x="434.4" y="787.0" width="3.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="437.4" y="798.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.06%)</title><rect x="434.4" y="771.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="437.4" y="782.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.03%)</title><rect x="435.1" y="771.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="438.1" y="782.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.158] (2 samples, 0.06%)</title><rect x="435.5" y="771.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="438.5" y="782.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (5 samples, 0.16%)</title><rect x="436.3" y="771.0" width="1.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="439.3" y="782.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.06%)</title><rect x="437.4" y="755.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="440.4" y="766.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, std::string*) (1 samples, 0.03%)</title><rect x="438.2" y="787.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="441.2" y="798.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, std::string*) (1,199 samples, 38.64%)</title><rect x="438.6" y="787.0" width="455.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="441.6" y="798.0">rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice co..</text>
</g>
<g>
<title>rocksdb::Cleanable::Cleanable() (3 samples, 0.10%)</title><rect x="439.3" y="771.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="442.3" y="782.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, std::string*) (1,192 samples, 38.41%)</title><rect x="440.5" y="771.0" width="453.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="443.5" y="782.0">rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnF..</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (1,191 samples, 38.38%)</title><rect x="440.9" y="755.0" width="452.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="443.9" y="766.0">rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::Col..</text>
</g>
<g>
<title>___tls_get_addr (2 samples, 0.06%)</title><rect x="441.2" y="739.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="444.2" y="750.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::cfd() const (2 samples, 0.06%)</title><rect x="442.0" y="739.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="445.0" y="750.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetAndRefSuperVersion(rocksdb::ColumnFamilyData*) (2 samples, 0.06%)</title><rect x="442.8" y="739.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="445.8" y="750.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (1,172 samples, 37.77%)</title><rect x="443.5" y="739.0" width="445.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="446.5" y="750.0">rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb..</text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (9 samples, 0.29%)</title><rect x="445.8" y="723.0" width="3.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="448.8" y="734.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni1945528177827338328.so (1 samples, 0.03%)</title><rect x="449.2" y="723.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="452.2" y="734.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (1 samples, 0.03%)</title><rect x="449.6" y="723.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="452.6" y="734.0"></text>
</g>
<g>
<title>___tls_get_addr (1 samples, 0.03%)</title><rect x="450.0" y="723.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="453.0" y="734.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="450.4" y="723.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="453.4" y="734.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="450.4" y="707.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="453.4" y="718.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="450.4" y="691.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="453.4" y="702.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (3 samples, 0.10%)</title><rect x="450.7" y="723.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="453.7" y="734.0"></text>
</g>
<g>
<title>resume_userspace (2 samples, 0.06%)</title><rect x="451.1" y="707.0" width="0.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="454.1" y="718.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.06%)</title><rect x="451.1" y="691.0" width="0.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="454.1" y="702.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.06%)</title><rect x="451.1" y="675.0" width="0.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="454.1" y="686.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetAndRefSuperVersion(rocksdb::ColumnFamilyData*) (8 samples, 0.26%)</title><rect x="451.9" y="723.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="454.9" y="734.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (6 samples, 0.19%)</title><rect x="451.9" y="707.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="454.9" y="718.0"></text>
</g>
<g>
<title>_init (1 samples, 0.03%)</title><rect x="452.3" y="691.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="455.3" y="702.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (2 samples, 0.06%)</title><rect x="452.6" y="691.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="455.6" y="702.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (2 samples, 0.06%)</title><rect x="453.4" y="691.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="456.4" y="702.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (2 samples, 0.06%)</title><rect x="454.2" y="707.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="457.2" y="718.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::ReturnAndCleanupSuperVersion(rocksdb::ColumnFamilyData*, rocksdb::SuperVersion*) (2 samples, 0.06%)</title><rect x="454.9" y="723.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="457.9" y="734.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (1 samples, 0.03%)</title><rect x="455.3" y="707.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="458.3" y="718.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::CompareAndSwap(unsigned int, void*, void*&amp;) (1 samples, 0.03%)</title><rect x="455.3" y="691.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="458.3" y="702.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (6 samples, 0.19%)</title><rect x="455.7" y="723.0" width="2.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="458.7" y="734.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (1,124 samples, 36.22%)</title><rect x="458.0" y="723.0" width="427.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="461.0" y="734.0">rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::stri..</text>
</g>
<g>
<title>/tmp/librocksdbjni1945528177827338328.so (1,115 samples, 35.93%)</title><rect x="459.9" y="707.0" width="424.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="462.9" y="718.0">/tmp/librocksdbjni1945528177827338328.so</text>
</g>
<g>
<title>/tmp/librocksdbjni1945528177827338328.so (36 samples, 1.16%)</title><rect x="459.9" y="691.0" width="13.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="462.9" y="702.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="460.6" y="675.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="463.6" y="686.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="460.6" y="659.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="463.6" y="670.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="460.6" y="643.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="463.6" y="654.0"></text>
</g>
<g>
<title>rocksdb::Comparator::Equal(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (33 samples, 1.06%)</title><rect x="461.0" y="675.0" width="12.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="464.0" y="686.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.03%)</title><rect x="461.0" y="659.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="464.0" y="670.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (32 samples, 1.03%)</title><rect x="461.4" y="659.0" width="12.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="464.4" y="670.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (7 samples, 0.23%)</title><rect x="461.4" y="643.0" width="2.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="464.4" y="654.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (6 samples, 0.19%)</title><rect x="461.8" y="627.0" width="2.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="464.8" y="638.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.03%)</title><rect x="461.8" y="611.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="464.8" y="622.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="461.8" y="595.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="464.8" y="606.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="461.8" y="579.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="464.8" y="590.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="461.8" y="563.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="464.8" y="574.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.141] (5 samples, 0.16%)</title><rect x="462.1" y="611.0" width="2.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="465.1" y="622.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.03%)</title><rect x="463.3" y="595.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="466.3" y="606.0"></text>
</g>
<g>
<title>.L409 (1 samples, 0.03%)</title><rect x="463.3" y="579.0" width="0.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="466.3" y="590.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.03%)</title><rect x="463.3" y="563.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="466.3" y="574.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="463.3" y="547.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="466.3" y="558.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.03%)</title><rect x="463.3" y="531.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="466.3" y="542.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.03%)</title><rect x="463.3" y="515.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="466.3" y="526.0"></text>
</g>
<g>
<title>call_on_stack (1 samples, 0.03%)</title><rect x="463.3" y="499.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="466.3" y="510.0"></text>
</g>
<g>
<title>__do_softirq (1 samples, 0.03%)</title><rect x="463.3" y="483.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="466.3" y="494.0"></text>
</g>
<g>
<title>run_rebalance_domains (1 samples, 0.03%)</title><rect x="463.3" y="467.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="466.3" y="478.0"></text>
</g>
<g>
<title>rebalance_domains (1 samples, 0.03%)</title><rect x="463.3" y="451.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="466.3" y="462.0"></text>
</g>
<g>
<title>update_blocked_averages (1 samples, 0.03%)</title><rect x="463.3" y="435.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="466.3" y="446.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="463.3" y="419.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="466.3" y="430.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="463.7" y="595.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="466.7" y="606.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="463.7" y="579.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="466.7" y="590.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="463.7" y="563.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="466.7" y="574.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="463.7" y="547.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="466.7" y="558.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (13 samples, 0.42%)</title><rect x="464.1" y="643.0" width="4.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="467.1" y="654.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (13 samples, 0.42%)</title><rect x="464.1" y="627.0" width="4.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="467.1" y="638.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.03%)</title><rect x="464.1" y="611.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="467.1" y="622.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.141] (11 samples, 0.35%)</title><rect x="464.4" y="611.0" width="4.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="467.4" y="622.0"></text>
</g>
<g>
<title>.L347 (1 samples, 0.03%)</title><rect x="464.8" y="595.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="467.8" y="606.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (4 samples, 0.13%)</title><rect x="465.2" y="595.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="468.2" y="606.0"></text>
</g>
<g>
<title>.L409 (3 samples, 0.10%)</title><rect x="465.2" y="579.0" width="1.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="468.2" y="590.0"></text>
</g>
<g>
<title>HandleMark::~HandleMark() (1 samples, 0.03%)</title><rect x="465.2" y="563.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="468.2" y="574.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (1 samples, 0.03%)</title><rect x="465.6" y="563.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="468.6" y="574.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.03%)</title><rect x="466.0" y="563.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="469.0" y="574.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (1 samples, 0.03%)</title><rect x="466.0" y="547.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="469.0" y="558.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.03%)</title><rect x="466.3" y="579.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="469.3" y="590.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.03%)</title><rect x="466.3" y="563.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="469.3" y="574.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="466.7" y="595.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="469.7" y="606.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (2 samples, 0.06%)</title><rect x="467.1" y="595.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="470.1" y="606.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="467.5" y="579.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="470.5" y="590.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="467.5" y="563.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="470.5" y="574.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="467.5" y="547.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="470.5" y="558.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.03%)</title><rect x="467.9" y="595.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="470.9" y="606.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="468.2" y="595.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="471.2" y="606.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="468.2" y="579.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="471.2" y="590.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="468.2" y="563.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="471.2" y="574.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="468.6" y="611.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="471.6" y="622.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="468.6" y="595.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="471.6" y="606.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="468.6" y="579.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="471.6" y="590.0"></text>
</g>
<g>
<title>__kernel_vsyscall (9 samples, 0.29%)</title><rect x="469.0" y="643.0" width="3.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="472.0" y="654.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (9 samples, 0.29%)</title><rect x="469.0" y="627.0" width="3.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="472.0" y="638.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (9 samples, 0.29%)</title><rect x="469.0" y="611.0" width="3.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="472.0" y="622.0"></text>
</g>
<g>
<title>sys_futex (9 samples, 0.29%)</title><rect x="469.0" y="595.0" width="3.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="472.0" y="606.0"></text>
</g>
<g>
<title>do_futex (9 samples, 0.29%)</title><rect x="469.0" y="579.0" width="3.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="472.0" y="590.0"></text>
</g>
<g>
<title>futex_wait (1 samples, 0.03%)</title><rect x="469.0" y="563.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="472.0" y="574.0"></text>
</g>
<g>
<title>futex_wait_queue_me (1 samples, 0.03%)</title><rect x="469.0" y="547.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="472.0" y="558.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="469.0" y="531.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="472.0" y="542.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.03%)</title><rect x="469.0" y="515.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="472.0" y="526.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="469.0" y="499.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="472.0" y="510.0"></text>
</g>
<g>
<title>futex_wake (8 samples, 0.26%)</title><rect x="469.4" y="563.0" width="3.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="472.4" y="574.0"></text>
</g>
<g>
<title>wake_up_q (8 samples, 0.26%)</title><rect x="469.4" y="547.0" width="3.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="472.4" y="558.0"></text>
</g>
<g>
<title>try_to_wake_up (8 samples, 0.26%)</title><rect x="469.4" y="531.0" width="3.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="472.4" y="542.0"></text>
</g>
<g>
<title>__lock_text_start (8 samples, 0.26%)</title><rect x="469.4" y="515.0" width="3.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="472.4" y="526.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.03%)</title><rect x="472.4" y="643.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="475.4" y="654.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.03%)</title><rect x="472.8" y="643.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="475.8" y="654.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.158] (1 samples, 0.03%)</title><rect x="472.8" y="627.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="475.8" y="638.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (1 samples, 0.03%)</title><rect x="473.2" y="643.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="476.2" y="654.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.03%)</title><rect x="473.2" y="627.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="476.2" y="638.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::FindGreaterOrEqual(char const*) const (1,067 samples, 34.39%)</title><rect x="473.6" y="691.0" width="405.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="476.6" y="702.0">rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyCompar..</text>
</g>
<g>
<title>/lib/i386-linux-gnu/ld-2.27.so (1 samples, 0.03%)</title><rect x="483.4" y="675.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="486.4" y="686.0"></text>
</g>
<g>
<title>___tls_get_addr (1 samples, 0.03%)</title><rect x="483.8" y="675.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="486.8" y="686.0"></text>
</g>
<g>
<title>resume_userspace (2 samples, 0.06%)</title><rect x="484.2" y="675.0" width="0.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="487.2" y="686.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.06%)</title><rect x="484.2" y="659.0" width="0.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="487.2" y="670.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.06%)</title><rect x="484.2" y="643.0" width="0.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="487.2" y="654.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1 samples, 0.03%)</title><rect x="485.0" y="675.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="488.0" y="686.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1,036 samples, 33.39%)</title><rect x="485.3" y="675.0" width="394.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="488.3" y="686.0">rocksdb::MemTable::KeyComparator::operator()(char cons..</text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (2 samples, 0.06%)</title><rect x="486.9" y="659.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="489.9" y="670.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (1 samples, 0.03%)</title><rect x="487.6" y="659.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="490.6" y="670.0"></text>
</g>
<g>
<title>___tls_get_addr (2 samples, 0.06%)</title><rect x="488.0" y="659.0" width="0.8" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="491.0" y="670.0"></text>
</g>
<g>
<title>_init (2 samples, 0.06%)</title><rect x="488.8" y="659.0" width="0.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="491.8" y="670.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.03%)</title><rect x="489.5" y="659.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="492.5" y="670.0"></text>
</g>
<g>
<title>resume_userspace (2 samples, 0.06%)</title><rect x="489.9" y="659.0" width="0.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="492.9" y="670.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.06%)</title><rect x="489.9" y="643.0" width="0.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="492.9" y="654.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.06%)</title><rect x="489.9" y="627.0" width="0.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="492.9" y="638.0"></text>
</g>
<g>
<title>rocksdb::BaseComparatorJniCallback::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (1,016 samples, 32.74%)</title><rect x="490.7" y="659.0" width="386.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="493.7" y="670.0">rocksdb::BaseComparatorJniCallback::Compare(rocksdb::..</text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (3 samples, 0.10%)</title><rect x="492.2" y="643.0" width="1.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="495.2" y="654.0"></text>
</g>
<g>
<title>JNIEnv_::CallIntMethod(_jobject*, _jmethodID*, ...) (142 samples, 4.58%)</title><rect x="493.3" y="643.0" width="54.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="496.3" y="654.0">JNIEn..</text>
</g>
<g>
<title>SignatureIterator::SignatureIterator(Symbol*) (1 samples, 0.03%)</title><rect x="493.7" y="627.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="496.7" y="638.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.dx (2 samples, 0.06%)</title><rect x="494.1" y="627.0" width="0.8" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="497.1" y="638.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="494.5" y="611.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="497.5" y="622.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="494.5" y="595.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="497.5" y="606.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="494.5" y="579.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="497.5" y="590.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (138 samples, 4.45%)</title><rect x="494.9" y="627.0" width="52.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="497.9" y="638.0">jni_C..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;CardTableBarrierSet::AccessBarrier&lt;1097812ull, CardTableBarrierSet&gt;, (AccessInternal::BarrierType)2, 1097812ull&gt;::oop_access_barrier(void*) (1 samples, 0.03%)</title><rect x="496.8" y="611.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="499.8" y="622.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.03%)</title><rect x="497.1" y="611.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="500.1" y="622.0"></text>
</g>
<g>
<title>Klass::method_at_vtable(int) (4 samples, 0.13%)</title><rect x="497.5" y="611.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="500.5" y="622.0"></text>
</g>
<g>
<title>SignatureIterator::SignatureIterator(Symbol*) (2 samples, 0.06%)</title><rect x="499.0" y="611.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="502.0" y="622.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (5 samples, 0.16%)</title><rect x="499.8" y="611.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="502.8" y="622.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.158] (2 samples, 0.06%)</title><rect x="501.7" y="611.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="504.7" y="622.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="502.1" y="595.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="505.1" y="606.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="502.1" y="579.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="505.1" y="590.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="502.1" y="563.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="505.1" y="574.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.ax (1 samples, 0.03%)</title><rect x="502.5" y="611.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="505.5" y="622.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="502.8" y="611.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="505.8" y="622.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.dx (1 samples, 0.03%)</title><rect x="503.2" y="611.0" width="0.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="506.2" y="622.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.141] (113 samples, 3.64%)</title><rect x="503.6" y="611.0" width="43.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="506.6" y="622.0">jni_..</text>
</g>
<g>
<title>.L347 (5 samples, 0.16%)</title><rect x="508.5" y="595.0" width="1.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="511.5" y="606.0"></text>
</g>
<g>
<title>.L357 (5 samples, 0.16%)</title><rect x="510.4" y="595.0" width="1.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="513.4" y="606.0"></text>
</g>
<g>
<title>Fingerprinter::fingerprint() (2 samples, 0.06%)</title><rect x="512.3" y="595.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="515.3" y="606.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (2 samples, 0.06%)</title><rect x="513.1" y="595.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="516.1" y="606.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="513.5" y="579.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="516.5" y="590.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="513.5" y="563.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="516.5" y="574.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="513.5" y="547.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="516.5" y="558.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long long) (2 samples, 0.06%)</title><rect x="513.9" y="595.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="516.9" y="606.0"></text>
</g>
<g>
<title>JavaCallArguments::JavaCallArguments(int) (2 samples, 0.06%)</title><rect x="514.6" y="595.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="517.6" y="606.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (66 samples, 2.13%)</title><rect x="515.4" y="595.0" width="25.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="518.4" y="606.0">J..</text>
</g>
<g>
<title>.L409 (37 samples, 1.19%)</title><rect x="515.8" y="579.0" width="14.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="518.8" y="590.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;CardTableBarrierSet::AccessBarrier&lt;1097812ull, CardTableBarrierSet&gt;, (AccessInternal::BarrierType)2, 1097812ull&gt;::oop_access_barrier(void*) (1 samples, 0.03%)</title><rect x="518.8" y="563.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="521.8" y="574.0"></text>
</g>
<g>
<title>HandleMark::~HandleMark() (2 samples, 0.06%)</title><rect x="519.2" y="563.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="522.2" y="574.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.03%)</title><rect x="520.0" y="563.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="523.0" y="574.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="520.0" y="547.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="523.0" y="558.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="520.0" y="531.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="523.0" y="542.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="520.0" y="515.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="523.0" y="526.0"></text>
</g>
<g>
<title>JNIHandleBlock::release_block(JNIHandleBlock*, Thread*) (2 samples, 0.06%)</title><rect x="520.3" y="563.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="523.3" y="574.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="520.7" y="547.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="523.7" y="558.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="520.7" y="531.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="523.7" y="542.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="520.7" y="515.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="523.7" y="526.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (9 samples, 0.29%)</title><rect x="521.1" y="563.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="524.1" y="574.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (11 samples, 0.35%)</title><rect x="524.5" y="563.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="527.5" y="574.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.03%)</title><rect x="527.2" y="547.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="530.2" y="558.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (1 samples, 0.03%)</title><rect x="527.6" y="547.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="530.6" y="558.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (2 samples, 0.06%)</title><rect x="527.9" y="547.0" width="0.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="530.9" y="558.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="528.3" y="531.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="531.3" y="542.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="528.3" y="515.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="531.3" y="526.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="528.3" y="499.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="531.3" y="510.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (2 samples, 0.06%)</title><rect x="528.7" y="563.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="531.7" y="574.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="529.5" y="563.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="532.5" y="574.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="529.5" y="547.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="532.5" y="558.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="529.5" y="531.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="532.5" y="542.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (23 samples, 0.74%)</title><rect x="529.8" y="579.0" width="8.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="532.8" y="590.0"></text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (2 samples, 0.06%)</title><rect x="533.6" y="563.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="536.6" y="574.0"></text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (3 samples, 0.10%)</title><rect x="534.4" y="563.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="537.4" y="574.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.03%)</title><rect x="535.5" y="563.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="538.5" y="574.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="535.9" y="563.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="538.9" y="574.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (4 samples, 0.13%)</title><rect x="536.3" y="563.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="539.3" y="574.0"></text>
</g>
<g>
<title>resume_userspace (2 samples, 0.06%)</title><rect x="537.8" y="563.0" width="0.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="540.8" y="574.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.06%)</title><rect x="537.8" y="547.0" width="0.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="540.8" y="558.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.06%)</title><rect x="537.8" y="531.0" width="0.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="540.8" y="542.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.ax (1 samples, 0.03%)</title><rect x="538.6" y="579.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="541.6" y="590.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="539.0" y="579.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="542.0" y="590.0"></text>
</g>
<g>
<title>os::current_stack_pointer() (3 samples, 0.10%)</title><rect x="539.3" y="579.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="542.3" y="590.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (3 samples, 0.10%)</title><rect x="540.5" y="595.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="543.5" y="606.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (2 samples, 0.06%)</title><rect x="541.6" y="595.0" width="0.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="544.6" y="606.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="542.0" y="579.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="545.0" y="590.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="542.0" y="563.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="545.0" y="574.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="542.0" y="547.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="545.0" y="558.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.di (1 samples, 0.03%)</title><rect x="542.4" y="595.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="545.4" y="606.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (4 samples, 0.13%)</title><rect x="542.8" y="595.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="545.8" y="606.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="543.9" y="579.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="546.9" y="590.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="543.9" y="563.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="546.9" y="574.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="543.9" y="547.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="546.9" y="558.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (4 samples, 0.13%)</title><rect x="544.3" y="595.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="547.3" y="606.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="545.4" y="579.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="548.4" y="590.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="545.4" y="563.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="548.4" y="574.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="545.4" y="547.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="548.4" y="558.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="545.4" y="531.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="548.4" y="542.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.03%)</title><rect x="545.4" y="515.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="548.4" y="526.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="545.4" y="499.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="548.4" y="510.0"></text>
</g>
<g>
<title>resume_userspace (2 samples, 0.06%)</title><rect x="545.8" y="595.0" width="0.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="548.8" y="606.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.06%)</title><rect x="545.8" y="579.0" width="0.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="548.8" y="590.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.06%)</title><rect x="545.8" y="563.0" width="0.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="548.8" y="574.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;false&gt;(_jobject*) (1 samples, 0.03%)</title><rect x="546.6" y="611.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="549.6" y="622.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="547.0" y="611.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="550.0" y="622.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="547.0" y="595.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="550.0" y="606.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="547.0" y="579.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="550.0" y="590.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="547.0" y="563.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="550.0" y="574.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.03%)</title><rect x="547.0" y="547.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="550.0" y="558.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="547.0" y="531.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="550.0" y="542.0"></text>
</g>
<g>
<title>JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...) (303 samples, 9.76%)</title><rect x="547.3" y="643.0" width="115.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="550.3" y="654.0">JNIEnv_::CallV..</text>
</g>
<g>
<title>SignatureIterator::SignatureIterator(Symbol*) (1 samples, 0.03%)</title><rect x="547.3" y="627.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="550.3" y="638.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.03%)</title><rect x="547.7" y="627.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="550.7" y="638.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (3 samples, 0.10%)</title><rect x="548.1" y="627.0" width="1.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="551.1" y="638.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (296 samples, 9.54%)</title><rect x="549.2" y="627.0" width="112.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="552.2" y="638.0">jni_CallVoidMe..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;CardTableBarrierSet::AccessBarrier&lt;1097812ull, CardTableBarrierSet&gt;, (AccessInternal::BarrierType)2, 1097812ull&gt;::oop_access_barrier(void*) (3 samples, 0.10%)</title><rect x="554.9" y="611.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="557.9" y="622.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="555.7" y="595.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="558.7" y="606.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="555.7" y="579.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="558.7" y="590.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="555.7" y="563.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="558.7" y="574.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (1 samples, 0.03%)</title><rect x="556.1" y="611.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="559.1" y="622.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.06%)</title><rect x="556.5" y="611.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="559.5" y="622.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="556.8" y="595.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="559.8" y="606.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="556.8" y="579.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="559.8" y="590.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="556.8" y="563.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="559.8" y="574.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long long) (1 samples, 0.03%)</title><rect x="557.2" y="611.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="560.2" y="622.0"></text>
</g>
<g>
<title>JavaCallArguments::JavaCallArguments(int) (3 samples, 0.10%)</title><rect x="557.6" y="611.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="560.6" y="622.0"></text>
</g>
<g>
<title>resume_userspace (2 samples, 0.06%)</title><rect x="558.0" y="595.0" width="0.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="561.0" y="606.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.06%)</title><rect x="558.0" y="579.0" width="0.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="561.0" y="590.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.06%)</title><rect x="558.0" y="563.0" width="0.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="561.0" y="574.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.03%)</title><rect x="558.7" y="611.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="561.7" y="622.0"></text>
</g>
<g>
<title>Klass::method_at_vtable(int) (5 samples, 0.16%)</title><rect x="559.1" y="611.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="562.1" y="622.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="560.6" y="595.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="563.6" y="606.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="560.6" y="579.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="563.6" y="590.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="560.6" y="563.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="563.6" y="574.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.06%)</title><rect x="561.0" y="611.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="564.0" y="622.0"></text>
</g>
<g>
<title>SignatureIterator::SignatureIterator(Symbol*) (1 samples, 0.03%)</title><rect x="561.8" y="611.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="564.8" y="622.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (10 samples, 0.32%)</title><rect x="562.2" y="611.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="565.2" y="622.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.03%)</title><rect x="565.6" y="595.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="568.6" y="606.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="565.6" y="579.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="568.6" y="590.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.03%)</title><rect x="565.6" y="563.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="568.6" y="574.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.03%)</title><rect x="565.6" y="547.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="568.6" y="558.0"></text>
</g>
<g>
<title>call_on_stack (1 samples, 0.03%)</title><rect x="565.6" y="531.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="568.6" y="542.0"></text>
</g>
<g>
<title>__do_softirq (1 samples, 0.03%)</title><rect x="565.6" y="515.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="568.6" y="526.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.158] (10 samples, 0.32%)</title><rect x="566.0" y="611.0" width="3.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="569.0" y="622.0"></text>
</g>
<g>
<title>resume_userspace (2 samples, 0.06%)</title><rect x="569.0" y="595.0" width="0.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="572.0" y="606.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.06%)</title><rect x="569.0" y="579.0" width="0.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="572.0" y="590.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.06%)</title><rect x="569.0" y="563.0" width="0.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="572.0" y="574.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.ax (1 samples, 0.03%)</title><rect x="569.8" y="611.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="572.8" y="622.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="569.8" y="595.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="572.8" y="606.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="569.8" y="579.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="572.8" y="590.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="569.8" y="563.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="572.8" y="574.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (7 samples, 0.23%)</title><rect x="570.1" y="611.0" width="2.7" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="573.1" y="622.0"></text>
</g>
<g>
<title>resume_userspace (2 samples, 0.06%)</title><rect x="572.0" y="595.0" width="0.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="575.0" y="606.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.06%)</title><rect x="572.0" y="579.0" width="0.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="575.0" y="590.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.06%)</title><rect x="572.0" y="563.0" width="0.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="575.0" y="574.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.141] (230 samples, 7.41%)</title><rect x="572.8" y="611.0" width="87.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="575.8" y="622.0">jni_invoke..</text>
</g>
<g>
<title>.L344 (2 samples, 0.06%)</title><rect x="583.8" y="595.0" width="0.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="586.8" y="606.0"></text>
</g>
<g>
<title>.L347 (3 samples, 0.10%)</title><rect x="584.6" y="595.0" width="1.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="587.6" y="606.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="585.4" y="579.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="588.4" y="590.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="585.4" y="563.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="588.4" y="574.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="585.4" y="547.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="588.4" y="558.0"></text>
</g>
<g>
<title>.L348 (3 samples, 0.10%)</title><rect x="585.7" y="595.0" width="1.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="588.7" y="606.0"></text>
</g>
<g>
<title>.L354 (4 samples, 0.13%)</title><rect x="586.9" y="595.0" width="1.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="589.9" y="606.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="588.0" y="579.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="591.0" y="590.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="588.0" y="563.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="591.0" y="574.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="588.0" y="547.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="591.0" y="558.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.03%)</title><rect x="588.0" y="531.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="591.0" y="542.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="588.0" y="515.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="591.0" y="526.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.03%)</title><rect x="588.0" y="499.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="591.0" y="510.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.03%)</title><rect x="588.0" y="483.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="591.0" y="494.0"></text>
</g>
<g>
<title>call_on_stack (1 samples, 0.03%)</title><rect x="588.0" y="467.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="591.0" y="478.0"></text>
</g>
<g>
<title>__do_softirq (1 samples, 0.03%)</title><rect x="588.0" y="451.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="591.0" y="462.0"></text>
</g>
<g>
<title>Fingerprinter::fingerprint() (7 samples, 0.23%)</title><rect x="588.4" y="595.0" width="2.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="591.4" y="606.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.03%)</title><rect x="590.7" y="579.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="593.7" y="590.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="590.7" y="563.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="593.7" y="574.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.03%)</title><rect x="590.7" y="547.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="593.7" y="558.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.03%)</title><rect x="590.7" y="531.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="593.7" y="542.0"></text>
</g>
<g>
<title>call_on_stack (1 samples, 0.03%)</title><rect x="590.7" y="515.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="593.7" y="526.0"></text>
</g>
<g>
<title>__do_softirq (1 samples, 0.03%)</title><rect x="590.7" y="499.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="593.7" y="510.0"></text>
</g>
<g>
<title>run_rebalance_domains (1 samples, 0.03%)</title><rect x="590.7" y="483.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="593.7" y="494.0"></text>
</g>
<g>
<title>rebalance_domains (1 samples, 0.03%)</title><rect x="590.7" y="467.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="593.7" y="478.0"></text>
</g>
<g>
<title>update_blocked_averages (1 samples, 0.03%)</title><rect x="590.7" y="451.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="593.7" y="462.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="590.7" y="435.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="593.7" y="446.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (3 samples, 0.10%)</title><rect x="591.1" y="595.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="594.1" y="606.0"></text>
</g>
<g>
<title>JNI_ArgumentPusherVaArg::iterate(unsigned long long) (8 samples, 0.26%)</title><rect x="592.2" y="595.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="595.2" y="606.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="594.9" y="579.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="597.9" y="590.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="594.9" y="563.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="597.9" y="574.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="594.9" y="547.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="597.9" y="558.0"></text>
</g>
<g>
<title>JavaCallArguments::JavaCallArguments(int) (5 samples, 0.16%)</title><rect x="595.2" y="595.0" width="1.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="598.2" y="606.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (132 samples, 4.25%)</title><rect x="597.1" y="595.0" width="50.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="600.1" y="606.0">JavaC..</text>
</g>
<g>
<title>.L409 (67 samples, 2.16%)</title><rect x="597.1" y="579.0" width="25.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="600.1" y="590.0">...</text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (3 samples, 0.10%)</title><rect x="601.0" y="563.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="604.0" y="574.0"></text>
</g>
<g>
<title>HandleMark::~HandleMark() (5 samples, 0.16%)</title><rect x="602.1" y="563.0" width="1.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="605.1" y="574.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (4 samples, 0.13%)</title><rect x="604.0" y="563.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="607.0" y="574.0"></text>
</g>
<g>
<title>JNIHandleBlock::release_block(JNIHandleBlock*, Thread*) (6 samples, 0.19%)</title><rect x="605.5" y="563.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="608.5" y="574.0"></text>
</g>
<g>
<title>JavaCallArguments::parameters() (13 samples, 0.42%)</title><rect x="607.8" y="563.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="610.8" y="574.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (22 samples, 0.71%)</title><rect x="612.7" y="563.0" width="8.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="615.7" y="574.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (6 samples, 0.19%)</title><rect x="616.5" y="547.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="619.5" y="558.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (2 samples, 0.06%)</title><rect x="618.8" y="547.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="621.8" y="558.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="619.2" y="531.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="622.2" y="542.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="619.2" y="515.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="622.2" y="526.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="619.2" y="499.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="622.2" y="510.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (2 samples, 0.06%)</title><rect x="619.6" y="547.0" width="0.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="622.6" y="558.0"></text>
</g>
<g>
<title>resume_userspace (2 samples, 0.06%)</title><rect x="620.3" y="547.0" width="0.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="623.3" y="558.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.06%)</title><rect x="620.3" y="531.0" width="0.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="623.3" y="542.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.06%)</title><rect x="620.3" y="515.0" width="0.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="623.3" y="526.0"></text>
</g>
<g>
<title>JavaThread::can_call_java() const (2 samples, 0.06%)</title><rect x="621.1" y="563.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="624.1" y="574.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (1 samples, 0.03%)</title><rect x="621.9" y="563.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="624.9" y="574.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="622.2" y="563.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="625.2" y="574.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="622.2" y="547.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="625.2" y="558.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="622.2" y="531.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="625.2" y="542.0"></text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (3 samples, 0.10%)</title><rect x="622.6" y="579.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="625.6" y="590.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.03%)</title><rect x="623.8" y="579.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="626.8" y="590.0"></text>
</g>
<g>
<title>JNIHandleBlock::release_block(JNIHandleBlock*, Thread*) (1 samples, 0.03%)</title><rect x="624.1" y="579.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="627.1" y="590.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (2 samples, 0.06%)</title><rect x="624.5" y="579.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="627.5" y="590.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="624.9" y="563.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="627.9" y="574.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="624.9" y="547.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="627.9" y="558.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="624.9" y="531.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="627.9" y="542.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (43 samples, 1.39%)</title><rect x="625.3" y="579.0" width="16.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="628.3" y="590.0"></text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (4 samples, 0.13%)</title><rect x="632.9" y="563.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="635.9" y="574.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="634.0" y="547.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="637.0" y="558.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="634.0" y="531.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="637.0" y="542.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="634.0" y="515.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="637.0" y="526.0"></text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (4 samples, 0.13%)</title><rect x="634.4" y="563.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="637.4" y="574.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.03%)</title><rect x="635.9" y="563.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="638.9" y="574.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (3 samples, 0.10%)</title><rect x="636.3" y="563.0" width="1.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="639.3" y="574.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="637.1" y="547.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="640.1" y="558.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="637.1" y="531.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="640.1" y="542.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="637.1" y="515.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="640.1" y="526.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (7 samples, 0.23%)</title><rect x="637.5" y="563.0" width="2.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="640.5" y="574.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="639.7" y="547.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="642.7" y="558.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="639.7" y="531.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="642.7" y="542.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="639.7" y="515.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="642.7" y="526.0"></text>
</g>
<g>
<title>resume_userspace (4 samples, 0.13%)</title><rect x="640.1" y="563.0" width="1.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="643.1" y="574.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (4 samples, 0.13%)</title><rect x="640.1" y="547.0" width="1.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="643.1" y="558.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (4 samples, 0.13%)</title><rect x="640.1" y="531.0" width="1.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="643.1" y="542.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="641.3" y="515.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="644.3" y="526.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.03%)</title><rect x="641.3" y="499.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="644.3" y="510.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="641.3" y="483.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="644.3" y="494.0"></text>
</g>
<g>
<title>Method::is_empty_method() const (4 samples, 0.13%)</title><rect x="641.6" y="579.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="644.6" y="590.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="642.8" y="563.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="645.8" y="574.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="642.8" y="547.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="645.8" y="558.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="642.8" y="531.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="645.8" y="542.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.ax (2 samples, 0.06%)</title><rect x="643.2" y="579.0" width="0.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="646.2" y="590.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="643.9" y="579.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="646.9" y="590.0"></text>
</g>
<g>
<title>os::current_stack_pointer() (5 samples, 0.16%)</title><rect x="644.3" y="579.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="647.3" y="590.0"></text>
</g>
<g>
<title>os::os_exception_wrapper(void (*)(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*), JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.03%)</title><rect x="646.2" y="579.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="649.2" y="590.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (2 samples, 0.06%)</title><rect x="646.6" y="579.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="649.6" y="590.0"></text>
</g>
<g>
<title>Klass::method_at_vtable(int) (1 samples, 0.03%)</title><rect x="647.3" y="595.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="650.3" y="606.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (6 samples, 0.19%)</title><rect x="647.7" y="595.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="650.7" y="606.0"></text>
</g>
<g>
<title>resume_userspace (2 samples, 0.06%)</title><rect x="649.2" y="579.0" width="0.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="652.2" y="590.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.06%)</title><rect x="649.2" y="563.0" width="0.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="652.2" y="574.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.06%)</title><rect x="649.2" y="547.0" width="0.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="652.2" y="558.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="649.6" y="531.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="652.6" y="542.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.03%)</title><rect x="649.6" y="515.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="652.6" y="526.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="649.6" y="499.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="652.6" y="510.0"></text>
</g>
<g>
<title>SignatureIterator::SignatureIterator(Symbol*) (1 samples, 0.03%)</title><rect x="650.0" y="595.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="653.0" y="606.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (4 samples, 0.13%)</title><rect x="650.4" y="595.0" width="1.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="653.4" y="606.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.di (2 samples, 0.06%)</title><rect x="651.9" y="595.0" width="0.8" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="654.9" y="606.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (7 samples, 0.23%)</title><rect x="652.7" y="595.0" width="2.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="655.7" y="606.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="655.0" y="579.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="658.0" y="590.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="655.0" y="563.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="658.0" y="574.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="655.0" y="547.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="658.0" y="558.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (9 samples, 0.29%)</title><rect x="655.3" y="595.0" width="3.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="658.3" y="606.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="658.4" y="579.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="661.4" y="590.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="658.4" y="563.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="661.4" y="574.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="658.4" y="547.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="661.4" y="558.0"></text>
</g>
<g>
<title>resume_userspace (4 samples, 0.13%)</title><rect x="658.8" y="595.0" width="1.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="661.8" y="606.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (4 samples, 0.13%)</title><rect x="658.8" y="579.0" width="1.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="661.8" y="590.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (4 samples, 0.13%)</title><rect x="658.8" y="563.0" width="1.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="661.8" y="574.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="659.9" y="547.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="662.9" y="558.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.03%)</title><rect x="659.9" y="531.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="662.9" y="542.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="659.9" y="515.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="662.9" y="526.0"></text>
</g>
<g>
<title>methodHandle::operator=(methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="660.3" y="611.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="663.3" y="622.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;false&gt;(_jobject*) (2 samples, 0.06%)</title><rect x="660.7" y="611.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="663.7" y="622.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="661.0" y="595.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="664.0" y="606.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="661.0" y="579.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="664.0" y="590.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="661.0" y="563.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="664.0" y="574.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="661.4" y="611.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="664.4" y="622.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="661.4" y="595.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="664.4" y="606.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="661.4" y="579.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="664.4" y="590.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.141] (2 samples, 0.06%)</title><rect x="661.8" y="627.0" width="0.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="664.8" y="638.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.03%)</title><rect x="662.6" y="643.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="665.6" y="654.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.03%)</title><rect x="662.9" y="643.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="665.9" y="654.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="663.3" y="643.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="666.3" y="654.0"></text>
</g>
<g>
<title>__kernel_vsyscall (1 samples, 0.03%)</title><rect x="663.3" y="627.0" width="0.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="666.3" y="638.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (1 samples, 0.03%)</title><rect x="663.3" y="611.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="666.3" y="622.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (1 samples, 0.03%)</title><rect x="663.3" y="595.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="666.3" y="606.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_lock (6 samples, 0.19%)</title><rect x="663.7" y="643.0" width="2.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="666.7" y="654.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="665.6" y="627.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="668.6" y="638.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="665.6" y="611.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="668.6" y="622.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="665.6" y="595.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="668.6" y="606.0"></text>
</g>
<g>
<title>__kernel_vsyscall (476 samples, 15.34%)</title><rect x="666.0" y="643.0" width="181.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="669.0" y="654.0">__kernel_vsyscall</text>
</g>
<g>
<title>entry_SYSENTER_32 (474 samples, 15.28%)</title><rect x="666.7" y="627.0" width="180.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="669.7" y="638.0">entry_SYSENTER_32</text>
</g>
<g>
<title>do_fast_syscall_32 (474 samples, 15.28%)</title><rect x="666.7" y="611.0" width="180.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="669.7" y="622.0">do_fast_syscall_32</text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="666.7" y="595.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="669.7" y="606.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="666.7" y="579.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="669.7" y="590.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.03%)</title><rect x="666.7" y="563.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="669.7" y="574.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="666.7" y="547.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="669.7" y="558.0"></text>
</g>
<g>
<title>sys_futex (473 samples, 15.24%)</title><rect x="667.1" y="595.0" width="179.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="670.1" y="606.0">sys_futex</text>
</g>
<g>
<title>do_futex (473 samples, 15.24%)</title><rect x="667.1" y="579.0" width="179.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="670.1" y="590.0">do_futex</text>
</g>
<g>
<title>futex_wait (44 samples, 1.42%)</title><rect x="667.5" y="563.0" width="16.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="670.5" y="574.0"></text>
</g>
<g>
<title>futex_wait_queue_me (42 samples, 1.35%)</title><rect x="667.5" y="547.0" width="16.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="670.5" y="558.0"></text>
</g>
<g>
<title>schedule (42 samples, 1.35%)</title><rect x="667.5" y="531.0" width="16.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="670.5" y="542.0"></text>
</g>
<g>
<title>__sched_text_start (42 samples, 1.35%)</title><rect x="667.5" y="515.0" width="16.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="670.5" y="526.0"></text>
</g>
<g>
<title>finish_task_switch (41 samples, 1.32%)</title><rect x="667.9" y="499.0" width="15.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="670.9" y="510.0"></text>
</g>
<g>
<title>futex_wait_setup (2 samples, 0.06%)</title><rect x="683.5" y="547.0" width="0.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="686.5" y="558.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.03%)</title><rect x="683.9" y="531.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="686.9" y="542.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="683.9" y="515.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="686.9" y="526.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.03%)</title><rect x="683.9" y="499.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="686.9" y="510.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.03%)</title><rect x="683.9" y="483.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="686.9" y="494.0"></text>
</g>
<g>
<title>call_on_stack (1 samples, 0.03%)</title><rect x="683.9" y="467.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="686.9" y="478.0"></text>
</g>
<g>
<title>__do_softirq (1 samples, 0.03%)</title><rect x="683.9" y="451.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="686.9" y="462.0"></text>
</g>
<g>
<title>futex_wake (428 samples, 13.79%)</title><rect x="684.2" y="563.0" width="162.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="687.2" y="574.0">futex_wake</text>
</g>
<g>
<title>_raw_spin_lock (1 samples, 0.03%)</title><rect x="684.6" y="547.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="687.6" y="558.0"></text>
</g>
<g>
<title>__pv_queued_spin_lock_slowpath (1 samples, 0.03%)</title><rect x="684.6" y="531.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="687.6" y="542.0"></text>
</g>
<g>
<title>get_futex_key (1 samples, 0.03%)</title><rect x="685.0" y="547.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="688.0" y="558.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.10 (1 samples, 0.03%)</title><rect x="685.0" y="531.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="688.0" y="542.0"></text>
</g>
<g>
<title>wake_up_q (425 samples, 13.70%)</title><rect x="685.4" y="547.0" width="161.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="688.4" y="558.0">wake_up_q</text>
</g>
<g>
<title>try_to_wake_up (425 samples, 13.70%)</title><rect x="685.4" y="531.0" width="161.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="688.4" y="542.0">try_to_wake_up</text>
</g>
<g>
<title>__lock_text_start (425 samples, 13.70%)</title><rect x="685.4" y="515.0" width="161.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="688.4" y="526.0">__lock_text_start</text>
</g>
<g>
<title>__lll_lock_wait (1 samples, 0.03%)</title><rect x="847.0" y="643.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="850.0" y="654.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (5 samples, 0.16%)</title><rect x="847.4" y="643.0" width="1.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="850.4" y="654.0"></text>
</g>
<g>
<title>resume_userspace (2 samples, 0.06%)</title><rect x="848.5" y="627.0" width="0.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="851.5" y="638.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.06%)</title><rect x="848.5" y="611.0" width="0.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="851.5" y="622.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.06%)</title><rect x="848.5" y="595.0" width="0.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="851.5" y="606.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (2 samples, 0.06%)</title><rect x="849.3" y="643.0" width="0.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="852.3" y="654.0"></text>
</g>
<g>
<title>_init (2 samples, 0.06%)</title><rect x="850.0" y="643.0" width="0.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="853.0" y="654.0"></text>
</g>
<g>
<title>jni_CallIntMethodV (2 samples, 0.06%)</title><rect x="850.8" y="643.0" width="0.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="853.8" y="654.0"></text>
</g>
<g>
<title>jni_CallVoidMethodV (3 samples, 0.10%)</title><rect x="851.6" y="643.0" width="1.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="854.6" y="654.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (36 samples, 1.16%)</title><rect x="852.7" y="643.0" width="13.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="855.7" y="654.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (4 samples, 0.13%)</title><rect x="853.1" y="627.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="856.1" y="638.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (19 samples, 0.61%)</title><rect x="854.6" y="627.0" width="7.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="857.6" y="638.0"></text>
</g>
<g>
<title>resume_userspace (3 samples, 0.10%)</title><rect x="860.7" y="611.0" width="1.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="863.7" y="622.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.10%)</title><rect x="860.7" y="595.0" width="1.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="863.7" y="606.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.10%)</title><rect x="860.7" y="579.0" width="1.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="863.7" y="590.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.158] (11 samples, 0.35%)</title><rect x="861.8" y="627.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="864.8" y="638.0"></text>
</g>
<g>
<title>resume_userspace (2 samples, 0.06%)</title><rect x="865.2" y="611.0" width="0.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="868.2" y="622.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.06%)</title><rect x="865.2" y="595.0" width="0.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="868.2" y="606.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.06%)</title><rect x="865.2" y="579.0" width="0.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="868.2" y="590.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="866.0" y="627.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="869.0" y="638.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.06%)</title><rect x="866.4" y="643.0" width="0.7" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="869.4" y="654.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (8 samples, 0.26%)</title><rect x="867.1" y="643.0" width="3.1" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="870.1" y="654.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="869.8" y="627.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="872.8" y="638.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="869.8" y="611.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="872.8" y="622.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="869.8" y="595.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="872.8" y="606.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (14 samples, 0.45%)</title><rect x="870.2" y="643.0" width="5.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="873.2" y="654.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (5 samples, 0.16%)</title><rect x="870.2" y="627.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="873.2" y="638.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.03%)</title><rect x="871.7" y="611.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="874.7" y="622.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="871.7" y="595.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="874.7" y="606.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.03%)</title><rect x="871.7" y="579.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="874.7" y="590.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.03%)</title><rect x="871.7" y="563.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="874.7" y="574.0"></text>
</g>
<g>
<title>call_on_stack (1 samples, 0.03%)</title><rect x="871.7" y="547.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="874.7" y="558.0"></text>
</g>
<g>
<title>__do_softirq (1 samples, 0.03%)</title><rect x="871.7" y="531.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="874.7" y="542.0"></text>
</g>
<g>
<title>run_rebalance_domains (1 samples, 0.03%)</title><rect x="871.7" y="515.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="874.7" y="526.0"></text>
</g>
<g>
<title>rebalance_domains (1 samples, 0.03%)</title><rect x="871.7" y="499.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="874.7" y="510.0"></text>
</g>
<g>
<title>update_blocked_averages (1 samples, 0.03%)</title><rect x="871.7" y="483.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="874.7" y="494.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="871.7" y="467.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="874.7" y="478.0"></text>
</g>
<g>
<title>Threads::is_supported_jni_version_including_1_1(int) (3 samples, 0.10%)</title><rect x="872.1" y="627.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="875.1" y="638.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="872.8" y="611.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="875.8" y="622.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="872.8" y="595.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="875.8" y="606.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="872.8" y="579.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="875.8" y="590.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="873.2" y="627.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="876.2" y="638.0"></text>
</g>
<g>
<title>jni_GetEnv (5 samples, 0.16%)</title><rect x="873.6" y="627.0" width="1.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="876.6" y="638.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::releaseJniEnv(unsigned char&amp;) const (1 samples, 0.03%)</title><rect x="875.5" y="643.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="878.5" y="654.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (2 samples, 0.06%)</title><rect x="875.9" y="643.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="878.9" y="654.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() (1 samples, 0.03%)</title><rect x="876.7" y="643.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="879.7" y="654.0"></text>
</g>
<g>
<title>rocksdb::JniCallback::getJniEnv(unsigned char*) const (1 samples, 0.03%)</title><rect x="877.0" y="659.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="880.0" y="670.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (3 samples, 0.10%)</title><rect x="877.4" y="659.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="880.4" y="670.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="878.2" y="643.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="881.2" y="654.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="878.2" y="627.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="881.2" y="638.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="878.2" y="611.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="881.2" y="622.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() (2 samples, 0.06%)</title><rect x="878.6" y="659.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="881.6" y="670.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (2 samples, 0.06%)</title><rect x="879.3" y="691.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="882.3" y="702.0"></text>
</g>
<g>
<title>rocksdb::MemTableRep::KeyComparator::decode_key(char const*) const (2 samples, 0.06%)</title><rect x="880.1" y="691.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="883.1" y="702.0"></text>
</g>
<g>
<title>rocksdb::UnPackSequenceAndType(unsigned long long, unsigned long long*, rocksdb::ValueType*) (2 samples, 0.06%)</title><rect x="880.8" y="691.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="883.8" y="702.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="881.2" y="675.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="884.2" y="686.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="881.2" y="659.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="884.2" y="670.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="881.2" y="643.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="884.2" y="654.0"></text>
</g>
<g>
<title>std::string::_M_replace_safe(unsigned int, unsigned int, char const*, unsigned int) (1 samples, 0.03%)</title><rect x="881.6" y="691.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="884.6" y="702.0"></text>
</g>
<g>
<title>std::string::assign(char const*, unsigned int) (5 samples, 0.16%)</title><rect x="882.0" y="691.0" width="1.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="885.0" y="702.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="883.5" y="675.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="886.5" y="686.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="883.5" y="659.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="886.5" y="670.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="883.5" y="643.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="886.5" y="654.0"></text>
</g>
<g>
<title>___tls_get_addr (1 samples, 0.03%)</title><rect x="883.9" y="707.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="886.9" y="718.0"></text>
</g>
<g>
<title>_init (1 samples, 0.03%)</title><rect x="884.3" y="707.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="887.3" y="718.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::FindGreaterOrEqual(char const*) const (1 samples, 0.03%)</title><rect x="884.6" y="707.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="887.6" y="718.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="884.6" y="691.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="887.6" y="702.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="884.6" y="675.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="887.6" y="686.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="884.6" y="659.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="887.6" y="670.0"></text>
</g>
<g>
<title>rocksdb::MemTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;, unsigned long long) (1 samples, 0.03%)</title><rect x="885.0" y="707.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="888.0" y="718.0"></text>
</g>
<g>
<title>rocksdb::MemTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;, unsigned long long) (2 samples, 0.06%)</title><rect x="885.4" y="723.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="888.4" y="734.0"></text>
</g>
<g>
<title>rocksdb::MemTableListVersion::GetFromList(std::list&lt;rocksdb::MemTable*, std::allocator&lt;rocksdb::MemTable*&gt; &gt;*, rocksdb::LookupKey const&amp;, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (1 samples, 0.03%)</title><rect x="886.2" y="723.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="889.2" y="734.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="886.2" y="707.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="889.2" y="718.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="886.2" y="691.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="889.2" y="702.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="886.2" y="675.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="889.2" y="686.0"></text>
</g>
<g>
<title>rocksdb::PackSequenceAndType(unsigned long long, rocksdb::ValueType) (1 samples, 0.03%)</title><rect x="886.5" y="723.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="889.5" y="734.0"></text>
</g>
<g>
<title>rocksdb::PinnedIteratorsManager::~PinnedIteratorsManager() (1 samples, 0.03%)</title><rect x="886.9" y="723.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="889.9" y="734.0"></text>
</g>
<g>
<title>rocksdb::Status::operator=(rocksdb::Status&amp;&amp;) (1 samples, 0.03%)</title><rect x="887.3" y="723.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="890.3" y="734.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (4 samples, 0.13%)</title><rect x="887.7" y="723.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="890.7" y="734.0"></text>
</g>
<g>
<title>rocksdb::PinnedIteratorsManager::~PinnedIteratorsManager() (1 samples, 0.03%)</title><rect x="888.4" y="707.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="891.4" y="718.0"></text>
</g>
<g>
<title>_init (1 samples, 0.03%)</title><rect x="888.4" y="691.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="891.4" y="702.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() (1 samples, 0.03%)</title><rect x="888.8" y="707.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="891.8" y="718.0"></text>
</g>
<g>
<title>rocksdb::LookupKey::LookupKey(rocksdb::Slice const&amp;, unsigned long long) (2 samples, 0.06%)</title><rect x="889.2" y="739.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="892.2" y="750.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (2 samples, 0.06%)</title><rect x="890.0" y="739.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="893.0" y="750.0"></text>
</g>
<g>
<title>rocksdb::MemTableListVersion::Get(rocksdb::LookupKey const&amp;, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (2 samples, 0.06%)</title><rect x="890.7" y="739.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="893.7" y="750.0"></text>
</g>
<g>
<title>rocksdb::StopWatch::~StopWatch() (3 samples, 0.10%)</title><rect x="891.5" y="739.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="894.5" y="750.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*) (3 samples, 0.10%)</title><rect x="892.6" y="739.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="895.6" y="750.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (2 samples, 0.06%)</title><rect x="893.8" y="771.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="896.8" y="782.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (1 samples, 0.03%)</title><rect x="894.5" y="787.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="897.5" y="798.0"></text>
</g>
<g>
<title>rocksdb::JniUtil::createJavaByteArrayWithSizeCheck(JNIEnv_*, char const*, unsigned int) (5 samples, 0.16%)</title><rect x="894.9" y="787.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="897.9" y="798.0"></text>
</g>
<g>
<title>jni_NewByteArray (5 samples, 0.16%)</title><rect x="894.9" y="771.0" width="1.9" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="897.9" y="782.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.03%)</title><rect x="894.9" y="755.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="897.9" y="766.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.158] (1 samples, 0.03%)</title><rect x="895.3" y="755.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="898.3" y="766.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.10%)</title><rect x="895.7" y="755.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="898.7" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.10%)</title><rect x="895.7" y="739.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="898.7" y="750.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.10%)</title><rect x="895.7" y="723.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="898.7" y="734.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.03%)</title><rect x="896.0" y="707.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="899.0" y="718.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="896.4" y="707.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="899.4" y="718.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="896.4" y="691.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="899.4" y="702.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="896.4" y="675.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="899.4" y="686.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned int) (1 samples, 0.03%)</title><rect x="896.8" y="787.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="899.8" y="798.0"></text>
</g>
<g>
<title>std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string(std::string const&amp;) (5 samples, 0.16%)</title><rect x="897.2" y="803.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="900.2" y="814.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="898.7" y="787.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="901.7" y="798.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="898.7" y="771.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="901.7" y="782.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="898.7" y="755.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="901.7" y="766.0"></text>
</g>
<g>
<title>std::string::_Rep::_M_destroy(std::allocator&lt;char&gt; const&amp;) (1 samples, 0.03%)</title><rect x="899.1" y="803.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="902.1" y="814.0"></text>
</g>
<g>
<title>std::string::_Rep::_M_dispose(std::allocator&lt;char&gt; const&amp;) (1 samples, 0.03%)</title><rect x="899.5" y="803.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="902.5" y="814.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="899.5" y="787.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="902.5" y="798.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="899.5" y="771.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="902.5" y="782.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="899.5" y="755.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="902.5" y="766.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.13%)</title><rect x="899.8" y="819.0" width="1.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="902.8" y="830.0"></text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (1 samples, 0.03%)</title><rect x="899.8" y="803.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="902.8" y="814.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.06%)</title><rect x="900.2" y="803.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="903.2" y="814.0"></text>
</g>
<g>
<title>std::string::_M_mutate(unsigned int, unsigned int, unsigned int) (1 samples, 0.03%)</title><rect x="901.0" y="803.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="904.0" y="814.0"></text>
</g>
<g>
<title>call_stub (18 samples, 0.58%)</title><rect x="901.4" y="819.0" width="6.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="904.4" y="830.0"></text>
</g>
<g>
<title>resume_userspace (3 samples, 0.10%)</title><rect x="907.1" y="803.0" width="1.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="910.1" y="814.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.10%)</title><rect x="907.1" y="787.0" width="1.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="910.1" y="798.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.10%)</title><rect x="907.1" y="771.0" width="1.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="910.1" y="782.0"></text>
</g>
<g>
<title>operator new(unsigned int) (1 samples, 0.03%)</title><rect x="908.2" y="819.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="911.2" y="830.0"></text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.setNativeHandle (26 samples, 0.84%)</title><rect x="908.6" y="819.0" width="9.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="911.6" y="830.0"></text>
</g>
<g>
<title>resume_userspace (4 samples, 0.13%)</title><rect x="917.0" y="803.0" width="1.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="920.0" y="814.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (4 samples, 0.13%)</title><rect x="917.0" y="787.0" width="1.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="920.0" y="798.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (4 samples, 0.13%)</title><rect x="917.0" y="771.0" width="1.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="920.0" y="782.0"></text>
</g>
<g>
<title>org/rocksdb/util/BytewiseComparator.compare (244 samples, 7.86%)</title><rect x="918.5" y="819.0" width="92.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="921.5" y="830.0">org/rocksdb..</text>
</g>
<g>
<title>org/rocksdb/util/BytewiseComparator.compare (244 samples, 7.86%)</title><rect x="918.5" y="803.0" width="92.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="921.5" y="814.0">org/rocksdb..</text>
</g>
<g>
<title>org/rocksdb/AbstractSlice.data (230 samples, 7.41%)</title><rect x="918.5" y="787.0" width="87.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="921.5" y="798.0">org/rocksd..</text>
</g>
<g>
<title>org/rocksdb/RocksMutableObject.getNativeHandle (16 samples, 0.52%)</title><rect x="918.5" y="771.0" width="6.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="921.5" y="782.0"></text>
</g>
<g>
<title>resume_userspace (3 samples, 0.10%)</title><rect x="923.4" y="755.0" width="1.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="926.4" y="766.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.10%)</title><rect x="923.4" y="739.0" width="1.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="926.4" y="750.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.10%)</title><rect x="923.4" y="723.0" width="1.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="926.4" y="734.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (214 samples, 6.90%)</title><rect x="924.6" y="771.0" width="81.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="927.6" y="782.0">org/rocks..</text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (211 samples, 6.80%)</title><rect x="925.7" y="755.0" width="80.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="928.7" y="766.0">org/rocks..</text>
</g>
<g>
<title>Java_org_rocksdb_Slice_data0 (191 samples, 6.16%)</title><rect x="929.9" y="739.0" width="72.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="932.9" y="750.0">Java_org..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;CardTableBarrierSet::AccessBarrier&lt;1097812ull, CardTableBarrierSet&gt;, (AccessInternal::BarrierType)2, 1097812ull&gt;::oop_access_barrier(void*) (3 samples, 0.10%)</title><rect x="931.0" y="723.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="934.0" y="734.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.03%)</title><rect x="932.2" y="723.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="935.2" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.158] (3 samples, 0.10%)</title><rect x="932.6" y="723.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="935.6" y="734.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="933.7" y="723.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="936.7" y="734.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="933.7" y="707.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="936.7" y="718.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="933.7" y="691.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="936.7" y="702.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="933.7" y="675.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="936.7" y="686.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (2 samples, 0.06%)</title><rect x="934.1" y="723.0" width="0.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="937.1" y="734.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.03%)</title><rect x="934.8" y="723.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="937.8" y="734.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (25 samples, 0.81%)</title><rect x="935.2" y="723.0" width="9.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="938.2" y="734.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (3 samples, 0.10%)</title><rect x="936.4" y="707.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="939.4" y="718.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (10 samples, 0.32%)</title><rect x="937.5" y="707.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="940.5" y="718.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="940.9" y="691.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="943.9" y="702.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="940.9" y="675.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="943.9" y="686.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="940.9" y="659.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="943.9" y="670.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.158] (8 samples, 0.26%)</title><rect x="941.3" y="707.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="944.3" y="718.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="944.0" y="691.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="947.0" y="702.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="944.0" y="675.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="947.0" y="686.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="944.0" y="659.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="947.0" y="670.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="944.3" y="707.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="947.3" y="718.0"></text>
</g>
<g>
<title>jni_NewByteArray (88 samples, 2.84%)</title><rect x="944.7" y="723.0" width="33.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="947.7" y="734.0">jn..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;CardTableBarrierSet::AccessBarrier&lt;5292116ull, CardTableBarrierSet&gt;, (AccessInternal::BarrierType)0, 5292116ull&gt;::oop_access_barrier(void*, oopDesc*) (3 samples, 0.10%)</title><rect x="947.4" y="707.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="950.4" y="718.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="948.1" y="691.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="951.1" y="702.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="948.1" y="675.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="951.1" y="686.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="948.1" y="659.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="951.1" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (6 samples, 0.19%)</title><rect x="948.5" y="707.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="951.5" y="718.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="950.4" y="691.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="953.4" y="702.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="950.4" y="675.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="953.4" y="686.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="950.4" y="659.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="953.4" y="670.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (9 samples, 0.29%)</title><rect x="950.8" y="707.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="953.8" y="718.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;CardTableBarrierSet::AccessBarrier&lt;5292116ull, CardTableBarrierSet&gt;, (AccessInternal::BarrierType)0, 5292116ull&gt;::oop_access_barrier(void*, oopDesc*) (1 samples, 0.03%)</title><rect x="953.5" y="691.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="956.5" y="702.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="953.8" y="691.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="956.8" y="702.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="953.8" y="675.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="956.8" y="686.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="953.8" y="659.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="956.8" y="670.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (8 samples, 0.26%)</title><rect x="954.2" y="707.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="957.2" y="718.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.158] (10 samples, 0.32%)</title><rect x="957.3" y="707.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="960.3" y="718.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (40 samples, 1.29%)</title><rect x="961.1" y="707.0" width="15.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="964.1" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (25 samples, 0.81%)</title><rect x="964.1" y="691.0" width="9.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="967.1" y="702.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (22 samples, 0.71%)</title><rect x="964.9" y="675.0" width="8.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="967.9" y="686.0"></text>
</g>
<g>
<title>DefNewGeneration::unsafe_max_tlab_alloc() const (1 samples, 0.03%)</title><rect x="966.8" y="659.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="969.8" y="670.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (3 samples, 0.10%)</title><rect x="967.2" y="659.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="970.2" y="670.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (1 samples, 0.03%)</title><rect x="967.9" y="643.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="970.9" y="654.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="968.3" y="659.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="971.3" y="670.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (8 samples, 0.26%)</title><rect x="968.7" y="659.0" width="3.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="971.7" y="670.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.ax (2 samples, 0.06%)</title><rect x="971.7" y="659.0" width="0.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="974.7" y="670.0"></text>
</g>
<g>
<title>resume_userspace (2 samples, 0.06%)</title><rect x="972.5" y="659.0" width="0.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="975.5" y="670.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.06%)</title><rect x="972.5" y="643.0" width="0.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="975.5" y="654.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.06%)</title><rect x="972.5" y="627.0" width="0.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="975.5" y="638.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.03%)</title><rect x="973.2" y="675.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="976.2" y="686.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="973.2" y="659.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="976.2" y="670.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="973.2" y="643.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="976.2" y="654.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="973.2" y="627.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="976.2" y="638.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="973.2" y="611.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="976.2" y="622.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.03%)</title><rect x="973.2" y="595.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="976.2" y="606.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="973.2" y="579.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="976.2" y="590.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.10%)</title><rect x="973.6" y="691.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="976.6" y="702.0"></text>
</g>
<g>
<title>resume_userspace (4 samples, 0.13%)</title><rect x="974.8" y="691.0" width="1.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="977.8" y="702.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (4 samples, 0.13%)</title><rect x="974.8" y="675.0" width="1.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="977.8" y="686.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (4 samples, 0.13%)</title><rect x="974.8" y="659.0" width="1.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="977.8" y="670.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="975.9" y="643.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="978.9" y="654.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.03%)</title><rect x="975.9" y="627.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="978.9" y="638.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="975.9" y="611.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="978.9" y="622.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="976.3" y="707.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="979.3" y="718.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="976.3" y="691.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="979.3" y="702.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="976.3" y="675.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="979.3" y="686.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="976.3" y="659.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="979.3" y="670.0"></text>
</g>
<g>
<title>resume_userspace (4 samples, 0.13%)</title><rect x="976.7" y="707.0" width="1.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="979.7" y="718.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (4 samples, 0.13%)</title><rect x="976.7" y="691.0" width="1.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="979.7" y="702.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (4 samples, 0.13%)</title><rect x="976.7" y="675.0" width="1.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="979.7" y="686.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="977.8" y="659.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="980.8" y="670.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.03%)</title><rect x="977.8" y="643.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="980.8" y="654.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="977.8" y="627.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="980.8" y="638.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (64 samples, 2.06%)</title><rect x="978.2" y="723.0" width="24.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="981.2" y="734.0">j..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;CardTableBarrierSet::AccessBarrier&lt;1097812ull, CardTableBarrierSet&gt;, (AccessInternal::BarrierType)2, 1097812ull&gt;::oop_access_barrier(void*) (1 samples, 0.03%)</title><rect x="981.2" y="707.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="984.2" y="718.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.06%)</title><rect x="981.6" y="707.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="984.6" y="718.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.03%)</title><rect x="982.4" y="707.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="985.4" y="718.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (7 samples, 0.23%)</title><rect x="982.7" y="707.0" width="2.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="985.7" y="718.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.158] (9 samples, 0.29%)</title><rect x="985.4" y="707.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="988.4" y="718.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="988.5" y="691.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="991.5" y="702.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="988.5" y="675.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="991.5" y="686.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="988.5" y="659.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="991.5" y="670.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (5 samples, 0.16%)</title><rect x="988.8" y="707.0" width="1.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="991.8" y="718.0"></text>
</g>
<g>
<title>resume_userspace (2 samples, 0.06%)</title><rect x="990.0" y="691.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="993.0" y="702.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.06%)</title><rect x="990.0" y="675.0" width="0.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="993.0" y="686.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.06%)</title><rect x="990.0" y="659.0" width="0.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="993.0" y="670.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (12 samples, 0.39%)</title><rect x="990.7" y="707.0" width="4.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="993.7" y="718.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (6 samples, 0.19%)</title><rect x="993.0" y="691.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="996.0" y="702.0"></text>
</g>
<g>
<title>resume_userspace (4 samples, 0.13%)</title><rect x="995.3" y="707.0" width="1.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="998.3" y="718.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (4 samples, 0.13%)</title><rect x="995.3" y="691.0" width="1.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="998.3" y="702.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (4 samples, 0.13%)</title><rect x="995.3" y="675.0" width="1.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="998.3" y="686.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned int) (15 samples, 0.48%)</title><rect x="996.8" y="707.0" width="5.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="999.8" y="718.0"></text>
</g>
<g>
<title>resume_userspace (2 samples, 0.06%)</title><rect x="1001.8" y="691.0" width="0.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1004.8" y="702.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.06%)</title><rect x="1001.8" y="675.0" width="0.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1004.8" y="686.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.06%)</title><rect x="1001.8" y="659.0" width="0.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1004.8" y="670.0"></text>
</g>
<g>
<title>apic_timer_interrupt (2 samples, 0.06%)</title><rect x="1002.5" y="739.0" width="0.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1005.5" y="750.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (2 samples, 0.06%)</title><rect x="1002.5" y="723.0" width="0.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1005.5" y="734.0"></text>
</g>
<g>
<title>irq_exit (2 samples, 0.06%)</title><rect x="1002.5" y="707.0" width="0.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1005.5" y="718.0"></text>
</g>
<g>
<title>do_softirq_own_stack (2 samples, 0.06%)</title><rect x="1002.5" y="691.0" width="0.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1005.5" y="702.0"></text>
</g>
<g>
<title>call_on_stack (2 samples, 0.06%)</title><rect x="1002.5" y="675.0" width="0.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1005.5" y="686.0"></text>
</g>
<g>
<title>__do_softirq (2 samples, 0.06%)</title><rect x="1002.5" y="659.0" width="0.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1005.5" y="670.0"></text>
</g>
<g>
<title>note_gp_changes (1 samples, 0.03%)</title><rect x="1002.5" y="643.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1005.5" y="654.0"></text>
</g>
<g>
<title>run_rebalance_domains (1 samples, 0.03%)</title><rect x="1002.9" y="643.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1005.9" y="654.0"></text>
</g>
<g>
<title>rebalance_domains (1 samples, 0.03%)</title><rect x="1002.9" y="627.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1005.9" y="638.0"></text>
</g>
<g>
<title>update_blocked_averages (1 samples, 0.03%)</title><rect x="1002.9" y="611.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1005.9" y="622.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="1002.9" y="595.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1005.9" y="606.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.06%)</title><rect x="1003.3" y="739.0" width="0.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1006.3" y="750.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.03%)</title><rect x="1004.0" y="739.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1007.0" y="750.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="1004.0" y="723.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1007.0" y="734.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="1004.0" y="707.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1007.0" y="718.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="1004.0" y="691.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1007.0" y="702.0"></text>
</g>
<g>
<title>resume_userspace (4 samples, 0.13%)</title><rect x="1004.4" y="739.0" width="1.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1007.4" y="750.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (4 samples, 0.13%)</title><rect x="1004.4" y="723.0" width="1.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1007.4" y="734.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (4 samples, 0.13%)</title><rect x="1004.4" y="707.0" width="1.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1007.4" y="718.0"></text>
</g>
<g>
<title>org/rocksdb/util/BytewiseComparator.compare (14 samples, 0.45%)</title><rect x="1005.9" y="787.0" width="5.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1008.9" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (14 samples, 0.45%)</title><rect x="1005.9" y="771.0" width="5.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1008.9" y="782.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (8 samples, 0.26%)</title><rect x="1005.9" y="755.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1008.9" y="766.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (8 samples, 0.26%)</title><rect x="1005.9" y="739.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1008.9" y="750.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (8 samples, 0.26%)</title><rect x="1005.9" y="723.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1008.9" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (6 samples, 0.19%)</title><rect x="1009.0" y="755.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1012.0" y="766.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (3 samples, 0.10%)</title><rect x="1009.7" y="739.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1012.7" y="750.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="1010.9" y="739.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1013.9" y="750.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="1010.9" y="723.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1013.9" y="734.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="1010.9" y="707.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1013.9" y="718.0"></text>
</g>
<g>
<title>rocksdb::ReadOptions::ReadOptions() (4 samples, 0.13%)</title><rect x="1011.3" y="819.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1014.3" y="830.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (2 samples, 0.06%)</title><rect x="1012.8" y="819.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1015.8" y="830.0"></text>
</g>
<g>
<title>std::string::_M_mutate(unsigned int, unsigned int, unsigned int) (1 samples, 0.03%)</title><rect x="1013.6" y="819.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1016.6" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/NoSuchElementExceptionLite.&lt;init&gt; (1 samples, 0.03%)</title><rect x="1013.9" y="851.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1016.9" y="862.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="1013.9" y="835.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1016.9" y="846.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="1013.9" y="819.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1016.9" y="830.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="1013.9" y="803.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1016.9" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDAO.getArrayCopySync (5 samples, 0.16%)</title><rect x="1014.3" y="851.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1017.3" y="862.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (2 samples, 0.06%)</title><rect x="1014.3" y="835.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1017.3" y="846.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.06%)</title><rect x="1014.3" y="819.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1017.3" y="830.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (3 samples, 0.10%)</title><rect x="1015.1" y="835.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1018.1" y="846.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.10%)</title><rect x="1015.1" y="819.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1018.1" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.10%)</title><rect x="1015.1" y="803.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1018.1" y="814.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.10%)</title><rect x="1015.1" y="787.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1018.1" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.10%)</title><rect x="1015.1" y="771.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1018.1" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.10%)</title><rect x="1015.1" y="755.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1018.1" y="766.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (2 samples, 0.06%)</title><rect x="1016.2" y="995.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1019.2" y="1006.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (2 samples, 0.06%)</title><rect x="1016.2" y="979.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1019.2" y="990.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.rewind (1 samples, 0.03%)</title><rect x="1016.2" y="963.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1019.2" y="974.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1 samples, 0.03%)</title><rect x="1016.6" y="963.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1019.6" y="974.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (1 samples, 0.03%)</title><rect x="1016.6" y="947.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1019.6" y="958.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (1 samples, 0.03%)</title><rect x="1016.6" y="931.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1019.6" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.03%)</title><rect x="1016.6" y="915.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1019.6" y="926.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.03%)</title><rect x="1016.6" y="899.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1019.6" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.03%)</title><rect x="1016.6" y="883.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1019.6" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.03%)</title><rect x="1016.6" y="867.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1019.6" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (1 samples, 0.03%)</title><rect x="1016.6" y="851.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1019.6" y="862.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.rewind (1 samples, 0.03%)</title><rect x="1016.6" y="835.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1019.6" y="846.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.rewind (1 samples, 0.03%)</title><rect x="1016.6" y="819.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1019.6" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.rewind (1 samples, 0.03%)</title><rect x="1016.6" y="803.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1019.6" y="814.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (446 samples, 14.37%)</title><rect x="1017.0" y="995.0" width="169.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1020.0" y="1006.0">one/nio/server/Selecto..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (202 samples, 6.51%)</title><rect x="1021.5" y="979.0" width="76.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1024.5" y="990.0">one/nio/..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.03%)</title><rect x="1025.0" y="963.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1028.0" y="974.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (14 samples, 0.45%)</title><rect x="1025.3" y="963.0" width="5.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1028.3" y="974.0"></text>
</g>
<g>
<title>__clock_gettime (9 samples, 0.29%)</title><rect x="1026.9" y="947.0" width="3.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1029.9" y="958.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.03%)</title><rect x="1027.2" y="931.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1030.2" y="942.0"></text>
</g>
<g>
<title>__kernel_vsyscall (4 samples, 0.13%)</title><rect x="1027.6" y="931.0" width="1.5" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1030.6" y="942.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (4 samples, 0.13%)</title><rect x="1027.6" y="915.0" width="1.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1030.6" y="926.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (2 samples, 0.06%)</title><rect x="1027.6" y="899.0" width="0.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1030.6" y="910.0"></text>
</g>
<g>
<title>sys_clock_gettime (2 samples, 0.06%)</title><rect x="1027.6" y="883.0" width="0.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1030.6" y="894.0"></text>
</g>
<g>
<title>_copy_to_user (1 samples, 0.03%)</title><rect x="1027.6" y="867.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1030.6" y="878.0"></text>
</g>
<g>
<title>posix_ktime_get_ts (1 samples, 0.03%)</title><rect x="1028.0" y="867.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1031.0" y="878.0"></text>
</g>
<g>
<title>sys_clock_gettime (2 samples, 0.06%)</title><rect x="1028.4" y="899.0" width="0.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1031.4" y="910.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (3 samples, 0.10%)</title><rect x="1029.1" y="931.0" width="1.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1032.1" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (1 samples, 0.03%)</title><rect x="1030.3" y="947.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1033.3" y="958.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.03%)</title><rect x="1030.3" y="931.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1033.3" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.03%)</title><rect x="1030.3" y="915.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1033.3" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.03%)</title><rect x="1030.3" y="899.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1033.3" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.03%)</title><rect x="1030.3" y="883.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1033.3" y="894.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="1030.7" y="963.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1033.7" y="974.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="1030.7" y="947.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1033.7" y="958.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="1030.7" y="931.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1033.7" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (177 samples, 5.70%)</title><rect x="1031.0" y="963.0" width="67.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1034.0" y="974.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (176 samples, 5.67%)</title><rect x="1031.4" y="947.0" width="67.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1034.4" y="958.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (173 samples, 5.58%)</title><rect x="1032.2" y="931.0" width="65.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1035.2" y="942.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/EPoll.wait (143 samples, 4.61%)</title><rect x="1032.6" y="915.0" width="54.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1035.6" y="926.0">sun/n..</text>
</g>
<g>
<title>/lib/i386-linux-gnu/libc-2.27.so (2 samples, 0.06%)</title><rect x="1033.3" y="899.0" width="0.8" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1036.3" y="910.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_EPoll_wait (1 samples, 0.03%)</title><rect x="1034.1" y="899.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1037.1" y="910.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1034.5" y="899.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1037.5" y="910.0"></text>
</g>
<g>
<title>__kernel_vsyscall (1 samples, 0.03%)</title><rect x="1034.5" y="883.0" width="0.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1037.5" y="894.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (1 samples, 0.03%)</title><rect x="1034.5" y="867.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1037.5" y="878.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (1 samples, 0.03%)</title><rect x="1034.5" y="851.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1037.5" y="862.0"></text>
</g>
<g>
<title>sys_futex (1 samples, 0.03%)</title><rect x="1034.5" y="835.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1037.5" y="846.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.03%)</title><rect x="1034.5" y="819.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1037.5" y="830.0"></text>
</g>
<g>
<title>futex_wait (1 samples, 0.03%)</title><rect x="1034.5" y="803.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1037.5" y="814.0"></text>
</g>
<g>
<title>futex_wait_queue_me (1 samples, 0.03%)</title><rect x="1034.5" y="787.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1037.5" y="798.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="1034.5" y="771.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1037.5" y="782.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.03%)</title><rect x="1034.5" y="755.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1037.5" y="766.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="1034.5" y="739.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1037.5" y="750.0"></text>
</g>
<g>
<title>__kernel_vsyscall (134 samples, 4.32%)</title><rect x="1034.8" y="899.0" width="51.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1037.8" y="910.0">__ker..</text>
</g>
<g>
<title>entry_SYSENTER_32 (134 samples, 4.32%)</title><rect x="1034.8" y="883.0" width="51.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1037.8" y="894.0">entry..</text>
</g>
<g>
<title>do_fast_syscall_32 (134 samples, 4.32%)</title><rect x="1034.8" y="867.0" width="51.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1037.8" y="878.0">do_fa..</text>
</g>
<g>
<title>sys_epoll_wait (134 samples, 4.32%)</title><rect x="1034.8" y="851.0" width="51.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1037.8" y="862.0">sys_e..</text>
</g>
<g>
<title>__fdget (2 samples, 0.06%)</title><rect x="1035.2" y="835.0" width="0.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1038.2" y="846.0"></text>
</g>
<g>
<title>__fget_light (2 samples, 0.06%)</title><rect x="1035.2" y="819.0" width="0.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1038.2" y="830.0"></text>
</g>
<g>
<title>__fget (2 samples, 0.06%)</title><rect x="1035.2" y="803.0" width="0.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1038.2" y="814.0"></text>
</g>
<g>
<title>_raw_spin_lock_irqsave (1 samples, 0.03%)</title><rect x="1036.0" y="835.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1039.0" y="846.0"></text>
</g>
<g>
<title>ep_poll (129 samples, 4.16%)</title><rect x="1036.4" y="835.0" width="49.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1039.4" y="846.0">ep_poll</text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="1036.4" y="819.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1039.4" y="830.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.16 (11 samples, 0.35%)</title><rect x="1036.7" y="819.0" width="4.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1039.7" y="830.0"></text>
</g>
<g>
<title>__lock_text_start (2 samples, 0.06%)</title><rect x="1037.1" y="803.0" width="0.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1040.1" y="814.0"></text>
</g>
<g>
<title>_raw_spin_lock_irqsave (1 samples, 0.03%)</title><rect x="1037.9" y="803.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1040.9" y="814.0"></text>
</g>
<g>
<title>ep_send_events_proc (7 samples, 0.23%)</title><rect x="1038.3" y="803.0" width="2.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1041.3" y="814.0"></text>
</g>
<g>
<title>ep_item_poll.isra.12 (6 samples, 0.19%)</title><rect x="1038.3" y="787.0" width="2.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1041.3" y="798.0"></text>
</g>
<g>
<title>sock_poll (4 samples, 0.13%)</title><rect x="1039.0" y="771.0" width="1.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1042.0" y="782.0"></text>
</g>
<g>
<title>sock_poll (1 samples, 0.03%)</title><rect x="1040.6" y="787.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1043.6" y="798.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (116 samples, 3.74%)</title><rect x="1040.9" y="819.0" width="44.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1043.9" y="830.0">sche..</text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="1040.9" y="803.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1043.9" y="814.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (115 samples, 3.71%)</title><rect x="1041.3" y="803.0" width="43.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1044.3" y="814.0">sche..</text>
</g>
<g>
<title>schedule (115 samples, 3.71%)</title><rect x="1041.3" y="787.0" width="43.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1044.3" y="798.0">sche..</text>
</g>
<g>
<title>__sched_text_start (115 samples, 3.71%)</title><rect x="1041.3" y="771.0" width="43.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1044.3" y="782.0">__sc..</text>
</g>
<g>
<title>finish_task_switch (114 samples, 3.67%)</title><rect x="1041.7" y="755.0" width="43.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1044.7" y="766.0">fini..</text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.03%)</title><rect x="1084.7" y="739.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1087.7" y="750.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="1084.7" y="723.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1087.7" y="734.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.03%)</title><rect x="1084.7" y="707.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1087.7" y="718.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.03%)</title><rect x="1084.7" y="691.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1087.7" y="702.0"></text>
</g>
<g>
<title>call_on_stack (1 samples, 0.03%)</title><rect x="1084.7" y="675.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1087.7" y="686.0"></text>
</g>
<g>
<title>__do_softirq (1 samples, 0.03%)</title><rect x="1084.7" y="659.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1087.7" y="670.0"></text>
</g>
<g>
<title>run_rebalance_domains (1 samples, 0.03%)</title><rect x="1084.7" y="643.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1087.7" y="654.0"></text>
</g>
<g>
<title>rebalance_domains (1 samples, 0.03%)</title><rect x="1084.7" y="627.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1087.7" y="638.0"></text>
</g>
<g>
<title>update_blocked_averages (1 samples, 0.03%)</title><rect x="1084.7" y="611.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1087.7" y="622.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="1084.7" y="595.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1087.7" y="606.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (1 samples, 0.03%)</title><rect x="1085.0" y="819.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1088.0" y="830.0"></text>
</g>
<g>
<title>fput (1 samples, 0.03%)</title><rect x="1085.4" y="835.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1088.4" y="846.0"></text>
</g>
<g>
<title>epoll_wait (3 samples, 0.10%)</title><rect x="1085.8" y="899.0" width="1.1" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1088.8" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.processEvents (14 samples, 0.45%)</title><rect x="1086.9" y="915.0" width="5.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1089.9" y="926.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (1 samples, 0.03%)</title><rect x="1087.3" y="899.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1090.3" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.get (8 samples, 0.26%)</title><rect x="1087.7" y="899.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1090.7" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.19%)</title><rect x="1087.7" y="883.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1090.7" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.06%)</title><rect x="1090.0" y="883.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1093.0" y="894.0"></text>
</g>
<g>
<title>java/lang/Integer.hashCode (2 samples, 0.06%)</title><rect x="1090.0" y="867.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1093.0" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (4 samples, 0.13%)</title><rect x="1090.7" y="899.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1093.7" y="910.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.06%)</title><rect x="1090.7" y="883.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1093.7" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.06%)</title><rect x="1090.7" y="867.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1093.7" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.06%)</title><rect x="1090.7" y="851.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1093.7" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.03%)</title><rect x="1091.1" y="835.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1094.1" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.translateAndSetReadyOps (2 samples, 0.06%)</title><rect x="1091.5" y="883.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1094.5" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.processUpdateQueue (1 samples, 0.03%)</title><rect x="1092.3" y="915.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1095.3" y="926.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (1 samples, 0.03%)</title><rect x="1092.6" y="915.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1095.6" y="926.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (1 samples, 0.03%)</title><rect x="1092.6" y="899.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1095.6" y="910.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.03%)</title><rect x="1092.6" y="883.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1095.6" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.end (4 samples, 0.13%)</title><rect x="1093.0" y="915.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1096.0" y="926.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (4 samples, 0.13%)</title><rect x="1093.0" y="899.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1096.0" y="910.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (4 samples, 0.13%)</title><rect x="1093.0" y="883.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1096.0" y="894.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (4 samples, 0.13%)</title><rect x="1093.0" y="867.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1096.0" y="878.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (3 samples, 0.10%)</title><rect x="1093.4" y="851.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1096.4" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (9 samples, 0.29%)</title><rect x="1094.6" y="915.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1097.6" y="926.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.03%)</title><rect x="1097.6" y="899.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1100.6" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.03%)</title><rect x="1097.6" y="883.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1100.6" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.ensureOpen (1 samples, 0.03%)</title><rect x="1098.0" y="931.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1101.0" y="942.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.isOpen (1 samples, 0.03%)</title><rect x="1098.0" y="915.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1101.0" y="926.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (232 samples, 7.48%)</title><rect x="1098.4" y="979.0" width="88.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1101.4" y="990.0">one/nio/ne..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (231 samples, 7.44%)</title><rect x="1098.7" y="963.0" width="87.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1101.7" y="974.0">one/nio/ht..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (132 samples, 4.25%)</title><rect x="1099.5" y="947.0" width="50.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1102.5" y="958.0">one/n..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (109 samples, 3.51%)</title><rect x="1103.7" y="931.0" width="41.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1106.7" y="942.0">one..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (108 samples, 3.48%)</title><rect x="1104.1" y="915.0" width="41.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1107.1" y="926.0">one..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (104 samples, 3.35%)</title><rect x="1104.8" y="899.0" width="39.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1107.8" y="910.0">Req..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2 samples, 0.06%)</title><rect x="1104.8" y="883.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1107.8" y="894.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.06%)</title><rect x="1104.8" y="867.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1107.8" y="878.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.03%)</title><rect x="1105.2" y="851.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1108.2" y="862.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.03%)</title><rect x="1105.2" y="835.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1108.2" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ServiceImpl.entity (102 samples, 3.29%)</title><rect x="1105.6" y="883.0" width="38.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1108.6" y="894.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ServiceImpl.executeAsync (102 samples, 3.29%)</title><rect x="1105.6" y="867.0" width="38.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1108.6" y="878.0">ru/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (102 samples, 3.29%)</title><rect x="1105.6" y="851.0" width="38.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1108.6" y="862.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (100 samples, 3.22%)</title><rect x="1106.3" y="835.0" width="38.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1109.3" y="846.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (95 samples, 3.06%)</title><rect x="1106.3" y="819.0" width="36.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1109.3" y="830.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (95 samples, 3.06%)</title><rect x="1106.3" y="803.0" width="36.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1109.3" y="814.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (95 samples, 3.06%)</title><rect x="1106.3" y="787.0" width="36.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1109.3" y="798.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (95 samples, 3.06%)</title><rect x="1106.3" y="771.0" width="36.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1109.3" y="782.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (95 samples, 3.06%)</title><rect x="1106.3" y="755.0" width="36.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1109.3" y="766.0">jav..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (95 samples, 3.06%)</title><rect x="1106.3" y="739.0" width="36.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1109.3" y="750.0">jdk..</text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.03%)</title><rect x="1107.1" y="723.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1110.1" y="734.0"></text>
</g>
<g>
<title>Unsafe_Unpark (24 samples, 0.77%)</title><rect x="1107.5" y="723.0" width="9.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1110.5" y="734.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;CardTableBarrierSet::AccessBarrier&lt;1097812ull, CardTableBarrierSet&gt;, (AccessInternal::BarrierType)2, 1097812ull&gt;::oop_access_barrier(void*) (1 samples, 0.03%)</title><rect x="1109.0" y="707.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1112.0" y="718.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (2 samples, 0.06%)</title><rect x="1109.4" y="707.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1112.4" y="718.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (4 samples, 0.13%)</title><rect x="1110.1" y="707.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1113.1" y="718.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.03%)</title><rect x="1111.3" y="691.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1114.3" y="702.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_lock (1 samples, 0.03%)</title><rect x="1111.7" y="707.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1114.7" y="718.0"></text>
</g>
<g>
<title>__kernel_vsyscall (1 samples, 0.03%)</title><rect x="1112.0" y="707.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1115.0" y="718.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (1 samples, 0.03%)</title><rect x="1112.0" y="691.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1115.0" y="702.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (1 samples, 0.03%)</title><rect x="1112.0" y="675.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1115.0" y="686.0"></text>
</g>
<g>
<title>sys_futex (1 samples, 0.03%)</title><rect x="1112.0" y="659.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1115.0" y="670.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.03%)</title><rect x="1112.0" y="643.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1115.0" y="654.0"></text>
</g>
<g>
<title>futex_wait (1 samples, 0.03%)</title><rect x="1112.0" y="627.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1115.0" y="638.0"></text>
</g>
<g>
<title>futex_wait_queue_me (1 samples, 0.03%)</title><rect x="1112.0" y="611.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1115.0" y="622.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="1112.0" y="595.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1115.0" y="606.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.03%)</title><rect x="1112.0" y="579.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1115.0" y="590.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="1112.0" y="563.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1115.0" y="574.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="1112.4" y="707.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1115.4" y="718.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (2 samples, 0.06%)</title><rect x="1112.8" y="707.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1115.8" y="718.0"></text>
</g>
<g>
<title>pthread_cond_signal (2 samples, 0.06%)</title><rect x="1113.6" y="707.0" width="0.7" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1116.6" y="718.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.06%)</title><rect x="1114.3" y="707.0" width="0.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1117.3" y="718.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (4 samples, 0.13%)</title><rect x="1115.1" y="707.0" width="1.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1118.1" y="718.0"></text>
</g>
<g>
<title>[unknown] (66 samples, 2.13%)</title><rect x="1116.6" y="723.0" width="25.1" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1119.6" y="734.0">[..</text>
</g>
<g>
<title>__kernel_vsyscall (65 samples, 2.09%)</title><rect x="1116.6" y="707.0" width="24.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1119.6" y="718.0">_..</text>
</g>
<g>
<title>entry_SYSENTER_32 (64 samples, 2.06%)</title><rect x="1117.0" y="691.0" width="24.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1120.0" y="702.0">e..</text>
</g>
<g>
<title>do_fast_syscall_32 (64 samples, 2.06%)</title><rect x="1117.0" y="675.0" width="24.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1120.0" y="686.0">d..</text>
</g>
<g>
<title>sys_futex (64 samples, 2.06%)</title><rect x="1117.0" y="659.0" width="24.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1120.0" y="670.0">s..</text>
</g>
<g>
<title>do_futex (63 samples, 2.03%)</title><rect x="1117.0" y="643.0" width="23.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1120.0" y="654.0">d..</text>
</g>
<g>
<title>futex_wake (61 samples, 1.97%)</title><rect x="1117.4" y="627.0" width="23.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1120.4" y="638.0">f..</text>
</g>
<g>
<title>_raw_spin_lock (1 samples, 0.03%)</title><rect x="1118.9" y="611.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1121.9" y="622.0"></text>
</g>
<g>
<title>hash_futex (1 samples, 0.03%)</title><rect x="1119.3" y="611.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1122.3" y="622.0"></text>
</g>
<g>
<title>mark_wake_futex (2 samples, 0.06%)</title><rect x="1119.6" y="611.0" width="0.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1122.6" y="622.0"></text>
</g>
<g>
<title>plist_del (2 samples, 0.06%)</title><rect x="1119.6" y="595.0" width="0.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1122.6" y="606.0"></text>
</g>
<g>
<title>wake_up_q (53 samples, 1.71%)</title><rect x="1120.4" y="611.0" width="20.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1123.4" y="622.0"></text>
</g>
<g>
<title>try_to_wake_up (53 samples, 1.71%)</title><rect x="1120.4" y="595.0" width="20.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1123.4" y="606.0"></text>
</g>
<g>
<title>__lock_text_start (53 samples, 1.71%)</title><rect x="1120.4" y="579.0" width="20.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1123.4" y="590.0"></text>
</g>
<g>
<title>get_futex_key (1 samples, 0.03%)</title><rect x="1140.6" y="627.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1143.6" y="638.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.03%)</title><rect x="1140.9" y="643.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1143.9" y="654.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.03%)</title><rect x="1141.3" y="707.0" width="0.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1144.3" y="718.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.ax (1 samples, 0.03%)</title><rect x="1141.7" y="723.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1144.7" y="734.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.03%)</title><rect x="1142.1" y="723.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1145.1" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (4 samples, 0.13%)</title><rect x="1142.5" y="819.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1145.5" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (4 samples, 0.13%)</title><rect x="1142.5" y="803.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1145.5" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (4 samples, 0.13%)</title><rect x="1142.5" y="787.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1145.5" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.03%)</title><rect x="1144.0" y="819.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1147.0" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="1144.0" y="803.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1147.0" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.03%)</title><rect x="1144.0" y="787.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1147.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="1144.0" y="771.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1147.0" y="782.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (2 samples, 0.06%)</title><rect x="1144.4" y="899.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1147.4" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.06%)</title><rect x="1144.4" y="883.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1147.4" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.06%)</title><rect x="1144.4" y="867.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1147.4" y="878.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (1 samples, 0.03%)</title><rect x="1145.1" y="931.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1148.1" y="942.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="1145.1" y="915.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1148.1" y="926.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="1145.1" y="899.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1148.1" y="910.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.06%)</title><rect x="1145.5" y="931.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1148.5" y="942.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.06%)</title><rect x="1145.5" y="915.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1148.5" y="926.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.06%)</title><rect x="1145.5" y="899.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1148.5" y="910.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (9 samples, 0.29%)</title><rect x="1146.3" y="931.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1149.3" y="942.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (9 samples, 0.29%)</title><rect x="1146.3" y="915.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1149.3" y="926.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (97 samples, 3.13%)</title><rect x="1149.7" y="947.0" width="36.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1152.7" y="958.0">one..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (97 samples, 3.13%)</title><rect x="1149.7" y="931.0" width="36.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1152.7" y="942.0">one..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.03%)</title><rect x="1149.7" y="915.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1152.7" y="926.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="1149.7" y="899.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1152.7" y="910.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="1149.7" y="883.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1152.7" y="894.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="1149.7" y="867.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1152.7" y="878.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="1149.7" y="851.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1152.7" y="862.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="1149.7" y="835.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1152.7" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (96 samples, 3.09%)</title><rect x="1150.1" y="915.0" width="36.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1153.1" y="926.0">sun..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (13 samples, 0.42%)</title><rect x="1150.1" y="899.0" width="4.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1153.1" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (13 samples, 0.42%)</title><rect x="1150.1" y="883.0" width="4.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1153.1" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (13 samples, 0.42%)</title><rect x="1150.1" y="867.0" width="4.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1153.1" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (13 samples, 0.42%)</title><rect x="1150.1" y="851.0" width="4.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1153.1" y="862.0"></text>
</g>
<g>
<title>__vdso_gettimeofday (2 samples, 0.06%)</title><rect x="1150.1" y="835.0" width="0.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1153.1" y="846.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (11 samples, 0.35%)</title><rect x="1150.8" y="835.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.8" y="846.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="1150.8" y="819.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1153.8" y="830.0"></text>
</g>
<g>
<title>__kernel_vsyscall (1 samples, 0.03%)</title><rect x="1150.8" y="803.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1153.8" y="814.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (1 samples, 0.03%)</title><rect x="1150.8" y="787.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1153.8" y="798.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (1 samples, 0.03%)</title><rect x="1150.8" y="771.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1153.8" y="782.0"></text>
</g>
<g>
<title>__kernel_vsyscall (8 samples, 0.26%)</title><rect x="1151.2" y="819.0" width="3.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1154.2" y="830.0"></text>
</g>
<g>
<title>entry_SYSENTER_32 (5 samples, 0.16%)</title><rect x="1152.4" y="803.0" width="1.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1155.4" y="814.0"></text>
</g>
<g>
<title>do_fast_syscall_32 (4 samples, 0.13%)</title><rect x="1152.4" y="787.0" width="1.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1155.4" y="798.0"></text>
</g>
<g>
<title>do_gettimeofday (1 samples, 0.03%)</title><rect x="1152.4" y="771.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1155.4" y="782.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="1152.7" y="771.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1155.7" y="782.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="1152.7" y="755.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1155.7" y="766.0"></text>
</g>
<g>
<title>__sched_text_start (1 samples, 0.03%)</title><rect x="1152.7" y="739.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1155.7" y="750.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="1152.7" y="723.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1155.7" y="734.0"></text>
</g>
<g>
<title>sys_gettimeofday (2 samples, 0.06%)</title><rect x="1153.1" y="771.0" width="0.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1156.1" y="782.0"></text>
</g>
<g>
<title>do_gettimeofday (2 samples, 0.06%)</title><rect x="1153.1" y="755.0" width="0.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1156.1" y="766.0"></text>
</g>
<g>
<title>__getnstimeofday64 (2 samples, 0.06%)</title><rect x="1153.1" y="739.0" width="0.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1156.1" y="750.0"></text>
</g>
<g>
<title>kvm_clock_get_cycles (1 samples, 0.03%)</title><rect x="1153.5" y="723.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1156.5" y="734.0"></text>
</g>
<g>
<title>pvclock_clocksource_read (1 samples, 0.03%)</title><rect x="1153.5" y="707.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1156.5" y="718.0"></text>
</g>
<g>
<title>sys_gettimeofday (1 samples, 0.03%)</title><rect x="1153.9" y="787.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1156.9" y="798.0"></text>
</g>
<g>
<title>__vdso_gettimeofday (2 samples, 0.06%)</title><rect x="1154.3" y="819.0" width="0.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1157.3" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (83 samples, 2.67%)</title><rect x="1155.0" y="899.0" width="31.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1158.0" y="910.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (83 samples, 2.67%)</title><rect x="1155.0" y="883.0" width="31.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1158.0" y="894.0">su..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (3 samples, 0.10%)</title><rect x="1155.0" y="867.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1158.0" y="878.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (3 samples, 0.10%)</title><rect x="1155.0" y="851.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1158.0" y="862.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (3 samples, 0.10%)</title><rect x="1155.0" y="835.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1158.0" y="846.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (2 samples, 0.06%)</title><rect x="1155.4" y="819.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1158.4" y="830.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (2 samples, 0.06%)</title><rect x="1155.4" y="803.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1158.4" y="814.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (2 samples, 0.06%)</title><rect x="1155.4" y="787.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1158.4" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (68 samples, 2.19%)</title><rect x="1156.2" y="867.0" width="25.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1159.2" y="878.0">s..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (68 samples, 2.19%)</title><rect x="1156.2" y="851.0" width="25.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1159.2" y="862.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (68 samples, 2.19%)</title><rect x="1156.2" y="835.0" width="25.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1159.2" y="846.0">s..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (1 samples, 0.03%)</title><rect x="1157.3" y="819.0" width="0.4" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1160.3" y="830.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.03%)</title><rect x="1157.3" y="803.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1160.3" y="814.0"></text>
</g>
<g>
<title>__kernel_vsyscall (61 samples, 1.97%)</title><rect x="1157.7" y="819.0" width="23.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1160.7" y="830.0">_..</text>
</g>
<g>
<title>entry_SYSENTER_32 (59 samples, 1.90%)</title><rect x="1158.4" y="803.0" width="22.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1161.4" y="814.0">e..</text>
</g>
<g>
<title>do_fast_syscall_32 (57 samples, 1.84%)</title><rect x="1158.4" y="787.0" width="21.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1161.4" y="798.0">d..</text>
</g>
<g>
<title>sys_read (56 samples, 1.80%)</title><rect x="1158.8" y="771.0" width="21.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1161.8" y="782.0">s..</text>
</g>
<g>
<title>__fdget_pos (3 samples, 0.10%)</title><rect x="1159.2" y="755.0" width="1.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1162.2" y="766.0"></text>
</g>
<g>
<title>__fget_light (3 samples, 0.10%)</title><rect x="1159.2" y="739.0" width="1.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1162.2" y="750.0"></text>
</g>
<g>
<title>__fget (3 samples, 0.10%)</title><rect x="1159.2" y="723.0" width="1.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1162.2" y="734.0"></text>
</g>
<g>
<title>fput (1 samples, 0.03%)</title><rect x="1160.3" y="755.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1163.3" y="766.0"></text>
</g>
<g>
<title>vfs_read (51 samples, 1.64%)</title><rect x="1160.7" y="755.0" width="19.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1163.7" y="766.0"></text>
</g>
<g>
<title>__vfs_read (44 samples, 1.42%)</title><rect x="1161.1" y="739.0" width="16.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1164.1" y="750.0"></text>
</g>
<g>
<title>new_sync_read (44 samples, 1.42%)</title><rect x="1161.1" y="723.0" width="16.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1164.1" y="734.0"></text>
</g>
<g>
<title>sock_read_iter (41 samples, 1.32%)</title><rect x="1162.2" y="707.0" width="15.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1165.2" y="718.0"></text>
</g>
<g>
<title>inet_recvmsg (1 samples, 0.03%)</title><rect x="1162.6" y="691.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1165.6" y="702.0"></text>
</g>
<g>
<title>security_socket_recvmsg (1 samples, 0.03%)</title><rect x="1163.0" y="691.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1166.0" y="702.0"></text>
</g>
<g>
<title>sock_recvmsg (38 samples, 1.22%)</title><rect x="1163.4" y="691.0" width="14.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1166.4" y="702.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (1 samples, 0.03%)</title><rect x="1163.8" y="675.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1166.8" y="686.0"></text>
</g>
<g>
<title>inet_recvmsg (35 samples, 1.13%)</title><rect x="1164.1" y="675.0" width="13.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1167.1" y="686.0"></text>
</g>
<g>
<title>lock_sock_nested (1 samples, 0.03%)</title><rect x="1164.5" y="659.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1167.5" y="670.0"></text>
</g>
<g>
<title>release_sock (2 samples, 0.06%)</title><rect x="1164.9" y="659.0" width="0.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1167.9" y="670.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (1 samples, 0.03%)</title><rect x="1165.7" y="659.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1168.7" y="670.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (2 samples, 0.06%)</title><rect x="1166.0" y="659.0" width="0.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1169.0" y="670.0"></text>
</g>
<g>
<title>tcp_recvmsg (28 samples, 0.90%)</title><rect x="1166.8" y="659.0" width="10.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1169.8" y="670.0"></text>
</g>
<g>
<title>__check_object_size (1 samples, 0.03%)</title><rect x="1167.6" y="643.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1170.6" y="654.0"></text>
</g>
<g>
<title>__kfree_skb (2 samples, 0.06%)</title><rect x="1167.9" y="643.0" width="0.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1170.9" y="654.0"></text>
</g>
<g>
<title>skb_release_all (2 samples, 0.06%)</title><rect x="1167.9" y="627.0" width="0.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1170.9" y="638.0"></text>
</g>
<g>
<title>skb_release_data (1 samples, 0.03%)</title><rect x="1167.9" y="611.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1170.9" y="622.0"></text>
</g>
<g>
<title>skb_release_head_state (1 samples, 0.03%)</title><rect x="1168.3" y="611.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1171.3" y="622.0"></text>
</g>
<g>
<title>__tcp_select_window (1 samples, 0.03%)</title><rect x="1168.7" y="643.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1171.7" y="654.0"></text>
</g>
<g>
<title>kfree_skbmem (2 samples, 0.06%)</title><rect x="1169.1" y="643.0" width="0.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1172.1" y="654.0"></text>
</g>
<g>
<title>lock_sock_nested (2 samples, 0.06%)</title><rect x="1169.8" y="643.0" width="0.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1172.8" y="654.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.03%)</title><rect x="1169.8" y="627.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1172.8" y="638.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (1 samples, 0.03%)</title><rect x="1170.2" y="627.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1173.2" y="638.0"></text>
</g>
<g>
<title>release_sock (1 samples, 0.03%)</title><rect x="1170.6" y="643.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1173.6" y="654.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (1 samples, 0.03%)</title><rect x="1170.6" y="627.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1173.6" y="638.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (8 samples, 0.26%)</title><rect x="1171.0" y="643.0" width="3.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1174.0" y="654.0"></text>
</g>
<g>
<title>__check_heap_object (1 samples, 0.03%)</title><rect x="1171.7" y="627.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1174.7" y="638.0"></text>
</g>
<g>
<title>__check_object_size (2 samples, 0.06%)</title><rect x="1172.1" y="627.0" width="0.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1175.1" y="638.0"></text>
</g>
<g>
<title>__virt_addr_valid (1 samples, 0.03%)</title><rect x="1172.5" y="611.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1175.5" y="622.0"></text>
</g>
<g>
<title>__virt_addr_valid (1 samples, 0.03%)</title><rect x="1172.9" y="627.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1175.9" y="638.0"></text>
</g>
<g>
<title>_copy_to_iter (1 samples, 0.03%)</title><rect x="1173.3" y="627.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1176.3" y="638.0"></text>
</g>
<g>
<title>copyout (1 samples, 0.03%)</title><rect x="1173.3" y="611.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1176.3" y="622.0"></text>
</g>
<g>
<title>__copy_user_ll (1 samples, 0.03%)</title><rect x="1173.3" y="595.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1176.3" y="606.0"></text>
</g>
<g>
<title>check_stack_object (1 samples, 0.03%)</title><rect x="1173.6" y="627.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1176.6" y="638.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (2 samples, 0.06%)</title><rect x="1174.0" y="643.0" width="0.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1177.0" y="654.0"></text>
</g>
<g>
<title>__tcp_select_window (1 samples, 0.03%)</title><rect x="1174.4" y="627.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1177.4" y="638.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (7 samples, 0.23%)</title><rect x="1174.8" y="643.0" width="2.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1177.8" y="654.0"></text>
</g>
<g>
<title>sched_clock_cpu (3 samples, 0.10%)</title><rect x="1176.3" y="627.0" width="1.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1179.3" y="638.0"></text>
</g>
<g>
<title>sched_clock (3 samples, 0.10%)</title><rect x="1176.3" y="611.0" width="1.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1179.3" y="622.0"></text>
</g>
<g>
<title>kvm_sched_clock_read (3 samples, 0.10%)</title><rect x="1176.3" y="595.0" width="1.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1179.3" y="606.0"></text>
</g>
<g>
<title>pvclock_clocksource_read (3 samples, 0.10%)</title><rect x="1176.3" y="579.0" width="1.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1179.3" y="590.0"></text>
</g>
<g>
<title>tcp_recvmsg (1 samples, 0.03%)</title><rect x="1177.5" y="675.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1180.5" y="686.0"></text>
</g>
<g>
<title>rw_verify_area (6 samples, 0.19%)</title><rect x="1177.8" y="739.0" width="2.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1180.8" y="750.0"></text>
</g>
<g>
<title>security_file_permission (5 samples, 0.16%)</title><rect x="1178.2" y="723.0" width="1.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1181.2" y="734.0"></text>
</g>
<g>
<title>apparmor_file_permission (3 samples, 0.10%)</title><rect x="1179.0" y="707.0" width="1.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1182.0" y="718.0"></text>
</g>
<g>
<title>common_file_perm (3 samples, 0.10%)</title><rect x="1179.0" y="691.0" width="1.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1182.0" y="702.0"></text>
</g>
<g>
<title>aa_file_perm (2 samples, 0.06%)</title><rect x="1179.4" y="675.0" width="0.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1182.4" y="686.0"></text>
</g>
<g>
<title>sys_read (2 samples, 0.06%)</title><rect x="1180.1" y="787.0" width="0.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1183.1" y="798.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="1180.9" y="819.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1183.9" y="830.0"></text>
</g>
<g>
<title>read (2 samples, 0.06%)</title><rect x="1181.3" y="819.0" width="0.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1184.3" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (11 samples, 0.35%)</title><rect x="1182.0" y="867.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1185.0" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (11 samples, 0.35%)</title><rect x="1182.0" y="851.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1185.0" y="862.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.rewind (11 samples, 0.35%)</title><rect x="1182.0" y="835.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1185.0" y="846.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.rewind (9 samples, 0.29%)</title><rect x="1182.8" y="819.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1185.8" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (1 samples, 0.03%)</title><rect x="1186.2" y="867.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1189.2" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.03%)</title><rect x="1186.2" y="851.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1189.2" y="862.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray_nozero(BasicType, int, Thread*) (1 samples, 0.03%)</title><rect x="1186.6" y="995.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.6" y="1006.0"></text>
</g>
<g>
<title>org/rocksdb/util/BytewiseComparator.compare (5 samples, 0.16%)</title><rect x="1187.0" y="995.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1190.0" y="1006.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (1 samples, 0.03%)</title><rect x="1187.0" y="979.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1190.0" y="990.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.03%)</title><rect x="1187.0" y="963.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.0" y="974.0"></text>
</g>
<g>
<title>org/rocksdb/util/BytewiseComparator.compare (4 samples, 0.13%)</title><rect x="1187.3" y="979.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1190.3" y="990.0"></text>
</g>
<g>
<title>org/rocksdb/AbstractSlice.data (4 samples, 0.13%)</title><rect x="1187.3" y="963.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1190.3" y="974.0"></text>
</g>
<g>
<title>org/rocksdb/Slice.data0 (4 samples, 0.13%)</title><rect x="1187.3" y="947.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1190.3" y="958.0"></text>
</g>
<g>
<title>Thread::current() (3 samples, 0.10%)</title><rect x="1187.3" y="931.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.3" y="942.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="1188.1" y="915.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1191.1" y="926.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="1188.1" y="899.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1191.1" y="910.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="1188.1" y="883.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1191.1" y="894.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="1188.5" y="931.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1191.5" y="942.0"></text>
</g>
<g>
<title>resume_userspace (1 samples, 0.03%)</title><rect x="1188.5" y="915.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1191.5" y="926.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="1188.5" y="899.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1191.5" y="910.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="1188.5" y="883.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1191.5" y="894.0"></text>
</g>
<g>
<title>ru/mail/polis/service/dogm/ServiceImpl$$Lambda$69/19021872.act (1 samples, 0.03%)</title><rect x="1188.9" y="995.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1191.9" y="1006.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (1 samples, 0.03%)</title><rect x="1188.9" y="979.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1191.9" y="990.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (1 samples, 0.03%)</title><rect x="1189.2" y="995.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1192.2" y="1006.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.03%)</title><rect x="1189.2" y="979.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1192.2" y="990.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.03%)</title><rect x="1189.6" y="995.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1192.6" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (1 samples, 0.03%)</title><rect x="1189.6" y="979.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1192.6" y="990.0"></text>
</g>
<g>
<title>__x86.get_pc_thunk.bx (1 samples, 0.03%)</title><rect x="1189.6" y="963.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1192.6" y="974.0"></text>
</g>
</g>
</svg>
